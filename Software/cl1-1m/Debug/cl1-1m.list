
cl1-1m.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009870  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  08009928  08009928  00019928  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a90  08009a90  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08009a90  08009a90  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009a90  08009a90  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a90  08009a90  00019a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a94  08009a94  00019a94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08009a98  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000308  20000078  08009b10  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000380  08009b10  00020380  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011f3a  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029c4  00000000  00000000  0003201d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012c8  00000000  00000000  000349e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ea4  00000000  00000000  00035cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000177e9  00000000  00000000  00036b54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000160d5  00000000  00000000  0004e33d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00097a48  00000000  00000000  00064412  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004b9c  00000000  00000000  000fbe5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  001009f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000078 	.word	0x20000078
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08009910 	.word	0x08009910

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	2000007c 	.word	0x2000007c
 80000fc:	08009910 	.word	0x08009910

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <__aeabi_cdrcmple>:
 80003ec:	4684      	mov	ip, r0
 80003ee:	0010      	movs	r0, r2
 80003f0:	4662      	mov	r2, ip
 80003f2:	468c      	mov	ip, r1
 80003f4:	0019      	movs	r1, r3
 80003f6:	4663      	mov	r3, ip
 80003f8:	e000      	b.n	80003fc <__aeabi_cdcmpeq>
 80003fa:	46c0      	nop			; (mov r8, r8)

080003fc <__aeabi_cdcmpeq>:
 80003fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80003fe:	f001 f831 	bl	8001464 <__ledf2>
 8000402:	2800      	cmp	r0, #0
 8000404:	d401      	bmi.n	800040a <__aeabi_cdcmpeq+0xe>
 8000406:	2100      	movs	r1, #0
 8000408:	42c8      	cmn	r0, r1
 800040a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800040c <__aeabi_dcmpeq>:
 800040c:	b510      	push	{r4, lr}
 800040e:	f000 ff81 	bl	8001314 <__eqdf2>
 8000412:	4240      	negs	r0, r0
 8000414:	3001      	adds	r0, #1
 8000416:	bd10      	pop	{r4, pc}

08000418 <__aeabi_dcmplt>:
 8000418:	b510      	push	{r4, lr}
 800041a:	f001 f823 	bl	8001464 <__ledf2>
 800041e:	2800      	cmp	r0, #0
 8000420:	db01      	blt.n	8000426 <__aeabi_dcmplt+0xe>
 8000422:	2000      	movs	r0, #0
 8000424:	bd10      	pop	{r4, pc}
 8000426:	2001      	movs	r0, #1
 8000428:	bd10      	pop	{r4, pc}
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_dcmple>:
 800042c:	b510      	push	{r4, lr}
 800042e:	f001 f819 	bl	8001464 <__ledf2>
 8000432:	2800      	cmp	r0, #0
 8000434:	dd01      	ble.n	800043a <__aeabi_dcmple+0xe>
 8000436:	2000      	movs	r0, #0
 8000438:	bd10      	pop	{r4, pc}
 800043a:	2001      	movs	r0, #1
 800043c:	bd10      	pop	{r4, pc}
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__aeabi_dcmpgt>:
 8000440:	b510      	push	{r4, lr}
 8000442:	f000 ffa9 	bl	8001398 <__gedf2>
 8000446:	2800      	cmp	r0, #0
 8000448:	dc01      	bgt.n	800044e <__aeabi_dcmpgt+0xe>
 800044a:	2000      	movs	r0, #0
 800044c:	bd10      	pop	{r4, pc}
 800044e:	2001      	movs	r0, #1
 8000450:	bd10      	pop	{r4, pc}
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__aeabi_dcmpge>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f000 ff9f 	bl	8001398 <__gedf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	da01      	bge.n	8000462 <__aeabi_dcmpge+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_cfrcmple>:
 8000468:	4684      	mov	ip, r0
 800046a:	0008      	movs	r0, r1
 800046c:	4661      	mov	r1, ip
 800046e:	e7ff      	b.n	8000470 <__aeabi_cfcmpeq>

08000470 <__aeabi_cfcmpeq>:
 8000470:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000472:	f000 f8bd 	bl	80005f0 <__lesf2>
 8000476:	2800      	cmp	r0, #0
 8000478:	d401      	bmi.n	800047e <__aeabi_cfcmpeq+0xe>
 800047a:	2100      	movs	r1, #0
 800047c:	42c8      	cmn	r0, r1
 800047e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000480 <__aeabi_fcmpeq>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 f849 	bl	8000518 <__eqsf2>
 8000486:	4240      	negs	r0, r0
 8000488:	3001      	adds	r0, #1
 800048a:	bd10      	pop	{r4, pc}

0800048c <__aeabi_fcmplt>:
 800048c:	b510      	push	{r4, lr}
 800048e:	f000 f8af 	bl	80005f0 <__lesf2>
 8000492:	2800      	cmp	r0, #0
 8000494:	db01      	blt.n	800049a <__aeabi_fcmplt+0xe>
 8000496:	2000      	movs	r0, #0
 8000498:	bd10      	pop	{r4, pc}
 800049a:	2001      	movs	r0, #1
 800049c:	bd10      	pop	{r4, pc}
 800049e:	46c0      	nop			; (mov r8, r8)

080004a0 <__aeabi_fcmple>:
 80004a0:	b510      	push	{r4, lr}
 80004a2:	f000 f8a5 	bl	80005f0 <__lesf2>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	dd01      	ble.n	80004ae <__aeabi_fcmple+0xe>
 80004aa:	2000      	movs	r0, #0
 80004ac:	bd10      	pop	{r4, pc}
 80004ae:	2001      	movs	r0, #1
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	46c0      	nop			; (mov r8, r8)

080004b4 <__aeabi_fcmpgt>:
 80004b4:	b510      	push	{r4, lr}
 80004b6:	f000 f855 	bl	8000564 <__gesf2>
 80004ba:	2800      	cmp	r0, #0
 80004bc:	dc01      	bgt.n	80004c2 <__aeabi_fcmpgt+0xe>
 80004be:	2000      	movs	r0, #0
 80004c0:	bd10      	pop	{r4, pc}
 80004c2:	2001      	movs	r0, #1
 80004c4:	bd10      	pop	{r4, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)

080004c8 <__aeabi_fcmpge>:
 80004c8:	b510      	push	{r4, lr}
 80004ca:	f000 f84b 	bl	8000564 <__gesf2>
 80004ce:	2800      	cmp	r0, #0
 80004d0:	da01      	bge.n	80004d6 <__aeabi_fcmpge+0xe>
 80004d2:	2000      	movs	r0, #0
 80004d4:	bd10      	pop	{r4, pc}
 80004d6:	2001      	movs	r0, #1
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	46c0      	nop			; (mov r8, r8)

080004dc <__aeabi_d2uiz>:
 80004dc:	b570      	push	{r4, r5, r6, lr}
 80004de:	2200      	movs	r2, #0
 80004e0:	4b0c      	ldr	r3, [pc, #48]	; (8000514 <__aeabi_d2uiz+0x38>)
 80004e2:	0004      	movs	r4, r0
 80004e4:	000d      	movs	r5, r1
 80004e6:	f7ff ffb5 	bl	8000454 <__aeabi_dcmpge>
 80004ea:	2800      	cmp	r0, #0
 80004ec:	d104      	bne.n	80004f8 <__aeabi_d2uiz+0x1c>
 80004ee:	0020      	movs	r0, r4
 80004f0:	0029      	movs	r1, r5
 80004f2:	f001 fe7d 	bl	80021f0 <__aeabi_d2iz>
 80004f6:	bd70      	pop	{r4, r5, r6, pc}
 80004f8:	4b06      	ldr	r3, [pc, #24]	; (8000514 <__aeabi_d2uiz+0x38>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	0020      	movs	r0, r4
 80004fe:	0029      	movs	r1, r5
 8000500:	f001 fad6 	bl	8001ab0 <__aeabi_dsub>
 8000504:	f001 fe74 	bl	80021f0 <__aeabi_d2iz>
 8000508:	2380      	movs	r3, #128	; 0x80
 800050a:	061b      	lsls	r3, r3, #24
 800050c:	469c      	mov	ip, r3
 800050e:	4460      	add	r0, ip
 8000510:	e7f1      	b.n	80004f6 <__aeabi_d2uiz+0x1a>
 8000512:	46c0      	nop			; (mov r8, r8)
 8000514:	41e00000 	.word	0x41e00000

08000518 <__eqsf2>:
 8000518:	b570      	push	{r4, r5, r6, lr}
 800051a:	0042      	lsls	r2, r0, #1
 800051c:	0245      	lsls	r5, r0, #9
 800051e:	024e      	lsls	r6, r1, #9
 8000520:	004c      	lsls	r4, r1, #1
 8000522:	0fc3      	lsrs	r3, r0, #31
 8000524:	0a6d      	lsrs	r5, r5, #9
 8000526:	2001      	movs	r0, #1
 8000528:	0e12      	lsrs	r2, r2, #24
 800052a:	0a76      	lsrs	r6, r6, #9
 800052c:	0e24      	lsrs	r4, r4, #24
 800052e:	0fc9      	lsrs	r1, r1, #31
 8000530:	2aff      	cmp	r2, #255	; 0xff
 8000532:	d006      	beq.n	8000542 <__eqsf2+0x2a>
 8000534:	2cff      	cmp	r4, #255	; 0xff
 8000536:	d003      	beq.n	8000540 <__eqsf2+0x28>
 8000538:	42a2      	cmp	r2, r4
 800053a:	d101      	bne.n	8000540 <__eqsf2+0x28>
 800053c:	42b5      	cmp	r5, r6
 800053e:	d006      	beq.n	800054e <__eqsf2+0x36>
 8000540:	bd70      	pop	{r4, r5, r6, pc}
 8000542:	2d00      	cmp	r5, #0
 8000544:	d1fc      	bne.n	8000540 <__eqsf2+0x28>
 8000546:	2cff      	cmp	r4, #255	; 0xff
 8000548:	d1fa      	bne.n	8000540 <__eqsf2+0x28>
 800054a:	2e00      	cmp	r6, #0
 800054c:	d1f8      	bne.n	8000540 <__eqsf2+0x28>
 800054e:	428b      	cmp	r3, r1
 8000550:	d006      	beq.n	8000560 <__eqsf2+0x48>
 8000552:	2001      	movs	r0, #1
 8000554:	2a00      	cmp	r2, #0
 8000556:	d1f3      	bne.n	8000540 <__eqsf2+0x28>
 8000558:	0028      	movs	r0, r5
 800055a:	1e43      	subs	r3, r0, #1
 800055c:	4198      	sbcs	r0, r3
 800055e:	e7ef      	b.n	8000540 <__eqsf2+0x28>
 8000560:	2000      	movs	r0, #0
 8000562:	e7ed      	b.n	8000540 <__eqsf2+0x28>

08000564 <__gesf2>:
 8000564:	b570      	push	{r4, r5, r6, lr}
 8000566:	0042      	lsls	r2, r0, #1
 8000568:	0245      	lsls	r5, r0, #9
 800056a:	024e      	lsls	r6, r1, #9
 800056c:	004c      	lsls	r4, r1, #1
 800056e:	0fc3      	lsrs	r3, r0, #31
 8000570:	0a6d      	lsrs	r5, r5, #9
 8000572:	0e12      	lsrs	r2, r2, #24
 8000574:	0a76      	lsrs	r6, r6, #9
 8000576:	0e24      	lsrs	r4, r4, #24
 8000578:	0fc8      	lsrs	r0, r1, #31
 800057a:	2aff      	cmp	r2, #255	; 0xff
 800057c:	d01b      	beq.n	80005b6 <__gesf2+0x52>
 800057e:	2cff      	cmp	r4, #255	; 0xff
 8000580:	d00e      	beq.n	80005a0 <__gesf2+0x3c>
 8000582:	2a00      	cmp	r2, #0
 8000584:	d11b      	bne.n	80005be <__gesf2+0x5a>
 8000586:	2c00      	cmp	r4, #0
 8000588:	d101      	bne.n	800058e <__gesf2+0x2a>
 800058a:	2e00      	cmp	r6, #0
 800058c:	d01c      	beq.n	80005c8 <__gesf2+0x64>
 800058e:	2d00      	cmp	r5, #0
 8000590:	d00c      	beq.n	80005ac <__gesf2+0x48>
 8000592:	4283      	cmp	r3, r0
 8000594:	d01c      	beq.n	80005d0 <__gesf2+0x6c>
 8000596:	2102      	movs	r1, #2
 8000598:	1e58      	subs	r0, r3, #1
 800059a:	4008      	ands	r0, r1
 800059c:	3801      	subs	r0, #1
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	2e00      	cmp	r6, #0
 80005a2:	d122      	bne.n	80005ea <__gesf2+0x86>
 80005a4:	2a00      	cmp	r2, #0
 80005a6:	d1f4      	bne.n	8000592 <__gesf2+0x2e>
 80005a8:	2d00      	cmp	r5, #0
 80005aa:	d1f2      	bne.n	8000592 <__gesf2+0x2e>
 80005ac:	2800      	cmp	r0, #0
 80005ae:	d1f6      	bne.n	800059e <__gesf2+0x3a>
 80005b0:	2001      	movs	r0, #1
 80005b2:	4240      	negs	r0, r0
 80005b4:	e7f3      	b.n	800059e <__gesf2+0x3a>
 80005b6:	2d00      	cmp	r5, #0
 80005b8:	d117      	bne.n	80005ea <__gesf2+0x86>
 80005ba:	2cff      	cmp	r4, #255	; 0xff
 80005bc:	d0f0      	beq.n	80005a0 <__gesf2+0x3c>
 80005be:	2c00      	cmp	r4, #0
 80005c0:	d1e7      	bne.n	8000592 <__gesf2+0x2e>
 80005c2:	2e00      	cmp	r6, #0
 80005c4:	d1e5      	bne.n	8000592 <__gesf2+0x2e>
 80005c6:	e7e6      	b.n	8000596 <__gesf2+0x32>
 80005c8:	2000      	movs	r0, #0
 80005ca:	2d00      	cmp	r5, #0
 80005cc:	d0e7      	beq.n	800059e <__gesf2+0x3a>
 80005ce:	e7e2      	b.n	8000596 <__gesf2+0x32>
 80005d0:	42a2      	cmp	r2, r4
 80005d2:	dc05      	bgt.n	80005e0 <__gesf2+0x7c>
 80005d4:	dbea      	blt.n	80005ac <__gesf2+0x48>
 80005d6:	42b5      	cmp	r5, r6
 80005d8:	d802      	bhi.n	80005e0 <__gesf2+0x7c>
 80005da:	d3e7      	bcc.n	80005ac <__gesf2+0x48>
 80005dc:	2000      	movs	r0, #0
 80005de:	e7de      	b.n	800059e <__gesf2+0x3a>
 80005e0:	4243      	negs	r3, r0
 80005e2:	4158      	adcs	r0, r3
 80005e4:	0040      	lsls	r0, r0, #1
 80005e6:	3801      	subs	r0, #1
 80005e8:	e7d9      	b.n	800059e <__gesf2+0x3a>
 80005ea:	2002      	movs	r0, #2
 80005ec:	4240      	negs	r0, r0
 80005ee:	e7d6      	b.n	800059e <__gesf2+0x3a>

080005f0 <__lesf2>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	0042      	lsls	r2, r0, #1
 80005f4:	0245      	lsls	r5, r0, #9
 80005f6:	024e      	lsls	r6, r1, #9
 80005f8:	004c      	lsls	r4, r1, #1
 80005fa:	0fc3      	lsrs	r3, r0, #31
 80005fc:	0a6d      	lsrs	r5, r5, #9
 80005fe:	0e12      	lsrs	r2, r2, #24
 8000600:	0a76      	lsrs	r6, r6, #9
 8000602:	0e24      	lsrs	r4, r4, #24
 8000604:	0fc8      	lsrs	r0, r1, #31
 8000606:	2aff      	cmp	r2, #255	; 0xff
 8000608:	d00b      	beq.n	8000622 <__lesf2+0x32>
 800060a:	2cff      	cmp	r4, #255	; 0xff
 800060c:	d00d      	beq.n	800062a <__lesf2+0x3a>
 800060e:	2a00      	cmp	r2, #0
 8000610:	d11f      	bne.n	8000652 <__lesf2+0x62>
 8000612:	2c00      	cmp	r4, #0
 8000614:	d116      	bne.n	8000644 <__lesf2+0x54>
 8000616:	2e00      	cmp	r6, #0
 8000618:	d114      	bne.n	8000644 <__lesf2+0x54>
 800061a:	2000      	movs	r0, #0
 800061c:	2d00      	cmp	r5, #0
 800061e:	d010      	beq.n	8000642 <__lesf2+0x52>
 8000620:	e009      	b.n	8000636 <__lesf2+0x46>
 8000622:	2d00      	cmp	r5, #0
 8000624:	d10c      	bne.n	8000640 <__lesf2+0x50>
 8000626:	2cff      	cmp	r4, #255	; 0xff
 8000628:	d113      	bne.n	8000652 <__lesf2+0x62>
 800062a:	2e00      	cmp	r6, #0
 800062c:	d108      	bne.n	8000640 <__lesf2+0x50>
 800062e:	2a00      	cmp	r2, #0
 8000630:	d008      	beq.n	8000644 <__lesf2+0x54>
 8000632:	4283      	cmp	r3, r0
 8000634:	d012      	beq.n	800065c <__lesf2+0x6c>
 8000636:	2102      	movs	r1, #2
 8000638:	1e58      	subs	r0, r3, #1
 800063a:	4008      	ands	r0, r1
 800063c:	3801      	subs	r0, #1
 800063e:	e000      	b.n	8000642 <__lesf2+0x52>
 8000640:	2002      	movs	r0, #2
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	2d00      	cmp	r5, #0
 8000646:	d1f4      	bne.n	8000632 <__lesf2+0x42>
 8000648:	2800      	cmp	r0, #0
 800064a:	d1fa      	bne.n	8000642 <__lesf2+0x52>
 800064c:	2001      	movs	r0, #1
 800064e:	4240      	negs	r0, r0
 8000650:	e7f7      	b.n	8000642 <__lesf2+0x52>
 8000652:	2c00      	cmp	r4, #0
 8000654:	d1ed      	bne.n	8000632 <__lesf2+0x42>
 8000656:	2e00      	cmp	r6, #0
 8000658:	d1eb      	bne.n	8000632 <__lesf2+0x42>
 800065a:	e7ec      	b.n	8000636 <__lesf2+0x46>
 800065c:	42a2      	cmp	r2, r4
 800065e:	dc05      	bgt.n	800066c <__lesf2+0x7c>
 8000660:	dbf2      	blt.n	8000648 <__lesf2+0x58>
 8000662:	42b5      	cmp	r5, r6
 8000664:	d802      	bhi.n	800066c <__lesf2+0x7c>
 8000666:	d3ef      	bcc.n	8000648 <__lesf2+0x58>
 8000668:	2000      	movs	r0, #0
 800066a:	e7ea      	b.n	8000642 <__lesf2+0x52>
 800066c:	4243      	negs	r3, r0
 800066e:	4158      	adcs	r0, r3
 8000670:	0040      	lsls	r0, r0, #1
 8000672:	3801      	subs	r0, #1
 8000674:	e7e5      	b.n	8000642 <__lesf2+0x52>
 8000676:	46c0      	nop			; (mov r8, r8)

08000678 <__aeabi_dadd>:
 8000678:	b5f0      	push	{r4, r5, r6, r7, lr}
 800067a:	464f      	mov	r7, r9
 800067c:	4646      	mov	r6, r8
 800067e:	46d6      	mov	lr, sl
 8000680:	0004      	movs	r4, r0
 8000682:	b5c0      	push	{r6, r7, lr}
 8000684:	001f      	movs	r7, r3
 8000686:	030b      	lsls	r3, r1, #12
 8000688:	0010      	movs	r0, r2
 800068a:	004e      	lsls	r6, r1, #1
 800068c:	0a5b      	lsrs	r3, r3, #9
 800068e:	0fcd      	lsrs	r5, r1, #31
 8000690:	0f61      	lsrs	r1, r4, #29
 8000692:	007a      	lsls	r2, r7, #1
 8000694:	4319      	orrs	r1, r3
 8000696:	00e3      	lsls	r3, r4, #3
 8000698:	033c      	lsls	r4, r7, #12
 800069a:	0fff      	lsrs	r7, r7, #31
 800069c:	46bc      	mov	ip, r7
 800069e:	0a64      	lsrs	r4, r4, #9
 80006a0:	0f47      	lsrs	r7, r0, #29
 80006a2:	4327      	orrs	r7, r4
 80006a4:	0d76      	lsrs	r6, r6, #21
 80006a6:	0d52      	lsrs	r2, r2, #21
 80006a8:	00c0      	lsls	r0, r0, #3
 80006aa:	46b9      	mov	r9, r7
 80006ac:	4680      	mov	r8, r0
 80006ae:	1ab7      	subs	r7, r6, r2
 80006b0:	4565      	cmp	r5, ip
 80006b2:	d100      	bne.n	80006b6 <__aeabi_dadd+0x3e>
 80006b4:	e09b      	b.n	80007ee <__aeabi_dadd+0x176>
 80006b6:	2f00      	cmp	r7, #0
 80006b8:	dc00      	bgt.n	80006bc <__aeabi_dadd+0x44>
 80006ba:	e084      	b.n	80007c6 <__aeabi_dadd+0x14e>
 80006bc:	2a00      	cmp	r2, #0
 80006be:	d100      	bne.n	80006c2 <__aeabi_dadd+0x4a>
 80006c0:	e0be      	b.n	8000840 <__aeabi_dadd+0x1c8>
 80006c2:	4ac8      	ldr	r2, [pc, #800]	; (80009e4 <__aeabi_dadd+0x36c>)
 80006c4:	4296      	cmp	r6, r2
 80006c6:	d100      	bne.n	80006ca <__aeabi_dadd+0x52>
 80006c8:	e124      	b.n	8000914 <__aeabi_dadd+0x29c>
 80006ca:	2280      	movs	r2, #128	; 0x80
 80006cc:	464c      	mov	r4, r9
 80006ce:	0412      	lsls	r2, r2, #16
 80006d0:	4314      	orrs	r4, r2
 80006d2:	46a1      	mov	r9, r4
 80006d4:	2f38      	cmp	r7, #56	; 0x38
 80006d6:	dd00      	ble.n	80006da <__aeabi_dadd+0x62>
 80006d8:	e167      	b.n	80009aa <__aeabi_dadd+0x332>
 80006da:	2f1f      	cmp	r7, #31
 80006dc:	dd00      	ble.n	80006e0 <__aeabi_dadd+0x68>
 80006de:	e1d6      	b.n	8000a8e <__aeabi_dadd+0x416>
 80006e0:	2220      	movs	r2, #32
 80006e2:	464c      	mov	r4, r9
 80006e4:	1bd2      	subs	r2, r2, r7
 80006e6:	4094      	lsls	r4, r2
 80006e8:	46a2      	mov	sl, r4
 80006ea:	4644      	mov	r4, r8
 80006ec:	40fc      	lsrs	r4, r7
 80006ee:	0020      	movs	r0, r4
 80006f0:	4654      	mov	r4, sl
 80006f2:	4304      	orrs	r4, r0
 80006f4:	4640      	mov	r0, r8
 80006f6:	4090      	lsls	r0, r2
 80006f8:	1e42      	subs	r2, r0, #1
 80006fa:	4190      	sbcs	r0, r2
 80006fc:	464a      	mov	r2, r9
 80006fe:	40fa      	lsrs	r2, r7
 8000700:	4304      	orrs	r4, r0
 8000702:	1a89      	subs	r1, r1, r2
 8000704:	1b1c      	subs	r4, r3, r4
 8000706:	42a3      	cmp	r3, r4
 8000708:	4192      	sbcs	r2, r2
 800070a:	4252      	negs	r2, r2
 800070c:	1a8b      	subs	r3, r1, r2
 800070e:	469a      	mov	sl, r3
 8000710:	4653      	mov	r3, sl
 8000712:	021b      	lsls	r3, r3, #8
 8000714:	d400      	bmi.n	8000718 <__aeabi_dadd+0xa0>
 8000716:	e0d4      	b.n	80008c2 <__aeabi_dadd+0x24a>
 8000718:	4653      	mov	r3, sl
 800071a:	025a      	lsls	r2, r3, #9
 800071c:	0a53      	lsrs	r3, r2, #9
 800071e:	469a      	mov	sl, r3
 8000720:	4653      	mov	r3, sl
 8000722:	2b00      	cmp	r3, #0
 8000724:	d100      	bne.n	8000728 <__aeabi_dadd+0xb0>
 8000726:	e104      	b.n	8000932 <__aeabi_dadd+0x2ba>
 8000728:	4650      	mov	r0, sl
 800072a:	f001 fe73 	bl	8002414 <__clzsi2>
 800072e:	0003      	movs	r3, r0
 8000730:	3b08      	subs	r3, #8
 8000732:	2220      	movs	r2, #32
 8000734:	0020      	movs	r0, r4
 8000736:	1ad2      	subs	r2, r2, r3
 8000738:	4651      	mov	r1, sl
 800073a:	40d0      	lsrs	r0, r2
 800073c:	4099      	lsls	r1, r3
 800073e:	0002      	movs	r2, r0
 8000740:	409c      	lsls	r4, r3
 8000742:	430a      	orrs	r2, r1
 8000744:	42b3      	cmp	r3, r6
 8000746:	da00      	bge.n	800074a <__aeabi_dadd+0xd2>
 8000748:	e102      	b.n	8000950 <__aeabi_dadd+0x2d8>
 800074a:	1b9b      	subs	r3, r3, r6
 800074c:	1c59      	adds	r1, r3, #1
 800074e:	291f      	cmp	r1, #31
 8000750:	dd00      	ble.n	8000754 <__aeabi_dadd+0xdc>
 8000752:	e0a7      	b.n	80008a4 <__aeabi_dadd+0x22c>
 8000754:	2320      	movs	r3, #32
 8000756:	0010      	movs	r0, r2
 8000758:	0026      	movs	r6, r4
 800075a:	1a5b      	subs	r3, r3, r1
 800075c:	409c      	lsls	r4, r3
 800075e:	4098      	lsls	r0, r3
 8000760:	40ce      	lsrs	r6, r1
 8000762:	40ca      	lsrs	r2, r1
 8000764:	1e63      	subs	r3, r4, #1
 8000766:	419c      	sbcs	r4, r3
 8000768:	4330      	orrs	r0, r6
 800076a:	4692      	mov	sl, r2
 800076c:	2600      	movs	r6, #0
 800076e:	4304      	orrs	r4, r0
 8000770:	0763      	lsls	r3, r4, #29
 8000772:	d009      	beq.n	8000788 <__aeabi_dadd+0x110>
 8000774:	230f      	movs	r3, #15
 8000776:	4023      	ands	r3, r4
 8000778:	2b04      	cmp	r3, #4
 800077a:	d005      	beq.n	8000788 <__aeabi_dadd+0x110>
 800077c:	1d23      	adds	r3, r4, #4
 800077e:	42a3      	cmp	r3, r4
 8000780:	41a4      	sbcs	r4, r4
 8000782:	4264      	negs	r4, r4
 8000784:	44a2      	add	sl, r4
 8000786:	001c      	movs	r4, r3
 8000788:	4653      	mov	r3, sl
 800078a:	021b      	lsls	r3, r3, #8
 800078c:	d400      	bmi.n	8000790 <__aeabi_dadd+0x118>
 800078e:	e09b      	b.n	80008c8 <__aeabi_dadd+0x250>
 8000790:	4b94      	ldr	r3, [pc, #592]	; (80009e4 <__aeabi_dadd+0x36c>)
 8000792:	3601      	adds	r6, #1
 8000794:	429e      	cmp	r6, r3
 8000796:	d100      	bne.n	800079a <__aeabi_dadd+0x122>
 8000798:	e0b8      	b.n	800090c <__aeabi_dadd+0x294>
 800079a:	4653      	mov	r3, sl
 800079c:	4992      	ldr	r1, [pc, #584]	; (80009e8 <__aeabi_dadd+0x370>)
 800079e:	08e4      	lsrs	r4, r4, #3
 80007a0:	400b      	ands	r3, r1
 80007a2:	0019      	movs	r1, r3
 80007a4:	075b      	lsls	r3, r3, #29
 80007a6:	4323      	orrs	r3, r4
 80007a8:	0572      	lsls	r2, r6, #21
 80007aa:	024c      	lsls	r4, r1, #9
 80007ac:	0b24      	lsrs	r4, r4, #12
 80007ae:	0d52      	lsrs	r2, r2, #21
 80007b0:	0512      	lsls	r2, r2, #20
 80007b2:	07ed      	lsls	r5, r5, #31
 80007b4:	4322      	orrs	r2, r4
 80007b6:	432a      	orrs	r2, r5
 80007b8:	0018      	movs	r0, r3
 80007ba:	0011      	movs	r1, r2
 80007bc:	bce0      	pop	{r5, r6, r7}
 80007be:	46ba      	mov	sl, r7
 80007c0:	46b1      	mov	r9, r6
 80007c2:	46a8      	mov	r8, r5
 80007c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c6:	2f00      	cmp	r7, #0
 80007c8:	d048      	beq.n	800085c <__aeabi_dadd+0x1e4>
 80007ca:	1b97      	subs	r7, r2, r6
 80007cc:	2e00      	cmp	r6, #0
 80007ce:	d000      	beq.n	80007d2 <__aeabi_dadd+0x15a>
 80007d0:	e10e      	b.n	80009f0 <__aeabi_dadd+0x378>
 80007d2:	000c      	movs	r4, r1
 80007d4:	431c      	orrs	r4, r3
 80007d6:	d100      	bne.n	80007da <__aeabi_dadd+0x162>
 80007d8:	e1b7      	b.n	8000b4a <__aeabi_dadd+0x4d2>
 80007da:	1e7c      	subs	r4, r7, #1
 80007dc:	2f01      	cmp	r7, #1
 80007de:	d100      	bne.n	80007e2 <__aeabi_dadd+0x16a>
 80007e0:	e226      	b.n	8000c30 <__aeabi_dadd+0x5b8>
 80007e2:	4d80      	ldr	r5, [pc, #512]	; (80009e4 <__aeabi_dadd+0x36c>)
 80007e4:	42af      	cmp	r7, r5
 80007e6:	d100      	bne.n	80007ea <__aeabi_dadd+0x172>
 80007e8:	e1d5      	b.n	8000b96 <__aeabi_dadd+0x51e>
 80007ea:	0027      	movs	r7, r4
 80007ec:	e107      	b.n	80009fe <__aeabi_dadd+0x386>
 80007ee:	2f00      	cmp	r7, #0
 80007f0:	dc00      	bgt.n	80007f4 <__aeabi_dadd+0x17c>
 80007f2:	e0b2      	b.n	800095a <__aeabi_dadd+0x2e2>
 80007f4:	2a00      	cmp	r2, #0
 80007f6:	d047      	beq.n	8000888 <__aeabi_dadd+0x210>
 80007f8:	4a7a      	ldr	r2, [pc, #488]	; (80009e4 <__aeabi_dadd+0x36c>)
 80007fa:	4296      	cmp	r6, r2
 80007fc:	d100      	bne.n	8000800 <__aeabi_dadd+0x188>
 80007fe:	e089      	b.n	8000914 <__aeabi_dadd+0x29c>
 8000800:	2280      	movs	r2, #128	; 0x80
 8000802:	464c      	mov	r4, r9
 8000804:	0412      	lsls	r2, r2, #16
 8000806:	4314      	orrs	r4, r2
 8000808:	46a1      	mov	r9, r4
 800080a:	2f38      	cmp	r7, #56	; 0x38
 800080c:	dc6b      	bgt.n	80008e6 <__aeabi_dadd+0x26e>
 800080e:	2f1f      	cmp	r7, #31
 8000810:	dc00      	bgt.n	8000814 <__aeabi_dadd+0x19c>
 8000812:	e16e      	b.n	8000af2 <__aeabi_dadd+0x47a>
 8000814:	003a      	movs	r2, r7
 8000816:	4648      	mov	r0, r9
 8000818:	3a20      	subs	r2, #32
 800081a:	40d0      	lsrs	r0, r2
 800081c:	4684      	mov	ip, r0
 800081e:	2f20      	cmp	r7, #32
 8000820:	d007      	beq.n	8000832 <__aeabi_dadd+0x1ba>
 8000822:	2240      	movs	r2, #64	; 0x40
 8000824:	4648      	mov	r0, r9
 8000826:	1bd2      	subs	r2, r2, r7
 8000828:	4090      	lsls	r0, r2
 800082a:	0002      	movs	r2, r0
 800082c:	4640      	mov	r0, r8
 800082e:	4310      	orrs	r0, r2
 8000830:	4680      	mov	r8, r0
 8000832:	4640      	mov	r0, r8
 8000834:	1e42      	subs	r2, r0, #1
 8000836:	4190      	sbcs	r0, r2
 8000838:	4662      	mov	r2, ip
 800083a:	0004      	movs	r4, r0
 800083c:	4314      	orrs	r4, r2
 800083e:	e057      	b.n	80008f0 <__aeabi_dadd+0x278>
 8000840:	464a      	mov	r2, r9
 8000842:	4302      	orrs	r2, r0
 8000844:	d100      	bne.n	8000848 <__aeabi_dadd+0x1d0>
 8000846:	e103      	b.n	8000a50 <__aeabi_dadd+0x3d8>
 8000848:	1e7a      	subs	r2, r7, #1
 800084a:	2f01      	cmp	r7, #1
 800084c:	d100      	bne.n	8000850 <__aeabi_dadd+0x1d8>
 800084e:	e193      	b.n	8000b78 <__aeabi_dadd+0x500>
 8000850:	4c64      	ldr	r4, [pc, #400]	; (80009e4 <__aeabi_dadd+0x36c>)
 8000852:	42a7      	cmp	r7, r4
 8000854:	d100      	bne.n	8000858 <__aeabi_dadd+0x1e0>
 8000856:	e18a      	b.n	8000b6e <__aeabi_dadd+0x4f6>
 8000858:	0017      	movs	r7, r2
 800085a:	e73b      	b.n	80006d4 <__aeabi_dadd+0x5c>
 800085c:	4c63      	ldr	r4, [pc, #396]	; (80009ec <__aeabi_dadd+0x374>)
 800085e:	1c72      	adds	r2, r6, #1
 8000860:	4222      	tst	r2, r4
 8000862:	d000      	beq.n	8000866 <__aeabi_dadd+0x1ee>
 8000864:	e0e0      	b.n	8000a28 <__aeabi_dadd+0x3b0>
 8000866:	000a      	movs	r2, r1
 8000868:	431a      	orrs	r2, r3
 800086a:	2e00      	cmp	r6, #0
 800086c:	d000      	beq.n	8000870 <__aeabi_dadd+0x1f8>
 800086e:	e174      	b.n	8000b5a <__aeabi_dadd+0x4e2>
 8000870:	2a00      	cmp	r2, #0
 8000872:	d100      	bne.n	8000876 <__aeabi_dadd+0x1fe>
 8000874:	e1d0      	b.n	8000c18 <__aeabi_dadd+0x5a0>
 8000876:	464a      	mov	r2, r9
 8000878:	4302      	orrs	r2, r0
 800087a:	d000      	beq.n	800087e <__aeabi_dadd+0x206>
 800087c:	e1e3      	b.n	8000c46 <__aeabi_dadd+0x5ce>
 800087e:	074a      	lsls	r2, r1, #29
 8000880:	08db      	lsrs	r3, r3, #3
 8000882:	4313      	orrs	r3, r2
 8000884:	08c9      	lsrs	r1, r1, #3
 8000886:	e029      	b.n	80008dc <__aeabi_dadd+0x264>
 8000888:	464a      	mov	r2, r9
 800088a:	4302      	orrs	r2, r0
 800088c:	d100      	bne.n	8000890 <__aeabi_dadd+0x218>
 800088e:	e17d      	b.n	8000b8c <__aeabi_dadd+0x514>
 8000890:	1e7a      	subs	r2, r7, #1
 8000892:	2f01      	cmp	r7, #1
 8000894:	d100      	bne.n	8000898 <__aeabi_dadd+0x220>
 8000896:	e0e0      	b.n	8000a5a <__aeabi_dadd+0x3e2>
 8000898:	4c52      	ldr	r4, [pc, #328]	; (80009e4 <__aeabi_dadd+0x36c>)
 800089a:	42a7      	cmp	r7, r4
 800089c:	d100      	bne.n	80008a0 <__aeabi_dadd+0x228>
 800089e:	e166      	b.n	8000b6e <__aeabi_dadd+0x4f6>
 80008a0:	0017      	movs	r7, r2
 80008a2:	e7b2      	b.n	800080a <__aeabi_dadd+0x192>
 80008a4:	0010      	movs	r0, r2
 80008a6:	3b1f      	subs	r3, #31
 80008a8:	40d8      	lsrs	r0, r3
 80008aa:	2920      	cmp	r1, #32
 80008ac:	d003      	beq.n	80008b6 <__aeabi_dadd+0x23e>
 80008ae:	2340      	movs	r3, #64	; 0x40
 80008b0:	1a5b      	subs	r3, r3, r1
 80008b2:	409a      	lsls	r2, r3
 80008b4:	4314      	orrs	r4, r2
 80008b6:	1e63      	subs	r3, r4, #1
 80008b8:	419c      	sbcs	r4, r3
 80008ba:	2300      	movs	r3, #0
 80008bc:	2600      	movs	r6, #0
 80008be:	469a      	mov	sl, r3
 80008c0:	4304      	orrs	r4, r0
 80008c2:	0763      	lsls	r3, r4, #29
 80008c4:	d000      	beq.n	80008c8 <__aeabi_dadd+0x250>
 80008c6:	e755      	b.n	8000774 <__aeabi_dadd+0xfc>
 80008c8:	4652      	mov	r2, sl
 80008ca:	08e3      	lsrs	r3, r4, #3
 80008cc:	0752      	lsls	r2, r2, #29
 80008ce:	4313      	orrs	r3, r2
 80008d0:	4652      	mov	r2, sl
 80008d2:	0037      	movs	r7, r6
 80008d4:	08d1      	lsrs	r1, r2, #3
 80008d6:	4a43      	ldr	r2, [pc, #268]	; (80009e4 <__aeabi_dadd+0x36c>)
 80008d8:	4297      	cmp	r7, r2
 80008da:	d01f      	beq.n	800091c <__aeabi_dadd+0x2a4>
 80008dc:	0309      	lsls	r1, r1, #12
 80008de:	057a      	lsls	r2, r7, #21
 80008e0:	0b0c      	lsrs	r4, r1, #12
 80008e2:	0d52      	lsrs	r2, r2, #21
 80008e4:	e764      	b.n	80007b0 <__aeabi_dadd+0x138>
 80008e6:	4642      	mov	r2, r8
 80008e8:	464c      	mov	r4, r9
 80008ea:	4314      	orrs	r4, r2
 80008ec:	1e62      	subs	r2, r4, #1
 80008ee:	4194      	sbcs	r4, r2
 80008f0:	18e4      	adds	r4, r4, r3
 80008f2:	429c      	cmp	r4, r3
 80008f4:	4192      	sbcs	r2, r2
 80008f6:	4252      	negs	r2, r2
 80008f8:	4692      	mov	sl, r2
 80008fa:	448a      	add	sl, r1
 80008fc:	4653      	mov	r3, sl
 80008fe:	021b      	lsls	r3, r3, #8
 8000900:	d5df      	bpl.n	80008c2 <__aeabi_dadd+0x24a>
 8000902:	4b38      	ldr	r3, [pc, #224]	; (80009e4 <__aeabi_dadd+0x36c>)
 8000904:	3601      	adds	r6, #1
 8000906:	429e      	cmp	r6, r3
 8000908:	d000      	beq.n	800090c <__aeabi_dadd+0x294>
 800090a:	e0b3      	b.n	8000a74 <__aeabi_dadd+0x3fc>
 800090c:	0032      	movs	r2, r6
 800090e:	2400      	movs	r4, #0
 8000910:	2300      	movs	r3, #0
 8000912:	e74d      	b.n	80007b0 <__aeabi_dadd+0x138>
 8000914:	074a      	lsls	r2, r1, #29
 8000916:	08db      	lsrs	r3, r3, #3
 8000918:	4313      	orrs	r3, r2
 800091a:	08c9      	lsrs	r1, r1, #3
 800091c:	001a      	movs	r2, r3
 800091e:	430a      	orrs	r2, r1
 8000920:	d100      	bne.n	8000924 <__aeabi_dadd+0x2ac>
 8000922:	e200      	b.n	8000d26 <__aeabi_dadd+0x6ae>
 8000924:	2480      	movs	r4, #128	; 0x80
 8000926:	0324      	lsls	r4, r4, #12
 8000928:	430c      	orrs	r4, r1
 800092a:	0324      	lsls	r4, r4, #12
 800092c:	4a2d      	ldr	r2, [pc, #180]	; (80009e4 <__aeabi_dadd+0x36c>)
 800092e:	0b24      	lsrs	r4, r4, #12
 8000930:	e73e      	b.n	80007b0 <__aeabi_dadd+0x138>
 8000932:	0020      	movs	r0, r4
 8000934:	f001 fd6e 	bl	8002414 <__clzsi2>
 8000938:	0003      	movs	r3, r0
 800093a:	3318      	adds	r3, #24
 800093c:	2b1f      	cmp	r3, #31
 800093e:	dc00      	bgt.n	8000942 <__aeabi_dadd+0x2ca>
 8000940:	e6f7      	b.n	8000732 <__aeabi_dadd+0xba>
 8000942:	0022      	movs	r2, r4
 8000944:	3808      	subs	r0, #8
 8000946:	4082      	lsls	r2, r0
 8000948:	2400      	movs	r4, #0
 800094a:	42b3      	cmp	r3, r6
 800094c:	db00      	blt.n	8000950 <__aeabi_dadd+0x2d8>
 800094e:	e6fc      	b.n	800074a <__aeabi_dadd+0xd2>
 8000950:	1af6      	subs	r6, r6, r3
 8000952:	4b25      	ldr	r3, [pc, #148]	; (80009e8 <__aeabi_dadd+0x370>)
 8000954:	401a      	ands	r2, r3
 8000956:	4692      	mov	sl, r2
 8000958:	e70a      	b.n	8000770 <__aeabi_dadd+0xf8>
 800095a:	2f00      	cmp	r7, #0
 800095c:	d02b      	beq.n	80009b6 <__aeabi_dadd+0x33e>
 800095e:	1b97      	subs	r7, r2, r6
 8000960:	2e00      	cmp	r6, #0
 8000962:	d100      	bne.n	8000966 <__aeabi_dadd+0x2ee>
 8000964:	e0b8      	b.n	8000ad8 <__aeabi_dadd+0x460>
 8000966:	4c1f      	ldr	r4, [pc, #124]	; (80009e4 <__aeabi_dadd+0x36c>)
 8000968:	42a2      	cmp	r2, r4
 800096a:	d100      	bne.n	800096e <__aeabi_dadd+0x2f6>
 800096c:	e11c      	b.n	8000ba8 <__aeabi_dadd+0x530>
 800096e:	2480      	movs	r4, #128	; 0x80
 8000970:	0424      	lsls	r4, r4, #16
 8000972:	4321      	orrs	r1, r4
 8000974:	2f38      	cmp	r7, #56	; 0x38
 8000976:	dd00      	ble.n	800097a <__aeabi_dadd+0x302>
 8000978:	e11e      	b.n	8000bb8 <__aeabi_dadd+0x540>
 800097a:	2f1f      	cmp	r7, #31
 800097c:	dd00      	ble.n	8000980 <__aeabi_dadd+0x308>
 800097e:	e19e      	b.n	8000cbe <__aeabi_dadd+0x646>
 8000980:	2620      	movs	r6, #32
 8000982:	000c      	movs	r4, r1
 8000984:	1bf6      	subs	r6, r6, r7
 8000986:	0018      	movs	r0, r3
 8000988:	40b3      	lsls	r3, r6
 800098a:	40b4      	lsls	r4, r6
 800098c:	40f8      	lsrs	r0, r7
 800098e:	1e5e      	subs	r6, r3, #1
 8000990:	41b3      	sbcs	r3, r6
 8000992:	40f9      	lsrs	r1, r7
 8000994:	4304      	orrs	r4, r0
 8000996:	431c      	orrs	r4, r3
 8000998:	4489      	add	r9, r1
 800099a:	4444      	add	r4, r8
 800099c:	4544      	cmp	r4, r8
 800099e:	419b      	sbcs	r3, r3
 80009a0:	425b      	negs	r3, r3
 80009a2:	444b      	add	r3, r9
 80009a4:	469a      	mov	sl, r3
 80009a6:	0016      	movs	r6, r2
 80009a8:	e7a8      	b.n	80008fc <__aeabi_dadd+0x284>
 80009aa:	4642      	mov	r2, r8
 80009ac:	464c      	mov	r4, r9
 80009ae:	4314      	orrs	r4, r2
 80009b0:	1e62      	subs	r2, r4, #1
 80009b2:	4194      	sbcs	r4, r2
 80009b4:	e6a6      	b.n	8000704 <__aeabi_dadd+0x8c>
 80009b6:	4c0d      	ldr	r4, [pc, #52]	; (80009ec <__aeabi_dadd+0x374>)
 80009b8:	1c72      	adds	r2, r6, #1
 80009ba:	4222      	tst	r2, r4
 80009bc:	d000      	beq.n	80009c0 <__aeabi_dadd+0x348>
 80009be:	e0a8      	b.n	8000b12 <__aeabi_dadd+0x49a>
 80009c0:	000a      	movs	r2, r1
 80009c2:	431a      	orrs	r2, r3
 80009c4:	2e00      	cmp	r6, #0
 80009c6:	d000      	beq.n	80009ca <__aeabi_dadd+0x352>
 80009c8:	e10a      	b.n	8000be0 <__aeabi_dadd+0x568>
 80009ca:	2a00      	cmp	r2, #0
 80009cc:	d100      	bne.n	80009d0 <__aeabi_dadd+0x358>
 80009ce:	e15e      	b.n	8000c8e <__aeabi_dadd+0x616>
 80009d0:	464a      	mov	r2, r9
 80009d2:	4302      	orrs	r2, r0
 80009d4:	d000      	beq.n	80009d8 <__aeabi_dadd+0x360>
 80009d6:	e161      	b.n	8000c9c <__aeabi_dadd+0x624>
 80009d8:	074a      	lsls	r2, r1, #29
 80009da:	08db      	lsrs	r3, r3, #3
 80009dc:	4313      	orrs	r3, r2
 80009de:	08c9      	lsrs	r1, r1, #3
 80009e0:	e77c      	b.n	80008dc <__aeabi_dadd+0x264>
 80009e2:	46c0      	nop			; (mov r8, r8)
 80009e4:	000007ff 	.word	0x000007ff
 80009e8:	ff7fffff 	.word	0xff7fffff
 80009ec:	000007fe 	.word	0x000007fe
 80009f0:	4ccf      	ldr	r4, [pc, #828]	; (8000d30 <__aeabi_dadd+0x6b8>)
 80009f2:	42a2      	cmp	r2, r4
 80009f4:	d100      	bne.n	80009f8 <__aeabi_dadd+0x380>
 80009f6:	e0ce      	b.n	8000b96 <__aeabi_dadd+0x51e>
 80009f8:	2480      	movs	r4, #128	; 0x80
 80009fa:	0424      	lsls	r4, r4, #16
 80009fc:	4321      	orrs	r1, r4
 80009fe:	2f38      	cmp	r7, #56	; 0x38
 8000a00:	dc5b      	bgt.n	8000aba <__aeabi_dadd+0x442>
 8000a02:	2f1f      	cmp	r7, #31
 8000a04:	dd00      	ble.n	8000a08 <__aeabi_dadd+0x390>
 8000a06:	e0dc      	b.n	8000bc2 <__aeabi_dadd+0x54a>
 8000a08:	2520      	movs	r5, #32
 8000a0a:	000c      	movs	r4, r1
 8000a0c:	1bed      	subs	r5, r5, r7
 8000a0e:	001e      	movs	r6, r3
 8000a10:	40ab      	lsls	r3, r5
 8000a12:	40ac      	lsls	r4, r5
 8000a14:	40fe      	lsrs	r6, r7
 8000a16:	1e5d      	subs	r5, r3, #1
 8000a18:	41ab      	sbcs	r3, r5
 8000a1a:	4334      	orrs	r4, r6
 8000a1c:	40f9      	lsrs	r1, r7
 8000a1e:	431c      	orrs	r4, r3
 8000a20:	464b      	mov	r3, r9
 8000a22:	1a5b      	subs	r3, r3, r1
 8000a24:	4699      	mov	r9, r3
 8000a26:	e04c      	b.n	8000ac2 <__aeabi_dadd+0x44a>
 8000a28:	464a      	mov	r2, r9
 8000a2a:	1a1c      	subs	r4, r3, r0
 8000a2c:	1a88      	subs	r0, r1, r2
 8000a2e:	42a3      	cmp	r3, r4
 8000a30:	4192      	sbcs	r2, r2
 8000a32:	4252      	negs	r2, r2
 8000a34:	4692      	mov	sl, r2
 8000a36:	0002      	movs	r2, r0
 8000a38:	4650      	mov	r0, sl
 8000a3a:	1a12      	subs	r2, r2, r0
 8000a3c:	4692      	mov	sl, r2
 8000a3e:	0212      	lsls	r2, r2, #8
 8000a40:	d478      	bmi.n	8000b34 <__aeabi_dadd+0x4bc>
 8000a42:	4653      	mov	r3, sl
 8000a44:	4323      	orrs	r3, r4
 8000a46:	d000      	beq.n	8000a4a <__aeabi_dadd+0x3d2>
 8000a48:	e66a      	b.n	8000720 <__aeabi_dadd+0xa8>
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	2500      	movs	r5, #0
 8000a4e:	e745      	b.n	80008dc <__aeabi_dadd+0x264>
 8000a50:	074a      	lsls	r2, r1, #29
 8000a52:	08db      	lsrs	r3, r3, #3
 8000a54:	4313      	orrs	r3, r2
 8000a56:	08c9      	lsrs	r1, r1, #3
 8000a58:	e73d      	b.n	80008d6 <__aeabi_dadd+0x25e>
 8000a5a:	181c      	adds	r4, r3, r0
 8000a5c:	429c      	cmp	r4, r3
 8000a5e:	419b      	sbcs	r3, r3
 8000a60:	4449      	add	r1, r9
 8000a62:	468a      	mov	sl, r1
 8000a64:	425b      	negs	r3, r3
 8000a66:	449a      	add	sl, r3
 8000a68:	4653      	mov	r3, sl
 8000a6a:	2601      	movs	r6, #1
 8000a6c:	021b      	lsls	r3, r3, #8
 8000a6e:	d400      	bmi.n	8000a72 <__aeabi_dadd+0x3fa>
 8000a70:	e727      	b.n	80008c2 <__aeabi_dadd+0x24a>
 8000a72:	2602      	movs	r6, #2
 8000a74:	4652      	mov	r2, sl
 8000a76:	4baf      	ldr	r3, [pc, #700]	; (8000d34 <__aeabi_dadd+0x6bc>)
 8000a78:	2101      	movs	r1, #1
 8000a7a:	401a      	ands	r2, r3
 8000a7c:	0013      	movs	r3, r2
 8000a7e:	4021      	ands	r1, r4
 8000a80:	0862      	lsrs	r2, r4, #1
 8000a82:	430a      	orrs	r2, r1
 8000a84:	07dc      	lsls	r4, r3, #31
 8000a86:	085b      	lsrs	r3, r3, #1
 8000a88:	469a      	mov	sl, r3
 8000a8a:	4314      	orrs	r4, r2
 8000a8c:	e670      	b.n	8000770 <__aeabi_dadd+0xf8>
 8000a8e:	003a      	movs	r2, r7
 8000a90:	464c      	mov	r4, r9
 8000a92:	3a20      	subs	r2, #32
 8000a94:	40d4      	lsrs	r4, r2
 8000a96:	46a4      	mov	ip, r4
 8000a98:	2f20      	cmp	r7, #32
 8000a9a:	d007      	beq.n	8000aac <__aeabi_dadd+0x434>
 8000a9c:	2240      	movs	r2, #64	; 0x40
 8000a9e:	4648      	mov	r0, r9
 8000aa0:	1bd2      	subs	r2, r2, r7
 8000aa2:	4090      	lsls	r0, r2
 8000aa4:	0002      	movs	r2, r0
 8000aa6:	4640      	mov	r0, r8
 8000aa8:	4310      	orrs	r0, r2
 8000aaa:	4680      	mov	r8, r0
 8000aac:	4640      	mov	r0, r8
 8000aae:	1e42      	subs	r2, r0, #1
 8000ab0:	4190      	sbcs	r0, r2
 8000ab2:	4662      	mov	r2, ip
 8000ab4:	0004      	movs	r4, r0
 8000ab6:	4314      	orrs	r4, r2
 8000ab8:	e624      	b.n	8000704 <__aeabi_dadd+0x8c>
 8000aba:	4319      	orrs	r1, r3
 8000abc:	000c      	movs	r4, r1
 8000abe:	1e63      	subs	r3, r4, #1
 8000ac0:	419c      	sbcs	r4, r3
 8000ac2:	4643      	mov	r3, r8
 8000ac4:	1b1c      	subs	r4, r3, r4
 8000ac6:	45a0      	cmp	r8, r4
 8000ac8:	419b      	sbcs	r3, r3
 8000aca:	4649      	mov	r1, r9
 8000acc:	425b      	negs	r3, r3
 8000ace:	1acb      	subs	r3, r1, r3
 8000ad0:	469a      	mov	sl, r3
 8000ad2:	4665      	mov	r5, ip
 8000ad4:	0016      	movs	r6, r2
 8000ad6:	e61b      	b.n	8000710 <__aeabi_dadd+0x98>
 8000ad8:	000c      	movs	r4, r1
 8000ada:	431c      	orrs	r4, r3
 8000adc:	d100      	bne.n	8000ae0 <__aeabi_dadd+0x468>
 8000ade:	e0c7      	b.n	8000c70 <__aeabi_dadd+0x5f8>
 8000ae0:	1e7c      	subs	r4, r7, #1
 8000ae2:	2f01      	cmp	r7, #1
 8000ae4:	d100      	bne.n	8000ae8 <__aeabi_dadd+0x470>
 8000ae6:	e0f9      	b.n	8000cdc <__aeabi_dadd+0x664>
 8000ae8:	4e91      	ldr	r6, [pc, #580]	; (8000d30 <__aeabi_dadd+0x6b8>)
 8000aea:	42b7      	cmp	r7, r6
 8000aec:	d05c      	beq.n	8000ba8 <__aeabi_dadd+0x530>
 8000aee:	0027      	movs	r7, r4
 8000af0:	e740      	b.n	8000974 <__aeabi_dadd+0x2fc>
 8000af2:	2220      	movs	r2, #32
 8000af4:	464c      	mov	r4, r9
 8000af6:	4640      	mov	r0, r8
 8000af8:	1bd2      	subs	r2, r2, r7
 8000afa:	4094      	lsls	r4, r2
 8000afc:	40f8      	lsrs	r0, r7
 8000afe:	4304      	orrs	r4, r0
 8000b00:	4640      	mov	r0, r8
 8000b02:	4090      	lsls	r0, r2
 8000b04:	1e42      	subs	r2, r0, #1
 8000b06:	4190      	sbcs	r0, r2
 8000b08:	464a      	mov	r2, r9
 8000b0a:	40fa      	lsrs	r2, r7
 8000b0c:	4304      	orrs	r4, r0
 8000b0e:	1889      	adds	r1, r1, r2
 8000b10:	e6ee      	b.n	80008f0 <__aeabi_dadd+0x278>
 8000b12:	4c87      	ldr	r4, [pc, #540]	; (8000d30 <__aeabi_dadd+0x6b8>)
 8000b14:	42a2      	cmp	r2, r4
 8000b16:	d100      	bne.n	8000b1a <__aeabi_dadd+0x4a2>
 8000b18:	e6f9      	b.n	800090e <__aeabi_dadd+0x296>
 8000b1a:	1818      	adds	r0, r3, r0
 8000b1c:	4298      	cmp	r0, r3
 8000b1e:	419b      	sbcs	r3, r3
 8000b20:	4449      	add	r1, r9
 8000b22:	425b      	negs	r3, r3
 8000b24:	18cb      	adds	r3, r1, r3
 8000b26:	07dc      	lsls	r4, r3, #31
 8000b28:	0840      	lsrs	r0, r0, #1
 8000b2a:	085b      	lsrs	r3, r3, #1
 8000b2c:	469a      	mov	sl, r3
 8000b2e:	0016      	movs	r6, r2
 8000b30:	4304      	orrs	r4, r0
 8000b32:	e6c6      	b.n	80008c2 <__aeabi_dadd+0x24a>
 8000b34:	4642      	mov	r2, r8
 8000b36:	1ad4      	subs	r4, r2, r3
 8000b38:	45a0      	cmp	r8, r4
 8000b3a:	4180      	sbcs	r0, r0
 8000b3c:	464b      	mov	r3, r9
 8000b3e:	4240      	negs	r0, r0
 8000b40:	1a59      	subs	r1, r3, r1
 8000b42:	1a0b      	subs	r3, r1, r0
 8000b44:	469a      	mov	sl, r3
 8000b46:	4665      	mov	r5, ip
 8000b48:	e5ea      	b.n	8000720 <__aeabi_dadd+0xa8>
 8000b4a:	464b      	mov	r3, r9
 8000b4c:	464a      	mov	r2, r9
 8000b4e:	08c0      	lsrs	r0, r0, #3
 8000b50:	075b      	lsls	r3, r3, #29
 8000b52:	4665      	mov	r5, ip
 8000b54:	4303      	orrs	r3, r0
 8000b56:	08d1      	lsrs	r1, r2, #3
 8000b58:	e6bd      	b.n	80008d6 <__aeabi_dadd+0x25e>
 8000b5a:	2a00      	cmp	r2, #0
 8000b5c:	d000      	beq.n	8000b60 <__aeabi_dadd+0x4e8>
 8000b5e:	e08e      	b.n	8000c7e <__aeabi_dadd+0x606>
 8000b60:	464b      	mov	r3, r9
 8000b62:	4303      	orrs	r3, r0
 8000b64:	d117      	bne.n	8000b96 <__aeabi_dadd+0x51e>
 8000b66:	2180      	movs	r1, #128	; 0x80
 8000b68:	2500      	movs	r5, #0
 8000b6a:	0309      	lsls	r1, r1, #12
 8000b6c:	e6da      	b.n	8000924 <__aeabi_dadd+0x2ac>
 8000b6e:	074a      	lsls	r2, r1, #29
 8000b70:	08db      	lsrs	r3, r3, #3
 8000b72:	4313      	orrs	r3, r2
 8000b74:	08c9      	lsrs	r1, r1, #3
 8000b76:	e6d1      	b.n	800091c <__aeabi_dadd+0x2a4>
 8000b78:	1a1c      	subs	r4, r3, r0
 8000b7a:	464a      	mov	r2, r9
 8000b7c:	42a3      	cmp	r3, r4
 8000b7e:	419b      	sbcs	r3, r3
 8000b80:	1a89      	subs	r1, r1, r2
 8000b82:	425b      	negs	r3, r3
 8000b84:	1acb      	subs	r3, r1, r3
 8000b86:	469a      	mov	sl, r3
 8000b88:	2601      	movs	r6, #1
 8000b8a:	e5c1      	b.n	8000710 <__aeabi_dadd+0x98>
 8000b8c:	074a      	lsls	r2, r1, #29
 8000b8e:	08db      	lsrs	r3, r3, #3
 8000b90:	4313      	orrs	r3, r2
 8000b92:	08c9      	lsrs	r1, r1, #3
 8000b94:	e69f      	b.n	80008d6 <__aeabi_dadd+0x25e>
 8000b96:	4643      	mov	r3, r8
 8000b98:	08d8      	lsrs	r0, r3, #3
 8000b9a:	464b      	mov	r3, r9
 8000b9c:	464a      	mov	r2, r9
 8000b9e:	075b      	lsls	r3, r3, #29
 8000ba0:	4665      	mov	r5, ip
 8000ba2:	4303      	orrs	r3, r0
 8000ba4:	08d1      	lsrs	r1, r2, #3
 8000ba6:	e6b9      	b.n	800091c <__aeabi_dadd+0x2a4>
 8000ba8:	4643      	mov	r3, r8
 8000baa:	08d8      	lsrs	r0, r3, #3
 8000bac:	464b      	mov	r3, r9
 8000bae:	464a      	mov	r2, r9
 8000bb0:	075b      	lsls	r3, r3, #29
 8000bb2:	4303      	orrs	r3, r0
 8000bb4:	08d1      	lsrs	r1, r2, #3
 8000bb6:	e6b1      	b.n	800091c <__aeabi_dadd+0x2a4>
 8000bb8:	4319      	orrs	r1, r3
 8000bba:	000c      	movs	r4, r1
 8000bbc:	1e63      	subs	r3, r4, #1
 8000bbe:	419c      	sbcs	r4, r3
 8000bc0:	e6eb      	b.n	800099a <__aeabi_dadd+0x322>
 8000bc2:	003c      	movs	r4, r7
 8000bc4:	000d      	movs	r5, r1
 8000bc6:	3c20      	subs	r4, #32
 8000bc8:	40e5      	lsrs	r5, r4
 8000bca:	2f20      	cmp	r7, #32
 8000bcc:	d003      	beq.n	8000bd6 <__aeabi_dadd+0x55e>
 8000bce:	2440      	movs	r4, #64	; 0x40
 8000bd0:	1be4      	subs	r4, r4, r7
 8000bd2:	40a1      	lsls	r1, r4
 8000bd4:	430b      	orrs	r3, r1
 8000bd6:	001c      	movs	r4, r3
 8000bd8:	1e63      	subs	r3, r4, #1
 8000bda:	419c      	sbcs	r4, r3
 8000bdc:	432c      	orrs	r4, r5
 8000bde:	e770      	b.n	8000ac2 <__aeabi_dadd+0x44a>
 8000be0:	2a00      	cmp	r2, #0
 8000be2:	d0e1      	beq.n	8000ba8 <__aeabi_dadd+0x530>
 8000be4:	464a      	mov	r2, r9
 8000be6:	4302      	orrs	r2, r0
 8000be8:	d0c1      	beq.n	8000b6e <__aeabi_dadd+0x4f6>
 8000bea:	074a      	lsls	r2, r1, #29
 8000bec:	08db      	lsrs	r3, r3, #3
 8000bee:	4313      	orrs	r3, r2
 8000bf0:	2280      	movs	r2, #128	; 0x80
 8000bf2:	08c9      	lsrs	r1, r1, #3
 8000bf4:	0312      	lsls	r2, r2, #12
 8000bf6:	4211      	tst	r1, r2
 8000bf8:	d008      	beq.n	8000c0c <__aeabi_dadd+0x594>
 8000bfa:	4648      	mov	r0, r9
 8000bfc:	08c4      	lsrs	r4, r0, #3
 8000bfe:	4214      	tst	r4, r2
 8000c00:	d104      	bne.n	8000c0c <__aeabi_dadd+0x594>
 8000c02:	4643      	mov	r3, r8
 8000c04:	0021      	movs	r1, r4
 8000c06:	08db      	lsrs	r3, r3, #3
 8000c08:	0742      	lsls	r2, r0, #29
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	0f5a      	lsrs	r2, r3, #29
 8000c0e:	00db      	lsls	r3, r3, #3
 8000c10:	0752      	lsls	r2, r2, #29
 8000c12:	08db      	lsrs	r3, r3, #3
 8000c14:	4313      	orrs	r3, r2
 8000c16:	e681      	b.n	800091c <__aeabi_dadd+0x2a4>
 8000c18:	464b      	mov	r3, r9
 8000c1a:	4303      	orrs	r3, r0
 8000c1c:	d100      	bne.n	8000c20 <__aeabi_dadd+0x5a8>
 8000c1e:	e714      	b.n	8000a4a <__aeabi_dadd+0x3d2>
 8000c20:	464b      	mov	r3, r9
 8000c22:	464a      	mov	r2, r9
 8000c24:	08c0      	lsrs	r0, r0, #3
 8000c26:	075b      	lsls	r3, r3, #29
 8000c28:	4665      	mov	r5, ip
 8000c2a:	4303      	orrs	r3, r0
 8000c2c:	08d1      	lsrs	r1, r2, #3
 8000c2e:	e655      	b.n	80008dc <__aeabi_dadd+0x264>
 8000c30:	1ac4      	subs	r4, r0, r3
 8000c32:	45a0      	cmp	r8, r4
 8000c34:	4180      	sbcs	r0, r0
 8000c36:	464b      	mov	r3, r9
 8000c38:	4240      	negs	r0, r0
 8000c3a:	1a59      	subs	r1, r3, r1
 8000c3c:	1a0b      	subs	r3, r1, r0
 8000c3e:	469a      	mov	sl, r3
 8000c40:	4665      	mov	r5, ip
 8000c42:	2601      	movs	r6, #1
 8000c44:	e564      	b.n	8000710 <__aeabi_dadd+0x98>
 8000c46:	1a1c      	subs	r4, r3, r0
 8000c48:	464a      	mov	r2, r9
 8000c4a:	42a3      	cmp	r3, r4
 8000c4c:	4180      	sbcs	r0, r0
 8000c4e:	1a8a      	subs	r2, r1, r2
 8000c50:	4240      	negs	r0, r0
 8000c52:	1a12      	subs	r2, r2, r0
 8000c54:	4692      	mov	sl, r2
 8000c56:	0212      	lsls	r2, r2, #8
 8000c58:	d549      	bpl.n	8000cee <__aeabi_dadd+0x676>
 8000c5a:	4642      	mov	r2, r8
 8000c5c:	1ad4      	subs	r4, r2, r3
 8000c5e:	45a0      	cmp	r8, r4
 8000c60:	4180      	sbcs	r0, r0
 8000c62:	464b      	mov	r3, r9
 8000c64:	4240      	negs	r0, r0
 8000c66:	1a59      	subs	r1, r3, r1
 8000c68:	1a0b      	subs	r3, r1, r0
 8000c6a:	469a      	mov	sl, r3
 8000c6c:	4665      	mov	r5, ip
 8000c6e:	e57f      	b.n	8000770 <__aeabi_dadd+0xf8>
 8000c70:	464b      	mov	r3, r9
 8000c72:	464a      	mov	r2, r9
 8000c74:	08c0      	lsrs	r0, r0, #3
 8000c76:	075b      	lsls	r3, r3, #29
 8000c78:	4303      	orrs	r3, r0
 8000c7a:	08d1      	lsrs	r1, r2, #3
 8000c7c:	e62b      	b.n	80008d6 <__aeabi_dadd+0x25e>
 8000c7e:	464a      	mov	r2, r9
 8000c80:	08db      	lsrs	r3, r3, #3
 8000c82:	4302      	orrs	r2, r0
 8000c84:	d138      	bne.n	8000cf8 <__aeabi_dadd+0x680>
 8000c86:	074a      	lsls	r2, r1, #29
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	08c9      	lsrs	r1, r1, #3
 8000c8c:	e646      	b.n	800091c <__aeabi_dadd+0x2a4>
 8000c8e:	464b      	mov	r3, r9
 8000c90:	464a      	mov	r2, r9
 8000c92:	08c0      	lsrs	r0, r0, #3
 8000c94:	075b      	lsls	r3, r3, #29
 8000c96:	4303      	orrs	r3, r0
 8000c98:	08d1      	lsrs	r1, r2, #3
 8000c9a:	e61f      	b.n	80008dc <__aeabi_dadd+0x264>
 8000c9c:	181c      	adds	r4, r3, r0
 8000c9e:	429c      	cmp	r4, r3
 8000ca0:	419b      	sbcs	r3, r3
 8000ca2:	4449      	add	r1, r9
 8000ca4:	468a      	mov	sl, r1
 8000ca6:	425b      	negs	r3, r3
 8000ca8:	449a      	add	sl, r3
 8000caa:	4653      	mov	r3, sl
 8000cac:	021b      	lsls	r3, r3, #8
 8000cae:	d400      	bmi.n	8000cb2 <__aeabi_dadd+0x63a>
 8000cb0:	e607      	b.n	80008c2 <__aeabi_dadd+0x24a>
 8000cb2:	4652      	mov	r2, sl
 8000cb4:	4b1f      	ldr	r3, [pc, #124]	; (8000d34 <__aeabi_dadd+0x6bc>)
 8000cb6:	2601      	movs	r6, #1
 8000cb8:	401a      	ands	r2, r3
 8000cba:	4692      	mov	sl, r2
 8000cbc:	e601      	b.n	80008c2 <__aeabi_dadd+0x24a>
 8000cbe:	003c      	movs	r4, r7
 8000cc0:	000e      	movs	r6, r1
 8000cc2:	3c20      	subs	r4, #32
 8000cc4:	40e6      	lsrs	r6, r4
 8000cc6:	2f20      	cmp	r7, #32
 8000cc8:	d003      	beq.n	8000cd2 <__aeabi_dadd+0x65a>
 8000cca:	2440      	movs	r4, #64	; 0x40
 8000ccc:	1be4      	subs	r4, r4, r7
 8000cce:	40a1      	lsls	r1, r4
 8000cd0:	430b      	orrs	r3, r1
 8000cd2:	001c      	movs	r4, r3
 8000cd4:	1e63      	subs	r3, r4, #1
 8000cd6:	419c      	sbcs	r4, r3
 8000cd8:	4334      	orrs	r4, r6
 8000cda:	e65e      	b.n	800099a <__aeabi_dadd+0x322>
 8000cdc:	4443      	add	r3, r8
 8000cde:	4283      	cmp	r3, r0
 8000ce0:	4180      	sbcs	r0, r0
 8000ce2:	4449      	add	r1, r9
 8000ce4:	468a      	mov	sl, r1
 8000ce6:	4240      	negs	r0, r0
 8000ce8:	001c      	movs	r4, r3
 8000cea:	4482      	add	sl, r0
 8000cec:	e6bc      	b.n	8000a68 <__aeabi_dadd+0x3f0>
 8000cee:	4653      	mov	r3, sl
 8000cf0:	4323      	orrs	r3, r4
 8000cf2:	d100      	bne.n	8000cf6 <__aeabi_dadd+0x67e>
 8000cf4:	e6a9      	b.n	8000a4a <__aeabi_dadd+0x3d2>
 8000cf6:	e5e4      	b.n	80008c2 <__aeabi_dadd+0x24a>
 8000cf8:	074a      	lsls	r2, r1, #29
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	2280      	movs	r2, #128	; 0x80
 8000cfe:	08c9      	lsrs	r1, r1, #3
 8000d00:	0312      	lsls	r2, r2, #12
 8000d02:	4211      	tst	r1, r2
 8000d04:	d009      	beq.n	8000d1a <__aeabi_dadd+0x6a2>
 8000d06:	4648      	mov	r0, r9
 8000d08:	08c4      	lsrs	r4, r0, #3
 8000d0a:	4214      	tst	r4, r2
 8000d0c:	d105      	bne.n	8000d1a <__aeabi_dadd+0x6a2>
 8000d0e:	4643      	mov	r3, r8
 8000d10:	4665      	mov	r5, ip
 8000d12:	0021      	movs	r1, r4
 8000d14:	08db      	lsrs	r3, r3, #3
 8000d16:	0742      	lsls	r2, r0, #29
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	0f5a      	lsrs	r2, r3, #29
 8000d1c:	00db      	lsls	r3, r3, #3
 8000d1e:	08db      	lsrs	r3, r3, #3
 8000d20:	0752      	lsls	r2, r2, #29
 8000d22:	4313      	orrs	r3, r2
 8000d24:	e5fa      	b.n	800091c <__aeabi_dadd+0x2a4>
 8000d26:	2300      	movs	r3, #0
 8000d28:	4a01      	ldr	r2, [pc, #4]	; (8000d30 <__aeabi_dadd+0x6b8>)
 8000d2a:	001c      	movs	r4, r3
 8000d2c:	e540      	b.n	80007b0 <__aeabi_dadd+0x138>
 8000d2e:	46c0      	nop			; (mov r8, r8)
 8000d30:	000007ff 	.word	0x000007ff
 8000d34:	ff7fffff 	.word	0xff7fffff

08000d38 <__aeabi_ddiv>:
 8000d38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d3a:	4657      	mov	r7, sl
 8000d3c:	464e      	mov	r6, r9
 8000d3e:	4645      	mov	r5, r8
 8000d40:	46de      	mov	lr, fp
 8000d42:	b5e0      	push	{r5, r6, r7, lr}
 8000d44:	030c      	lsls	r4, r1, #12
 8000d46:	001f      	movs	r7, r3
 8000d48:	004b      	lsls	r3, r1, #1
 8000d4a:	4681      	mov	r9, r0
 8000d4c:	4692      	mov	sl, r2
 8000d4e:	0005      	movs	r5, r0
 8000d50:	b085      	sub	sp, #20
 8000d52:	0b24      	lsrs	r4, r4, #12
 8000d54:	0d5b      	lsrs	r3, r3, #21
 8000d56:	0fce      	lsrs	r6, r1, #31
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d100      	bne.n	8000d5e <__aeabi_ddiv+0x26>
 8000d5c:	e152      	b.n	8001004 <__aeabi_ddiv+0x2cc>
 8000d5e:	4ad2      	ldr	r2, [pc, #840]	; (80010a8 <__aeabi_ddiv+0x370>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d100      	bne.n	8000d66 <__aeabi_ddiv+0x2e>
 8000d64:	e16e      	b.n	8001044 <__aeabi_ddiv+0x30c>
 8000d66:	0f42      	lsrs	r2, r0, #29
 8000d68:	00e4      	lsls	r4, r4, #3
 8000d6a:	4314      	orrs	r4, r2
 8000d6c:	2280      	movs	r2, #128	; 0x80
 8000d6e:	0412      	lsls	r2, r2, #16
 8000d70:	4322      	orrs	r2, r4
 8000d72:	4690      	mov	r8, r2
 8000d74:	4acd      	ldr	r2, [pc, #820]	; (80010ac <__aeabi_ddiv+0x374>)
 8000d76:	00c5      	lsls	r5, r0, #3
 8000d78:	4693      	mov	fp, r2
 8000d7a:	449b      	add	fp, r3
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	4699      	mov	r9, r3
 8000d80:	9300      	str	r3, [sp, #0]
 8000d82:	033c      	lsls	r4, r7, #12
 8000d84:	007b      	lsls	r3, r7, #1
 8000d86:	4650      	mov	r0, sl
 8000d88:	0b24      	lsrs	r4, r4, #12
 8000d8a:	0d5b      	lsrs	r3, r3, #21
 8000d8c:	0fff      	lsrs	r7, r7, #31
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d100      	bne.n	8000d94 <__aeabi_ddiv+0x5c>
 8000d92:	e11a      	b.n	8000fca <__aeabi_ddiv+0x292>
 8000d94:	4ac4      	ldr	r2, [pc, #784]	; (80010a8 <__aeabi_ddiv+0x370>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d100      	bne.n	8000d9c <__aeabi_ddiv+0x64>
 8000d9a:	e15e      	b.n	800105a <__aeabi_ddiv+0x322>
 8000d9c:	0f42      	lsrs	r2, r0, #29
 8000d9e:	00e4      	lsls	r4, r4, #3
 8000da0:	4322      	orrs	r2, r4
 8000da2:	2480      	movs	r4, #128	; 0x80
 8000da4:	0424      	lsls	r4, r4, #16
 8000da6:	4314      	orrs	r4, r2
 8000da8:	4ac0      	ldr	r2, [pc, #768]	; (80010ac <__aeabi_ddiv+0x374>)
 8000daa:	00c1      	lsls	r1, r0, #3
 8000dac:	4694      	mov	ip, r2
 8000dae:	465a      	mov	r2, fp
 8000db0:	4463      	add	r3, ip
 8000db2:	1ad3      	subs	r3, r2, r3
 8000db4:	469b      	mov	fp, r3
 8000db6:	2000      	movs	r0, #0
 8000db8:	0033      	movs	r3, r6
 8000dba:	407b      	eors	r3, r7
 8000dbc:	469a      	mov	sl, r3
 8000dbe:	464b      	mov	r3, r9
 8000dc0:	2b0f      	cmp	r3, #15
 8000dc2:	d827      	bhi.n	8000e14 <__aeabi_ddiv+0xdc>
 8000dc4:	4aba      	ldr	r2, [pc, #744]	; (80010b0 <__aeabi_ddiv+0x378>)
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	58d3      	ldr	r3, [r2, r3]
 8000dca:	469f      	mov	pc, r3
 8000dcc:	46b2      	mov	sl, r6
 8000dce:	9b00      	ldr	r3, [sp, #0]
 8000dd0:	2b02      	cmp	r3, #2
 8000dd2:	d016      	beq.n	8000e02 <__aeabi_ddiv+0xca>
 8000dd4:	2b03      	cmp	r3, #3
 8000dd6:	d100      	bne.n	8000dda <__aeabi_ddiv+0xa2>
 8000dd8:	e287      	b.n	80012ea <__aeabi_ddiv+0x5b2>
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d000      	beq.n	8000de0 <__aeabi_ddiv+0xa8>
 8000dde:	e0d5      	b.n	8000f8c <__aeabi_ddiv+0x254>
 8000de0:	2300      	movs	r3, #0
 8000de2:	2200      	movs	r2, #0
 8000de4:	2500      	movs	r5, #0
 8000de6:	051b      	lsls	r3, r3, #20
 8000de8:	4313      	orrs	r3, r2
 8000dea:	4652      	mov	r2, sl
 8000dec:	07d2      	lsls	r2, r2, #31
 8000dee:	4313      	orrs	r3, r2
 8000df0:	0028      	movs	r0, r5
 8000df2:	0019      	movs	r1, r3
 8000df4:	b005      	add	sp, #20
 8000df6:	bcf0      	pop	{r4, r5, r6, r7}
 8000df8:	46bb      	mov	fp, r7
 8000dfa:	46b2      	mov	sl, r6
 8000dfc:	46a9      	mov	r9, r5
 8000dfe:	46a0      	mov	r8, r4
 8000e00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e02:	2200      	movs	r2, #0
 8000e04:	2500      	movs	r5, #0
 8000e06:	4ba8      	ldr	r3, [pc, #672]	; (80010a8 <__aeabi_ddiv+0x370>)
 8000e08:	e7ed      	b.n	8000de6 <__aeabi_ddiv+0xae>
 8000e0a:	46ba      	mov	sl, r7
 8000e0c:	46a0      	mov	r8, r4
 8000e0e:	000d      	movs	r5, r1
 8000e10:	9000      	str	r0, [sp, #0]
 8000e12:	e7dc      	b.n	8000dce <__aeabi_ddiv+0x96>
 8000e14:	4544      	cmp	r4, r8
 8000e16:	d200      	bcs.n	8000e1a <__aeabi_ddiv+0xe2>
 8000e18:	e1c4      	b.n	80011a4 <__aeabi_ddiv+0x46c>
 8000e1a:	d100      	bne.n	8000e1e <__aeabi_ddiv+0xe6>
 8000e1c:	e1bf      	b.n	800119e <__aeabi_ddiv+0x466>
 8000e1e:	2301      	movs	r3, #1
 8000e20:	425b      	negs	r3, r3
 8000e22:	469c      	mov	ip, r3
 8000e24:	002e      	movs	r6, r5
 8000e26:	4640      	mov	r0, r8
 8000e28:	2500      	movs	r5, #0
 8000e2a:	44e3      	add	fp, ip
 8000e2c:	0223      	lsls	r3, r4, #8
 8000e2e:	0e0c      	lsrs	r4, r1, #24
 8000e30:	431c      	orrs	r4, r3
 8000e32:	0c1b      	lsrs	r3, r3, #16
 8000e34:	4699      	mov	r9, r3
 8000e36:	0423      	lsls	r3, r4, #16
 8000e38:	020a      	lsls	r2, r1, #8
 8000e3a:	0c1f      	lsrs	r7, r3, #16
 8000e3c:	4649      	mov	r1, r9
 8000e3e:	9200      	str	r2, [sp, #0]
 8000e40:	9701      	str	r7, [sp, #4]
 8000e42:	f7ff f9e3 	bl	800020c <__aeabi_uidivmod>
 8000e46:	0002      	movs	r2, r0
 8000e48:	437a      	muls	r2, r7
 8000e4a:	040b      	lsls	r3, r1, #16
 8000e4c:	0c31      	lsrs	r1, r6, #16
 8000e4e:	4680      	mov	r8, r0
 8000e50:	4319      	orrs	r1, r3
 8000e52:	428a      	cmp	r2, r1
 8000e54:	d907      	bls.n	8000e66 <__aeabi_ddiv+0x12e>
 8000e56:	2301      	movs	r3, #1
 8000e58:	425b      	negs	r3, r3
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	1909      	adds	r1, r1, r4
 8000e5e:	44e0      	add	r8, ip
 8000e60:	428c      	cmp	r4, r1
 8000e62:	d800      	bhi.n	8000e66 <__aeabi_ddiv+0x12e>
 8000e64:	e201      	b.n	800126a <__aeabi_ddiv+0x532>
 8000e66:	1a88      	subs	r0, r1, r2
 8000e68:	4649      	mov	r1, r9
 8000e6a:	f7ff f9cf 	bl	800020c <__aeabi_uidivmod>
 8000e6e:	9a01      	ldr	r2, [sp, #4]
 8000e70:	0436      	lsls	r6, r6, #16
 8000e72:	4342      	muls	r2, r0
 8000e74:	0409      	lsls	r1, r1, #16
 8000e76:	0c36      	lsrs	r6, r6, #16
 8000e78:	0003      	movs	r3, r0
 8000e7a:	430e      	orrs	r6, r1
 8000e7c:	42b2      	cmp	r2, r6
 8000e7e:	d904      	bls.n	8000e8a <__aeabi_ddiv+0x152>
 8000e80:	1936      	adds	r6, r6, r4
 8000e82:	3b01      	subs	r3, #1
 8000e84:	42b4      	cmp	r4, r6
 8000e86:	d800      	bhi.n	8000e8a <__aeabi_ddiv+0x152>
 8000e88:	e1e9      	b.n	800125e <__aeabi_ddiv+0x526>
 8000e8a:	1ab0      	subs	r0, r6, r2
 8000e8c:	4642      	mov	r2, r8
 8000e8e:	9e00      	ldr	r6, [sp, #0]
 8000e90:	0412      	lsls	r2, r2, #16
 8000e92:	431a      	orrs	r2, r3
 8000e94:	0c33      	lsrs	r3, r6, #16
 8000e96:	001f      	movs	r7, r3
 8000e98:	0c11      	lsrs	r1, r2, #16
 8000e9a:	4690      	mov	r8, r2
 8000e9c:	9302      	str	r3, [sp, #8]
 8000e9e:	0413      	lsls	r3, r2, #16
 8000ea0:	0432      	lsls	r2, r6, #16
 8000ea2:	0c16      	lsrs	r6, r2, #16
 8000ea4:	0032      	movs	r2, r6
 8000ea6:	0c1b      	lsrs	r3, r3, #16
 8000ea8:	435a      	muls	r2, r3
 8000eaa:	9603      	str	r6, [sp, #12]
 8000eac:	437b      	muls	r3, r7
 8000eae:	434e      	muls	r6, r1
 8000eb0:	4379      	muls	r1, r7
 8000eb2:	0c17      	lsrs	r7, r2, #16
 8000eb4:	46bc      	mov	ip, r7
 8000eb6:	199b      	adds	r3, r3, r6
 8000eb8:	4463      	add	r3, ip
 8000eba:	429e      	cmp	r6, r3
 8000ebc:	d903      	bls.n	8000ec6 <__aeabi_ddiv+0x18e>
 8000ebe:	2680      	movs	r6, #128	; 0x80
 8000ec0:	0276      	lsls	r6, r6, #9
 8000ec2:	46b4      	mov	ip, r6
 8000ec4:	4461      	add	r1, ip
 8000ec6:	0c1e      	lsrs	r6, r3, #16
 8000ec8:	1871      	adds	r1, r6, r1
 8000eca:	0416      	lsls	r6, r2, #16
 8000ecc:	041b      	lsls	r3, r3, #16
 8000ece:	0c36      	lsrs	r6, r6, #16
 8000ed0:	199e      	adds	r6, r3, r6
 8000ed2:	4288      	cmp	r0, r1
 8000ed4:	d302      	bcc.n	8000edc <__aeabi_ddiv+0x1a4>
 8000ed6:	d112      	bne.n	8000efe <__aeabi_ddiv+0x1c6>
 8000ed8:	42b5      	cmp	r5, r6
 8000eda:	d210      	bcs.n	8000efe <__aeabi_ddiv+0x1c6>
 8000edc:	4643      	mov	r3, r8
 8000ede:	1e5a      	subs	r2, r3, #1
 8000ee0:	9b00      	ldr	r3, [sp, #0]
 8000ee2:	469c      	mov	ip, r3
 8000ee4:	4465      	add	r5, ip
 8000ee6:	001f      	movs	r7, r3
 8000ee8:	429d      	cmp	r5, r3
 8000eea:	419b      	sbcs	r3, r3
 8000eec:	425b      	negs	r3, r3
 8000eee:	191b      	adds	r3, r3, r4
 8000ef0:	18c0      	adds	r0, r0, r3
 8000ef2:	4284      	cmp	r4, r0
 8000ef4:	d200      	bcs.n	8000ef8 <__aeabi_ddiv+0x1c0>
 8000ef6:	e19e      	b.n	8001236 <__aeabi_ddiv+0x4fe>
 8000ef8:	d100      	bne.n	8000efc <__aeabi_ddiv+0x1c4>
 8000efa:	e199      	b.n	8001230 <__aeabi_ddiv+0x4f8>
 8000efc:	4690      	mov	r8, r2
 8000efe:	1bae      	subs	r6, r5, r6
 8000f00:	42b5      	cmp	r5, r6
 8000f02:	41ad      	sbcs	r5, r5
 8000f04:	1a40      	subs	r0, r0, r1
 8000f06:	426d      	negs	r5, r5
 8000f08:	1b40      	subs	r0, r0, r5
 8000f0a:	4284      	cmp	r4, r0
 8000f0c:	d100      	bne.n	8000f10 <__aeabi_ddiv+0x1d8>
 8000f0e:	e1d2      	b.n	80012b6 <__aeabi_ddiv+0x57e>
 8000f10:	4649      	mov	r1, r9
 8000f12:	f7ff f97b 	bl	800020c <__aeabi_uidivmod>
 8000f16:	9a01      	ldr	r2, [sp, #4]
 8000f18:	040b      	lsls	r3, r1, #16
 8000f1a:	4342      	muls	r2, r0
 8000f1c:	0c31      	lsrs	r1, r6, #16
 8000f1e:	0005      	movs	r5, r0
 8000f20:	4319      	orrs	r1, r3
 8000f22:	428a      	cmp	r2, r1
 8000f24:	d900      	bls.n	8000f28 <__aeabi_ddiv+0x1f0>
 8000f26:	e16c      	b.n	8001202 <__aeabi_ddiv+0x4ca>
 8000f28:	1a88      	subs	r0, r1, r2
 8000f2a:	4649      	mov	r1, r9
 8000f2c:	f7ff f96e 	bl	800020c <__aeabi_uidivmod>
 8000f30:	9a01      	ldr	r2, [sp, #4]
 8000f32:	0436      	lsls	r6, r6, #16
 8000f34:	4342      	muls	r2, r0
 8000f36:	0409      	lsls	r1, r1, #16
 8000f38:	0c36      	lsrs	r6, r6, #16
 8000f3a:	0003      	movs	r3, r0
 8000f3c:	430e      	orrs	r6, r1
 8000f3e:	42b2      	cmp	r2, r6
 8000f40:	d900      	bls.n	8000f44 <__aeabi_ddiv+0x20c>
 8000f42:	e153      	b.n	80011ec <__aeabi_ddiv+0x4b4>
 8000f44:	9803      	ldr	r0, [sp, #12]
 8000f46:	1ab6      	subs	r6, r6, r2
 8000f48:	0002      	movs	r2, r0
 8000f4a:	042d      	lsls	r5, r5, #16
 8000f4c:	431d      	orrs	r5, r3
 8000f4e:	9f02      	ldr	r7, [sp, #8]
 8000f50:	042b      	lsls	r3, r5, #16
 8000f52:	0c1b      	lsrs	r3, r3, #16
 8000f54:	435a      	muls	r2, r3
 8000f56:	437b      	muls	r3, r7
 8000f58:	469c      	mov	ip, r3
 8000f5a:	0c29      	lsrs	r1, r5, #16
 8000f5c:	4348      	muls	r0, r1
 8000f5e:	0c13      	lsrs	r3, r2, #16
 8000f60:	4484      	add	ip, r0
 8000f62:	4463      	add	r3, ip
 8000f64:	4379      	muls	r1, r7
 8000f66:	4298      	cmp	r0, r3
 8000f68:	d903      	bls.n	8000f72 <__aeabi_ddiv+0x23a>
 8000f6a:	2080      	movs	r0, #128	; 0x80
 8000f6c:	0240      	lsls	r0, r0, #9
 8000f6e:	4684      	mov	ip, r0
 8000f70:	4461      	add	r1, ip
 8000f72:	0c18      	lsrs	r0, r3, #16
 8000f74:	0412      	lsls	r2, r2, #16
 8000f76:	041b      	lsls	r3, r3, #16
 8000f78:	0c12      	lsrs	r2, r2, #16
 8000f7a:	1840      	adds	r0, r0, r1
 8000f7c:	189b      	adds	r3, r3, r2
 8000f7e:	4286      	cmp	r6, r0
 8000f80:	d200      	bcs.n	8000f84 <__aeabi_ddiv+0x24c>
 8000f82:	e100      	b.n	8001186 <__aeabi_ddiv+0x44e>
 8000f84:	d100      	bne.n	8000f88 <__aeabi_ddiv+0x250>
 8000f86:	e0fb      	b.n	8001180 <__aeabi_ddiv+0x448>
 8000f88:	2301      	movs	r3, #1
 8000f8a:	431d      	orrs	r5, r3
 8000f8c:	4b49      	ldr	r3, [pc, #292]	; (80010b4 <__aeabi_ddiv+0x37c>)
 8000f8e:	445b      	add	r3, fp
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	dc00      	bgt.n	8000f96 <__aeabi_ddiv+0x25e>
 8000f94:	e0aa      	b.n	80010ec <__aeabi_ddiv+0x3b4>
 8000f96:	076a      	lsls	r2, r5, #29
 8000f98:	d000      	beq.n	8000f9c <__aeabi_ddiv+0x264>
 8000f9a:	e13d      	b.n	8001218 <__aeabi_ddiv+0x4e0>
 8000f9c:	08e9      	lsrs	r1, r5, #3
 8000f9e:	4642      	mov	r2, r8
 8000fa0:	01d2      	lsls	r2, r2, #7
 8000fa2:	d506      	bpl.n	8000fb2 <__aeabi_ddiv+0x27a>
 8000fa4:	4642      	mov	r2, r8
 8000fa6:	4b44      	ldr	r3, [pc, #272]	; (80010b8 <__aeabi_ddiv+0x380>)
 8000fa8:	401a      	ands	r2, r3
 8000faa:	2380      	movs	r3, #128	; 0x80
 8000fac:	4690      	mov	r8, r2
 8000fae:	00db      	lsls	r3, r3, #3
 8000fb0:	445b      	add	r3, fp
 8000fb2:	4a42      	ldr	r2, [pc, #264]	; (80010bc <__aeabi_ddiv+0x384>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	dd00      	ble.n	8000fba <__aeabi_ddiv+0x282>
 8000fb8:	e723      	b.n	8000e02 <__aeabi_ddiv+0xca>
 8000fba:	4642      	mov	r2, r8
 8000fbc:	055b      	lsls	r3, r3, #21
 8000fbe:	0755      	lsls	r5, r2, #29
 8000fc0:	0252      	lsls	r2, r2, #9
 8000fc2:	430d      	orrs	r5, r1
 8000fc4:	0b12      	lsrs	r2, r2, #12
 8000fc6:	0d5b      	lsrs	r3, r3, #21
 8000fc8:	e70d      	b.n	8000de6 <__aeabi_ddiv+0xae>
 8000fca:	4651      	mov	r1, sl
 8000fcc:	4321      	orrs	r1, r4
 8000fce:	d100      	bne.n	8000fd2 <__aeabi_ddiv+0x29a>
 8000fd0:	e07c      	b.n	80010cc <__aeabi_ddiv+0x394>
 8000fd2:	2c00      	cmp	r4, #0
 8000fd4:	d100      	bne.n	8000fd8 <__aeabi_ddiv+0x2a0>
 8000fd6:	e0fb      	b.n	80011d0 <__aeabi_ddiv+0x498>
 8000fd8:	0020      	movs	r0, r4
 8000fda:	f001 fa1b 	bl	8002414 <__clzsi2>
 8000fde:	0002      	movs	r2, r0
 8000fe0:	3a0b      	subs	r2, #11
 8000fe2:	231d      	movs	r3, #29
 8000fe4:	1a9b      	subs	r3, r3, r2
 8000fe6:	4652      	mov	r2, sl
 8000fe8:	0001      	movs	r1, r0
 8000fea:	40da      	lsrs	r2, r3
 8000fec:	4653      	mov	r3, sl
 8000fee:	3908      	subs	r1, #8
 8000ff0:	408b      	lsls	r3, r1
 8000ff2:	408c      	lsls	r4, r1
 8000ff4:	0019      	movs	r1, r3
 8000ff6:	4314      	orrs	r4, r2
 8000ff8:	4b31      	ldr	r3, [pc, #196]	; (80010c0 <__aeabi_ddiv+0x388>)
 8000ffa:	4458      	add	r0, fp
 8000ffc:	469b      	mov	fp, r3
 8000ffe:	4483      	add	fp, r0
 8001000:	2000      	movs	r0, #0
 8001002:	e6d9      	b.n	8000db8 <__aeabi_ddiv+0x80>
 8001004:	0003      	movs	r3, r0
 8001006:	4323      	orrs	r3, r4
 8001008:	4698      	mov	r8, r3
 800100a:	d044      	beq.n	8001096 <__aeabi_ddiv+0x35e>
 800100c:	2c00      	cmp	r4, #0
 800100e:	d100      	bne.n	8001012 <__aeabi_ddiv+0x2da>
 8001010:	e0cf      	b.n	80011b2 <__aeabi_ddiv+0x47a>
 8001012:	0020      	movs	r0, r4
 8001014:	f001 f9fe 	bl	8002414 <__clzsi2>
 8001018:	0001      	movs	r1, r0
 800101a:	0002      	movs	r2, r0
 800101c:	390b      	subs	r1, #11
 800101e:	231d      	movs	r3, #29
 8001020:	1a5b      	subs	r3, r3, r1
 8001022:	4649      	mov	r1, r9
 8001024:	0010      	movs	r0, r2
 8001026:	40d9      	lsrs	r1, r3
 8001028:	3808      	subs	r0, #8
 800102a:	4084      	lsls	r4, r0
 800102c:	000b      	movs	r3, r1
 800102e:	464d      	mov	r5, r9
 8001030:	4323      	orrs	r3, r4
 8001032:	4698      	mov	r8, r3
 8001034:	4085      	lsls	r5, r0
 8001036:	4b23      	ldr	r3, [pc, #140]	; (80010c4 <__aeabi_ddiv+0x38c>)
 8001038:	1a9b      	subs	r3, r3, r2
 800103a:	469b      	mov	fp, r3
 800103c:	2300      	movs	r3, #0
 800103e:	4699      	mov	r9, r3
 8001040:	9300      	str	r3, [sp, #0]
 8001042:	e69e      	b.n	8000d82 <__aeabi_ddiv+0x4a>
 8001044:	0002      	movs	r2, r0
 8001046:	4322      	orrs	r2, r4
 8001048:	4690      	mov	r8, r2
 800104a:	d11d      	bne.n	8001088 <__aeabi_ddiv+0x350>
 800104c:	2208      	movs	r2, #8
 800104e:	469b      	mov	fp, r3
 8001050:	2302      	movs	r3, #2
 8001052:	2500      	movs	r5, #0
 8001054:	4691      	mov	r9, r2
 8001056:	9300      	str	r3, [sp, #0]
 8001058:	e693      	b.n	8000d82 <__aeabi_ddiv+0x4a>
 800105a:	4651      	mov	r1, sl
 800105c:	4321      	orrs	r1, r4
 800105e:	d109      	bne.n	8001074 <__aeabi_ddiv+0x33c>
 8001060:	2302      	movs	r3, #2
 8001062:	464a      	mov	r2, r9
 8001064:	431a      	orrs	r2, r3
 8001066:	4b18      	ldr	r3, [pc, #96]	; (80010c8 <__aeabi_ddiv+0x390>)
 8001068:	4691      	mov	r9, r2
 800106a:	469c      	mov	ip, r3
 800106c:	2400      	movs	r4, #0
 800106e:	2002      	movs	r0, #2
 8001070:	44e3      	add	fp, ip
 8001072:	e6a1      	b.n	8000db8 <__aeabi_ddiv+0x80>
 8001074:	2303      	movs	r3, #3
 8001076:	464a      	mov	r2, r9
 8001078:	431a      	orrs	r2, r3
 800107a:	4b13      	ldr	r3, [pc, #76]	; (80010c8 <__aeabi_ddiv+0x390>)
 800107c:	4691      	mov	r9, r2
 800107e:	469c      	mov	ip, r3
 8001080:	4651      	mov	r1, sl
 8001082:	2003      	movs	r0, #3
 8001084:	44e3      	add	fp, ip
 8001086:	e697      	b.n	8000db8 <__aeabi_ddiv+0x80>
 8001088:	220c      	movs	r2, #12
 800108a:	469b      	mov	fp, r3
 800108c:	2303      	movs	r3, #3
 800108e:	46a0      	mov	r8, r4
 8001090:	4691      	mov	r9, r2
 8001092:	9300      	str	r3, [sp, #0]
 8001094:	e675      	b.n	8000d82 <__aeabi_ddiv+0x4a>
 8001096:	2304      	movs	r3, #4
 8001098:	4699      	mov	r9, r3
 800109a:	2300      	movs	r3, #0
 800109c:	469b      	mov	fp, r3
 800109e:	3301      	adds	r3, #1
 80010a0:	2500      	movs	r5, #0
 80010a2:	9300      	str	r3, [sp, #0]
 80010a4:	e66d      	b.n	8000d82 <__aeabi_ddiv+0x4a>
 80010a6:	46c0      	nop			; (mov r8, r8)
 80010a8:	000007ff 	.word	0x000007ff
 80010ac:	fffffc01 	.word	0xfffffc01
 80010b0:	08009928 	.word	0x08009928
 80010b4:	000003ff 	.word	0x000003ff
 80010b8:	feffffff 	.word	0xfeffffff
 80010bc:	000007fe 	.word	0x000007fe
 80010c0:	000003f3 	.word	0x000003f3
 80010c4:	fffffc0d 	.word	0xfffffc0d
 80010c8:	fffff801 	.word	0xfffff801
 80010cc:	464a      	mov	r2, r9
 80010ce:	2301      	movs	r3, #1
 80010d0:	431a      	orrs	r2, r3
 80010d2:	4691      	mov	r9, r2
 80010d4:	2400      	movs	r4, #0
 80010d6:	2001      	movs	r0, #1
 80010d8:	e66e      	b.n	8000db8 <__aeabi_ddiv+0x80>
 80010da:	2300      	movs	r3, #0
 80010dc:	2280      	movs	r2, #128	; 0x80
 80010de:	469a      	mov	sl, r3
 80010e0:	2500      	movs	r5, #0
 80010e2:	4b88      	ldr	r3, [pc, #544]	; (8001304 <__aeabi_ddiv+0x5cc>)
 80010e4:	0312      	lsls	r2, r2, #12
 80010e6:	e67e      	b.n	8000de6 <__aeabi_ddiv+0xae>
 80010e8:	2501      	movs	r5, #1
 80010ea:	426d      	negs	r5, r5
 80010ec:	2201      	movs	r2, #1
 80010ee:	1ad2      	subs	r2, r2, r3
 80010f0:	2a38      	cmp	r2, #56	; 0x38
 80010f2:	dd00      	ble.n	80010f6 <__aeabi_ddiv+0x3be>
 80010f4:	e674      	b.n	8000de0 <__aeabi_ddiv+0xa8>
 80010f6:	2a1f      	cmp	r2, #31
 80010f8:	dc00      	bgt.n	80010fc <__aeabi_ddiv+0x3c4>
 80010fa:	e0bd      	b.n	8001278 <__aeabi_ddiv+0x540>
 80010fc:	211f      	movs	r1, #31
 80010fe:	4249      	negs	r1, r1
 8001100:	1acb      	subs	r3, r1, r3
 8001102:	4641      	mov	r1, r8
 8001104:	40d9      	lsrs	r1, r3
 8001106:	000b      	movs	r3, r1
 8001108:	2a20      	cmp	r2, #32
 800110a:	d004      	beq.n	8001116 <__aeabi_ddiv+0x3de>
 800110c:	4641      	mov	r1, r8
 800110e:	4a7e      	ldr	r2, [pc, #504]	; (8001308 <__aeabi_ddiv+0x5d0>)
 8001110:	445a      	add	r2, fp
 8001112:	4091      	lsls	r1, r2
 8001114:	430d      	orrs	r5, r1
 8001116:	0029      	movs	r1, r5
 8001118:	1e4a      	subs	r2, r1, #1
 800111a:	4191      	sbcs	r1, r2
 800111c:	4319      	orrs	r1, r3
 800111e:	2307      	movs	r3, #7
 8001120:	001d      	movs	r5, r3
 8001122:	2200      	movs	r2, #0
 8001124:	400d      	ands	r5, r1
 8001126:	420b      	tst	r3, r1
 8001128:	d100      	bne.n	800112c <__aeabi_ddiv+0x3f4>
 800112a:	e0d0      	b.n	80012ce <__aeabi_ddiv+0x596>
 800112c:	220f      	movs	r2, #15
 800112e:	2300      	movs	r3, #0
 8001130:	400a      	ands	r2, r1
 8001132:	2a04      	cmp	r2, #4
 8001134:	d100      	bne.n	8001138 <__aeabi_ddiv+0x400>
 8001136:	e0c7      	b.n	80012c8 <__aeabi_ddiv+0x590>
 8001138:	1d0a      	adds	r2, r1, #4
 800113a:	428a      	cmp	r2, r1
 800113c:	4189      	sbcs	r1, r1
 800113e:	4249      	negs	r1, r1
 8001140:	185b      	adds	r3, r3, r1
 8001142:	0011      	movs	r1, r2
 8001144:	021a      	lsls	r2, r3, #8
 8001146:	d400      	bmi.n	800114a <__aeabi_ddiv+0x412>
 8001148:	e0be      	b.n	80012c8 <__aeabi_ddiv+0x590>
 800114a:	2301      	movs	r3, #1
 800114c:	2200      	movs	r2, #0
 800114e:	2500      	movs	r5, #0
 8001150:	e649      	b.n	8000de6 <__aeabi_ddiv+0xae>
 8001152:	2280      	movs	r2, #128	; 0x80
 8001154:	4643      	mov	r3, r8
 8001156:	0312      	lsls	r2, r2, #12
 8001158:	4213      	tst	r3, r2
 800115a:	d008      	beq.n	800116e <__aeabi_ddiv+0x436>
 800115c:	4214      	tst	r4, r2
 800115e:	d106      	bne.n	800116e <__aeabi_ddiv+0x436>
 8001160:	4322      	orrs	r2, r4
 8001162:	0312      	lsls	r2, r2, #12
 8001164:	46ba      	mov	sl, r7
 8001166:	000d      	movs	r5, r1
 8001168:	4b66      	ldr	r3, [pc, #408]	; (8001304 <__aeabi_ddiv+0x5cc>)
 800116a:	0b12      	lsrs	r2, r2, #12
 800116c:	e63b      	b.n	8000de6 <__aeabi_ddiv+0xae>
 800116e:	2280      	movs	r2, #128	; 0x80
 8001170:	4643      	mov	r3, r8
 8001172:	0312      	lsls	r2, r2, #12
 8001174:	431a      	orrs	r2, r3
 8001176:	0312      	lsls	r2, r2, #12
 8001178:	46b2      	mov	sl, r6
 800117a:	4b62      	ldr	r3, [pc, #392]	; (8001304 <__aeabi_ddiv+0x5cc>)
 800117c:	0b12      	lsrs	r2, r2, #12
 800117e:	e632      	b.n	8000de6 <__aeabi_ddiv+0xae>
 8001180:	2b00      	cmp	r3, #0
 8001182:	d100      	bne.n	8001186 <__aeabi_ddiv+0x44e>
 8001184:	e702      	b.n	8000f8c <__aeabi_ddiv+0x254>
 8001186:	19a6      	adds	r6, r4, r6
 8001188:	1e6a      	subs	r2, r5, #1
 800118a:	42a6      	cmp	r6, r4
 800118c:	d200      	bcs.n	8001190 <__aeabi_ddiv+0x458>
 800118e:	e089      	b.n	80012a4 <__aeabi_ddiv+0x56c>
 8001190:	4286      	cmp	r6, r0
 8001192:	d200      	bcs.n	8001196 <__aeabi_ddiv+0x45e>
 8001194:	e09f      	b.n	80012d6 <__aeabi_ddiv+0x59e>
 8001196:	d100      	bne.n	800119a <__aeabi_ddiv+0x462>
 8001198:	e0af      	b.n	80012fa <__aeabi_ddiv+0x5c2>
 800119a:	0015      	movs	r5, r2
 800119c:	e6f4      	b.n	8000f88 <__aeabi_ddiv+0x250>
 800119e:	42a9      	cmp	r1, r5
 80011a0:	d900      	bls.n	80011a4 <__aeabi_ddiv+0x46c>
 80011a2:	e63c      	b.n	8000e1e <__aeabi_ddiv+0xe6>
 80011a4:	4643      	mov	r3, r8
 80011a6:	07de      	lsls	r6, r3, #31
 80011a8:	0858      	lsrs	r0, r3, #1
 80011aa:	086b      	lsrs	r3, r5, #1
 80011ac:	431e      	orrs	r6, r3
 80011ae:	07ed      	lsls	r5, r5, #31
 80011b0:	e63c      	b.n	8000e2c <__aeabi_ddiv+0xf4>
 80011b2:	f001 f92f 	bl	8002414 <__clzsi2>
 80011b6:	0001      	movs	r1, r0
 80011b8:	0002      	movs	r2, r0
 80011ba:	3115      	adds	r1, #21
 80011bc:	3220      	adds	r2, #32
 80011be:	291c      	cmp	r1, #28
 80011c0:	dc00      	bgt.n	80011c4 <__aeabi_ddiv+0x48c>
 80011c2:	e72c      	b.n	800101e <__aeabi_ddiv+0x2e6>
 80011c4:	464b      	mov	r3, r9
 80011c6:	3808      	subs	r0, #8
 80011c8:	4083      	lsls	r3, r0
 80011ca:	2500      	movs	r5, #0
 80011cc:	4698      	mov	r8, r3
 80011ce:	e732      	b.n	8001036 <__aeabi_ddiv+0x2fe>
 80011d0:	f001 f920 	bl	8002414 <__clzsi2>
 80011d4:	0003      	movs	r3, r0
 80011d6:	001a      	movs	r2, r3
 80011d8:	3215      	adds	r2, #21
 80011da:	3020      	adds	r0, #32
 80011dc:	2a1c      	cmp	r2, #28
 80011de:	dc00      	bgt.n	80011e2 <__aeabi_ddiv+0x4aa>
 80011e0:	e6ff      	b.n	8000fe2 <__aeabi_ddiv+0x2aa>
 80011e2:	4654      	mov	r4, sl
 80011e4:	3b08      	subs	r3, #8
 80011e6:	2100      	movs	r1, #0
 80011e8:	409c      	lsls	r4, r3
 80011ea:	e705      	b.n	8000ff8 <__aeabi_ddiv+0x2c0>
 80011ec:	1936      	adds	r6, r6, r4
 80011ee:	3b01      	subs	r3, #1
 80011f0:	42b4      	cmp	r4, r6
 80011f2:	d900      	bls.n	80011f6 <__aeabi_ddiv+0x4be>
 80011f4:	e6a6      	b.n	8000f44 <__aeabi_ddiv+0x20c>
 80011f6:	42b2      	cmp	r2, r6
 80011f8:	d800      	bhi.n	80011fc <__aeabi_ddiv+0x4c4>
 80011fa:	e6a3      	b.n	8000f44 <__aeabi_ddiv+0x20c>
 80011fc:	1e83      	subs	r3, r0, #2
 80011fe:	1936      	adds	r6, r6, r4
 8001200:	e6a0      	b.n	8000f44 <__aeabi_ddiv+0x20c>
 8001202:	1909      	adds	r1, r1, r4
 8001204:	3d01      	subs	r5, #1
 8001206:	428c      	cmp	r4, r1
 8001208:	d900      	bls.n	800120c <__aeabi_ddiv+0x4d4>
 800120a:	e68d      	b.n	8000f28 <__aeabi_ddiv+0x1f0>
 800120c:	428a      	cmp	r2, r1
 800120e:	d800      	bhi.n	8001212 <__aeabi_ddiv+0x4da>
 8001210:	e68a      	b.n	8000f28 <__aeabi_ddiv+0x1f0>
 8001212:	1e85      	subs	r5, r0, #2
 8001214:	1909      	adds	r1, r1, r4
 8001216:	e687      	b.n	8000f28 <__aeabi_ddiv+0x1f0>
 8001218:	220f      	movs	r2, #15
 800121a:	402a      	ands	r2, r5
 800121c:	2a04      	cmp	r2, #4
 800121e:	d100      	bne.n	8001222 <__aeabi_ddiv+0x4ea>
 8001220:	e6bc      	b.n	8000f9c <__aeabi_ddiv+0x264>
 8001222:	1d29      	adds	r1, r5, #4
 8001224:	42a9      	cmp	r1, r5
 8001226:	41ad      	sbcs	r5, r5
 8001228:	426d      	negs	r5, r5
 800122a:	08c9      	lsrs	r1, r1, #3
 800122c:	44a8      	add	r8, r5
 800122e:	e6b6      	b.n	8000f9e <__aeabi_ddiv+0x266>
 8001230:	42af      	cmp	r7, r5
 8001232:	d900      	bls.n	8001236 <__aeabi_ddiv+0x4fe>
 8001234:	e662      	b.n	8000efc <__aeabi_ddiv+0x1c4>
 8001236:	4281      	cmp	r1, r0
 8001238:	d804      	bhi.n	8001244 <__aeabi_ddiv+0x50c>
 800123a:	d000      	beq.n	800123e <__aeabi_ddiv+0x506>
 800123c:	e65e      	b.n	8000efc <__aeabi_ddiv+0x1c4>
 800123e:	42ae      	cmp	r6, r5
 8001240:	d800      	bhi.n	8001244 <__aeabi_ddiv+0x50c>
 8001242:	e65b      	b.n	8000efc <__aeabi_ddiv+0x1c4>
 8001244:	2302      	movs	r3, #2
 8001246:	425b      	negs	r3, r3
 8001248:	469c      	mov	ip, r3
 800124a:	9b00      	ldr	r3, [sp, #0]
 800124c:	44e0      	add	r8, ip
 800124e:	469c      	mov	ip, r3
 8001250:	4465      	add	r5, ip
 8001252:	429d      	cmp	r5, r3
 8001254:	419b      	sbcs	r3, r3
 8001256:	425b      	negs	r3, r3
 8001258:	191b      	adds	r3, r3, r4
 800125a:	18c0      	adds	r0, r0, r3
 800125c:	e64f      	b.n	8000efe <__aeabi_ddiv+0x1c6>
 800125e:	42b2      	cmp	r2, r6
 8001260:	d800      	bhi.n	8001264 <__aeabi_ddiv+0x52c>
 8001262:	e612      	b.n	8000e8a <__aeabi_ddiv+0x152>
 8001264:	1e83      	subs	r3, r0, #2
 8001266:	1936      	adds	r6, r6, r4
 8001268:	e60f      	b.n	8000e8a <__aeabi_ddiv+0x152>
 800126a:	428a      	cmp	r2, r1
 800126c:	d800      	bhi.n	8001270 <__aeabi_ddiv+0x538>
 800126e:	e5fa      	b.n	8000e66 <__aeabi_ddiv+0x12e>
 8001270:	1e83      	subs	r3, r0, #2
 8001272:	4698      	mov	r8, r3
 8001274:	1909      	adds	r1, r1, r4
 8001276:	e5f6      	b.n	8000e66 <__aeabi_ddiv+0x12e>
 8001278:	4b24      	ldr	r3, [pc, #144]	; (800130c <__aeabi_ddiv+0x5d4>)
 800127a:	0028      	movs	r0, r5
 800127c:	445b      	add	r3, fp
 800127e:	4641      	mov	r1, r8
 8001280:	409d      	lsls	r5, r3
 8001282:	4099      	lsls	r1, r3
 8001284:	40d0      	lsrs	r0, r2
 8001286:	1e6b      	subs	r3, r5, #1
 8001288:	419d      	sbcs	r5, r3
 800128a:	4643      	mov	r3, r8
 800128c:	4301      	orrs	r1, r0
 800128e:	4329      	orrs	r1, r5
 8001290:	40d3      	lsrs	r3, r2
 8001292:	074a      	lsls	r2, r1, #29
 8001294:	d100      	bne.n	8001298 <__aeabi_ddiv+0x560>
 8001296:	e755      	b.n	8001144 <__aeabi_ddiv+0x40c>
 8001298:	220f      	movs	r2, #15
 800129a:	400a      	ands	r2, r1
 800129c:	2a04      	cmp	r2, #4
 800129e:	d000      	beq.n	80012a2 <__aeabi_ddiv+0x56a>
 80012a0:	e74a      	b.n	8001138 <__aeabi_ddiv+0x400>
 80012a2:	e74f      	b.n	8001144 <__aeabi_ddiv+0x40c>
 80012a4:	0015      	movs	r5, r2
 80012a6:	4286      	cmp	r6, r0
 80012a8:	d000      	beq.n	80012ac <__aeabi_ddiv+0x574>
 80012aa:	e66d      	b.n	8000f88 <__aeabi_ddiv+0x250>
 80012ac:	9a00      	ldr	r2, [sp, #0]
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d000      	beq.n	80012b4 <__aeabi_ddiv+0x57c>
 80012b2:	e669      	b.n	8000f88 <__aeabi_ddiv+0x250>
 80012b4:	e66a      	b.n	8000f8c <__aeabi_ddiv+0x254>
 80012b6:	4b16      	ldr	r3, [pc, #88]	; (8001310 <__aeabi_ddiv+0x5d8>)
 80012b8:	445b      	add	r3, fp
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	dc00      	bgt.n	80012c0 <__aeabi_ddiv+0x588>
 80012be:	e713      	b.n	80010e8 <__aeabi_ddiv+0x3b0>
 80012c0:	2501      	movs	r5, #1
 80012c2:	2100      	movs	r1, #0
 80012c4:	44a8      	add	r8, r5
 80012c6:	e66a      	b.n	8000f9e <__aeabi_ddiv+0x266>
 80012c8:	075d      	lsls	r5, r3, #29
 80012ca:	025b      	lsls	r3, r3, #9
 80012cc:	0b1a      	lsrs	r2, r3, #12
 80012ce:	08c9      	lsrs	r1, r1, #3
 80012d0:	2300      	movs	r3, #0
 80012d2:	430d      	orrs	r5, r1
 80012d4:	e587      	b.n	8000de6 <__aeabi_ddiv+0xae>
 80012d6:	9900      	ldr	r1, [sp, #0]
 80012d8:	3d02      	subs	r5, #2
 80012da:	004a      	lsls	r2, r1, #1
 80012dc:	428a      	cmp	r2, r1
 80012de:	41bf      	sbcs	r7, r7
 80012e0:	427f      	negs	r7, r7
 80012e2:	193f      	adds	r7, r7, r4
 80012e4:	19f6      	adds	r6, r6, r7
 80012e6:	9200      	str	r2, [sp, #0]
 80012e8:	e7dd      	b.n	80012a6 <__aeabi_ddiv+0x56e>
 80012ea:	2280      	movs	r2, #128	; 0x80
 80012ec:	4643      	mov	r3, r8
 80012ee:	0312      	lsls	r2, r2, #12
 80012f0:	431a      	orrs	r2, r3
 80012f2:	0312      	lsls	r2, r2, #12
 80012f4:	4b03      	ldr	r3, [pc, #12]	; (8001304 <__aeabi_ddiv+0x5cc>)
 80012f6:	0b12      	lsrs	r2, r2, #12
 80012f8:	e575      	b.n	8000de6 <__aeabi_ddiv+0xae>
 80012fa:	9900      	ldr	r1, [sp, #0]
 80012fc:	4299      	cmp	r1, r3
 80012fe:	d3ea      	bcc.n	80012d6 <__aeabi_ddiv+0x59e>
 8001300:	0015      	movs	r5, r2
 8001302:	e7d3      	b.n	80012ac <__aeabi_ddiv+0x574>
 8001304:	000007ff 	.word	0x000007ff
 8001308:	0000043e 	.word	0x0000043e
 800130c:	0000041e 	.word	0x0000041e
 8001310:	000003ff 	.word	0x000003ff

08001314 <__eqdf2>:
 8001314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001316:	464e      	mov	r6, r9
 8001318:	4645      	mov	r5, r8
 800131a:	46de      	mov	lr, fp
 800131c:	4657      	mov	r7, sl
 800131e:	4690      	mov	r8, r2
 8001320:	b5e0      	push	{r5, r6, r7, lr}
 8001322:	0017      	movs	r7, r2
 8001324:	031a      	lsls	r2, r3, #12
 8001326:	0b12      	lsrs	r2, r2, #12
 8001328:	0005      	movs	r5, r0
 800132a:	4684      	mov	ip, r0
 800132c:	4819      	ldr	r0, [pc, #100]	; (8001394 <__eqdf2+0x80>)
 800132e:	030e      	lsls	r6, r1, #12
 8001330:	004c      	lsls	r4, r1, #1
 8001332:	4691      	mov	r9, r2
 8001334:	005a      	lsls	r2, r3, #1
 8001336:	0fdb      	lsrs	r3, r3, #31
 8001338:	469b      	mov	fp, r3
 800133a:	0b36      	lsrs	r6, r6, #12
 800133c:	0d64      	lsrs	r4, r4, #21
 800133e:	0fc9      	lsrs	r1, r1, #31
 8001340:	0d52      	lsrs	r2, r2, #21
 8001342:	4284      	cmp	r4, r0
 8001344:	d019      	beq.n	800137a <__eqdf2+0x66>
 8001346:	4282      	cmp	r2, r0
 8001348:	d010      	beq.n	800136c <__eqdf2+0x58>
 800134a:	2001      	movs	r0, #1
 800134c:	4294      	cmp	r4, r2
 800134e:	d10e      	bne.n	800136e <__eqdf2+0x5a>
 8001350:	454e      	cmp	r6, r9
 8001352:	d10c      	bne.n	800136e <__eqdf2+0x5a>
 8001354:	2001      	movs	r0, #1
 8001356:	45c4      	cmp	ip, r8
 8001358:	d109      	bne.n	800136e <__eqdf2+0x5a>
 800135a:	4559      	cmp	r1, fp
 800135c:	d017      	beq.n	800138e <__eqdf2+0x7a>
 800135e:	2c00      	cmp	r4, #0
 8001360:	d105      	bne.n	800136e <__eqdf2+0x5a>
 8001362:	0030      	movs	r0, r6
 8001364:	4328      	orrs	r0, r5
 8001366:	1e43      	subs	r3, r0, #1
 8001368:	4198      	sbcs	r0, r3
 800136a:	e000      	b.n	800136e <__eqdf2+0x5a>
 800136c:	2001      	movs	r0, #1
 800136e:	bcf0      	pop	{r4, r5, r6, r7}
 8001370:	46bb      	mov	fp, r7
 8001372:	46b2      	mov	sl, r6
 8001374:	46a9      	mov	r9, r5
 8001376:	46a0      	mov	r8, r4
 8001378:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800137a:	0033      	movs	r3, r6
 800137c:	2001      	movs	r0, #1
 800137e:	432b      	orrs	r3, r5
 8001380:	d1f5      	bne.n	800136e <__eqdf2+0x5a>
 8001382:	42a2      	cmp	r2, r4
 8001384:	d1f3      	bne.n	800136e <__eqdf2+0x5a>
 8001386:	464b      	mov	r3, r9
 8001388:	433b      	orrs	r3, r7
 800138a:	d1f0      	bne.n	800136e <__eqdf2+0x5a>
 800138c:	e7e2      	b.n	8001354 <__eqdf2+0x40>
 800138e:	2000      	movs	r0, #0
 8001390:	e7ed      	b.n	800136e <__eqdf2+0x5a>
 8001392:	46c0      	nop			; (mov r8, r8)
 8001394:	000007ff 	.word	0x000007ff

08001398 <__gedf2>:
 8001398:	b5f0      	push	{r4, r5, r6, r7, lr}
 800139a:	4647      	mov	r7, r8
 800139c:	46ce      	mov	lr, r9
 800139e:	0004      	movs	r4, r0
 80013a0:	0018      	movs	r0, r3
 80013a2:	0016      	movs	r6, r2
 80013a4:	031b      	lsls	r3, r3, #12
 80013a6:	0b1b      	lsrs	r3, r3, #12
 80013a8:	4d2d      	ldr	r5, [pc, #180]	; (8001460 <__gedf2+0xc8>)
 80013aa:	004a      	lsls	r2, r1, #1
 80013ac:	4699      	mov	r9, r3
 80013ae:	b580      	push	{r7, lr}
 80013b0:	0043      	lsls	r3, r0, #1
 80013b2:	030f      	lsls	r7, r1, #12
 80013b4:	46a4      	mov	ip, r4
 80013b6:	46b0      	mov	r8, r6
 80013b8:	0b3f      	lsrs	r7, r7, #12
 80013ba:	0d52      	lsrs	r2, r2, #21
 80013bc:	0fc9      	lsrs	r1, r1, #31
 80013be:	0d5b      	lsrs	r3, r3, #21
 80013c0:	0fc0      	lsrs	r0, r0, #31
 80013c2:	42aa      	cmp	r2, r5
 80013c4:	d021      	beq.n	800140a <__gedf2+0x72>
 80013c6:	42ab      	cmp	r3, r5
 80013c8:	d013      	beq.n	80013f2 <__gedf2+0x5a>
 80013ca:	2a00      	cmp	r2, #0
 80013cc:	d122      	bne.n	8001414 <__gedf2+0x7c>
 80013ce:	433c      	orrs	r4, r7
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d102      	bne.n	80013da <__gedf2+0x42>
 80013d4:	464d      	mov	r5, r9
 80013d6:	432e      	orrs	r6, r5
 80013d8:	d022      	beq.n	8001420 <__gedf2+0x88>
 80013da:	2c00      	cmp	r4, #0
 80013dc:	d010      	beq.n	8001400 <__gedf2+0x68>
 80013de:	4281      	cmp	r1, r0
 80013e0:	d022      	beq.n	8001428 <__gedf2+0x90>
 80013e2:	2002      	movs	r0, #2
 80013e4:	3901      	subs	r1, #1
 80013e6:	4008      	ands	r0, r1
 80013e8:	3801      	subs	r0, #1
 80013ea:	bcc0      	pop	{r6, r7}
 80013ec:	46b9      	mov	r9, r7
 80013ee:	46b0      	mov	r8, r6
 80013f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013f2:	464d      	mov	r5, r9
 80013f4:	432e      	orrs	r6, r5
 80013f6:	d129      	bne.n	800144c <__gedf2+0xb4>
 80013f8:	2a00      	cmp	r2, #0
 80013fa:	d1f0      	bne.n	80013de <__gedf2+0x46>
 80013fc:	433c      	orrs	r4, r7
 80013fe:	d1ee      	bne.n	80013de <__gedf2+0x46>
 8001400:	2800      	cmp	r0, #0
 8001402:	d1f2      	bne.n	80013ea <__gedf2+0x52>
 8001404:	2001      	movs	r0, #1
 8001406:	4240      	negs	r0, r0
 8001408:	e7ef      	b.n	80013ea <__gedf2+0x52>
 800140a:	003d      	movs	r5, r7
 800140c:	4325      	orrs	r5, r4
 800140e:	d11d      	bne.n	800144c <__gedf2+0xb4>
 8001410:	4293      	cmp	r3, r2
 8001412:	d0ee      	beq.n	80013f2 <__gedf2+0x5a>
 8001414:	2b00      	cmp	r3, #0
 8001416:	d1e2      	bne.n	80013de <__gedf2+0x46>
 8001418:	464c      	mov	r4, r9
 800141a:	4326      	orrs	r6, r4
 800141c:	d1df      	bne.n	80013de <__gedf2+0x46>
 800141e:	e7e0      	b.n	80013e2 <__gedf2+0x4a>
 8001420:	2000      	movs	r0, #0
 8001422:	2c00      	cmp	r4, #0
 8001424:	d0e1      	beq.n	80013ea <__gedf2+0x52>
 8001426:	e7dc      	b.n	80013e2 <__gedf2+0x4a>
 8001428:	429a      	cmp	r2, r3
 800142a:	dc0a      	bgt.n	8001442 <__gedf2+0xaa>
 800142c:	dbe8      	blt.n	8001400 <__gedf2+0x68>
 800142e:	454f      	cmp	r7, r9
 8001430:	d8d7      	bhi.n	80013e2 <__gedf2+0x4a>
 8001432:	d00e      	beq.n	8001452 <__gedf2+0xba>
 8001434:	2000      	movs	r0, #0
 8001436:	454f      	cmp	r7, r9
 8001438:	d2d7      	bcs.n	80013ea <__gedf2+0x52>
 800143a:	2900      	cmp	r1, #0
 800143c:	d0e2      	beq.n	8001404 <__gedf2+0x6c>
 800143e:	0008      	movs	r0, r1
 8001440:	e7d3      	b.n	80013ea <__gedf2+0x52>
 8001442:	4243      	negs	r3, r0
 8001444:	4158      	adcs	r0, r3
 8001446:	0040      	lsls	r0, r0, #1
 8001448:	3801      	subs	r0, #1
 800144a:	e7ce      	b.n	80013ea <__gedf2+0x52>
 800144c:	2002      	movs	r0, #2
 800144e:	4240      	negs	r0, r0
 8001450:	e7cb      	b.n	80013ea <__gedf2+0x52>
 8001452:	45c4      	cmp	ip, r8
 8001454:	d8c5      	bhi.n	80013e2 <__gedf2+0x4a>
 8001456:	2000      	movs	r0, #0
 8001458:	45c4      	cmp	ip, r8
 800145a:	d2c6      	bcs.n	80013ea <__gedf2+0x52>
 800145c:	e7ed      	b.n	800143a <__gedf2+0xa2>
 800145e:	46c0      	nop			; (mov r8, r8)
 8001460:	000007ff 	.word	0x000007ff

08001464 <__ledf2>:
 8001464:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001466:	4647      	mov	r7, r8
 8001468:	46ce      	mov	lr, r9
 800146a:	0004      	movs	r4, r0
 800146c:	0018      	movs	r0, r3
 800146e:	0016      	movs	r6, r2
 8001470:	031b      	lsls	r3, r3, #12
 8001472:	0b1b      	lsrs	r3, r3, #12
 8001474:	4d2c      	ldr	r5, [pc, #176]	; (8001528 <__ledf2+0xc4>)
 8001476:	004a      	lsls	r2, r1, #1
 8001478:	4699      	mov	r9, r3
 800147a:	b580      	push	{r7, lr}
 800147c:	0043      	lsls	r3, r0, #1
 800147e:	030f      	lsls	r7, r1, #12
 8001480:	46a4      	mov	ip, r4
 8001482:	46b0      	mov	r8, r6
 8001484:	0b3f      	lsrs	r7, r7, #12
 8001486:	0d52      	lsrs	r2, r2, #21
 8001488:	0fc9      	lsrs	r1, r1, #31
 800148a:	0d5b      	lsrs	r3, r3, #21
 800148c:	0fc0      	lsrs	r0, r0, #31
 800148e:	42aa      	cmp	r2, r5
 8001490:	d00d      	beq.n	80014ae <__ledf2+0x4a>
 8001492:	42ab      	cmp	r3, r5
 8001494:	d010      	beq.n	80014b8 <__ledf2+0x54>
 8001496:	2a00      	cmp	r2, #0
 8001498:	d127      	bne.n	80014ea <__ledf2+0x86>
 800149a:	433c      	orrs	r4, r7
 800149c:	2b00      	cmp	r3, #0
 800149e:	d111      	bne.n	80014c4 <__ledf2+0x60>
 80014a0:	464d      	mov	r5, r9
 80014a2:	432e      	orrs	r6, r5
 80014a4:	d10e      	bne.n	80014c4 <__ledf2+0x60>
 80014a6:	2000      	movs	r0, #0
 80014a8:	2c00      	cmp	r4, #0
 80014aa:	d015      	beq.n	80014d8 <__ledf2+0x74>
 80014ac:	e00e      	b.n	80014cc <__ledf2+0x68>
 80014ae:	003d      	movs	r5, r7
 80014b0:	4325      	orrs	r5, r4
 80014b2:	d110      	bne.n	80014d6 <__ledf2+0x72>
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d118      	bne.n	80014ea <__ledf2+0x86>
 80014b8:	464d      	mov	r5, r9
 80014ba:	432e      	orrs	r6, r5
 80014bc:	d10b      	bne.n	80014d6 <__ledf2+0x72>
 80014be:	2a00      	cmp	r2, #0
 80014c0:	d102      	bne.n	80014c8 <__ledf2+0x64>
 80014c2:	433c      	orrs	r4, r7
 80014c4:	2c00      	cmp	r4, #0
 80014c6:	d00b      	beq.n	80014e0 <__ledf2+0x7c>
 80014c8:	4281      	cmp	r1, r0
 80014ca:	d014      	beq.n	80014f6 <__ledf2+0x92>
 80014cc:	2002      	movs	r0, #2
 80014ce:	3901      	subs	r1, #1
 80014d0:	4008      	ands	r0, r1
 80014d2:	3801      	subs	r0, #1
 80014d4:	e000      	b.n	80014d8 <__ledf2+0x74>
 80014d6:	2002      	movs	r0, #2
 80014d8:	bcc0      	pop	{r6, r7}
 80014da:	46b9      	mov	r9, r7
 80014dc:	46b0      	mov	r8, r6
 80014de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014e0:	2800      	cmp	r0, #0
 80014e2:	d1f9      	bne.n	80014d8 <__ledf2+0x74>
 80014e4:	2001      	movs	r0, #1
 80014e6:	4240      	negs	r0, r0
 80014e8:	e7f6      	b.n	80014d8 <__ledf2+0x74>
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d1ec      	bne.n	80014c8 <__ledf2+0x64>
 80014ee:	464c      	mov	r4, r9
 80014f0:	4326      	orrs	r6, r4
 80014f2:	d1e9      	bne.n	80014c8 <__ledf2+0x64>
 80014f4:	e7ea      	b.n	80014cc <__ledf2+0x68>
 80014f6:	429a      	cmp	r2, r3
 80014f8:	dd04      	ble.n	8001504 <__ledf2+0xa0>
 80014fa:	4243      	negs	r3, r0
 80014fc:	4158      	adcs	r0, r3
 80014fe:	0040      	lsls	r0, r0, #1
 8001500:	3801      	subs	r0, #1
 8001502:	e7e9      	b.n	80014d8 <__ledf2+0x74>
 8001504:	429a      	cmp	r2, r3
 8001506:	dbeb      	blt.n	80014e0 <__ledf2+0x7c>
 8001508:	454f      	cmp	r7, r9
 800150a:	d8df      	bhi.n	80014cc <__ledf2+0x68>
 800150c:	d006      	beq.n	800151c <__ledf2+0xb8>
 800150e:	2000      	movs	r0, #0
 8001510:	454f      	cmp	r7, r9
 8001512:	d2e1      	bcs.n	80014d8 <__ledf2+0x74>
 8001514:	2900      	cmp	r1, #0
 8001516:	d0e5      	beq.n	80014e4 <__ledf2+0x80>
 8001518:	0008      	movs	r0, r1
 800151a:	e7dd      	b.n	80014d8 <__ledf2+0x74>
 800151c:	45c4      	cmp	ip, r8
 800151e:	d8d5      	bhi.n	80014cc <__ledf2+0x68>
 8001520:	2000      	movs	r0, #0
 8001522:	45c4      	cmp	ip, r8
 8001524:	d2d8      	bcs.n	80014d8 <__ledf2+0x74>
 8001526:	e7f5      	b.n	8001514 <__ledf2+0xb0>
 8001528:	000007ff 	.word	0x000007ff

0800152c <__aeabi_dmul>:
 800152c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800152e:	4645      	mov	r5, r8
 8001530:	46de      	mov	lr, fp
 8001532:	4657      	mov	r7, sl
 8001534:	464e      	mov	r6, r9
 8001536:	b5e0      	push	{r5, r6, r7, lr}
 8001538:	001f      	movs	r7, r3
 800153a:	030b      	lsls	r3, r1, #12
 800153c:	0b1b      	lsrs	r3, r3, #12
 800153e:	469b      	mov	fp, r3
 8001540:	004d      	lsls	r5, r1, #1
 8001542:	0fcb      	lsrs	r3, r1, #31
 8001544:	0004      	movs	r4, r0
 8001546:	4691      	mov	r9, r2
 8001548:	4698      	mov	r8, r3
 800154a:	b087      	sub	sp, #28
 800154c:	0d6d      	lsrs	r5, r5, #21
 800154e:	d100      	bne.n	8001552 <__aeabi_dmul+0x26>
 8001550:	e1cd      	b.n	80018ee <__aeabi_dmul+0x3c2>
 8001552:	4bce      	ldr	r3, [pc, #824]	; (800188c <__aeabi_dmul+0x360>)
 8001554:	429d      	cmp	r5, r3
 8001556:	d100      	bne.n	800155a <__aeabi_dmul+0x2e>
 8001558:	e1e9      	b.n	800192e <__aeabi_dmul+0x402>
 800155a:	465a      	mov	r2, fp
 800155c:	0f43      	lsrs	r3, r0, #29
 800155e:	00d2      	lsls	r2, r2, #3
 8001560:	4313      	orrs	r3, r2
 8001562:	2280      	movs	r2, #128	; 0x80
 8001564:	0412      	lsls	r2, r2, #16
 8001566:	431a      	orrs	r2, r3
 8001568:	00c3      	lsls	r3, r0, #3
 800156a:	469a      	mov	sl, r3
 800156c:	4bc8      	ldr	r3, [pc, #800]	; (8001890 <__aeabi_dmul+0x364>)
 800156e:	4693      	mov	fp, r2
 8001570:	469c      	mov	ip, r3
 8001572:	2300      	movs	r3, #0
 8001574:	2600      	movs	r6, #0
 8001576:	4465      	add	r5, ip
 8001578:	9300      	str	r3, [sp, #0]
 800157a:	033c      	lsls	r4, r7, #12
 800157c:	007b      	lsls	r3, r7, #1
 800157e:	4648      	mov	r0, r9
 8001580:	0b24      	lsrs	r4, r4, #12
 8001582:	0d5b      	lsrs	r3, r3, #21
 8001584:	0fff      	lsrs	r7, r7, #31
 8001586:	2b00      	cmp	r3, #0
 8001588:	d100      	bne.n	800158c <__aeabi_dmul+0x60>
 800158a:	e189      	b.n	80018a0 <__aeabi_dmul+0x374>
 800158c:	4abf      	ldr	r2, [pc, #764]	; (800188c <__aeabi_dmul+0x360>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d019      	beq.n	80015c6 <__aeabi_dmul+0x9a>
 8001592:	0f42      	lsrs	r2, r0, #29
 8001594:	00e4      	lsls	r4, r4, #3
 8001596:	4322      	orrs	r2, r4
 8001598:	2480      	movs	r4, #128	; 0x80
 800159a:	0424      	lsls	r4, r4, #16
 800159c:	4314      	orrs	r4, r2
 800159e:	4abc      	ldr	r2, [pc, #752]	; (8001890 <__aeabi_dmul+0x364>)
 80015a0:	2100      	movs	r1, #0
 80015a2:	4694      	mov	ip, r2
 80015a4:	4642      	mov	r2, r8
 80015a6:	4463      	add	r3, ip
 80015a8:	195b      	adds	r3, r3, r5
 80015aa:	9301      	str	r3, [sp, #4]
 80015ac:	9b01      	ldr	r3, [sp, #4]
 80015ae:	407a      	eors	r2, r7
 80015b0:	3301      	adds	r3, #1
 80015b2:	00c0      	lsls	r0, r0, #3
 80015b4:	b2d2      	uxtb	r2, r2
 80015b6:	9302      	str	r3, [sp, #8]
 80015b8:	2e0a      	cmp	r6, #10
 80015ba:	dd1c      	ble.n	80015f6 <__aeabi_dmul+0xca>
 80015bc:	003a      	movs	r2, r7
 80015be:	2e0b      	cmp	r6, #11
 80015c0:	d05e      	beq.n	8001680 <__aeabi_dmul+0x154>
 80015c2:	4647      	mov	r7, r8
 80015c4:	e056      	b.n	8001674 <__aeabi_dmul+0x148>
 80015c6:	4649      	mov	r1, r9
 80015c8:	4bb0      	ldr	r3, [pc, #704]	; (800188c <__aeabi_dmul+0x360>)
 80015ca:	4321      	orrs	r1, r4
 80015cc:	18eb      	adds	r3, r5, r3
 80015ce:	9301      	str	r3, [sp, #4]
 80015d0:	2900      	cmp	r1, #0
 80015d2:	d12a      	bne.n	800162a <__aeabi_dmul+0xfe>
 80015d4:	2080      	movs	r0, #128	; 0x80
 80015d6:	2202      	movs	r2, #2
 80015d8:	0100      	lsls	r0, r0, #4
 80015da:	002b      	movs	r3, r5
 80015dc:	4684      	mov	ip, r0
 80015de:	4316      	orrs	r6, r2
 80015e0:	4642      	mov	r2, r8
 80015e2:	4463      	add	r3, ip
 80015e4:	407a      	eors	r2, r7
 80015e6:	b2d2      	uxtb	r2, r2
 80015e8:	9302      	str	r3, [sp, #8]
 80015ea:	2e0a      	cmp	r6, #10
 80015ec:	dd00      	ble.n	80015f0 <__aeabi_dmul+0xc4>
 80015ee:	e231      	b.n	8001a54 <__aeabi_dmul+0x528>
 80015f0:	2000      	movs	r0, #0
 80015f2:	2400      	movs	r4, #0
 80015f4:	2102      	movs	r1, #2
 80015f6:	2e02      	cmp	r6, #2
 80015f8:	dc26      	bgt.n	8001648 <__aeabi_dmul+0x11c>
 80015fa:	3e01      	subs	r6, #1
 80015fc:	2e01      	cmp	r6, #1
 80015fe:	d852      	bhi.n	80016a6 <__aeabi_dmul+0x17a>
 8001600:	2902      	cmp	r1, #2
 8001602:	d04c      	beq.n	800169e <__aeabi_dmul+0x172>
 8001604:	2901      	cmp	r1, #1
 8001606:	d000      	beq.n	800160a <__aeabi_dmul+0xde>
 8001608:	e118      	b.n	800183c <__aeabi_dmul+0x310>
 800160a:	2300      	movs	r3, #0
 800160c:	2400      	movs	r4, #0
 800160e:	2500      	movs	r5, #0
 8001610:	051b      	lsls	r3, r3, #20
 8001612:	4323      	orrs	r3, r4
 8001614:	07d2      	lsls	r2, r2, #31
 8001616:	4313      	orrs	r3, r2
 8001618:	0028      	movs	r0, r5
 800161a:	0019      	movs	r1, r3
 800161c:	b007      	add	sp, #28
 800161e:	bcf0      	pop	{r4, r5, r6, r7}
 8001620:	46bb      	mov	fp, r7
 8001622:	46b2      	mov	sl, r6
 8001624:	46a9      	mov	r9, r5
 8001626:	46a0      	mov	r8, r4
 8001628:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800162a:	2180      	movs	r1, #128	; 0x80
 800162c:	2203      	movs	r2, #3
 800162e:	0109      	lsls	r1, r1, #4
 8001630:	002b      	movs	r3, r5
 8001632:	468c      	mov	ip, r1
 8001634:	4316      	orrs	r6, r2
 8001636:	4642      	mov	r2, r8
 8001638:	4463      	add	r3, ip
 800163a:	407a      	eors	r2, r7
 800163c:	b2d2      	uxtb	r2, r2
 800163e:	9302      	str	r3, [sp, #8]
 8001640:	2e0a      	cmp	r6, #10
 8001642:	dd00      	ble.n	8001646 <__aeabi_dmul+0x11a>
 8001644:	e228      	b.n	8001a98 <__aeabi_dmul+0x56c>
 8001646:	2103      	movs	r1, #3
 8001648:	2501      	movs	r5, #1
 800164a:	40b5      	lsls	r5, r6
 800164c:	46ac      	mov	ip, r5
 800164e:	26a6      	movs	r6, #166	; 0xa6
 8001650:	4663      	mov	r3, ip
 8001652:	00f6      	lsls	r6, r6, #3
 8001654:	4035      	ands	r5, r6
 8001656:	4233      	tst	r3, r6
 8001658:	d10b      	bne.n	8001672 <__aeabi_dmul+0x146>
 800165a:	2690      	movs	r6, #144	; 0x90
 800165c:	00b6      	lsls	r6, r6, #2
 800165e:	4233      	tst	r3, r6
 8001660:	d118      	bne.n	8001694 <__aeabi_dmul+0x168>
 8001662:	3eb9      	subs	r6, #185	; 0xb9
 8001664:	3eff      	subs	r6, #255	; 0xff
 8001666:	421e      	tst	r6, r3
 8001668:	d01d      	beq.n	80016a6 <__aeabi_dmul+0x17a>
 800166a:	46a3      	mov	fp, r4
 800166c:	4682      	mov	sl, r0
 800166e:	9100      	str	r1, [sp, #0]
 8001670:	e000      	b.n	8001674 <__aeabi_dmul+0x148>
 8001672:	0017      	movs	r7, r2
 8001674:	9900      	ldr	r1, [sp, #0]
 8001676:	003a      	movs	r2, r7
 8001678:	2902      	cmp	r1, #2
 800167a:	d010      	beq.n	800169e <__aeabi_dmul+0x172>
 800167c:	465c      	mov	r4, fp
 800167e:	4650      	mov	r0, sl
 8001680:	2903      	cmp	r1, #3
 8001682:	d1bf      	bne.n	8001604 <__aeabi_dmul+0xd8>
 8001684:	2380      	movs	r3, #128	; 0x80
 8001686:	031b      	lsls	r3, r3, #12
 8001688:	431c      	orrs	r4, r3
 800168a:	0324      	lsls	r4, r4, #12
 800168c:	0005      	movs	r5, r0
 800168e:	4b7f      	ldr	r3, [pc, #508]	; (800188c <__aeabi_dmul+0x360>)
 8001690:	0b24      	lsrs	r4, r4, #12
 8001692:	e7bd      	b.n	8001610 <__aeabi_dmul+0xe4>
 8001694:	2480      	movs	r4, #128	; 0x80
 8001696:	2200      	movs	r2, #0
 8001698:	4b7c      	ldr	r3, [pc, #496]	; (800188c <__aeabi_dmul+0x360>)
 800169a:	0324      	lsls	r4, r4, #12
 800169c:	e7b8      	b.n	8001610 <__aeabi_dmul+0xe4>
 800169e:	2400      	movs	r4, #0
 80016a0:	2500      	movs	r5, #0
 80016a2:	4b7a      	ldr	r3, [pc, #488]	; (800188c <__aeabi_dmul+0x360>)
 80016a4:	e7b4      	b.n	8001610 <__aeabi_dmul+0xe4>
 80016a6:	4653      	mov	r3, sl
 80016a8:	041e      	lsls	r6, r3, #16
 80016aa:	0c36      	lsrs	r6, r6, #16
 80016ac:	0c1f      	lsrs	r7, r3, #16
 80016ae:	0033      	movs	r3, r6
 80016b0:	0c01      	lsrs	r1, r0, #16
 80016b2:	0400      	lsls	r0, r0, #16
 80016b4:	0c00      	lsrs	r0, r0, #16
 80016b6:	4343      	muls	r3, r0
 80016b8:	4698      	mov	r8, r3
 80016ba:	0003      	movs	r3, r0
 80016bc:	437b      	muls	r3, r7
 80016be:	4699      	mov	r9, r3
 80016c0:	0033      	movs	r3, r6
 80016c2:	434b      	muls	r3, r1
 80016c4:	469c      	mov	ip, r3
 80016c6:	4643      	mov	r3, r8
 80016c8:	000d      	movs	r5, r1
 80016ca:	0c1b      	lsrs	r3, r3, #16
 80016cc:	469a      	mov	sl, r3
 80016ce:	437d      	muls	r5, r7
 80016d0:	44cc      	add	ip, r9
 80016d2:	44d4      	add	ip, sl
 80016d4:	9500      	str	r5, [sp, #0]
 80016d6:	45e1      	cmp	r9, ip
 80016d8:	d904      	bls.n	80016e4 <__aeabi_dmul+0x1b8>
 80016da:	2380      	movs	r3, #128	; 0x80
 80016dc:	025b      	lsls	r3, r3, #9
 80016de:	4699      	mov	r9, r3
 80016e0:	444d      	add	r5, r9
 80016e2:	9500      	str	r5, [sp, #0]
 80016e4:	4663      	mov	r3, ip
 80016e6:	0c1b      	lsrs	r3, r3, #16
 80016e8:	001d      	movs	r5, r3
 80016ea:	4663      	mov	r3, ip
 80016ec:	041b      	lsls	r3, r3, #16
 80016ee:	469c      	mov	ip, r3
 80016f0:	4643      	mov	r3, r8
 80016f2:	041b      	lsls	r3, r3, #16
 80016f4:	0c1b      	lsrs	r3, r3, #16
 80016f6:	4698      	mov	r8, r3
 80016f8:	4663      	mov	r3, ip
 80016fa:	4443      	add	r3, r8
 80016fc:	9303      	str	r3, [sp, #12]
 80016fe:	0c23      	lsrs	r3, r4, #16
 8001700:	4698      	mov	r8, r3
 8001702:	0033      	movs	r3, r6
 8001704:	0424      	lsls	r4, r4, #16
 8001706:	0c24      	lsrs	r4, r4, #16
 8001708:	4363      	muls	r3, r4
 800170a:	469c      	mov	ip, r3
 800170c:	0023      	movs	r3, r4
 800170e:	437b      	muls	r3, r7
 8001710:	4699      	mov	r9, r3
 8001712:	4643      	mov	r3, r8
 8001714:	435e      	muls	r6, r3
 8001716:	435f      	muls	r7, r3
 8001718:	444e      	add	r6, r9
 800171a:	4663      	mov	r3, ip
 800171c:	46b2      	mov	sl, r6
 800171e:	0c1e      	lsrs	r6, r3, #16
 8001720:	4456      	add	r6, sl
 8001722:	45b1      	cmp	r9, r6
 8001724:	d903      	bls.n	800172e <__aeabi_dmul+0x202>
 8001726:	2380      	movs	r3, #128	; 0x80
 8001728:	025b      	lsls	r3, r3, #9
 800172a:	4699      	mov	r9, r3
 800172c:	444f      	add	r7, r9
 800172e:	0c33      	lsrs	r3, r6, #16
 8001730:	4699      	mov	r9, r3
 8001732:	003b      	movs	r3, r7
 8001734:	444b      	add	r3, r9
 8001736:	9305      	str	r3, [sp, #20]
 8001738:	4663      	mov	r3, ip
 800173a:	46ac      	mov	ip, r5
 800173c:	041f      	lsls	r7, r3, #16
 800173e:	0c3f      	lsrs	r7, r7, #16
 8001740:	0436      	lsls	r6, r6, #16
 8001742:	19f6      	adds	r6, r6, r7
 8001744:	44b4      	add	ip, r6
 8001746:	4663      	mov	r3, ip
 8001748:	9304      	str	r3, [sp, #16]
 800174a:	465b      	mov	r3, fp
 800174c:	0c1b      	lsrs	r3, r3, #16
 800174e:	469c      	mov	ip, r3
 8001750:	465b      	mov	r3, fp
 8001752:	041f      	lsls	r7, r3, #16
 8001754:	0c3f      	lsrs	r7, r7, #16
 8001756:	003b      	movs	r3, r7
 8001758:	4343      	muls	r3, r0
 800175a:	4699      	mov	r9, r3
 800175c:	4663      	mov	r3, ip
 800175e:	4343      	muls	r3, r0
 8001760:	469a      	mov	sl, r3
 8001762:	464b      	mov	r3, r9
 8001764:	4660      	mov	r0, ip
 8001766:	0c1b      	lsrs	r3, r3, #16
 8001768:	469b      	mov	fp, r3
 800176a:	4348      	muls	r0, r1
 800176c:	4379      	muls	r1, r7
 800176e:	4451      	add	r1, sl
 8001770:	4459      	add	r1, fp
 8001772:	458a      	cmp	sl, r1
 8001774:	d903      	bls.n	800177e <__aeabi_dmul+0x252>
 8001776:	2380      	movs	r3, #128	; 0x80
 8001778:	025b      	lsls	r3, r3, #9
 800177a:	469a      	mov	sl, r3
 800177c:	4450      	add	r0, sl
 800177e:	0c0b      	lsrs	r3, r1, #16
 8001780:	469a      	mov	sl, r3
 8001782:	464b      	mov	r3, r9
 8001784:	041b      	lsls	r3, r3, #16
 8001786:	0c1b      	lsrs	r3, r3, #16
 8001788:	4699      	mov	r9, r3
 800178a:	003b      	movs	r3, r7
 800178c:	4363      	muls	r3, r4
 800178e:	0409      	lsls	r1, r1, #16
 8001790:	4645      	mov	r5, r8
 8001792:	4449      	add	r1, r9
 8001794:	4699      	mov	r9, r3
 8001796:	4663      	mov	r3, ip
 8001798:	435c      	muls	r4, r3
 800179a:	436b      	muls	r3, r5
 800179c:	469c      	mov	ip, r3
 800179e:	464b      	mov	r3, r9
 80017a0:	0c1b      	lsrs	r3, r3, #16
 80017a2:	4698      	mov	r8, r3
 80017a4:	436f      	muls	r7, r5
 80017a6:	193f      	adds	r7, r7, r4
 80017a8:	4447      	add	r7, r8
 80017aa:	4450      	add	r0, sl
 80017ac:	42bc      	cmp	r4, r7
 80017ae:	d903      	bls.n	80017b8 <__aeabi_dmul+0x28c>
 80017b0:	2380      	movs	r3, #128	; 0x80
 80017b2:	025b      	lsls	r3, r3, #9
 80017b4:	4698      	mov	r8, r3
 80017b6:	44c4      	add	ip, r8
 80017b8:	9b04      	ldr	r3, [sp, #16]
 80017ba:	9d00      	ldr	r5, [sp, #0]
 80017bc:	4698      	mov	r8, r3
 80017be:	4445      	add	r5, r8
 80017c0:	42b5      	cmp	r5, r6
 80017c2:	41b6      	sbcs	r6, r6
 80017c4:	4273      	negs	r3, r6
 80017c6:	4698      	mov	r8, r3
 80017c8:	464b      	mov	r3, r9
 80017ca:	041e      	lsls	r6, r3, #16
 80017cc:	9b05      	ldr	r3, [sp, #20]
 80017ce:	043c      	lsls	r4, r7, #16
 80017d0:	4699      	mov	r9, r3
 80017d2:	0c36      	lsrs	r6, r6, #16
 80017d4:	19a4      	adds	r4, r4, r6
 80017d6:	444c      	add	r4, r9
 80017d8:	46a1      	mov	r9, r4
 80017da:	4683      	mov	fp, r0
 80017dc:	186e      	adds	r6, r5, r1
 80017de:	44c1      	add	r9, r8
 80017e0:	428e      	cmp	r6, r1
 80017e2:	4189      	sbcs	r1, r1
 80017e4:	44cb      	add	fp, r9
 80017e6:	465d      	mov	r5, fp
 80017e8:	4249      	negs	r1, r1
 80017ea:	186d      	adds	r5, r5, r1
 80017ec:	429c      	cmp	r4, r3
 80017ee:	41a4      	sbcs	r4, r4
 80017f0:	45c1      	cmp	r9, r8
 80017f2:	419b      	sbcs	r3, r3
 80017f4:	4583      	cmp	fp, r0
 80017f6:	4180      	sbcs	r0, r0
 80017f8:	428d      	cmp	r5, r1
 80017fa:	4189      	sbcs	r1, r1
 80017fc:	425b      	negs	r3, r3
 80017fe:	4264      	negs	r4, r4
 8001800:	431c      	orrs	r4, r3
 8001802:	4240      	negs	r0, r0
 8001804:	9b03      	ldr	r3, [sp, #12]
 8001806:	4249      	negs	r1, r1
 8001808:	4301      	orrs	r1, r0
 800180a:	0270      	lsls	r0, r6, #9
 800180c:	0c3f      	lsrs	r7, r7, #16
 800180e:	4318      	orrs	r0, r3
 8001810:	19e4      	adds	r4, r4, r7
 8001812:	1e47      	subs	r7, r0, #1
 8001814:	41b8      	sbcs	r0, r7
 8001816:	1864      	adds	r4, r4, r1
 8001818:	4464      	add	r4, ip
 800181a:	0df6      	lsrs	r6, r6, #23
 800181c:	0261      	lsls	r1, r4, #9
 800181e:	4330      	orrs	r0, r6
 8001820:	0dec      	lsrs	r4, r5, #23
 8001822:	026e      	lsls	r6, r5, #9
 8001824:	430c      	orrs	r4, r1
 8001826:	4330      	orrs	r0, r6
 8001828:	01c9      	lsls	r1, r1, #7
 800182a:	d400      	bmi.n	800182e <__aeabi_dmul+0x302>
 800182c:	e0f1      	b.n	8001a12 <__aeabi_dmul+0x4e6>
 800182e:	2101      	movs	r1, #1
 8001830:	0843      	lsrs	r3, r0, #1
 8001832:	4001      	ands	r1, r0
 8001834:	430b      	orrs	r3, r1
 8001836:	07e0      	lsls	r0, r4, #31
 8001838:	4318      	orrs	r0, r3
 800183a:	0864      	lsrs	r4, r4, #1
 800183c:	4915      	ldr	r1, [pc, #84]	; (8001894 <__aeabi_dmul+0x368>)
 800183e:	9b02      	ldr	r3, [sp, #8]
 8001840:	468c      	mov	ip, r1
 8001842:	4463      	add	r3, ip
 8001844:	2b00      	cmp	r3, #0
 8001846:	dc00      	bgt.n	800184a <__aeabi_dmul+0x31e>
 8001848:	e097      	b.n	800197a <__aeabi_dmul+0x44e>
 800184a:	0741      	lsls	r1, r0, #29
 800184c:	d009      	beq.n	8001862 <__aeabi_dmul+0x336>
 800184e:	210f      	movs	r1, #15
 8001850:	4001      	ands	r1, r0
 8001852:	2904      	cmp	r1, #4
 8001854:	d005      	beq.n	8001862 <__aeabi_dmul+0x336>
 8001856:	1d01      	adds	r1, r0, #4
 8001858:	4281      	cmp	r1, r0
 800185a:	4180      	sbcs	r0, r0
 800185c:	4240      	negs	r0, r0
 800185e:	1824      	adds	r4, r4, r0
 8001860:	0008      	movs	r0, r1
 8001862:	01e1      	lsls	r1, r4, #7
 8001864:	d506      	bpl.n	8001874 <__aeabi_dmul+0x348>
 8001866:	2180      	movs	r1, #128	; 0x80
 8001868:	00c9      	lsls	r1, r1, #3
 800186a:	468c      	mov	ip, r1
 800186c:	4b0a      	ldr	r3, [pc, #40]	; (8001898 <__aeabi_dmul+0x36c>)
 800186e:	401c      	ands	r4, r3
 8001870:	9b02      	ldr	r3, [sp, #8]
 8001872:	4463      	add	r3, ip
 8001874:	4909      	ldr	r1, [pc, #36]	; (800189c <__aeabi_dmul+0x370>)
 8001876:	428b      	cmp	r3, r1
 8001878:	dd00      	ble.n	800187c <__aeabi_dmul+0x350>
 800187a:	e710      	b.n	800169e <__aeabi_dmul+0x172>
 800187c:	0761      	lsls	r1, r4, #29
 800187e:	08c5      	lsrs	r5, r0, #3
 8001880:	0264      	lsls	r4, r4, #9
 8001882:	055b      	lsls	r3, r3, #21
 8001884:	430d      	orrs	r5, r1
 8001886:	0b24      	lsrs	r4, r4, #12
 8001888:	0d5b      	lsrs	r3, r3, #21
 800188a:	e6c1      	b.n	8001610 <__aeabi_dmul+0xe4>
 800188c:	000007ff 	.word	0x000007ff
 8001890:	fffffc01 	.word	0xfffffc01
 8001894:	000003ff 	.word	0x000003ff
 8001898:	feffffff 	.word	0xfeffffff
 800189c:	000007fe 	.word	0x000007fe
 80018a0:	464b      	mov	r3, r9
 80018a2:	4323      	orrs	r3, r4
 80018a4:	d059      	beq.n	800195a <__aeabi_dmul+0x42e>
 80018a6:	2c00      	cmp	r4, #0
 80018a8:	d100      	bne.n	80018ac <__aeabi_dmul+0x380>
 80018aa:	e0a3      	b.n	80019f4 <__aeabi_dmul+0x4c8>
 80018ac:	0020      	movs	r0, r4
 80018ae:	f000 fdb1 	bl	8002414 <__clzsi2>
 80018b2:	0001      	movs	r1, r0
 80018b4:	0003      	movs	r3, r0
 80018b6:	390b      	subs	r1, #11
 80018b8:	221d      	movs	r2, #29
 80018ba:	1a52      	subs	r2, r2, r1
 80018bc:	4649      	mov	r1, r9
 80018be:	0018      	movs	r0, r3
 80018c0:	40d1      	lsrs	r1, r2
 80018c2:	464a      	mov	r2, r9
 80018c4:	3808      	subs	r0, #8
 80018c6:	4082      	lsls	r2, r0
 80018c8:	4084      	lsls	r4, r0
 80018ca:	0010      	movs	r0, r2
 80018cc:	430c      	orrs	r4, r1
 80018ce:	4a74      	ldr	r2, [pc, #464]	; (8001aa0 <__aeabi_dmul+0x574>)
 80018d0:	1aeb      	subs	r3, r5, r3
 80018d2:	4694      	mov	ip, r2
 80018d4:	4642      	mov	r2, r8
 80018d6:	4463      	add	r3, ip
 80018d8:	9301      	str	r3, [sp, #4]
 80018da:	9b01      	ldr	r3, [sp, #4]
 80018dc:	407a      	eors	r2, r7
 80018de:	3301      	adds	r3, #1
 80018e0:	2100      	movs	r1, #0
 80018e2:	b2d2      	uxtb	r2, r2
 80018e4:	9302      	str	r3, [sp, #8]
 80018e6:	2e0a      	cmp	r6, #10
 80018e8:	dd00      	ble.n	80018ec <__aeabi_dmul+0x3c0>
 80018ea:	e667      	b.n	80015bc <__aeabi_dmul+0x90>
 80018ec:	e683      	b.n	80015f6 <__aeabi_dmul+0xca>
 80018ee:	465b      	mov	r3, fp
 80018f0:	4303      	orrs	r3, r0
 80018f2:	469a      	mov	sl, r3
 80018f4:	d02a      	beq.n	800194c <__aeabi_dmul+0x420>
 80018f6:	465b      	mov	r3, fp
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d06d      	beq.n	80019d8 <__aeabi_dmul+0x4ac>
 80018fc:	4658      	mov	r0, fp
 80018fe:	f000 fd89 	bl	8002414 <__clzsi2>
 8001902:	0001      	movs	r1, r0
 8001904:	0003      	movs	r3, r0
 8001906:	390b      	subs	r1, #11
 8001908:	221d      	movs	r2, #29
 800190a:	1a52      	subs	r2, r2, r1
 800190c:	0021      	movs	r1, r4
 800190e:	0018      	movs	r0, r3
 8001910:	465d      	mov	r5, fp
 8001912:	40d1      	lsrs	r1, r2
 8001914:	3808      	subs	r0, #8
 8001916:	4085      	lsls	r5, r0
 8001918:	000a      	movs	r2, r1
 800191a:	4084      	lsls	r4, r0
 800191c:	432a      	orrs	r2, r5
 800191e:	4693      	mov	fp, r2
 8001920:	46a2      	mov	sl, r4
 8001922:	4d5f      	ldr	r5, [pc, #380]	; (8001aa0 <__aeabi_dmul+0x574>)
 8001924:	2600      	movs	r6, #0
 8001926:	1aed      	subs	r5, r5, r3
 8001928:	2300      	movs	r3, #0
 800192a:	9300      	str	r3, [sp, #0]
 800192c:	e625      	b.n	800157a <__aeabi_dmul+0x4e>
 800192e:	465b      	mov	r3, fp
 8001930:	4303      	orrs	r3, r0
 8001932:	469a      	mov	sl, r3
 8001934:	d105      	bne.n	8001942 <__aeabi_dmul+0x416>
 8001936:	2300      	movs	r3, #0
 8001938:	469b      	mov	fp, r3
 800193a:	3302      	adds	r3, #2
 800193c:	2608      	movs	r6, #8
 800193e:	9300      	str	r3, [sp, #0]
 8001940:	e61b      	b.n	800157a <__aeabi_dmul+0x4e>
 8001942:	2303      	movs	r3, #3
 8001944:	4682      	mov	sl, r0
 8001946:	260c      	movs	r6, #12
 8001948:	9300      	str	r3, [sp, #0]
 800194a:	e616      	b.n	800157a <__aeabi_dmul+0x4e>
 800194c:	2300      	movs	r3, #0
 800194e:	469b      	mov	fp, r3
 8001950:	3301      	adds	r3, #1
 8001952:	2604      	movs	r6, #4
 8001954:	2500      	movs	r5, #0
 8001956:	9300      	str	r3, [sp, #0]
 8001958:	e60f      	b.n	800157a <__aeabi_dmul+0x4e>
 800195a:	4642      	mov	r2, r8
 800195c:	3301      	adds	r3, #1
 800195e:	9501      	str	r5, [sp, #4]
 8001960:	431e      	orrs	r6, r3
 8001962:	9b01      	ldr	r3, [sp, #4]
 8001964:	407a      	eors	r2, r7
 8001966:	3301      	adds	r3, #1
 8001968:	2400      	movs	r4, #0
 800196a:	2000      	movs	r0, #0
 800196c:	2101      	movs	r1, #1
 800196e:	b2d2      	uxtb	r2, r2
 8001970:	9302      	str	r3, [sp, #8]
 8001972:	2e0a      	cmp	r6, #10
 8001974:	dd00      	ble.n	8001978 <__aeabi_dmul+0x44c>
 8001976:	e621      	b.n	80015bc <__aeabi_dmul+0x90>
 8001978:	e63d      	b.n	80015f6 <__aeabi_dmul+0xca>
 800197a:	2101      	movs	r1, #1
 800197c:	1ac9      	subs	r1, r1, r3
 800197e:	2938      	cmp	r1, #56	; 0x38
 8001980:	dd00      	ble.n	8001984 <__aeabi_dmul+0x458>
 8001982:	e642      	b.n	800160a <__aeabi_dmul+0xde>
 8001984:	291f      	cmp	r1, #31
 8001986:	dd47      	ble.n	8001a18 <__aeabi_dmul+0x4ec>
 8001988:	261f      	movs	r6, #31
 800198a:	0025      	movs	r5, r4
 800198c:	4276      	negs	r6, r6
 800198e:	1af3      	subs	r3, r6, r3
 8001990:	40dd      	lsrs	r5, r3
 8001992:	002b      	movs	r3, r5
 8001994:	2920      	cmp	r1, #32
 8001996:	d005      	beq.n	80019a4 <__aeabi_dmul+0x478>
 8001998:	4942      	ldr	r1, [pc, #264]	; (8001aa4 <__aeabi_dmul+0x578>)
 800199a:	9d02      	ldr	r5, [sp, #8]
 800199c:	468c      	mov	ip, r1
 800199e:	4465      	add	r5, ip
 80019a0:	40ac      	lsls	r4, r5
 80019a2:	4320      	orrs	r0, r4
 80019a4:	1e41      	subs	r1, r0, #1
 80019a6:	4188      	sbcs	r0, r1
 80019a8:	4318      	orrs	r0, r3
 80019aa:	2307      	movs	r3, #7
 80019ac:	001d      	movs	r5, r3
 80019ae:	2400      	movs	r4, #0
 80019b0:	4005      	ands	r5, r0
 80019b2:	4203      	tst	r3, r0
 80019b4:	d04a      	beq.n	8001a4c <__aeabi_dmul+0x520>
 80019b6:	230f      	movs	r3, #15
 80019b8:	2400      	movs	r4, #0
 80019ba:	4003      	ands	r3, r0
 80019bc:	2b04      	cmp	r3, #4
 80019be:	d042      	beq.n	8001a46 <__aeabi_dmul+0x51a>
 80019c0:	1d03      	adds	r3, r0, #4
 80019c2:	4283      	cmp	r3, r0
 80019c4:	4180      	sbcs	r0, r0
 80019c6:	4240      	negs	r0, r0
 80019c8:	1824      	adds	r4, r4, r0
 80019ca:	0018      	movs	r0, r3
 80019cc:	0223      	lsls	r3, r4, #8
 80019ce:	d53a      	bpl.n	8001a46 <__aeabi_dmul+0x51a>
 80019d0:	2301      	movs	r3, #1
 80019d2:	2400      	movs	r4, #0
 80019d4:	2500      	movs	r5, #0
 80019d6:	e61b      	b.n	8001610 <__aeabi_dmul+0xe4>
 80019d8:	f000 fd1c 	bl	8002414 <__clzsi2>
 80019dc:	0001      	movs	r1, r0
 80019de:	0003      	movs	r3, r0
 80019e0:	3115      	adds	r1, #21
 80019e2:	3320      	adds	r3, #32
 80019e4:	291c      	cmp	r1, #28
 80019e6:	dd8f      	ble.n	8001908 <__aeabi_dmul+0x3dc>
 80019e8:	3808      	subs	r0, #8
 80019ea:	2200      	movs	r2, #0
 80019ec:	4084      	lsls	r4, r0
 80019ee:	4692      	mov	sl, r2
 80019f0:	46a3      	mov	fp, r4
 80019f2:	e796      	b.n	8001922 <__aeabi_dmul+0x3f6>
 80019f4:	f000 fd0e 	bl	8002414 <__clzsi2>
 80019f8:	0001      	movs	r1, r0
 80019fa:	0003      	movs	r3, r0
 80019fc:	3115      	adds	r1, #21
 80019fe:	3320      	adds	r3, #32
 8001a00:	291c      	cmp	r1, #28
 8001a02:	dc00      	bgt.n	8001a06 <__aeabi_dmul+0x4da>
 8001a04:	e758      	b.n	80018b8 <__aeabi_dmul+0x38c>
 8001a06:	0002      	movs	r2, r0
 8001a08:	464c      	mov	r4, r9
 8001a0a:	3a08      	subs	r2, #8
 8001a0c:	2000      	movs	r0, #0
 8001a0e:	4094      	lsls	r4, r2
 8001a10:	e75d      	b.n	80018ce <__aeabi_dmul+0x3a2>
 8001a12:	9b01      	ldr	r3, [sp, #4]
 8001a14:	9302      	str	r3, [sp, #8]
 8001a16:	e711      	b.n	800183c <__aeabi_dmul+0x310>
 8001a18:	4b23      	ldr	r3, [pc, #140]	; (8001aa8 <__aeabi_dmul+0x57c>)
 8001a1a:	0026      	movs	r6, r4
 8001a1c:	469c      	mov	ip, r3
 8001a1e:	0003      	movs	r3, r0
 8001a20:	9d02      	ldr	r5, [sp, #8]
 8001a22:	40cb      	lsrs	r3, r1
 8001a24:	4465      	add	r5, ip
 8001a26:	40ae      	lsls	r6, r5
 8001a28:	431e      	orrs	r6, r3
 8001a2a:	0003      	movs	r3, r0
 8001a2c:	40ab      	lsls	r3, r5
 8001a2e:	1e58      	subs	r0, r3, #1
 8001a30:	4183      	sbcs	r3, r0
 8001a32:	0030      	movs	r0, r6
 8001a34:	4318      	orrs	r0, r3
 8001a36:	40cc      	lsrs	r4, r1
 8001a38:	0743      	lsls	r3, r0, #29
 8001a3a:	d0c7      	beq.n	80019cc <__aeabi_dmul+0x4a0>
 8001a3c:	230f      	movs	r3, #15
 8001a3e:	4003      	ands	r3, r0
 8001a40:	2b04      	cmp	r3, #4
 8001a42:	d1bd      	bne.n	80019c0 <__aeabi_dmul+0x494>
 8001a44:	e7c2      	b.n	80019cc <__aeabi_dmul+0x4a0>
 8001a46:	0765      	lsls	r5, r4, #29
 8001a48:	0264      	lsls	r4, r4, #9
 8001a4a:	0b24      	lsrs	r4, r4, #12
 8001a4c:	08c0      	lsrs	r0, r0, #3
 8001a4e:	2300      	movs	r3, #0
 8001a50:	4305      	orrs	r5, r0
 8001a52:	e5dd      	b.n	8001610 <__aeabi_dmul+0xe4>
 8001a54:	2500      	movs	r5, #0
 8001a56:	2302      	movs	r3, #2
 8001a58:	2e0f      	cmp	r6, #15
 8001a5a:	d10c      	bne.n	8001a76 <__aeabi_dmul+0x54a>
 8001a5c:	2480      	movs	r4, #128	; 0x80
 8001a5e:	465b      	mov	r3, fp
 8001a60:	0324      	lsls	r4, r4, #12
 8001a62:	4223      	tst	r3, r4
 8001a64:	d00e      	beq.n	8001a84 <__aeabi_dmul+0x558>
 8001a66:	4221      	tst	r1, r4
 8001a68:	d10c      	bne.n	8001a84 <__aeabi_dmul+0x558>
 8001a6a:	430c      	orrs	r4, r1
 8001a6c:	0324      	lsls	r4, r4, #12
 8001a6e:	003a      	movs	r2, r7
 8001a70:	4b0e      	ldr	r3, [pc, #56]	; (8001aac <__aeabi_dmul+0x580>)
 8001a72:	0b24      	lsrs	r4, r4, #12
 8001a74:	e5cc      	b.n	8001610 <__aeabi_dmul+0xe4>
 8001a76:	2e0b      	cmp	r6, #11
 8001a78:	d000      	beq.n	8001a7c <__aeabi_dmul+0x550>
 8001a7a:	e5a2      	b.n	80015c2 <__aeabi_dmul+0x96>
 8001a7c:	468b      	mov	fp, r1
 8001a7e:	46aa      	mov	sl, r5
 8001a80:	9300      	str	r3, [sp, #0]
 8001a82:	e5f7      	b.n	8001674 <__aeabi_dmul+0x148>
 8001a84:	2480      	movs	r4, #128	; 0x80
 8001a86:	465b      	mov	r3, fp
 8001a88:	0324      	lsls	r4, r4, #12
 8001a8a:	431c      	orrs	r4, r3
 8001a8c:	0324      	lsls	r4, r4, #12
 8001a8e:	4642      	mov	r2, r8
 8001a90:	4655      	mov	r5, sl
 8001a92:	4b06      	ldr	r3, [pc, #24]	; (8001aac <__aeabi_dmul+0x580>)
 8001a94:	0b24      	lsrs	r4, r4, #12
 8001a96:	e5bb      	b.n	8001610 <__aeabi_dmul+0xe4>
 8001a98:	464d      	mov	r5, r9
 8001a9a:	0021      	movs	r1, r4
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e7db      	b.n	8001a58 <__aeabi_dmul+0x52c>
 8001aa0:	fffffc0d 	.word	0xfffffc0d
 8001aa4:	0000043e 	.word	0x0000043e
 8001aa8:	0000041e 	.word	0x0000041e
 8001aac:	000007ff 	.word	0x000007ff

08001ab0 <__aeabi_dsub>:
 8001ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ab2:	4657      	mov	r7, sl
 8001ab4:	464e      	mov	r6, r9
 8001ab6:	4645      	mov	r5, r8
 8001ab8:	46de      	mov	lr, fp
 8001aba:	b5e0      	push	{r5, r6, r7, lr}
 8001abc:	000d      	movs	r5, r1
 8001abe:	0004      	movs	r4, r0
 8001ac0:	0019      	movs	r1, r3
 8001ac2:	0010      	movs	r0, r2
 8001ac4:	032b      	lsls	r3, r5, #12
 8001ac6:	0a5b      	lsrs	r3, r3, #9
 8001ac8:	0f62      	lsrs	r2, r4, #29
 8001aca:	431a      	orrs	r2, r3
 8001acc:	00e3      	lsls	r3, r4, #3
 8001ace:	030c      	lsls	r4, r1, #12
 8001ad0:	0a64      	lsrs	r4, r4, #9
 8001ad2:	0f47      	lsrs	r7, r0, #29
 8001ad4:	4327      	orrs	r7, r4
 8001ad6:	4cd0      	ldr	r4, [pc, #832]	; (8001e18 <__aeabi_dsub+0x368>)
 8001ad8:	006e      	lsls	r6, r5, #1
 8001ada:	4691      	mov	r9, r2
 8001adc:	b083      	sub	sp, #12
 8001ade:	004a      	lsls	r2, r1, #1
 8001ae0:	00c0      	lsls	r0, r0, #3
 8001ae2:	4698      	mov	r8, r3
 8001ae4:	46a2      	mov	sl, r4
 8001ae6:	0d76      	lsrs	r6, r6, #21
 8001ae8:	0fed      	lsrs	r5, r5, #31
 8001aea:	0d52      	lsrs	r2, r2, #21
 8001aec:	0fc9      	lsrs	r1, r1, #31
 8001aee:	9001      	str	r0, [sp, #4]
 8001af0:	42a2      	cmp	r2, r4
 8001af2:	d100      	bne.n	8001af6 <__aeabi_dsub+0x46>
 8001af4:	e0b9      	b.n	8001c6a <__aeabi_dsub+0x1ba>
 8001af6:	2401      	movs	r4, #1
 8001af8:	4061      	eors	r1, r4
 8001afa:	468b      	mov	fp, r1
 8001afc:	428d      	cmp	r5, r1
 8001afe:	d100      	bne.n	8001b02 <__aeabi_dsub+0x52>
 8001b00:	e08d      	b.n	8001c1e <__aeabi_dsub+0x16e>
 8001b02:	1ab4      	subs	r4, r6, r2
 8001b04:	46a4      	mov	ip, r4
 8001b06:	2c00      	cmp	r4, #0
 8001b08:	dc00      	bgt.n	8001b0c <__aeabi_dsub+0x5c>
 8001b0a:	e0b7      	b.n	8001c7c <__aeabi_dsub+0x1cc>
 8001b0c:	2a00      	cmp	r2, #0
 8001b0e:	d100      	bne.n	8001b12 <__aeabi_dsub+0x62>
 8001b10:	e0cb      	b.n	8001caa <__aeabi_dsub+0x1fa>
 8001b12:	4ac1      	ldr	r2, [pc, #772]	; (8001e18 <__aeabi_dsub+0x368>)
 8001b14:	4296      	cmp	r6, r2
 8001b16:	d100      	bne.n	8001b1a <__aeabi_dsub+0x6a>
 8001b18:	e186      	b.n	8001e28 <__aeabi_dsub+0x378>
 8001b1a:	2280      	movs	r2, #128	; 0x80
 8001b1c:	0412      	lsls	r2, r2, #16
 8001b1e:	4317      	orrs	r7, r2
 8001b20:	4662      	mov	r2, ip
 8001b22:	2a38      	cmp	r2, #56	; 0x38
 8001b24:	dd00      	ble.n	8001b28 <__aeabi_dsub+0x78>
 8001b26:	e1a4      	b.n	8001e72 <__aeabi_dsub+0x3c2>
 8001b28:	2a1f      	cmp	r2, #31
 8001b2a:	dd00      	ble.n	8001b2e <__aeabi_dsub+0x7e>
 8001b2c:	e21d      	b.n	8001f6a <__aeabi_dsub+0x4ba>
 8001b2e:	4661      	mov	r1, ip
 8001b30:	2220      	movs	r2, #32
 8001b32:	003c      	movs	r4, r7
 8001b34:	1a52      	subs	r2, r2, r1
 8001b36:	0001      	movs	r1, r0
 8001b38:	4090      	lsls	r0, r2
 8001b3a:	4094      	lsls	r4, r2
 8001b3c:	1e42      	subs	r2, r0, #1
 8001b3e:	4190      	sbcs	r0, r2
 8001b40:	4662      	mov	r2, ip
 8001b42:	46a0      	mov	r8, r4
 8001b44:	4664      	mov	r4, ip
 8001b46:	40d7      	lsrs	r7, r2
 8001b48:	464a      	mov	r2, r9
 8001b4a:	40e1      	lsrs	r1, r4
 8001b4c:	4644      	mov	r4, r8
 8001b4e:	1bd2      	subs	r2, r2, r7
 8001b50:	4691      	mov	r9, r2
 8001b52:	430c      	orrs	r4, r1
 8001b54:	4304      	orrs	r4, r0
 8001b56:	1b1c      	subs	r4, r3, r4
 8001b58:	42a3      	cmp	r3, r4
 8001b5a:	4192      	sbcs	r2, r2
 8001b5c:	464b      	mov	r3, r9
 8001b5e:	4252      	negs	r2, r2
 8001b60:	1a9b      	subs	r3, r3, r2
 8001b62:	469a      	mov	sl, r3
 8001b64:	4653      	mov	r3, sl
 8001b66:	021b      	lsls	r3, r3, #8
 8001b68:	d400      	bmi.n	8001b6c <__aeabi_dsub+0xbc>
 8001b6a:	e12b      	b.n	8001dc4 <__aeabi_dsub+0x314>
 8001b6c:	4653      	mov	r3, sl
 8001b6e:	025a      	lsls	r2, r3, #9
 8001b70:	0a53      	lsrs	r3, r2, #9
 8001b72:	469a      	mov	sl, r3
 8001b74:	4653      	mov	r3, sl
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d100      	bne.n	8001b7c <__aeabi_dsub+0xcc>
 8001b7a:	e166      	b.n	8001e4a <__aeabi_dsub+0x39a>
 8001b7c:	4650      	mov	r0, sl
 8001b7e:	f000 fc49 	bl	8002414 <__clzsi2>
 8001b82:	0003      	movs	r3, r0
 8001b84:	3b08      	subs	r3, #8
 8001b86:	2220      	movs	r2, #32
 8001b88:	0020      	movs	r0, r4
 8001b8a:	1ad2      	subs	r2, r2, r3
 8001b8c:	4651      	mov	r1, sl
 8001b8e:	40d0      	lsrs	r0, r2
 8001b90:	4099      	lsls	r1, r3
 8001b92:	0002      	movs	r2, r0
 8001b94:	409c      	lsls	r4, r3
 8001b96:	430a      	orrs	r2, r1
 8001b98:	429e      	cmp	r6, r3
 8001b9a:	dd00      	ble.n	8001b9e <__aeabi_dsub+0xee>
 8001b9c:	e164      	b.n	8001e68 <__aeabi_dsub+0x3b8>
 8001b9e:	1b9b      	subs	r3, r3, r6
 8001ba0:	1c59      	adds	r1, r3, #1
 8001ba2:	291f      	cmp	r1, #31
 8001ba4:	dd00      	ble.n	8001ba8 <__aeabi_dsub+0xf8>
 8001ba6:	e0fe      	b.n	8001da6 <__aeabi_dsub+0x2f6>
 8001ba8:	2320      	movs	r3, #32
 8001baa:	0010      	movs	r0, r2
 8001bac:	0026      	movs	r6, r4
 8001bae:	1a5b      	subs	r3, r3, r1
 8001bb0:	409c      	lsls	r4, r3
 8001bb2:	4098      	lsls	r0, r3
 8001bb4:	40ce      	lsrs	r6, r1
 8001bb6:	40ca      	lsrs	r2, r1
 8001bb8:	1e63      	subs	r3, r4, #1
 8001bba:	419c      	sbcs	r4, r3
 8001bbc:	4330      	orrs	r0, r6
 8001bbe:	4692      	mov	sl, r2
 8001bc0:	2600      	movs	r6, #0
 8001bc2:	4304      	orrs	r4, r0
 8001bc4:	0763      	lsls	r3, r4, #29
 8001bc6:	d009      	beq.n	8001bdc <__aeabi_dsub+0x12c>
 8001bc8:	230f      	movs	r3, #15
 8001bca:	4023      	ands	r3, r4
 8001bcc:	2b04      	cmp	r3, #4
 8001bce:	d005      	beq.n	8001bdc <__aeabi_dsub+0x12c>
 8001bd0:	1d23      	adds	r3, r4, #4
 8001bd2:	42a3      	cmp	r3, r4
 8001bd4:	41a4      	sbcs	r4, r4
 8001bd6:	4264      	negs	r4, r4
 8001bd8:	44a2      	add	sl, r4
 8001bda:	001c      	movs	r4, r3
 8001bdc:	4653      	mov	r3, sl
 8001bde:	021b      	lsls	r3, r3, #8
 8001be0:	d400      	bmi.n	8001be4 <__aeabi_dsub+0x134>
 8001be2:	e0f2      	b.n	8001dca <__aeabi_dsub+0x31a>
 8001be4:	4b8c      	ldr	r3, [pc, #560]	; (8001e18 <__aeabi_dsub+0x368>)
 8001be6:	3601      	adds	r6, #1
 8001be8:	429e      	cmp	r6, r3
 8001bea:	d100      	bne.n	8001bee <__aeabi_dsub+0x13e>
 8001bec:	e10f      	b.n	8001e0e <__aeabi_dsub+0x35e>
 8001bee:	4653      	mov	r3, sl
 8001bf0:	498a      	ldr	r1, [pc, #552]	; (8001e1c <__aeabi_dsub+0x36c>)
 8001bf2:	08e4      	lsrs	r4, r4, #3
 8001bf4:	400b      	ands	r3, r1
 8001bf6:	0019      	movs	r1, r3
 8001bf8:	075b      	lsls	r3, r3, #29
 8001bfa:	4323      	orrs	r3, r4
 8001bfc:	0572      	lsls	r2, r6, #21
 8001bfe:	024c      	lsls	r4, r1, #9
 8001c00:	0b24      	lsrs	r4, r4, #12
 8001c02:	0d52      	lsrs	r2, r2, #21
 8001c04:	0512      	lsls	r2, r2, #20
 8001c06:	4322      	orrs	r2, r4
 8001c08:	07ed      	lsls	r5, r5, #31
 8001c0a:	432a      	orrs	r2, r5
 8001c0c:	0018      	movs	r0, r3
 8001c0e:	0011      	movs	r1, r2
 8001c10:	b003      	add	sp, #12
 8001c12:	bcf0      	pop	{r4, r5, r6, r7}
 8001c14:	46bb      	mov	fp, r7
 8001c16:	46b2      	mov	sl, r6
 8001c18:	46a9      	mov	r9, r5
 8001c1a:	46a0      	mov	r8, r4
 8001c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c1e:	1ab4      	subs	r4, r6, r2
 8001c20:	46a4      	mov	ip, r4
 8001c22:	2c00      	cmp	r4, #0
 8001c24:	dd59      	ble.n	8001cda <__aeabi_dsub+0x22a>
 8001c26:	2a00      	cmp	r2, #0
 8001c28:	d100      	bne.n	8001c2c <__aeabi_dsub+0x17c>
 8001c2a:	e0b0      	b.n	8001d8e <__aeabi_dsub+0x2de>
 8001c2c:	4556      	cmp	r6, sl
 8001c2e:	d100      	bne.n	8001c32 <__aeabi_dsub+0x182>
 8001c30:	e0fa      	b.n	8001e28 <__aeabi_dsub+0x378>
 8001c32:	2280      	movs	r2, #128	; 0x80
 8001c34:	0412      	lsls	r2, r2, #16
 8001c36:	4317      	orrs	r7, r2
 8001c38:	4662      	mov	r2, ip
 8001c3a:	2a38      	cmp	r2, #56	; 0x38
 8001c3c:	dd00      	ble.n	8001c40 <__aeabi_dsub+0x190>
 8001c3e:	e0d4      	b.n	8001dea <__aeabi_dsub+0x33a>
 8001c40:	2a1f      	cmp	r2, #31
 8001c42:	dc00      	bgt.n	8001c46 <__aeabi_dsub+0x196>
 8001c44:	e1c0      	b.n	8001fc8 <__aeabi_dsub+0x518>
 8001c46:	0039      	movs	r1, r7
 8001c48:	3a20      	subs	r2, #32
 8001c4a:	40d1      	lsrs	r1, r2
 8001c4c:	4662      	mov	r2, ip
 8001c4e:	2a20      	cmp	r2, #32
 8001c50:	d006      	beq.n	8001c60 <__aeabi_dsub+0x1b0>
 8001c52:	4664      	mov	r4, ip
 8001c54:	2240      	movs	r2, #64	; 0x40
 8001c56:	1b12      	subs	r2, r2, r4
 8001c58:	003c      	movs	r4, r7
 8001c5a:	4094      	lsls	r4, r2
 8001c5c:	4304      	orrs	r4, r0
 8001c5e:	9401      	str	r4, [sp, #4]
 8001c60:	9c01      	ldr	r4, [sp, #4]
 8001c62:	1e62      	subs	r2, r4, #1
 8001c64:	4194      	sbcs	r4, r2
 8001c66:	430c      	orrs	r4, r1
 8001c68:	e0c3      	b.n	8001df2 <__aeabi_dsub+0x342>
 8001c6a:	003c      	movs	r4, r7
 8001c6c:	4304      	orrs	r4, r0
 8001c6e:	d02b      	beq.n	8001cc8 <__aeabi_dsub+0x218>
 8001c70:	468b      	mov	fp, r1
 8001c72:	428d      	cmp	r5, r1
 8001c74:	d02e      	beq.n	8001cd4 <__aeabi_dsub+0x224>
 8001c76:	4c6a      	ldr	r4, [pc, #424]	; (8001e20 <__aeabi_dsub+0x370>)
 8001c78:	46a4      	mov	ip, r4
 8001c7a:	44b4      	add	ip, r6
 8001c7c:	4664      	mov	r4, ip
 8001c7e:	2c00      	cmp	r4, #0
 8001c80:	d05f      	beq.n	8001d42 <__aeabi_dsub+0x292>
 8001c82:	1b94      	subs	r4, r2, r6
 8001c84:	46a4      	mov	ip, r4
 8001c86:	2e00      	cmp	r6, #0
 8001c88:	d000      	beq.n	8001c8c <__aeabi_dsub+0x1dc>
 8001c8a:	e120      	b.n	8001ece <__aeabi_dsub+0x41e>
 8001c8c:	464c      	mov	r4, r9
 8001c8e:	431c      	orrs	r4, r3
 8001c90:	d100      	bne.n	8001c94 <__aeabi_dsub+0x1e4>
 8001c92:	e1c7      	b.n	8002024 <__aeabi_dsub+0x574>
 8001c94:	4661      	mov	r1, ip
 8001c96:	1e4c      	subs	r4, r1, #1
 8001c98:	2901      	cmp	r1, #1
 8001c9a:	d100      	bne.n	8001c9e <__aeabi_dsub+0x1ee>
 8001c9c:	e223      	b.n	80020e6 <__aeabi_dsub+0x636>
 8001c9e:	4d5e      	ldr	r5, [pc, #376]	; (8001e18 <__aeabi_dsub+0x368>)
 8001ca0:	45ac      	cmp	ip, r5
 8001ca2:	d100      	bne.n	8001ca6 <__aeabi_dsub+0x1f6>
 8001ca4:	e1d8      	b.n	8002058 <__aeabi_dsub+0x5a8>
 8001ca6:	46a4      	mov	ip, r4
 8001ca8:	e11a      	b.n	8001ee0 <__aeabi_dsub+0x430>
 8001caa:	003a      	movs	r2, r7
 8001cac:	4302      	orrs	r2, r0
 8001cae:	d100      	bne.n	8001cb2 <__aeabi_dsub+0x202>
 8001cb0:	e0e4      	b.n	8001e7c <__aeabi_dsub+0x3cc>
 8001cb2:	0022      	movs	r2, r4
 8001cb4:	3a01      	subs	r2, #1
 8001cb6:	2c01      	cmp	r4, #1
 8001cb8:	d100      	bne.n	8001cbc <__aeabi_dsub+0x20c>
 8001cba:	e1c3      	b.n	8002044 <__aeabi_dsub+0x594>
 8001cbc:	4956      	ldr	r1, [pc, #344]	; (8001e18 <__aeabi_dsub+0x368>)
 8001cbe:	428c      	cmp	r4, r1
 8001cc0:	d100      	bne.n	8001cc4 <__aeabi_dsub+0x214>
 8001cc2:	e0b1      	b.n	8001e28 <__aeabi_dsub+0x378>
 8001cc4:	4694      	mov	ip, r2
 8001cc6:	e72b      	b.n	8001b20 <__aeabi_dsub+0x70>
 8001cc8:	2401      	movs	r4, #1
 8001cca:	4061      	eors	r1, r4
 8001ccc:	468b      	mov	fp, r1
 8001cce:	428d      	cmp	r5, r1
 8001cd0:	d000      	beq.n	8001cd4 <__aeabi_dsub+0x224>
 8001cd2:	e716      	b.n	8001b02 <__aeabi_dsub+0x52>
 8001cd4:	4952      	ldr	r1, [pc, #328]	; (8001e20 <__aeabi_dsub+0x370>)
 8001cd6:	468c      	mov	ip, r1
 8001cd8:	44b4      	add	ip, r6
 8001cda:	4664      	mov	r4, ip
 8001cdc:	2c00      	cmp	r4, #0
 8001cde:	d100      	bne.n	8001ce2 <__aeabi_dsub+0x232>
 8001ce0:	e0d3      	b.n	8001e8a <__aeabi_dsub+0x3da>
 8001ce2:	1b91      	subs	r1, r2, r6
 8001ce4:	468c      	mov	ip, r1
 8001ce6:	2e00      	cmp	r6, #0
 8001ce8:	d100      	bne.n	8001cec <__aeabi_dsub+0x23c>
 8001cea:	e15e      	b.n	8001faa <__aeabi_dsub+0x4fa>
 8001cec:	494a      	ldr	r1, [pc, #296]	; (8001e18 <__aeabi_dsub+0x368>)
 8001cee:	428a      	cmp	r2, r1
 8001cf0:	d100      	bne.n	8001cf4 <__aeabi_dsub+0x244>
 8001cf2:	e1be      	b.n	8002072 <__aeabi_dsub+0x5c2>
 8001cf4:	2180      	movs	r1, #128	; 0x80
 8001cf6:	464c      	mov	r4, r9
 8001cf8:	0409      	lsls	r1, r1, #16
 8001cfa:	430c      	orrs	r4, r1
 8001cfc:	46a1      	mov	r9, r4
 8001cfe:	4661      	mov	r1, ip
 8001d00:	2938      	cmp	r1, #56	; 0x38
 8001d02:	dd00      	ble.n	8001d06 <__aeabi_dsub+0x256>
 8001d04:	e1ba      	b.n	800207c <__aeabi_dsub+0x5cc>
 8001d06:	291f      	cmp	r1, #31
 8001d08:	dd00      	ble.n	8001d0c <__aeabi_dsub+0x25c>
 8001d0a:	e227      	b.n	800215c <__aeabi_dsub+0x6ac>
 8001d0c:	2420      	movs	r4, #32
 8001d0e:	1a64      	subs	r4, r4, r1
 8001d10:	4649      	mov	r1, r9
 8001d12:	40a1      	lsls	r1, r4
 8001d14:	001e      	movs	r6, r3
 8001d16:	4688      	mov	r8, r1
 8001d18:	4661      	mov	r1, ip
 8001d1a:	40a3      	lsls	r3, r4
 8001d1c:	40ce      	lsrs	r6, r1
 8001d1e:	4641      	mov	r1, r8
 8001d20:	1e5c      	subs	r4, r3, #1
 8001d22:	41a3      	sbcs	r3, r4
 8001d24:	4331      	orrs	r1, r6
 8001d26:	4319      	orrs	r1, r3
 8001d28:	000c      	movs	r4, r1
 8001d2a:	4663      	mov	r3, ip
 8001d2c:	4649      	mov	r1, r9
 8001d2e:	40d9      	lsrs	r1, r3
 8001d30:	187f      	adds	r7, r7, r1
 8001d32:	1824      	adds	r4, r4, r0
 8001d34:	4284      	cmp	r4, r0
 8001d36:	419b      	sbcs	r3, r3
 8001d38:	425b      	negs	r3, r3
 8001d3a:	469a      	mov	sl, r3
 8001d3c:	0016      	movs	r6, r2
 8001d3e:	44ba      	add	sl, r7
 8001d40:	e05d      	b.n	8001dfe <__aeabi_dsub+0x34e>
 8001d42:	4c38      	ldr	r4, [pc, #224]	; (8001e24 <__aeabi_dsub+0x374>)
 8001d44:	1c72      	adds	r2, r6, #1
 8001d46:	4222      	tst	r2, r4
 8001d48:	d000      	beq.n	8001d4c <__aeabi_dsub+0x29c>
 8001d4a:	e0df      	b.n	8001f0c <__aeabi_dsub+0x45c>
 8001d4c:	464a      	mov	r2, r9
 8001d4e:	431a      	orrs	r2, r3
 8001d50:	2e00      	cmp	r6, #0
 8001d52:	d000      	beq.n	8001d56 <__aeabi_dsub+0x2a6>
 8001d54:	e15c      	b.n	8002010 <__aeabi_dsub+0x560>
 8001d56:	2a00      	cmp	r2, #0
 8001d58:	d100      	bne.n	8001d5c <__aeabi_dsub+0x2ac>
 8001d5a:	e1cf      	b.n	80020fc <__aeabi_dsub+0x64c>
 8001d5c:	003a      	movs	r2, r7
 8001d5e:	4302      	orrs	r2, r0
 8001d60:	d100      	bne.n	8001d64 <__aeabi_dsub+0x2b4>
 8001d62:	e17f      	b.n	8002064 <__aeabi_dsub+0x5b4>
 8001d64:	1a1c      	subs	r4, r3, r0
 8001d66:	464a      	mov	r2, r9
 8001d68:	42a3      	cmp	r3, r4
 8001d6a:	4189      	sbcs	r1, r1
 8001d6c:	1bd2      	subs	r2, r2, r7
 8001d6e:	4249      	negs	r1, r1
 8001d70:	1a52      	subs	r2, r2, r1
 8001d72:	4692      	mov	sl, r2
 8001d74:	0212      	lsls	r2, r2, #8
 8001d76:	d400      	bmi.n	8001d7a <__aeabi_dsub+0x2ca>
 8001d78:	e20a      	b.n	8002190 <__aeabi_dsub+0x6e0>
 8001d7a:	1ac4      	subs	r4, r0, r3
 8001d7c:	42a0      	cmp	r0, r4
 8001d7e:	4180      	sbcs	r0, r0
 8001d80:	464b      	mov	r3, r9
 8001d82:	4240      	negs	r0, r0
 8001d84:	1aff      	subs	r7, r7, r3
 8001d86:	1a3b      	subs	r3, r7, r0
 8001d88:	469a      	mov	sl, r3
 8001d8a:	465d      	mov	r5, fp
 8001d8c:	e71a      	b.n	8001bc4 <__aeabi_dsub+0x114>
 8001d8e:	003a      	movs	r2, r7
 8001d90:	4302      	orrs	r2, r0
 8001d92:	d073      	beq.n	8001e7c <__aeabi_dsub+0x3cc>
 8001d94:	0022      	movs	r2, r4
 8001d96:	3a01      	subs	r2, #1
 8001d98:	2c01      	cmp	r4, #1
 8001d9a:	d100      	bne.n	8001d9e <__aeabi_dsub+0x2ee>
 8001d9c:	e0cb      	b.n	8001f36 <__aeabi_dsub+0x486>
 8001d9e:	4554      	cmp	r4, sl
 8001da0:	d042      	beq.n	8001e28 <__aeabi_dsub+0x378>
 8001da2:	4694      	mov	ip, r2
 8001da4:	e748      	b.n	8001c38 <__aeabi_dsub+0x188>
 8001da6:	0010      	movs	r0, r2
 8001da8:	3b1f      	subs	r3, #31
 8001daa:	40d8      	lsrs	r0, r3
 8001dac:	2920      	cmp	r1, #32
 8001dae:	d003      	beq.n	8001db8 <__aeabi_dsub+0x308>
 8001db0:	2340      	movs	r3, #64	; 0x40
 8001db2:	1a5b      	subs	r3, r3, r1
 8001db4:	409a      	lsls	r2, r3
 8001db6:	4314      	orrs	r4, r2
 8001db8:	1e63      	subs	r3, r4, #1
 8001dba:	419c      	sbcs	r4, r3
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	2600      	movs	r6, #0
 8001dc0:	469a      	mov	sl, r3
 8001dc2:	4304      	orrs	r4, r0
 8001dc4:	0763      	lsls	r3, r4, #29
 8001dc6:	d000      	beq.n	8001dca <__aeabi_dsub+0x31a>
 8001dc8:	e6fe      	b.n	8001bc8 <__aeabi_dsub+0x118>
 8001dca:	4652      	mov	r2, sl
 8001dcc:	08e3      	lsrs	r3, r4, #3
 8001dce:	0752      	lsls	r2, r2, #29
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	4652      	mov	r2, sl
 8001dd4:	46b4      	mov	ip, r6
 8001dd6:	08d2      	lsrs	r2, r2, #3
 8001dd8:	490f      	ldr	r1, [pc, #60]	; (8001e18 <__aeabi_dsub+0x368>)
 8001dda:	458c      	cmp	ip, r1
 8001ddc:	d02a      	beq.n	8001e34 <__aeabi_dsub+0x384>
 8001dde:	0312      	lsls	r2, r2, #12
 8001de0:	0b14      	lsrs	r4, r2, #12
 8001de2:	4662      	mov	r2, ip
 8001de4:	0552      	lsls	r2, r2, #21
 8001de6:	0d52      	lsrs	r2, r2, #21
 8001de8:	e70c      	b.n	8001c04 <__aeabi_dsub+0x154>
 8001dea:	003c      	movs	r4, r7
 8001dec:	4304      	orrs	r4, r0
 8001dee:	1e62      	subs	r2, r4, #1
 8001df0:	4194      	sbcs	r4, r2
 8001df2:	18e4      	adds	r4, r4, r3
 8001df4:	429c      	cmp	r4, r3
 8001df6:	4192      	sbcs	r2, r2
 8001df8:	4252      	negs	r2, r2
 8001dfa:	444a      	add	r2, r9
 8001dfc:	4692      	mov	sl, r2
 8001dfe:	4653      	mov	r3, sl
 8001e00:	021b      	lsls	r3, r3, #8
 8001e02:	d5df      	bpl.n	8001dc4 <__aeabi_dsub+0x314>
 8001e04:	4b04      	ldr	r3, [pc, #16]	; (8001e18 <__aeabi_dsub+0x368>)
 8001e06:	3601      	adds	r6, #1
 8001e08:	429e      	cmp	r6, r3
 8001e0a:	d000      	beq.n	8001e0e <__aeabi_dsub+0x35e>
 8001e0c:	e0a0      	b.n	8001f50 <__aeabi_dsub+0x4a0>
 8001e0e:	0032      	movs	r2, r6
 8001e10:	2400      	movs	r4, #0
 8001e12:	2300      	movs	r3, #0
 8001e14:	e6f6      	b.n	8001c04 <__aeabi_dsub+0x154>
 8001e16:	46c0      	nop			; (mov r8, r8)
 8001e18:	000007ff 	.word	0x000007ff
 8001e1c:	ff7fffff 	.word	0xff7fffff
 8001e20:	fffff801 	.word	0xfffff801
 8001e24:	000007fe 	.word	0x000007fe
 8001e28:	08db      	lsrs	r3, r3, #3
 8001e2a:	464a      	mov	r2, r9
 8001e2c:	0752      	lsls	r2, r2, #29
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	464a      	mov	r2, r9
 8001e32:	08d2      	lsrs	r2, r2, #3
 8001e34:	0019      	movs	r1, r3
 8001e36:	4311      	orrs	r1, r2
 8001e38:	d100      	bne.n	8001e3c <__aeabi_dsub+0x38c>
 8001e3a:	e1b5      	b.n	80021a8 <__aeabi_dsub+0x6f8>
 8001e3c:	2480      	movs	r4, #128	; 0x80
 8001e3e:	0324      	lsls	r4, r4, #12
 8001e40:	4314      	orrs	r4, r2
 8001e42:	0324      	lsls	r4, r4, #12
 8001e44:	4ad5      	ldr	r2, [pc, #852]	; (800219c <__aeabi_dsub+0x6ec>)
 8001e46:	0b24      	lsrs	r4, r4, #12
 8001e48:	e6dc      	b.n	8001c04 <__aeabi_dsub+0x154>
 8001e4a:	0020      	movs	r0, r4
 8001e4c:	f000 fae2 	bl	8002414 <__clzsi2>
 8001e50:	0003      	movs	r3, r0
 8001e52:	3318      	adds	r3, #24
 8001e54:	2b1f      	cmp	r3, #31
 8001e56:	dc00      	bgt.n	8001e5a <__aeabi_dsub+0x3aa>
 8001e58:	e695      	b.n	8001b86 <__aeabi_dsub+0xd6>
 8001e5a:	0022      	movs	r2, r4
 8001e5c:	3808      	subs	r0, #8
 8001e5e:	4082      	lsls	r2, r0
 8001e60:	2400      	movs	r4, #0
 8001e62:	429e      	cmp	r6, r3
 8001e64:	dc00      	bgt.n	8001e68 <__aeabi_dsub+0x3b8>
 8001e66:	e69a      	b.n	8001b9e <__aeabi_dsub+0xee>
 8001e68:	1af6      	subs	r6, r6, r3
 8001e6a:	4bcd      	ldr	r3, [pc, #820]	; (80021a0 <__aeabi_dsub+0x6f0>)
 8001e6c:	401a      	ands	r2, r3
 8001e6e:	4692      	mov	sl, r2
 8001e70:	e6a8      	b.n	8001bc4 <__aeabi_dsub+0x114>
 8001e72:	003c      	movs	r4, r7
 8001e74:	4304      	orrs	r4, r0
 8001e76:	1e62      	subs	r2, r4, #1
 8001e78:	4194      	sbcs	r4, r2
 8001e7a:	e66c      	b.n	8001b56 <__aeabi_dsub+0xa6>
 8001e7c:	464a      	mov	r2, r9
 8001e7e:	08db      	lsrs	r3, r3, #3
 8001e80:	0752      	lsls	r2, r2, #29
 8001e82:	4313      	orrs	r3, r2
 8001e84:	464a      	mov	r2, r9
 8001e86:	08d2      	lsrs	r2, r2, #3
 8001e88:	e7a6      	b.n	8001dd8 <__aeabi_dsub+0x328>
 8001e8a:	4cc6      	ldr	r4, [pc, #792]	; (80021a4 <__aeabi_dsub+0x6f4>)
 8001e8c:	1c72      	adds	r2, r6, #1
 8001e8e:	4222      	tst	r2, r4
 8001e90:	d000      	beq.n	8001e94 <__aeabi_dsub+0x3e4>
 8001e92:	e0ac      	b.n	8001fee <__aeabi_dsub+0x53e>
 8001e94:	464a      	mov	r2, r9
 8001e96:	431a      	orrs	r2, r3
 8001e98:	2e00      	cmp	r6, #0
 8001e9a:	d000      	beq.n	8001e9e <__aeabi_dsub+0x3ee>
 8001e9c:	e105      	b.n	80020aa <__aeabi_dsub+0x5fa>
 8001e9e:	2a00      	cmp	r2, #0
 8001ea0:	d100      	bne.n	8001ea4 <__aeabi_dsub+0x3f4>
 8001ea2:	e156      	b.n	8002152 <__aeabi_dsub+0x6a2>
 8001ea4:	003a      	movs	r2, r7
 8001ea6:	4302      	orrs	r2, r0
 8001ea8:	d100      	bne.n	8001eac <__aeabi_dsub+0x3fc>
 8001eaa:	e0db      	b.n	8002064 <__aeabi_dsub+0x5b4>
 8001eac:	181c      	adds	r4, r3, r0
 8001eae:	429c      	cmp	r4, r3
 8001eb0:	419b      	sbcs	r3, r3
 8001eb2:	444f      	add	r7, r9
 8001eb4:	46ba      	mov	sl, r7
 8001eb6:	425b      	negs	r3, r3
 8001eb8:	449a      	add	sl, r3
 8001eba:	4653      	mov	r3, sl
 8001ebc:	021b      	lsls	r3, r3, #8
 8001ebe:	d400      	bmi.n	8001ec2 <__aeabi_dsub+0x412>
 8001ec0:	e780      	b.n	8001dc4 <__aeabi_dsub+0x314>
 8001ec2:	4652      	mov	r2, sl
 8001ec4:	4bb6      	ldr	r3, [pc, #728]	; (80021a0 <__aeabi_dsub+0x6f0>)
 8001ec6:	2601      	movs	r6, #1
 8001ec8:	401a      	ands	r2, r3
 8001eca:	4692      	mov	sl, r2
 8001ecc:	e77a      	b.n	8001dc4 <__aeabi_dsub+0x314>
 8001ece:	4cb3      	ldr	r4, [pc, #716]	; (800219c <__aeabi_dsub+0x6ec>)
 8001ed0:	42a2      	cmp	r2, r4
 8001ed2:	d100      	bne.n	8001ed6 <__aeabi_dsub+0x426>
 8001ed4:	e0c0      	b.n	8002058 <__aeabi_dsub+0x5a8>
 8001ed6:	2480      	movs	r4, #128	; 0x80
 8001ed8:	464d      	mov	r5, r9
 8001eda:	0424      	lsls	r4, r4, #16
 8001edc:	4325      	orrs	r5, r4
 8001ede:	46a9      	mov	r9, r5
 8001ee0:	4664      	mov	r4, ip
 8001ee2:	2c38      	cmp	r4, #56	; 0x38
 8001ee4:	dc53      	bgt.n	8001f8e <__aeabi_dsub+0x4de>
 8001ee6:	4661      	mov	r1, ip
 8001ee8:	2c1f      	cmp	r4, #31
 8001eea:	dd00      	ble.n	8001eee <__aeabi_dsub+0x43e>
 8001eec:	e0cd      	b.n	800208a <__aeabi_dsub+0x5da>
 8001eee:	2520      	movs	r5, #32
 8001ef0:	001e      	movs	r6, r3
 8001ef2:	1b2d      	subs	r5, r5, r4
 8001ef4:	464c      	mov	r4, r9
 8001ef6:	40ab      	lsls	r3, r5
 8001ef8:	40ac      	lsls	r4, r5
 8001efa:	40ce      	lsrs	r6, r1
 8001efc:	1e5d      	subs	r5, r3, #1
 8001efe:	41ab      	sbcs	r3, r5
 8001f00:	4334      	orrs	r4, r6
 8001f02:	4323      	orrs	r3, r4
 8001f04:	464c      	mov	r4, r9
 8001f06:	40cc      	lsrs	r4, r1
 8001f08:	1b3f      	subs	r7, r7, r4
 8001f0a:	e045      	b.n	8001f98 <__aeabi_dsub+0x4e8>
 8001f0c:	464a      	mov	r2, r9
 8001f0e:	1a1c      	subs	r4, r3, r0
 8001f10:	1bd1      	subs	r1, r2, r7
 8001f12:	42a3      	cmp	r3, r4
 8001f14:	4192      	sbcs	r2, r2
 8001f16:	4252      	negs	r2, r2
 8001f18:	4692      	mov	sl, r2
 8001f1a:	000a      	movs	r2, r1
 8001f1c:	4651      	mov	r1, sl
 8001f1e:	1a52      	subs	r2, r2, r1
 8001f20:	4692      	mov	sl, r2
 8001f22:	0212      	lsls	r2, r2, #8
 8001f24:	d500      	bpl.n	8001f28 <__aeabi_dsub+0x478>
 8001f26:	e083      	b.n	8002030 <__aeabi_dsub+0x580>
 8001f28:	4653      	mov	r3, sl
 8001f2a:	4323      	orrs	r3, r4
 8001f2c:	d000      	beq.n	8001f30 <__aeabi_dsub+0x480>
 8001f2e:	e621      	b.n	8001b74 <__aeabi_dsub+0xc4>
 8001f30:	2200      	movs	r2, #0
 8001f32:	2500      	movs	r5, #0
 8001f34:	e753      	b.n	8001dde <__aeabi_dsub+0x32e>
 8001f36:	181c      	adds	r4, r3, r0
 8001f38:	429c      	cmp	r4, r3
 8001f3a:	419b      	sbcs	r3, r3
 8001f3c:	444f      	add	r7, r9
 8001f3e:	46ba      	mov	sl, r7
 8001f40:	425b      	negs	r3, r3
 8001f42:	449a      	add	sl, r3
 8001f44:	4653      	mov	r3, sl
 8001f46:	2601      	movs	r6, #1
 8001f48:	021b      	lsls	r3, r3, #8
 8001f4a:	d400      	bmi.n	8001f4e <__aeabi_dsub+0x49e>
 8001f4c:	e73a      	b.n	8001dc4 <__aeabi_dsub+0x314>
 8001f4e:	2602      	movs	r6, #2
 8001f50:	4652      	mov	r2, sl
 8001f52:	4b93      	ldr	r3, [pc, #588]	; (80021a0 <__aeabi_dsub+0x6f0>)
 8001f54:	2101      	movs	r1, #1
 8001f56:	401a      	ands	r2, r3
 8001f58:	0013      	movs	r3, r2
 8001f5a:	4021      	ands	r1, r4
 8001f5c:	0862      	lsrs	r2, r4, #1
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	07dc      	lsls	r4, r3, #31
 8001f62:	085b      	lsrs	r3, r3, #1
 8001f64:	469a      	mov	sl, r3
 8001f66:	4314      	orrs	r4, r2
 8001f68:	e62c      	b.n	8001bc4 <__aeabi_dsub+0x114>
 8001f6a:	0039      	movs	r1, r7
 8001f6c:	3a20      	subs	r2, #32
 8001f6e:	40d1      	lsrs	r1, r2
 8001f70:	4662      	mov	r2, ip
 8001f72:	2a20      	cmp	r2, #32
 8001f74:	d006      	beq.n	8001f84 <__aeabi_dsub+0x4d4>
 8001f76:	4664      	mov	r4, ip
 8001f78:	2240      	movs	r2, #64	; 0x40
 8001f7a:	1b12      	subs	r2, r2, r4
 8001f7c:	003c      	movs	r4, r7
 8001f7e:	4094      	lsls	r4, r2
 8001f80:	4304      	orrs	r4, r0
 8001f82:	9401      	str	r4, [sp, #4]
 8001f84:	9c01      	ldr	r4, [sp, #4]
 8001f86:	1e62      	subs	r2, r4, #1
 8001f88:	4194      	sbcs	r4, r2
 8001f8a:	430c      	orrs	r4, r1
 8001f8c:	e5e3      	b.n	8001b56 <__aeabi_dsub+0xa6>
 8001f8e:	4649      	mov	r1, r9
 8001f90:	4319      	orrs	r1, r3
 8001f92:	000b      	movs	r3, r1
 8001f94:	1e5c      	subs	r4, r3, #1
 8001f96:	41a3      	sbcs	r3, r4
 8001f98:	1ac4      	subs	r4, r0, r3
 8001f9a:	42a0      	cmp	r0, r4
 8001f9c:	419b      	sbcs	r3, r3
 8001f9e:	425b      	negs	r3, r3
 8001fa0:	1afb      	subs	r3, r7, r3
 8001fa2:	469a      	mov	sl, r3
 8001fa4:	465d      	mov	r5, fp
 8001fa6:	0016      	movs	r6, r2
 8001fa8:	e5dc      	b.n	8001b64 <__aeabi_dsub+0xb4>
 8001faa:	4649      	mov	r1, r9
 8001fac:	4319      	orrs	r1, r3
 8001fae:	d100      	bne.n	8001fb2 <__aeabi_dsub+0x502>
 8001fb0:	e0ae      	b.n	8002110 <__aeabi_dsub+0x660>
 8001fb2:	4661      	mov	r1, ip
 8001fb4:	4664      	mov	r4, ip
 8001fb6:	3901      	subs	r1, #1
 8001fb8:	2c01      	cmp	r4, #1
 8001fba:	d100      	bne.n	8001fbe <__aeabi_dsub+0x50e>
 8001fbc:	e0e0      	b.n	8002180 <__aeabi_dsub+0x6d0>
 8001fbe:	4c77      	ldr	r4, [pc, #476]	; (800219c <__aeabi_dsub+0x6ec>)
 8001fc0:	45a4      	cmp	ip, r4
 8001fc2:	d056      	beq.n	8002072 <__aeabi_dsub+0x5c2>
 8001fc4:	468c      	mov	ip, r1
 8001fc6:	e69a      	b.n	8001cfe <__aeabi_dsub+0x24e>
 8001fc8:	4661      	mov	r1, ip
 8001fca:	2220      	movs	r2, #32
 8001fcc:	003c      	movs	r4, r7
 8001fce:	1a52      	subs	r2, r2, r1
 8001fd0:	4094      	lsls	r4, r2
 8001fd2:	0001      	movs	r1, r0
 8001fd4:	4090      	lsls	r0, r2
 8001fd6:	46a0      	mov	r8, r4
 8001fd8:	4664      	mov	r4, ip
 8001fda:	1e42      	subs	r2, r0, #1
 8001fdc:	4190      	sbcs	r0, r2
 8001fde:	4662      	mov	r2, ip
 8001fe0:	40e1      	lsrs	r1, r4
 8001fe2:	4644      	mov	r4, r8
 8001fe4:	40d7      	lsrs	r7, r2
 8001fe6:	430c      	orrs	r4, r1
 8001fe8:	4304      	orrs	r4, r0
 8001fea:	44b9      	add	r9, r7
 8001fec:	e701      	b.n	8001df2 <__aeabi_dsub+0x342>
 8001fee:	496b      	ldr	r1, [pc, #428]	; (800219c <__aeabi_dsub+0x6ec>)
 8001ff0:	428a      	cmp	r2, r1
 8001ff2:	d100      	bne.n	8001ff6 <__aeabi_dsub+0x546>
 8001ff4:	e70c      	b.n	8001e10 <__aeabi_dsub+0x360>
 8001ff6:	1818      	adds	r0, r3, r0
 8001ff8:	4298      	cmp	r0, r3
 8001ffa:	419b      	sbcs	r3, r3
 8001ffc:	444f      	add	r7, r9
 8001ffe:	425b      	negs	r3, r3
 8002000:	18fb      	adds	r3, r7, r3
 8002002:	07dc      	lsls	r4, r3, #31
 8002004:	0840      	lsrs	r0, r0, #1
 8002006:	085b      	lsrs	r3, r3, #1
 8002008:	469a      	mov	sl, r3
 800200a:	0016      	movs	r6, r2
 800200c:	4304      	orrs	r4, r0
 800200e:	e6d9      	b.n	8001dc4 <__aeabi_dsub+0x314>
 8002010:	2a00      	cmp	r2, #0
 8002012:	d000      	beq.n	8002016 <__aeabi_dsub+0x566>
 8002014:	e081      	b.n	800211a <__aeabi_dsub+0x66a>
 8002016:	003b      	movs	r3, r7
 8002018:	4303      	orrs	r3, r0
 800201a:	d11d      	bne.n	8002058 <__aeabi_dsub+0x5a8>
 800201c:	2280      	movs	r2, #128	; 0x80
 800201e:	2500      	movs	r5, #0
 8002020:	0312      	lsls	r2, r2, #12
 8002022:	e70b      	b.n	8001e3c <__aeabi_dsub+0x38c>
 8002024:	08c0      	lsrs	r0, r0, #3
 8002026:	077b      	lsls	r3, r7, #29
 8002028:	465d      	mov	r5, fp
 800202a:	4303      	orrs	r3, r0
 800202c:	08fa      	lsrs	r2, r7, #3
 800202e:	e6d3      	b.n	8001dd8 <__aeabi_dsub+0x328>
 8002030:	1ac4      	subs	r4, r0, r3
 8002032:	42a0      	cmp	r0, r4
 8002034:	4180      	sbcs	r0, r0
 8002036:	464b      	mov	r3, r9
 8002038:	4240      	negs	r0, r0
 800203a:	1aff      	subs	r7, r7, r3
 800203c:	1a3b      	subs	r3, r7, r0
 800203e:	469a      	mov	sl, r3
 8002040:	465d      	mov	r5, fp
 8002042:	e597      	b.n	8001b74 <__aeabi_dsub+0xc4>
 8002044:	1a1c      	subs	r4, r3, r0
 8002046:	464a      	mov	r2, r9
 8002048:	42a3      	cmp	r3, r4
 800204a:	419b      	sbcs	r3, r3
 800204c:	1bd7      	subs	r7, r2, r7
 800204e:	425b      	negs	r3, r3
 8002050:	1afb      	subs	r3, r7, r3
 8002052:	469a      	mov	sl, r3
 8002054:	2601      	movs	r6, #1
 8002056:	e585      	b.n	8001b64 <__aeabi_dsub+0xb4>
 8002058:	08c0      	lsrs	r0, r0, #3
 800205a:	077b      	lsls	r3, r7, #29
 800205c:	465d      	mov	r5, fp
 800205e:	4303      	orrs	r3, r0
 8002060:	08fa      	lsrs	r2, r7, #3
 8002062:	e6e7      	b.n	8001e34 <__aeabi_dsub+0x384>
 8002064:	464a      	mov	r2, r9
 8002066:	08db      	lsrs	r3, r3, #3
 8002068:	0752      	lsls	r2, r2, #29
 800206a:	4313      	orrs	r3, r2
 800206c:	464a      	mov	r2, r9
 800206e:	08d2      	lsrs	r2, r2, #3
 8002070:	e6b5      	b.n	8001dde <__aeabi_dsub+0x32e>
 8002072:	08c0      	lsrs	r0, r0, #3
 8002074:	077b      	lsls	r3, r7, #29
 8002076:	4303      	orrs	r3, r0
 8002078:	08fa      	lsrs	r2, r7, #3
 800207a:	e6db      	b.n	8001e34 <__aeabi_dsub+0x384>
 800207c:	4649      	mov	r1, r9
 800207e:	4319      	orrs	r1, r3
 8002080:	000b      	movs	r3, r1
 8002082:	1e59      	subs	r1, r3, #1
 8002084:	418b      	sbcs	r3, r1
 8002086:	001c      	movs	r4, r3
 8002088:	e653      	b.n	8001d32 <__aeabi_dsub+0x282>
 800208a:	464d      	mov	r5, r9
 800208c:	3c20      	subs	r4, #32
 800208e:	40e5      	lsrs	r5, r4
 8002090:	2920      	cmp	r1, #32
 8002092:	d005      	beq.n	80020a0 <__aeabi_dsub+0x5f0>
 8002094:	2440      	movs	r4, #64	; 0x40
 8002096:	1a64      	subs	r4, r4, r1
 8002098:	4649      	mov	r1, r9
 800209a:	40a1      	lsls	r1, r4
 800209c:	430b      	orrs	r3, r1
 800209e:	4698      	mov	r8, r3
 80020a0:	4643      	mov	r3, r8
 80020a2:	1e5c      	subs	r4, r3, #1
 80020a4:	41a3      	sbcs	r3, r4
 80020a6:	432b      	orrs	r3, r5
 80020a8:	e776      	b.n	8001f98 <__aeabi_dsub+0x4e8>
 80020aa:	2a00      	cmp	r2, #0
 80020ac:	d0e1      	beq.n	8002072 <__aeabi_dsub+0x5c2>
 80020ae:	003a      	movs	r2, r7
 80020b0:	08db      	lsrs	r3, r3, #3
 80020b2:	4302      	orrs	r2, r0
 80020b4:	d100      	bne.n	80020b8 <__aeabi_dsub+0x608>
 80020b6:	e6b8      	b.n	8001e2a <__aeabi_dsub+0x37a>
 80020b8:	464a      	mov	r2, r9
 80020ba:	0752      	lsls	r2, r2, #29
 80020bc:	2480      	movs	r4, #128	; 0x80
 80020be:	4313      	orrs	r3, r2
 80020c0:	464a      	mov	r2, r9
 80020c2:	0324      	lsls	r4, r4, #12
 80020c4:	08d2      	lsrs	r2, r2, #3
 80020c6:	4222      	tst	r2, r4
 80020c8:	d007      	beq.n	80020da <__aeabi_dsub+0x62a>
 80020ca:	08fe      	lsrs	r6, r7, #3
 80020cc:	4226      	tst	r6, r4
 80020ce:	d104      	bne.n	80020da <__aeabi_dsub+0x62a>
 80020d0:	465d      	mov	r5, fp
 80020d2:	0032      	movs	r2, r6
 80020d4:	08c3      	lsrs	r3, r0, #3
 80020d6:	077f      	lsls	r7, r7, #29
 80020d8:	433b      	orrs	r3, r7
 80020da:	0f59      	lsrs	r1, r3, #29
 80020dc:	00db      	lsls	r3, r3, #3
 80020de:	0749      	lsls	r1, r1, #29
 80020e0:	08db      	lsrs	r3, r3, #3
 80020e2:	430b      	orrs	r3, r1
 80020e4:	e6a6      	b.n	8001e34 <__aeabi_dsub+0x384>
 80020e6:	1ac4      	subs	r4, r0, r3
 80020e8:	42a0      	cmp	r0, r4
 80020ea:	4180      	sbcs	r0, r0
 80020ec:	464b      	mov	r3, r9
 80020ee:	4240      	negs	r0, r0
 80020f0:	1aff      	subs	r7, r7, r3
 80020f2:	1a3b      	subs	r3, r7, r0
 80020f4:	469a      	mov	sl, r3
 80020f6:	465d      	mov	r5, fp
 80020f8:	2601      	movs	r6, #1
 80020fa:	e533      	b.n	8001b64 <__aeabi_dsub+0xb4>
 80020fc:	003b      	movs	r3, r7
 80020fe:	4303      	orrs	r3, r0
 8002100:	d100      	bne.n	8002104 <__aeabi_dsub+0x654>
 8002102:	e715      	b.n	8001f30 <__aeabi_dsub+0x480>
 8002104:	08c0      	lsrs	r0, r0, #3
 8002106:	077b      	lsls	r3, r7, #29
 8002108:	465d      	mov	r5, fp
 800210a:	4303      	orrs	r3, r0
 800210c:	08fa      	lsrs	r2, r7, #3
 800210e:	e666      	b.n	8001dde <__aeabi_dsub+0x32e>
 8002110:	08c0      	lsrs	r0, r0, #3
 8002112:	077b      	lsls	r3, r7, #29
 8002114:	4303      	orrs	r3, r0
 8002116:	08fa      	lsrs	r2, r7, #3
 8002118:	e65e      	b.n	8001dd8 <__aeabi_dsub+0x328>
 800211a:	003a      	movs	r2, r7
 800211c:	08db      	lsrs	r3, r3, #3
 800211e:	4302      	orrs	r2, r0
 8002120:	d100      	bne.n	8002124 <__aeabi_dsub+0x674>
 8002122:	e682      	b.n	8001e2a <__aeabi_dsub+0x37a>
 8002124:	464a      	mov	r2, r9
 8002126:	0752      	lsls	r2, r2, #29
 8002128:	2480      	movs	r4, #128	; 0x80
 800212a:	4313      	orrs	r3, r2
 800212c:	464a      	mov	r2, r9
 800212e:	0324      	lsls	r4, r4, #12
 8002130:	08d2      	lsrs	r2, r2, #3
 8002132:	4222      	tst	r2, r4
 8002134:	d007      	beq.n	8002146 <__aeabi_dsub+0x696>
 8002136:	08fe      	lsrs	r6, r7, #3
 8002138:	4226      	tst	r6, r4
 800213a:	d104      	bne.n	8002146 <__aeabi_dsub+0x696>
 800213c:	465d      	mov	r5, fp
 800213e:	0032      	movs	r2, r6
 8002140:	08c3      	lsrs	r3, r0, #3
 8002142:	077f      	lsls	r7, r7, #29
 8002144:	433b      	orrs	r3, r7
 8002146:	0f59      	lsrs	r1, r3, #29
 8002148:	00db      	lsls	r3, r3, #3
 800214a:	08db      	lsrs	r3, r3, #3
 800214c:	0749      	lsls	r1, r1, #29
 800214e:	430b      	orrs	r3, r1
 8002150:	e670      	b.n	8001e34 <__aeabi_dsub+0x384>
 8002152:	08c0      	lsrs	r0, r0, #3
 8002154:	077b      	lsls	r3, r7, #29
 8002156:	4303      	orrs	r3, r0
 8002158:	08fa      	lsrs	r2, r7, #3
 800215a:	e640      	b.n	8001dde <__aeabi_dsub+0x32e>
 800215c:	464c      	mov	r4, r9
 800215e:	3920      	subs	r1, #32
 8002160:	40cc      	lsrs	r4, r1
 8002162:	4661      	mov	r1, ip
 8002164:	2920      	cmp	r1, #32
 8002166:	d006      	beq.n	8002176 <__aeabi_dsub+0x6c6>
 8002168:	4666      	mov	r6, ip
 800216a:	2140      	movs	r1, #64	; 0x40
 800216c:	1b89      	subs	r1, r1, r6
 800216e:	464e      	mov	r6, r9
 8002170:	408e      	lsls	r6, r1
 8002172:	4333      	orrs	r3, r6
 8002174:	4698      	mov	r8, r3
 8002176:	4643      	mov	r3, r8
 8002178:	1e59      	subs	r1, r3, #1
 800217a:	418b      	sbcs	r3, r1
 800217c:	431c      	orrs	r4, r3
 800217e:	e5d8      	b.n	8001d32 <__aeabi_dsub+0x282>
 8002180:	181c      	adds	r4, r3, r0
 8002182:	4284      	cmp	r4, r0
 8002184:	4180      	sbcs	r0, r0
 8002186:	444f      	add	r7, r9
 8002188:	46ba      	mov	sl, r7
 800218a:	4240      	negs	r0, r0
 800218c:	4482      	add	sl, r0
 800218e:	e6d9      	b.n	8001f44 <__aeabi_dsub+0x494>
 8002190:	4653      	mov	r3, sl
 8002192:	4323      	orrs	r3, r4
 8002194:	d100      	bne.n	8002198 <__aeabi_dsub+0x6e8>
 8002196:	e6cb      	b.n	8001f30 <__aeabi_dsub+0x480>
 8002198:	e614      	b.n	8001dc4 <__aeabi_dsub+0x314>
 800219a:	46c0      	nop			; (mov r8, r8)
 800219c:	000007ff 	.word	0x000007ff
 80021a0:	ff7fffff 	.word	0xff7fffff
 80021a4:	000007fe 	.word	0x000007fe
 80021a8:	2300      	movs	r3, #0
 80021aa:	4a01      	ldr	r2, [pc, #4]	; (80021b0 <__aeabi_dsub+0x700>)
 80021ac:	001c      	movs	r4, r3
 80021ae:	e529      	b.n	8001c04 <__aeabi_dsub+0x154>
 80021b0:	000007ff 	.word	0x000007ff

080021b4 <__aeabi_dcmpun>:
 80021b4:	b570      	push	{r4, r5, r6, lr}
 80021b6:	0005      	movs	r5, r0
 80021b8:	480c      	ldr	r0, [pc, #48]	; (80021ec <__aeabi_dcmpun+0x38>)
 80021ba:	031c      	lsls	r4, r3, #12
 80021bc:	0016      	movs	r6, r2
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	030a      	lsls	r2, r1, #12
 80021c2:	0049      	lsls	r1, r1, #1
 80021c4:	0b12      	lsrs	r2, r2, #12
 80021c6:	0d49      	lsrs	r1, r1, #21
 80021c8:	0b24      	lsrs	r4, r4, #12
 80021ca:	0d5b      	lsrs	r3, r3, #21
 80021cc:	4281      	cmp	r1, r0
 80021ce:	d008      	beq.n	80021e2 <__aeabi_dcmpun+0x2e>
 80021d0:	4a06      	ldr	r2, [pc, #24]	; (80021ec <__aeabi_dcmpun+0x38>)
 80021d2:	2000      	movs	r0, #0
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d103      	bne.n	80021e0 <__aeabi_dcmpun+0x2c>
 80021d8:	0020      	movs	r0, r4
 80021da:	4330      	orrs	r0, r6
 80021dc:	1e43      	subs	r3, r0, #1
 80021de:	4198      	sbcs	r0, r3
 80021e0:	bd70      	pop	{r4, r5, r6, pc}
 80021e2:	2001      	movs	r0, #1
 80021e4:	432a      	orrs	r2, r5
 80021e6:	d1fb      	bne.n	80021e0 <__aeabi_dcmpun+0x2c>
 80021e8:	e7f2      	b.n	80021d0 <__aeabi_dcmpun+0x1c>
 80021ea:	46c0      	nop			; (mov r8, r8)
 80021ec:	000007ff 	.word	0x000007ff

080021f0 <__aeabi_d2iz>:
 80021f0:	000a      	movs	r2, r1
 80021f2:	b530      	push	{r4, r5, lr}
 80021f4:	4c13      	ldr	r4, [pc, #76]	; (8002244 <__aeabi_d2iz+0x54>)
 80021f6:	0053      	lsls	r3, r2, #1
 80021f8:	0309      	lsls	r1, r1, #12
 80021fa:	0005      	movs	r5, r0
 80021fc:	0b09      	lsrs	r1, r1, #12
 80021fe:	2000      	movs	r0, #0
 8002200:	0d5b      	lsrs	r3, r3, #21
 8002202:	0fd2      	lsrs	r2, r2, #31
 8002204:	42a3      	cmp	r3, r4
 8002206:	dd04      	ble.n	8002212 <__aeabi_d2iz+0x22>
 8002208:	480f      	ldr	r0, [pc, #60]	; (8002248 <__aeabi_d2iz+0x58>)
 800220a:	4283      	cmp	r3, r0
 800220c:	dd02      	ble.n	8002214 <__aeabi_d2iz+0x24>
 800220e:	4b0f      	ldr	r3, [pc, #60]	; (800224c <__aeabi_d2iz+0x5c>)
 8002210:	18d0      	adds	r0, r2, r3
 8002212:	bd30      	pop	{r4, r5, pc}
 8002214:	2080      	movs	r0, #128	; 0x80
 8002216:	0340      	lsls	r0, r0, #13
 8002218:	4301      	orrs	r1, r0
 800221a:	480d      	ldr	r0, [pc, #52]	; (8002250 <__aeabi_d2iz+0x60>)
 800221c:	1ac0      	subs	r0, r0, r3
 800221e:	281f      	cmp	r0, #31
 8002220:	dd08      	ble.n	8002234 <__aeabi_d2iz+0x44>
 8002222:	480c      	ldr	r0, [pc, #48]	; (8002254 <__aeabi_d2iz+0x64>)
 8002224:	1ac3      	subs	r3, r0, r3
 8002226:	40d9      	lsrs	r1, r3
 8002228:	000b      	movs	r3, r1
 800222a:	4258      	negs	r0, r3
 800222c:	2a00      	cmp	r2, #0
 800222e:	d1f0      	bne.n	8002212 <__aeabi_d2iz+0x22>
 8002230:	0018      	movs	r0, r3
 8002232:	e7ee      	b.n	8002212 <__aeabi_d2iz+0x22>
 8002234:	4c08      	ldr	r4, [pc, #32]	; (8002258 <__aeabi_d2iz+0x68>)
 8002236:	40c5      	lsrs	r5, r0
 8002238:	46a4      	mov	ip, r4
 800223a:	4463      	add	r3, ip
 800223c:	4099      	lsls	r1, r3
 800223e:	000b      	movs	r3, r1
 8002240:	432b      	orrs	r3, r5
 8002242:	e7f2      	b.n	800222a <__aeabi_d2iz+0x3a>
 8002244:	000003fe 	.word	0x000003fe
 8002248:	0000041d 	.word	0x0000041d
 800224c:	7fffffff 	.word	0x7fffffff
 8002250:	00000433 	.word	0x00000433
 8002254:	00000413 	.word	0x00000413
 8002258:	fffffbed 	.word	0xfffffbed

0800225c <__aeabi_i2d>:
 800225c:	b570      	push	{r4, r5, r6, lr}
 800225e:	2800      	cmp	r0, #0
 8002260:	d016      	beq.n	8002290 <__aeabi_i2d+0x34>
 8002262:	17c3      	asrs	r3, r0, #31
 8002264:	18c5      	adds	r5, r0, r3
 8002266:	405d      	eors	r5, r3
 8002268:	0fc4      	lsrs	r4, r0, #31
 800226a:	0028      	movs	r0, r5
 800226c:	f000 f8d2 	bl	8002414 <__clzsi2>
 8002270:	4b11      	ldr	r3, [pc, #68]	; (80022b8 <__aeabi_i2d+0x5c>)
 8002272:	1a1b      	subs	r3, r3, r0
 8002274:	280a      	cmp	r0, #10
 8002276:	dc16      	bgt.n	80022a6 <__aeabi_i2d+0x4a>
 8002278:	0002      	movs	r2, r0
 800227a:	002e      	movs	r6, r5
 800227c:	3215      	adds	r2, #21
 800227e:	4096      	lsls	r6, r2
 8002280:	220b      	movs	r2, #11
 8002282:	1a12      	subs	r2, r2, r0
 8002284:	40d5      	lsrs	r5, r2
 8002286:	055b      	lsls	r3, r3, #21
 8002288:	032d      	lsls	r5, r5, #12
 800228a:	0b2d      	lsrs	r5, r5, #12
 800228c:	0d5b      	lsrs	r3, r3, #21
 800228e:	e003      	b.n	8002298 <__aeabi_i2d+0x3c>
 8002290:	2400      	movs	r4, #0
 8002292:	2300      	movs	r3, #0
 8002294:	2500      	movs	r5, #0
 8002296:	2600      	movs	r6, #0
 8002298:	051b      	lsls	r3, r3, #20
 800229a:	432b      	orrs	r3, r5
 800229c:	07e4      	lsls	r4, r4, #31
 800229e:	4323      	orrs	r3, r4
 80022a0:	0030      	movs	r0, r6
 80022a2:	0019      	movs	r1, r3
 80022a4:	bd70      	pop	{r4, r5, r6, pc}
 80022a6:	380b      	subs	r0, #11
 80022a8:	4085      	lsls	r5, r0
 80022aa:	055b      	lsls	r3, r3, #21
 80022ac:	032d      	lsls	r5, r5, #12
 80022ae:	2600      	movs	r6, #0
 80022b0:	0b2d      	lsrs	r5, r5, #12
 80022b2:	0d5b      	lsrs	r3, r3, #21
 80022b4:	e7f0      	b.n	8002298 <__aeabi_i2d+0x3c>
 80022b6:	46c0      	nop			; (mov r8, r8)
 80022b8:	0000041e 	.word	0x0000041e

080022bc <__aeabi_ui2d>:
 80022bc:	b510      	push	{r4, lr}
 80022be:	1e04      	subs	r4, r0, #0
 80022c0:	d010      	beq.n	80022e4 <__aeabi_ui2d+0x28>
 80022c2:	f000 f8a7 	bl	8002414 <__clzsi2>
 80022c6:	4b0f      	ldr	r3, [pc, #60]	; (8002304 <__aeabi_ui2d+0x48>)
 80022c8:	1a1b      	subs	r3, r3, r0
 80022ca:	280a      	cmp	r0, #10
 80022cc:	dc11      	bgt.n	80022f2 <__aeabi_ui2d+0x36>
 80022ce:	220b      	movs	r2, #11
 80022d0:	0021      	movs	r1, r4
 80022d2:	1a12      	subs	r2, r2, r0
 80022d4:	40d1      	lsrs	r1, r2
 80022d6:	3015      	adds	r0, #21
 80022d8:	030a      	lsls	r2, r1, #12
 80022da:	055b      	lsls	r3, r3, #21
 80022dc:	4084      	lsls	r4, r0
 80022de:	0b12      	lsrs	r2, r2, #12
 80022e0:	0d5b      	lsrs	r3, r3, #21
 80022e2:	e001      	b.n	80022e8 <__aeabi_ui2d+0x2c>
 80022e4:	2300      	movs	r3, #0
 80022e6:	2200      	movs	r2, #0
 80022e8:	051b      	lsls	r3, r3, #20
 80022ea:	4313      	orrs	r3, r2
 80022ec:	0020      	movs	r0, r4
 80022ee:	0019      	movs	r1, r3
 80022f0:	bd10      	pop	{r4, pc}
 80022f2:	0022      	movs	r2, r4
 80022f4:	380b      	subs	r0, #11
 80022f6:	4082      	lsls	r2, r0
 80022f8:	055b      	lsls	r3, r3, #21
 80022fa:	0312      	lsls	r2, r2, #12
 80022fc:	2400      	movs	r4, #0
 80022fe:	0b12      	lsrs	r2, r2, #12
 8002300:	0d5b      	lsrs	r3, r3, #21
 8002302:	e7f1      	b.n	80022e8 <__aeabi_ui2d+0x2c>
 8002304:	0000041e 	.word	0x0000041e

08002308 <__aeabi_d2f>:
 8002308:	0002      	movs	r2, r0
 800230a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800230c:	004b      	lsls	r3, r1, #1
 800230e:	030d      	lsls	r5, r1, #12
 8002310:	0f40      	lsrs	r0, r0, #29
 8002312:	0d5b      	lsrs	r3, r3, #21
 8002314:	0fcc      	lsrs	r4, r1, #31
 8002316:	0a6d      	lsrs	r5, r5, #9
 8002318:	493a      	ldr	r1, [pc, #232]	; (8002404 <__aeabi_d2f+0xfc>)
 800231a:	4305      	orrs	r5, r0
 800231c:	1c58      	adds	r0, r3, #1
 800231e:	00d7      	lsls	r7, r2, #3
 8002320:	4208      	tst	r0, r1
 8002322:	d00a      	beq.n	800233a <__aeabi_d2f+0x32>
 8002324:	4938      	ldr	r1, [pc, #224]	; (8002408 <__aeabi_d2f+0x100>)
 8002326:	1859      	adds	r1, r3, r1
 8002328:	29fe      	cmp	r1, #254	; 0xfe
 800232a:	dd16      	ble.n	800235a <__aeabi_d2f+0x52>
 800232c:	20ff      	movs	r0, #255	; 0xff
 800232e:	2200      	movs	r2, #0
 8002330:	05c0      	lsls	r0, r0, #23
 8002332:	4310      	orrs	r0, r2
 8002334:	07e4      	lsls	r4, r4, #31
 8002336:	4320      	orrs	r0, r4
 8002338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800233a:	2b00      	cmp	r3, #0
 800233c:	d106      	bne.n	800234c <__aeabi_d2f+0x44>
 800233e:	433d      	orrs	r5, r7
 8002340:	d026      	beq.n	8002390 <__aeabi_d2f+0x88>
 8002342:	2205      	movs	r2, #5
 8002344:	0192      	lsls	r2, r2, #6
 8002346:	0a52      	lsrs	r2, r2, #9
 8002348:	b2d8      	uxtb	r0, r3
 800234a:	e7f1      	b.n	8002330 <__aeabi_d2f+0x28>
 800234c:	432f      	orrs	r7, r5
 800234e:	d0ed      	beq.n	800232c <__aeabi_d2f+0x24>
 8002350:	2280      	movs	r2, #128	; 0x80
 8002352:	03d2      	lsls	r2, r2, #15
 8002354:	20ff      	movs	r0, #255	; 0xff
 8002356:	432a      	orrs	r2, r5
 8002358:	e7ea      	b.n	8002330 <__aeabi_d2f+0x28>
 800235a:	2900      	cmp	r1, #0
 800235c:	dd1b      	ble.n	8002396 <__aeabi_d2f+0x8e>
 800235e:	0192      	lsls	r2, r2, #6
 8002360:	1e50      	subs	r0, r2, #1
 8002362:	4182      	sbcs	r2, r0
 8002364:	00ed      	lsls	r5, r5, #3
 8002366:	0f7f      	lsrs	r7, r7, #29
 8002368:	432a      	orrs	r2, r5
 800236a:	433a      	orrs	r2, r7
 800236c:	0753      	lsls	r3, r2, #29
 800236e:	d047      	beq.n	8002400 <__aeabi_d2f+0xf8>
 8002370:	230f      	movs	r3, #15
 8002372:	4013      	ands	r3, r2
 8002374:	2b04      	cmp	r3, #4
 8002376:	d000      	beq.n	800237a <__aeabi_d2f+0x72>
 8002378:	3204      	adds	r2, #4
 800237a:	2380      	movs	r3, #128	; 0x80
 800237c:	04db      	lsls	r3, r3, #19
 800237e:	4013      	ands	r3, r2
 8002380:	d03e      	beq.n	8002400 <__aeabi_d2f+0xf8>
 8002382:	1c48      	adds	r0, r1, #1
 8002384:	29fe      	cmp	r1, #254	; 0xfe
 8002386:	d0d1      	beq.n	800232c <__aeabi_d2f+0x24>
 8002388:	0192      	lsls	r2, r2, #6
 800238a:	0a52      	lsrs	r2, r2, #9
 800238c:	b2c0      	uxtb	r0, r0
 800238e:	e7cf      	b.n	8002330 <__aeabi_d2f+0x28>
 8002390:	2000      	movs	r0, #0
 8002392:	2200      	movs	r2, #0
 8002394:	e7cc      	b.n	8002330 <__aeabi_d2f+0x28>
 8002396:	000a      	movs	r2, r1
 8002398:	3217      	adds	r2, #23
 800239a:	db2f      	blt.n	80023fc <__aeabi_d2f+0xf4>
 800239c:	2680      	movs	r6, #128	; 0x80
 800239e:	0436      	lsls	r6, r6, #16
 80023a0:	432e      	orrs	r6, r5
 80023a2:	251e      	movs	r5, #30
 80023a4:	1a6d      	subs	r5, r5, r1
 80023a6:	2d1f      	cmp	r5, #31
 80023a8:	dd11      	ble.n	80023ce <__aeabi_d2f+0xc6>
 80023aa:	2202      	movs	r2, #2
 80023ac:	4252      	negs	r2, r2
 80023ae:	1a52      	subs	r2, r2, r1
 80023b0:	0031      	movs	r1, r6
 80023b2:	40d1      	lsrs	r1, r2
 80023b4:	2d20      	cmp	r5, #32
 80023b6:	d004      	beq.n	80023c2 <__aeabi_d2f+0xba>
 80023b8:	4a14      	ldr	r2, [pc, #80]	; (800240c <__aeabi_d2f+0x104>)
 80023ba:	4694      	mov	ip, r2
 80023bc:	4463      	add	r3, ip
 80023be:	409e      	lsls	r6, r3
 80023c0:	4337      	orrs	r7, r6
 80023c2:	003a      	movs	r2, r7
 80023c4:	1e53      	subs	r3, r2, #1
 80023c6:	419a      	sbcs	r2, r3
 80023c8:	430a      	orrs	r2, r1
 80023ca:	2100      	movs	r1, #0
 80023cc:	e7ce      	b.n	800236c <__aeabi_d2f+0x64>
 80023ce:	4a10      	ldr	r2, [pc, #64]	; (8002410 <__aeabi_d2f+0x108>)
 80023d0:	0038      	movs	r0, r7
 80023d2:	4694      	mov	ip, r2
 80023d4:	4463      	add	r3, ip
 80023d6:	4098      	lsls	r0, r3
 80023d8:	003a      	movs	r2, r7
 80023da:	1e41      	subs	r1, r0, #1
 80023dc:	4188      	sbcs	r0, r1
 80023de:	409e      	lsls	r6, r3
 80023e0:	40ea      	lsrs	r2, r5
 80023e2:	4330      	orrs	r0, r6
 80023e4:	4302      	orrs	r2, r0
 80023e6:	2100      	movs	r1, #0
 80023e8:	0753      	lsls	r3, r2, #29
 80023ea:	d1c1      	bne.n	8002370 <__aeabi_d2f+0x68>
 80023ec:	2180      	movs	r1, #128	; 0x80
 80023ee:	0013      	movs	r3, r2
 80023f0:	04c9      	lsls	r1, r1, #19
 80023f2:	2001      	movs	r0, #1
 80023f4:	400b      	ands	r3, r1
 80023f6:	420a      	tst	r2, r1
 80023f8:	d1c6      	bne.n	8002388 <__aeabi_d2f+0x80>
 80023fa:	e7a3      	b.n	8002344 <__aeabi_d2f+0x3c>
 80023fc:	2300      	movs	r3, #0
 80023fe:	e7a0      	b.n	8002342 <__aeabi_d2f+0x3a>
 8002400:	000b      	movs	r3, r1
 8002402:	e79f      	b.n	8002344 <__aeabi_d2f+0x3c>
 8002404:	000007fe 	.word	0x000007fe
 8002408:	fffffc80 	.word	0xfffffc80
 800240c:	fffffca2 	.word	0xfffffca2
 8002410:	fffffc82 	.word	0xfffffc82

08002414 <__clzsi2>:
 8002414:	211c      	movs	r1, #28
 8002416:	2301      	movs	r3, #1
 8002418:	041b      	lsls	r3, r3, #16
 800241a:	4298      	cmp	r0, r3
 800241c:	d301      	bcc.n	8002422 <__clzsi2+0xe>
 800241e:	0c00      	lsrs	r0, r0, #16
 8002420:	3910      	subs	r1, #16
 8002422:	0a1b      	lsrs	r3, r3, #8
 8002424:	4298      	cmp	r0, r3
 8002426:	d301      	bcc.n	800242c <__clzsi2+0x18>
 8002428:	0a00      	lsrs	r0, r0, #8
 800242a:	3908      	subs	r1, #8
 800242c:	091b      	lsrs	r3, r3, #4
 800242e:	4298      	cmp	r0, r3
 8002430:	d301      	bcc.n	8002436 <__clzsi2+0x22>
 8002432:	0900      	lsrs	r0, r0, #4
 8002434:	3904      	subs	r1, #4
 8002436:	a202      	add	r2, pc, #8	; (adr r2, 8002440 <__clzsi2+0x2c>)
 8002438:	5c10      	ldrb	r0, [r2, r0]
 800243a:	1840      	adds	r0, r0, r1
 800243c:	4770      	bx	lr
 800243e:	46c0      	nop			; (mov r8, r8)
 8002440:	02020304 	.word	0x02020304
 8002444:	01010101 	.word	0x01010101
	...

08002450 <decToBcd>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint8_t decToBcd(int val) {
 8002450:	b590      	push	{r4, r7, lr}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
	return (uint8_t) ((val / 10 * 16) + (val % 10));
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	210a      	movs	r1, #10
 800245c:	0018      	movs	r0, r3
 800245e:	f7fd fed9 	bl	8000214 <__divsi3>
 8002462:	0003      	movs	r3, r0
 8002464:	b2db      	uxtb	r3, r3
 8002466:	011b      	lsls	r3, r3, #4
 8002468:	b2dc      	uxtb	r4, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	210a      	movs	r1, #10
 800246e:	0018      	movs	r0, r3
 8002470:	f7fd ffb6 	bl	80003e0 <__aeabi_idivmod>
 8002474:	000b      	movs	r3, r1
 8002476:	b2db      	uxtb	r3, r3
 8002478:	18e3      	adds	r3, r4, r3
 800247a:	b2db      	uxtb	r3, r3
}
 800247c:	0018      	movs	r0, r3
 800247e:	46bd      	mov	sp, r7
 8002480:	b003      	add	sp, #12
 8002482:	bd90      	pop	{r4, r7, pc}

08002484 <bcdToDec>:

int bcdToDec(uint8_t val) {
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	0002      	movs	r2, r0
 800248c:	1dfb      	adds	r3, r7, #7
 800248e:	701a      	strb	r2, [r3, #0]
	return (int) ((val / 16 * 10) + (val % 16));
 8002490:	1dfb      	adds	r3, r7, #7
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	091b      	lsrs	r3, r3, #4
 8002496:	b2db      	uxtb	r3, r3
 8002498:	001a      	movs	r2, r3
 800249a:	0013      	movs	r3, r2
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	189b      	adds	r3, r3, r2
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	0019      	movs	r1, r3
 80024a4:	1dfb      	adds	r3, r7, #7
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	220f      	movs	r2, #15
 80024aa:	4013      	ands	r3, r2
 80024ac:	18cb      	adds	r3, r1, r3
}
 80024ae:	0018      	movs	r0, r3
 80024b0:	46bd      	mov	sp, r7
 80024b2:	b002      	add	sp, #8
 80024b4:	bd80      	pop	{r7, pc}
	...

080024b8 <Set_Time>:

void Set_Time(uint8_t sec, uint8_t min, uint8_t hour) {
 80024b8:	b590      	push	{r4, r7, lr}
 80024ba:	b089      	sub	sp, #36	; 0x24
 80024bc:	af04      	add	r7, sp, #16
 80024be:	0004      	movs	r4, r0
 80024c0:	0008      	movs	r0, r1
 80024c2:	0011      	movs	r1, r2
 80024c4:	1dfb      	adds	r3, r7, #7
 80024c6:	1c22      	adds	r2, r4, #0
 80024c8:	701a      	strb	r2, [r3, #0]
 80024ca:	1dbb      	adds	r3, r7, #6
 80024cc:	1c02      	adds	r2, r0, #0
 80024ce:	701a      	strb	r2, [r3, #0]
 80024d0:	1d7b      	adds	r3, r7, #5
 80024d2:	1c0a      	adds	r2, r1, #0
 80024d4:	701a      	strb	r2, [r3, #0]
	uint8_t set_time[7];
	set_time[0] = decToBcd(sec);
 80024d6:	1dfb      	adds	r3, r7, #7
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	0018      	movs	r0, r3
 80024dc:	f7ff ffb8 	bl	8002450 <decToBcd>
 80024e0:	0003      	movs	r3, r0
 80024e2:	001a      	movs	r2, r3
 80024e4:	2408      	movs	r4, #8
 80024e6:	193b      	adds	r3, r7, r4
 80024e8:	701a      	strb	r2, [r3, #0]
	set_time[1] = decToBcd(min);
 80024ea:	1dbb      	adds	r3, r7, #6
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	0018      	movs	r0, r3
 80024f0:	f7ff ffae 	bl	8002450 <decToBcd>
 80024f4:	0003      	movs	r3, r0
 80024f6:	001a      	movs	r2, r3
 80024f8:	193b      	adds	r3, r7, r4
 80024fa:	705a      	strb	r2, [r3, #1]
	set_time[2] = decToBcd(hour);
 80024fc:	1d7b      	adds	r3, r7, #5
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	0018      	movs	r0, r3
 8002502:	f7ff ffa5 	bl	8002450 <decToBcd>
 8002506:	0003      	movs	r3, r0
 8002508:	001a      	movs	r2, r3
 800250a:	193b      	adds	r3, r7, r4
 800250c:	709a      	strb	r2, [r3, #2]

	HAL_I2C_Mem_Write(&hi2c1, RTC_ADDRESS, 0x00, 1, set_time, 7, 1000);
 800250e:	4808      	ldr	r0, [pc, #32]	; (8002530 <Set_Time+0x78>)
 8002510:	23fa      	movs	r3, #250	; 0xfa
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	9302      	str	r3, [sp, #8]
 8002516:	2307      	movs	r3, #7
 8002518:	9301      	str	r3, [sp, #4]
 800251a:	193b      	adds	r3, r7, r4
 800251c:	9300      	str	r3, [sp, #0]
 800251e:	2301      	movs	r3, #1
 8002520:	2200      	movs	r2, #0
 8002522:	21d0      	movs	r1, #208	; 0xd0
 8002524:	f003 fc68 	bl	8005df8 <HAL_I2C_Mem_Write>
}
 8002528:	46c0      	nop			; (mov r8, r8)
 800252a:	46bd      	mov	sp, r7
 800252c:	b005      	add	sp, #20
 800252e:	bd90      	pop	{r4, r7, pc}
 8002530:	200000f8 	.word	0x200000f8

08002534 <Get_Time>:

void Get_Time(void) {
 8002534:	b580      	push	{r7, lr}
 8002536:	b086      	sub	sp, #24
 8002538:	af04      	add	r7, sp, #16
	uint8_t get_time[7];
	HAL_I2C_Mem_Read(&hi2c1, RTC_ADDRESS, 0x00, 1, get_time, 7, 1000);
 800253a:	4816      	ldr	r0, [pc, #88]	; (8002594 <Get_Time+0x60>)
 800253c:	23fa      	movs	r3, #250	; 0xfa
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	9302      	str	r3, [sp, #8]
 8002542:	2307      	movs	r3, #7
 8002544:	9301      	str	r3, [sp, #4]
 8002546:	003b      	movs	r3, r7
 8002548:	9300      	str	r3, [sp, #0]
 800254a:	2301      	movs	r3, #1
 800254c:	2200      	movs	r2, #0
 800254e:	21d0      	movs	r1, #208	; 0xd0
 8002550:	f003 fd80 	bl	8006054 <HAL_I2C_Mem_Read>
	time.Seconds = bcdToDec(get_time[0]);
 8002554:	003b      	movs	r3, r7
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	0018      	movs	r0, r3
 800255a:	f7ff ff93 	bl	8002484 <bcdToDec>
 800255e:	0003      	movs	r3, r0
 8002560:	b2da      	uxtb	r2, r3
 8002562:	4b0d      	ldr	r3, [pc, #52]	; (8002598 <Get_Time+0x64>)
 8002564:	709a      	strb	r2, [r3, #2]
	time.Minutes = bcdToDec(get_time[1]);
 8002566:	003b      	movs	r3, r7
 8002568:	785b      	ldrb	r3, [r3, #1]
 800256a:	0018      	movs	r0, r3
 800256c:	f7ff ff8a 	bl	8002484 <bcdToDec>
 8002570:	0003      	movs	r3, r0
 8002572:	b2da      	uxtb	r2, r3
 8002574:	4b08      	ldr	r3, [pc, #32]	; (8002598 <Get_Time+0x64>)
 8002576:	705a      	strb	r2, [r3, #1]
	time.Hours = bcdToDec(get_time[2]);
 8002578:	003b      	movs	r3, r7
 800257a:	789b      	ldrb	r3, [r3, #2]
 800257c:	0018      	movs	r0, r3
 800257e:	f7ff ff81 	bl	8002484 <bcdToDec>
 8002582:	0003      	movs	r3, r0
 8002584:	b2da      	uxtb	r2, r3
 8002586:	4b04      	ldr	r3, [pc, #16]	; (8002598 <Get_Time+0x64>)
 8002588:	701a      	strb	r2, [r3, #0]
}
 800258a:	46c0      	nop			; (mov r8, r8)
 800258c:	46bd      	mov	sp, r7
 800258e:	b002      	add	sp, #8
 8002590:	bd80      	pop	{r7, pc}
 8002592:	46c0      	nop			; (mov r8, r8)
 8002594:	200000f8 	.word	0x200000f8
 8002598:	20000210 	.word	0x20000210

0800259c <setDigit>:

void setDigit(int digit) {
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 8; i++) {
 80025a4:	2300      	movs	r3, #0
 80025a6:	60fb      	str	r3, [r7, #12]
 80025a8:	e019      	b.n	80025de <setDigit+0x42>
		HAL_GPIO_WritePin(SEG_Port[i], SEG_Pin[i],
 80025aa:	4b11      	ldr	r3, [pc, #68]	; (80025f0 <setDigit+0x54>)
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	0092      	lsls	r2, r2, #2
 80025b0:	58d0      	ldr	r0, [r2, r3]
 80025b2:	4b10      	ldr	r3, [pc, #64]	; (80025f4 <setDigit+0x58>)
 80025b4:	68fa      	ldr	r2, [r7, #12]
 80025b6:	0052      	lsls	r2, r2, #1
 80025b8:	5ad1      	ldrh	r1, [r2, r3]
				((((digits[digit] >> i) & 1) == 1) ?
 80025ba:	4a0f      	ldr	r2, [pc, #60]	; (80025f8 <setDigit+0x5c>)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	18d3      	adds	r3, r2, r3
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	001a      	movs	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	411a      	asrs	r2, r3
 80025c8:	0013      	movs	r3, r2
						GPIO_PIN_SET : GPIO_PIN_RESET));
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	2201      	movs	r2, #1
 80025ce:	4013      	ands	r3, r2
 80025d0:	b2db      	uxtb	r3, r3
		HAL_GPIO_WritePin(SEG_Port[i], SEG_Pin[i],
 80025d2:	001a      	movs	r2, r3
 80025d4:	f003 fb33 	bl	8005c3e <HAL_GPIO_WritePin>
	for (int i = 0; i < 8; i++) {
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	3301      	adds	r3, #1
 80025dc:	60fb      	str	r3, [r7, #12]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2b07      	cmp	r3, #7
 80025e2:	dde2      	ble.n	80025aa <setDigit+0xe>

	}
}
 80025e4:	46c0      	nop			; (mov r8, r8)
 80025e6:	46c0      	nop			; (mov r8, r8)
 80025e8:	46bd      	mov	sp, r7
 80025ea:	b004      	add	sp, #16
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	46c0      	nop			; (mov r8, r8)
 80025f0:	0800999c 	.word	0x0800999c
 80025f4:	080099bc 	.word	0x080099bc
 80025f8:	0800998c 	.word	0x0800998c

080025fc <customTick>:

void customTick() {
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
	if (isPressed != 3)
 8002600:	4b06      	ldr	r3, [pc, #24]	; (800261c <customTick+0x20>)
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	b2db      	uxtb	r3, r3
 8002606:	2b03      	cmp	r3, #3
 8002608:	d004      	beq.n	8002614 <customTick+0x18>
		actTick++;
 800260a:	4b05      	ldr	r3, [pc, #20]	; (8002620 <customTick+0x24>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	1c5a      	adds	r2, r3, #1
 8002610:	4b03      	ldr	r3, [pc, #12]	; (8002620 <customTick+0x24>)
 8002612:	601a      	str	r2, [r3, #0]
}
 8002614:	46c0      	nop			; (mov r8, r8)
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	46c0      	nop			; (mov r8, r8)
 800261c:	20000000 	.word	0x20000000
 8002620:	20000224 	.word	0x20000224

08002624 <swToggle>:

// Obsługa przerwa??��?��? wywoływanych przez przyciski
void swToggle(uint16_t GPIO_Pin) {
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	0002      	movs	r2, r0
 800262c:	1dbb      	adds	r3, r7, #6
 800262e:	801a      	strh	r2, [r3, #0]
	if ((HAL_GPIO_ReadPin(GPIOD, GPIO_Pin) == GPIO_PIN_RESET)
 8002630:	1dbb      	adds	r3, r7, #6
 8002632:	881b      	ldrh	r3, [r3, #0]
 8002634:	4a2b      	ldr	r2, [pc, #172]	; (80026e4 <swToggle+0xc0>)
 8002636:	0019      	movs	r1, r3
 8002638:	0010      	movs	r0, r2
 800263a:	f003 fae3 	bl	8005c04 <HAL_GPIO_ReadPin>
 800263e:	1e03      	subs	r3, r0, #0
 8002640:	d10d      	bne.n	800265e <swToggle+0x3a>
			&& (isPressed == 3)) {
 8002642:	4b29      	ldr	r3, [pc, #164]	; (80026e8 <swToggle+0xc4>)
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	b2db      	uxtb	r3, r3
 8002648:	2b03      	cmp	r3, #3
 800264a:	d108      	bne.n	800265e <swToggle+0x3a>
		actTick = 0;
 800264c:	4b27      	ldr	r3, [pc, #156]	; (80026ec <swToggle+0xc8>)
 800264e:	2200      	movs	r2, #0
 8002650:	601a      	str	r2, [r3, #0]
		isPressed = GPIO_Pin;
 8002652:	1dbb      	adds	r3, r7, #6
 8002654:	881b      	ldrh	r3, [r3, #0]
 8002656:	b2da      	uxtb	r2, r3
 8002658:	4b23      	ldr	r3, [pc, #140]	; (80026e8 <swToggle+0xc4>)
 800265a:	701a      	strb	r2, [r3, #0]
 800265c:	e03d      	b.n	80026da <swToggle+0xb6>
	} else if ((HAL_GPIO_ReadPin(GPIOD, GPIO_Pin) == GPIO_PIN_SET)
 800265e:	1dbb      	adds	r3, r7, #6
 8002660:	881b      	ldrh	r3, [r3, #0]
 8002662:	4a20      	ldr	r2, [pc, #128]	; (80026e4 <swToggle+0xc0>)
 8002664:	0019      	movs	r1, r3
 8002666:	0010      	movs	r0, r2
 8002668:	f003 facc 	bl	8005c04 <HAL_GPIO_ReadPin>
 800266c:	0003      	movs	r3, r0
 800266e:	2b01      	cmp	r3, #1
 8002670:	d131      	bne.n	80026d6 <swToggle+0xb2>
			&& (isPressed == GPIO_Pin)) {
 8002672:	4b1d      	ldr	r3, [pc, #116]	; (80026e8 <swToggle+0xc4>)
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	b2db      	uxtb	r3, r3
 8002678:	b29b      	uxth	r3, r3
 800267a:	1dba      	adds	r2, r7, #6
 800267c:	8812      	ldrh	r2, [r2, #0]
 800267e:	429a      	cmp	r2, r3
 8002680:	d129      	bne.n	80026d6 <swToggle+0xb2>
		if (actTick > 50 && actTick < 700) {
 8002682:	4b1a      	ldr	r3, [pc, #104]	; (80026ec <swToggle+0xc8>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2b32      	cmp	r3, #50	; 0x32
 8002688:	d910      	bls.n	80026ac <swToggle+0x88>
 800268a:	4b18      	ldr	r3, [pc, #96]	; (80026ec <swToggle+0xc8>)
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	23af      	movs	r3, #175	; 0xaf
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	429a      	cmp	r2, r3
 8002694:	d20a      	bcs.n	80026ac <swToggle+0x88>
			clickType = gpio_pins[GPIO_Pin] + 1;
 8002696:	1dbb      	adds	r3, r7, #6
 8002698:	881a      	ldrh	r2, [r3, #0]
 800269a:	4b15      	ldr	r3, [pc, #84]	; (80026f0 <swToggle+0xcc>)
 800269c:	0052      	lsls	r2, r2, #1
 800269e:	5ad3      	ldrh	r3, [r2, r3]
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	3301      	adds	r3, #1
 80026a4:	b2da      	uxtb	r2, r3
 80026a6:	4b13      	ldr	r3, [pc, #76]	; (80026f4 <swToggle+0xd0>)
 80026a8:	701a      	strb	r2, [r3, #0]
 80026aa:	e00d      	b.n	80026c8 <swToggle+0xa4>
		} else if (actTick > 50) {
 80026ac:	4b0f      	ldr	r3, [pc, #60]	; (80026ec <swToggle+0xc8>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2b32      	cmp	r3, #50	; 0x32
 80026b2:	d909      	bls.n	80026c8 <swToggle+0xa4>
			clickType = gpio_pins[GPIO_Pin] + 4;
 80026b4:	1dbb      	adds	r3, r7, #6
 80026b6:	881a      	ldrh	r2, [r3, #0]
 80026b8:	4b0d      	ldr	r3, [pc, #52]	; (80026f0 <swToggle+0xcc>)
 80026ba:	0052      	lsls	r2, r2, #1
 80026bc:	5ad3      	ldrh	r3, [r2, r3]
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	3304      	adds	r3, #4
 80026c2:	b2da      	uxtb	r2, r3
 80026c4:	4b0b      	ldr	r3, [pc, #44]	; (80026f4 <swToggle+0xd0>)
 80026c6:	701a      	strb	r2, [r3, #0]
		}
		actTick = 0;
 80026c8:	4b08      	ldr	r3, [pc, #32]	; (80026ec <swToggle+0xc8>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	601a      	str	r2, [r3, #0]
		isPressed = 3;
 80026ce:	4b06      	ldr	r3, [pc, #24]	; (80026e8 <swToggle+0xc4>)
 80026d0:	2203      	movs	r2, #3
 80026d2:	701a      	strb	r2, [r3, #0]
 80026d4:	e001      	b.n	80026da <swToggle+0xb6>
	} else {
		__NOP();
 80026d6:	46c0      	nop			; (mov r8, r8)
	}
}
 80026d8:	46c0      	nop			; (mov r8, r8)
 80026da:	46c0      	nop			; (mov r8, r8)
 80026dc:	46bd      	mov	sp, r7
 80026de:	b002      	add	sp, #8
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	46c0      	nop			; (mov r8, r8)
 80026e4:	50000c00 	.word	0x50000c00
 80026e8:	20000000 	.word	0x20000000
 80026ec:	20000224 	.word	0x20000224
 80026f0:	08009980 	.word	0x08009980
 80026f4:	20000230 	.word	0x20000230

080026f8 <HAL_GPIO_EXTI_Falling_Callback>:
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	0002      	movs	r2, r0
 8002700:	1dbb      	adds	r3, r7, #6
 8002702:	801a      	strh	r2, [r3, #0]
	swToggle(GPIO_Pin);
 8002704:	1dbb      	adds	r3, r7, #6
 8002706:	881b      	ldrh	r3, [r3, #0]
 8002708:	0018      	movs	r0, r3
 800270a:	f7ff ff8b 	bl	8002624 <swToggle>
}
 800270e:	46c0      	nop			; (mov r8, r8)
 8002710:	46bd      	mov	sp, r7
 8002712:	b002      	add	sp, #8
 8002714:	bd80      	pop	{r7, pc}

08002716 <HAL_GPIO_EXTI_Rising_Callback>:
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin) {
 8002716:	b580      	push	{r7, lr}
 8002718:	b082      	sub	sp, #8
 800271a:	af00      	add	r7, sp, #0
 800271c:	0002      	movs	r2, r0
 800271e:	1dbb      	adds	r3, r7, #6
 8002720:	801a      	strh	r2, [r3, #0]
	swToggle(GPIO_Pin);
 8002722:	1dbb      	adds	r3, r7, #6
 8002724:	881b      	ldrh	r3, [r3, #0]
 8002726:	0018      	movs	r0, r3
 8002728:	f7ff ff7c 	bl	8002624 <swToggle>
}
 800272c:	46c0      	nop			; (mov r8, r8)
 800272e:	46bd      	mov	sp, r7
 8002730:	b002      	add	sp, #8
 8002732:	bd80      	pop	{r7, pc}

08002734 <TIM14_Callback>:
volatile long delayForBlink = 0;
volatile long delay = 0;
// Przerwanie do odświeżania zegarka

void TIM14_Callback() {
 8002734:	b5b0      	push	{r4, r5, r7, lr}
 8002736:	af00      	add	r7, sp, #0
	if (delay == 0) {
 8002738:	4bcb      	ldr	r3, [pc, #812]	; (8002a68 <TIM14_Callback+0x334>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d125      	bne.n	800278c <TIM14_Callback+0x58>
		HAL_GPIO_WritePin(DIG_Port[(curDig + 3) % 4], DIG_Pin[(curDig + 3) % 4],
 8002740:	4bca      	ldr	r3, [pc, #808]	; (8002a6c <TIM14_Callback+0x338>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	3303      	adds	r3, #3
 8002746:	4aca      	ldr	r2, [pc, #808]	; (8002a70 <TIM14_Callback+0x33c>)
 8002748:	4013      	ands	r3, r2
 800274a:	d504      	bpl.n	8002756 <TIM14_Callback+0x22>
 800274c:	3b01      	subs	r3, #1
 800274e:	2204      	movs	r2, #4
 8002750:	4252      	negs	r2, r2
 8002752:	4313      	orrs	r3, r2
 8002754:	3301      	adds	r3, #1
 8002756:	001a      	movs	r2, r3
 8002758:	4bc6      	ldr	r3, [pc, #792]	; (8002a74 <TIM14_Callback+0x340>)
 800275a:	0092      	lsls	r2, r2, #2
 800275c:	58d0      	ldr	r0, [r2, r3]
 800275e:	4bc3      	ldr	r3, [pc, #780]	; (8002a6c <TIM14_Callback+0x338>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	3303      	adds	r3, #3
 8002764:	4ac2      	ldr	r2, [pc, #776]	; (8002a70 <TIM14_Callback+0x33c>)
 8002766:	4013      	ands	r3, r2
 8002768:	d504      	bpl.n	8002774 <TIM14_Callback+0x40>
 800276a:	3b01      	subs	r3, #1
 800276c:	2204      	movs	r2, #4
 800276e:	4252      	negs	r2, r2
 8002770:	4313      	orrs	r3, r2
 8002772:	3301      	adds	r3, #1
 8002774:	001a      	movs	r2, r3
 8002776:	4bc0      	ldr	r3, [pc, #768]	; (8002a78 <TIM14_Callback+0x344>)
 8002778:	0052      	lsls	r2, r2, #1
 800277a:	5ad3      	ldrh	r3, [r2, r3]
 800277c:	2200      	movs	r2, #0
 800277e:	0019      	movs	r1, r3
 8002780:	f003 fa5d 	bl	8005c3e <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		setDigit(10);
 8002784:	200a      	movs	r0, #10
 8002786:	f7ff ff09 	bl	800259c <setDigit>
 800278a:	e1a2      	b.n	8002ad2 <TIM14_Callback+0x39e>
	} else if (delay == 5) {
 800278c:	4bb6      	ldr	r3, [pc, #728]	; (8002a68 <TIM14_Callback+0x334>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2b05      	cmp	r3, #5
 8002792:	d000      	beq.n	8002796 <TIM14_Callback+0x62>
 8002794:	e128      	b.n	80029e8 <TIM14_Callback+0x2b4>
		HAL_GPIO_WritePin(DIG_Port[(curDig + 3) % 4], DIG_Pin[(curDig + 3) % 4],
 8002796:	4bb5      	ldr	r3, [pc, #724]	; (8002a6c <TIM14_Callback+0x338>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	3303      	adds	r3, #3
 800279c:	4ab4      	ldr	r2, [pc, #720]	; (8002a70 <TIM14_Callback+0x33c>)
 800279e:	4013      	ands	r3, r2
 80027a0:	d504      	bpl.n	80027ac <TIM14_Callback+0x78>
 80027a2:	3b01      	subs	r3, #1
 80027a4:	2204      	movs	r2, #4
 80027a6:	4252      	negs	r2, r2
 80027a8:	4313      	orrs	r3, r2
 80027aa:	3301      	adds	r3, #1
 80027ac:	001a      	movs	r2, r3
 80027ae:	4bb1      	ldr	r3, [pc, #708]	; (8002a74 <TIM14_Callback+0x340>)
 80027b0:	0092      	lsls	r2, r2, #2
 80027b2:	58d0      	ldr	r0, [r2, r3]
 80027b4:	4bad      	ldr	r3, [pc, #692]	; (8002a6c <TIM14_Callback+0x338>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	3303      	adds	r3, #3
 80027ba:	4aad      	ldr	r2, [pc, #692]	; (8002a70 <TIM14_Callback+0x33c>)
 80027bc:	4013      	ands	r3, r2
 80027be:	d504      	bpl.n	80027ca <TIM14_Callback+0x96>
 80027c0:	3b01      	subs	r3, #1
 80027c2:	2204      	movs	r2, #4
 80027c4:	4252      	negs	r2, r2
 80027c6:	4313      	orrs	r3, r2
 80027c8:	3301      	adds	r3, #1
 80027ca:	001a      	movs	r2, r3
 80027cc:	4baa      	ldr	r3, [pc, #680]	; (8002a78 <TIM14_Callback+0x344>)
 80027ce:	0052      	lsls	r2, r2, #1
 80027d0:	5ad3      	ldrh	r3, [r2, r3]
 80027d2:	2200      	movs	r2, #0
 80027d4:	0019      	movs	r1, r3
 80027d6:	f003 fa32 	bl	8005c3e <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		if (HAL_I2C_IsDeviceReady(&hi2c1, RTC_ADDRESS, 3, 5) != HAL_OK) {
 80027da:	48a8      	ldr	r0, [pc, #672]	; (8002a7c <TIM14_Callback+0x348>)
 80027dc:	2305      	movs	r3, #5
 80027de:	2203      	movs	r2, #3
 80027e0:	21d0      	movs	r1, #208	; 0xd0
 80027e2:	f003 fd6b 	bl	80062bc <HAL_I2C_IsDeviceReady>
 80027e6:	1e03      	subs	r3, r0, #0
 80027e8:	d007      	beq.n	80027fa <TIM14_Callback+0xc6>
			setDigit(14 - curDig);
 80027ea:	4ba0      	ldr	r3, [pc, #640]	; (8002a6c <TIM14_Callback+0x338>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	220e      	movs	r2, #14
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	0018      	movs	r0, r3
 80027f4:	f7ff fed2 	bl	800259c <setDigit>
 80027f8:	e0e6      	b.n	80029c8 <TIM14_Callback+0x294>
		} else if (setupDig == curDig
 80027fa:	4ba1      	ldr	r3, [pc, #644]	; (8002a80 <TIM14_Callback+0x34c>)
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	001a      	movs	r2, r3
 8002800:	4b9a      	ldr	r3, [pc, #616]	; (8002a6c <TIM14_Callback+0x338>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	429a      	cmp	r2, r3
 8002806:	d13a      	bne.n	800287e <TIM14_Callback+0x14a>
				&& (setupMode == 1 || setupMode == 3 || setupMode == 4)) {
 8002808:	4b9e      	ldr	r3, [pc, #632]	; (8002a84 <TIM14_Callback+0x350>)
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	2b01      	cmp	r3, #1
 800280e:	d007      	beq.n	8002820 <TIM14_Callback+0xec>
 8002810:	4b9c      	ldr	r3, [pc, #624]	; (8002a84 <TIM14_Callback+0x350>)
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	2b03      	cmp	r3, #3
 8002816:	d003      	beq.n	8002820 <TIM14_Callback+0xec>
 8002818:	4b9a      	ldr	r3, [pc, #616]	; (8002a84 <TIM14_Callback+0x350>)
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	2b04      	cmp	r3, #4
 800281e:	d12e      	bne.n	800287e <TIM14_Callback+0x14a>
			setDigit(
					(delayForBlink < 50000) ?
 8002820:	4b99      	ldr	r3, [pc, #612]	; (8002a88 <TIM14_Callback+0x354>)
 8002822:	681b      	ldr	r3, [r3, #0]
			setDigit(
 8002824:	4a99      	ldr	r2, [pc, #612]	; (8002a8c <TIM14_Callback+0x358>)
 8002826:	4293      	cmp	r3, r2
 8002828:	dc24      	bgt.n	8002874 <TIM14_Callback+0x140>
							((int) (dispValue / pow(10.0, curDig)) % 10) : 10);
 800282a:	4b99      	ldr	r3, [pc, #612]	; (8002a90 <TIM14_Callback+0x35c>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	0018      	movs	r0, r3
 8002830:	f7ff fd14 	bl	800225c <__aeabi_i2d>
 8002834:	0004      	movs	r4, r0
 8002836:	000d      	movs	r5, r1
 8002838:	4b8c      	ldr	r3, [pc, #560]	; (8002a6c <TIM14_Callback+0x338>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	0018      	movs	r0, r3
 800283e:	f7ff fd0d 	bl	800225c <__aeabi_i2d>
 8002842:	0002      	movs	r2, r0
 8002844:	000b      	movs	r3, r1
 8002846:	2000      	movs	r0, #0
 8002848:	4992      	ldr	r1, [pc, #584]	; (8002a94 <TIM14_Callback+0x360>)
 800284a:	f006 f955 	bl	8008af8 <pow>
 800284e:	0002      	movs	r2, r0
 8002850:	000b      	movs	r3, r1
 8002852:	0020      	movs	r0, r4
 8002854:	0029      	movs	r1, r5
 8002856:	f7fe fa6f 	bl	8000d38 <__aeabi_ddiv>
 800285a:	0002      	movs	r2, r0
 800285c:	000b      	movs	r3, r1
 800285e:	0010      	movs	r0, r2
 8002860:	0019      	movs	r1, r3
 8002862:	f7ff fcc5 	bl	80021f0 <__aeabi_d2iz>
 8002866:	0003      	movs	r3, r0
			setDigit(
 8002868:	210a      	movs	r1, #10
 800286a:	0018      	movs	r0, r3
 800286c:	f7fd fdb8 	bl	80003e0 <__aeabi_idivmod>
 8002870:	000b      	movs	r3, r1
 8002872:	e000      	b.n	8002876 <TIM14_Callback+0x142>
 8002874:	230a      	movs	r3, #10
 8002876:	0018      	movs	r0, r3
 8002878:	f7ff fe90 	bl	800259c <setDigit>
 800287c:	e0a4      	b.n	80029c8 <TIM14_Callback+0x294>
		} else if (setupDig == 0 && (curDig == 0 || curDig == 1)
 800287e:	4b80      	ldr	r3, [pc, #512]	; (8002a80 <TIM14_Callback+0x34c>)
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d13a      	bne.n	80028fc <TIM14_Callback+0x1c8>
 8002886:	4b79      	ldr	r3, [pc, #484]	; (8002a6c <TIM14_Callback+0x338>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d003      	beq.n	8002896 <TIM14_Callback+0x162>
 800288e:	4b77      	ldr	r3, [pc, #476]	; (8002a6c <TIM14_Callback+0x338>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2b01      	cmp	r3, #1
 8002894:	d132      	bne.n	80028fc <TIM14_Callback+0x1c8>
				&& setupMode == 2) {
 8002896:	4b7b      	ldr	r3, [pc, #492]	; (8002a84 <TIM14_Callback+0x350>)
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	2b02      	cmp	r3, #2
 800289c:	d12e      	bne.n	80028fc <TIM14_Callback+0x1c8>
			setDigit(
					(delayForBlink < 50000) ?
 800289e:	4b7a      	ldr	r3, [pc, #488]	; (8002a88 <TIM14_Callback+0x354>)
 80028a0:	681b      	ldr	r3, [r3, #0]
			setDigit(
 80028a2:	4a7a      	ldr	r2, [pc, #488]	; (8002a8c <TIM14_Callback+0x358>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	dc24      	bgt.n	80028f2 <TIM14_Callback+0x1be>
							((int) (dispValue / pow(10.0, curDig)) % 10) : 10);
 80028a8:	4b79      	ldr	r3, [pc, #484]	; (8002a90 <TIM14_Callback+0x35c>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	0018      	movs	r0, r3
 80028ae:	f7ff fcd5 	bl	800225c <__aeabi_i2d>
 80028b2:	0004      	movs	r4, r0
 80028b4:	000d      	movs	r5, r1
 80028b6:	4b6d      	ldr	r3, [pc, #436]	; (8002a6c <TIM14_Callback+0x338>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	0018      	movs	r0, r3
 80028bc:	f7ff fcce 	bl	800225c <__aeabi_i2d>
 80028c0:	0002      	movs	r2, r0
 80028c2:	000b      	movs	r3, r1
 80028c4:	2000      	movs	r0, #0
 80028c6:	4973      	ldr	r1, [pc, #460]	; (8002a94 <TIM14_Callback+0x360>)
 80028c8:	f006 f916 	bl	8008af8 <pow>
 80028cc:	0002      	movs	r2, r0
 80028ce:	000b      	movs	r3, r1
 80028d0:	0020      	movs	r0, r4
 80028d2:	0029      	movs	r1, r5
 80028d4:	f7fe fa30 	bl	8000d38 <__aeabi_ddiv>
 80028d8:	0002      	movs	r2, r0
 80028da:	000b      	movs	r3, r1
 80028dc:	0010      	movs	r0, r2
 80028de:	0019      	movs	r1, r3
 80028e0:	f7ff fc86 	bl	80021f0 <__aeabi_d2iz>
 80028e4:	0003      	movs	r3, r0
			setDigit(
 80028e6:	210a      	movs	r1, #10
 80028e8:	0018      	movs	r0, r3
 80028ea:	f7fd fd79 	bl	80003e0 <__aeabi_idivmod>
 80028ee:	000b      	movs	r3, r1
 80028f0:	e000      	b.n	80028f4 <TIM14_Callback+0x1c0>
 80028f2:	230a      	movs	r3, #10
 80028f4:	0018      	movs	r0, r3
 80028f6:	f7ff fe51 	bl	800259c <setDigit>
 80028fa:	e065      	b.n	80029c8 <TIM14_Callback+0x294>
		} else if (setupDig == 1 && (curDig == 2 || curDig == 3)
 80028fc:	4b60      	ldr	r3, [pc, #384]	; (8002a80 <TIM14_Callback+0x34c>)
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	2b01      	cmp	r3, #1
 8002902:	d13a      	bne.n	800297a <TIM14_Callback+0x246>
 8002904:	4b59      	ldr	r3, [pc, #356]	; (8002a6c <TIM14_Callback+0x338>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2b02      	cmp	r3, #2
 800290a:	d003      	beq.n	8002914 <TIM14_Callback+0x1e0>
 800290c:	4b57      	ldr	r3, [pc, #348]	; (8002a6c <TIM14_Callback+0x338>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2b03      	cmp	r3, #3
 8002912:	d132      	bne.n	800297a <TIM14_Callback+0x246>
				&& setupMode == 2) {
 8002914:	4b5b      	ldr	r3, [pc, #364]	; (8002a84 <TIM14_Callback+0x350>)
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	2b02      	cmp	r3, #2
 800291a:	d12e      	bne.n	800297a <TIM14_Callback+0x246>
			setDigit(
					(delayForBlink < 50000) ?
 800291c:	4b5a      	ldr	r3, [pc, #360]	; (8002a88 <TIM14_Callback+0x354>)
 800291e:	681b      	ldr	r3, [r3, #0]
			setDigit(
 8002920:	4a5a      	ldr	r2, [pc, #360]	; (8002a8c <TIM14_Callback+0x358>)
 8002922:	4293      	cmp	r3, r2
 8002924:	dc24      	bgt.n	8002970 <TIM14_Callback+0x23c>
							((int) (dispValue / pow(10.0, curDig)) % 10) : 10);
 8002926:	4b5a      	ldr	r3, [pc, #360]	; (8002a90 <TIM14_Callback+0x35c>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	0018      	movs	r0, r3
 800292c:	f7ff fc96 	bl	800225c <__aeabi_i2d>
 8002930:	0004      	movs	r4, r0
 8002932:	000d      	movs	r5, r1
 8002934:	4b4d      	ldr	r3, [pc, #308]	; (8002a6c <TIM14_Callback+0x338>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	0018      	movs	r0, r3
 800293a:	f7ff fc8f 	bl	800225c <__aeabi_i2d>
 800293e:	0002      	movs	r2, r0
 8002940:	000b      	movs	r3, r1
 8002942:	2000      	movs	r0, #0
 8002944:	4953      	ldr	r1, [pc, #332]	; (8002a94 <TIM14_Callback+0x360>)
 8002946:	f006 f8d7 	bl	8008af8 <pow>
 800294a:	0002      	movs	r2, r0
 800294c:	000b      	movs	r3, r1
 800294e:	0020      	movs	r0, r4
 8002950:	0029      	movs	r1, r5
 8002952:	f7fe f9f1 	bl	8000d38 <__aeabi_ddiv>
 8002956:	0002      	movs	r2, r0
 8002958:	000b      	movs	r3, r1
 800295a:	0010      	movs	r0, r2
 800295c:	0019      	movs	r1, r3
 800295e:	f7ff fc47 	bl	80021f0 <__aeabi_d2iz>
 8002962:	0003      	movs	r3, r0
			setDigit(
 8002964:	210a      	movs	r1, #10
 8002966:	0018      	movs	r0, r3
 8002968:	f7fd fd3a 	bl	80003e0 <__aeabi_idivmod>
 800296c:	000b      	movs	r3, r1
 800296e:	e000      	b.n	8002972 <TIM14_Callback+0x23e>
 8002970:	230a      	movs	r3, #10
 8002972:	0018      	movs	r0, r3
 8002974:	f7ff fe12 	bl	800259c <setDigit>
 8002978:	e026      	b.n	80029c8 <TIM14_Callback+0x294>
		} else {
			setDigit((int) (dispValue / pow(10.0, curDig)) % 10);
 800297a:	4b45      	ldr	r3, [pc, #276]	; (8002a90 <TIM14_Callback+0x35c>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	0018      	movs	r0, r3
 8002980:	f7ff fc6c 	bl	800225c <__aeabi_i2d>
 8002984:	0004      	movs	r4, r0
 8002986:	000d      	movs	r5, r1
 8002988:	4b38      	ldr	r3, [pc, #224]	; (8002a6c <TIM14_Callback+0x338>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	0018      	movs	r0, r3
 800298e:	f7ff fc65 	bl	800225c <__aeabi_i2d>
 8002992:	0002      	movs	r2, r0
 8002994:	000b      	movs	r3, r1
 8002996:	2000      	movs	r0, #0
 8002998:	493e      	ldr	r1, [pc, #248]	; (8002a94 <TIM14_Callback+0x360>)
 800299a:	f006 f8ad 	bl	8008af8 <pow>
 800299e:	0002      	movs	r2, r0
 80029a0:	000b      	movs	r3, r1
 80029a2:	0020      	movs	r0, r4
 80029a4:	0029      	movs	r1, r5
 80029a6:	f7fe f9c7 	bl	8000d38 <__aeabi_ddiv>
 80029aa:	0002      	movs	r2, r0
 80029ac:	000b      	movs	r3, r1
 80029ae:	0010      	movs	r0, r2
 80029b0:	0019      	movs	r1, r3
 80029b2:	f7ff fc1d 	bl	80021f0 <__aeabi_d2iz>
 80029b6:	0003      	movs	r3, r0
 80029b8:	210a      	movs	r1, #10
 80029ba:	0018      	movs	r0, r3
 80029bc:	f7fd fd10 	bl	80003e0 <__aeabi_idivmod>
 80029c0:	000b      	movs	r3, r1
 80029c2:	0018      	movs	r0, r3
 80029c4:	f7ff fdea 	bl	800259c <setDigit>
		}
		HAL_GPIO_WritePin(SEG_Port[7], SEG_Pin[7],
 80029c8:	23a0      	movs	r3, #160	; 0xa0
 80029ca:	05d8      	lsls	r0, r3, #23
 80029cc:	2180      	movs	r1, #128	; 0x80
				((setupMode - 1) == curDig) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80029ce:	4b2d      	ldr	r3, [pc, #180]	; (8002a84 <TIM14_Callback+0x350>)
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	1e5a      	subs	r2, r3, #1
		HAL_GPIO_WritePin(SEG_Port[7], SEG_Pin[7],
 80029d4:	4b25      	ldr	r3, [pc, #148]	; (8002a6c <TIM14_Callback+0x338>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	425a      	negs	r2, r3
 80029dc:	4153      	adcs	r3, r2
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	001a      	movs	r2, r3
 80029e2:	f003 f92c 	bl	8005c3e <HAL_GPIO_WritePin>
 80029e6:	e074      	b.n	8002ad2 <TIM14_Callback+0x39e>
	} else if (setupMode == 2) {
 80029e8:	4b26      	ldr	r3, [pc, #152]	; (8002a84 <TIM14_Callback+0x350>)
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d157      	bne.n	8002aa0 <TIM14_Callback+0x36c>
		if (curDig == 0 || curDig == 1) {
 80029f0:	4b1e      	ldr	r3, [pc, #120]	; (8002a6c <TIM14_Callback+0x338>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d003      	beq.n	8002a00 <TIM14_Callback+0x2cc>
 80029f8:	4b1c      	ldr	r3, [pc, #112]	; (8002a6c <TIM14_Callback+0x338>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d119      	bne.n	8002a34 <TIM14_Callback+0x300>
			if (delay == 61 - (onBright)/2) {
 8002a00:	4b25      	ldr	r3, [pc, #148]	; (8002a98 <TIM14_Callback+0x364>)
 8002a02:	881b      	ldrh	r3, [r3, #0]
 8002a04:	085b      	lsrs	r3, r3, #1
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	001a      	movs	r2, r3
 8002a0a:	233d      	movs	r3, #61	; 0x3d
 8002a0c:	1a9a      	subs	r2, r3, r2
 8002a0e:	4b16      	ldr	r3, [pc, #88]	; (8002a68 <TIM14_Callback+0x334>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d15d      	bne.n	8002ad2 <TIM14_Callback+0x39e>
				HAL_GPIO_WritePin(DIG_Port[curDig], DIG_Pin[curDig],
 8002a16:	4b15      	ldr	r3, [pc, #84]	; (8002a6c <TIM14_Callback+0x338>)
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	4b16      	ldr	r3, [pc, #88]	; (8002a74 <TIM14_Callback+0x340>)
 8002a1c:	0092      	lsls	r2, r2, #2
 8002a1e:	58d0      	ldr	r0, [r2, r3]
 8002a20:	4b12      	ldr	r3, [pc, #72]	; (8002a6c <TIM14_Callback+0x338>)
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	4b14      	ldr	r3, [pc, #80]	; (8002a78 <TIM14_Callback+0x344>)
 8002a26:	0052      	lsls	r2, r2, #1
 8002a28:	5ad3      	ldrh	r3, [r2, r3]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	0019      	movs	r1, r3
 8002a2e:	f003 f906 	bl	8005c3e <HAL_GPIO_WritePin>
			if (delay == 61 - (onBright)/2) {
 8002a32:	e04e      	b.n	8002ad2 <TIM14_Callback+0x39e>
						GPIO_PIN_SET);
			}
		} else {
			if (delay == 61 - (offBright/2)) {
 8002a34:	4b19      	ldr	r3, [pc, #100]	; (8002a9c <TIM14_Callback+0x368>)
 8002a36:	881b      	ldrh	r3, [r3, #0]
 8002a38:	085b      	lsrs	r3, r3, #1
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	001a      	movs	r2, r3
 8002a3e:	233d      	movs	r3, #61	; 0x3d
 8002a40:	1a9a      	subs	r2, r3, r2
 8002a42:	4b09      	ldr	r3, [pc, #36]	; (8002a68 <TIM14_Callback+0x334>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d143      	bne.n	8002ad2 <TIM14_Callback+0x39e>
				HAL_GPIO_WritePin(DIG_Port[curDig], DIG_Pin[curDig],
 8002a4a:	4b08      	ldr	r3, [pc, #32]	; (8002a6c <TIM14_Callback+0x338>)
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	4b09      	ldr	r3, [pc, #36]	; (8002a74 <TIM14_Callback+0x340>)
 8002a50:	0092      	lsls	r2, r2, #2
 8002a52:	58d0      	ldr	r0, [r2, r3]
 8002a54:	4b05      	ldr	r3, [pc, #20]	; (8002a6c <TIM14_Callback+0x338>)
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	4b07      	ldr	r3, [pc, #28]	; (8002a78 <TIM14_Callback+0x344>)
 8002a5a:	0052      	lsls	r2, r2, #1
 8002a5c:	5ad3      	ldrh	r3, [r2, r3]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	0019      	movs	r1, r3
 8002a62:	f003 f8ec 	bl	8005c3e <HAL_GPIO_WritePin>
 8002a66:	e034      	b.n	8002ad2 <TIM14_Callback+0x39e>
 8002a68:	20000240 	.word	0x20000240
 8002a6c:	2000022c 	.word	0x2000022c
 8002a70:	80000003 	.word	0x80000003
 8002a74:	08009968 	.word	0x08009968
 8002a78:	08009978 	.word	0x08009978
 8002a7c:	200000f8 	.word	0x200000f8
 8002a80:	20000232 	.word	0x20000232
 8002a84:	20000231 	.word	0x20000231
 8002a88:	2000023c 	.word	0x2000023c
 8002a8c:	0000c34f 	.word	0x0000c34f
 8002a90:	20000228 	.word	0x20000228
 8002a94:	40240000 	.word	0x40240000
 8002a98:	20000004 	.word	0x20000004
 8002a9c:	20000006 	.word	0x20000006
						GPIO_PIN_SET);
			}

		}
	} else if (delay >= (61 - (brightness/2))) {
 8002aa0:	4b23      	ldr	r3, [pc, #140]	; (8002b30 <TIM14_Callback+0x3fc>)
 8002aa2:	881b      	ldrh	r3, [r3, #0]
 8002aa4:	085b      	lsrs	r3, r3, #1
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	001a      	movs	r2, r3
 8002aaa:	233d      	movs	r3, #61	; 0x3d
 8002aac:	1a9a      	subs	r2, r3, r2
 8002aae:	4b21      	ldr	r3, [pc, #132]	; (8002b34 <TIM14_Callback+0x400>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	dc0d      	bgt.n	8002ad2 <TIM14_Callback+0x39e>
		HAL_GPIO_WritePin(DIG_Port[curDig], DIG_Pin[curDig], GPIO_PIN_SET);
 8002ab6:	4b20      	ldr	r3, [pc, #128]	; (8002b38 <TIM14_Callback+0x404>)
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	4b20      	ldr	r3, [pc, #128]	; (8002b3c <TIM14_Callback+0x408>)
 8002abc:	0092      	lsls	r2, r2, #2
 8002abe:	58d0      	ldr	r0, [r2, r3]
 8002ac0:	4b1d      	ldr	r3, [pc, #116]	; (8002b38 <TIM14_Callback+0x404>)
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	4b1e      	ldr	r3, [pc, #120]	; (8002b40 <TIM14_Callback+0x40c>)
 8002ac6:	0052      	lsls	r2, r2, #1
 8002ac8:	5ad3      	ldrh	r3, [r2, r3]
 8002aca:	2201      	movs	r2, #1
 8002acc:	0019      	movs	r1, r3
 8002ace:	f003 f8b6 	bl	8005c3e <HAL_GPIO_WritePin>

	}

	if (delay == 60) {
 8002ad2:	4b18      	ldr	r3, [pc, #96]	; (8002b34 <TIM14_Callback+0x400>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2b3c      	cmp	r3, #60	; 0x3c
 8002ad8:	d111      	bne.n	8002afe <TIM14_Callback+0x3ca>
		delay = 0;
 8002ada:	4b16      	ldr	r3, [pc, #88]	; (8002b34 <TIM14_Callback+0x400>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	601a      	str	r2, [r3, #0]
		curDig = (curDig + 1) % 4;
 8002ae0:	4b15      	ldr	r3, [pc, #84]	; (8002b38 <TIM14_Callback+0x404>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	4a17      	ldr	r2, [pc, #92]	; (8002b44 <TIM14_Callback+0x410>)
 8002ae8:	4013      	ands	r3, r2
 8002aea:	d504      	bpl.n	8002af6 <TIM14_Callback+0x3c2>
 8002aec:	3b01      	subs	r3, #1
 8002aee:	2204      	movs	r2, #4
 8002af0:	4252      	negs	r2, r2
 8002af2:	4313      	orrs	r3, r2
 8002af4:	3301      	adds	r3, #1
 8002af6:	001a      	movs	r2, r3
 8002af8:	4b0f      	ldr	r3, [pc, #60]	; (8002b38 <TIM14_Callback+0x404>)
 8002afa:	601a      	str	r2, [r3, #0]
 8002afc:	e004      	b.n	8002b08 <TIM14_Callback+0x3d4>
	} else {
		delay++;
 8002afe:	4b0d      	ldr	r3, [pc, #52]	; (8002b34 <TIM14_Callback+0x400>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	1c5a      	adds	r2, r3, #1
 8002b04:	4b0b      	ldr	r3, [pc, #44]	; (8002b34 <TIM14_Callback+0x400>)
 8002b06:	601a      	str	r2, [r3, #0]
	}
	if (delayForBlink == 100000) {
 8002b08:	4b0f      	ldr	r3, [pc, #60]	; (8002b48 <TIM14_Callback+0x414>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a0f      	ldr	r2, [pc, #60]	; (8002b4c <TIM14_Callback+0x418>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d105      	bne.n	8002b1e <TIM14_Callback+0x3ea>
		Get_Time();
 8002b12:	f7ff fd0f 	bl	8002534 <Get_Time>
		delayForBlink = 0;
 8002b16:	4b0c      	ldr	r3, [pc, #48]	; (8002b48 <TIM14_Callback+0x414>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	601a      	str	r2, [r3, #0]
	} else {
		delayForBlink++;
	}
}
 8002b1c:	e004      	b.n	8002b28 <TIM14_Callback+0x3f4>
		delayForBlink++;
 8002b1e:	4b0a      	ldr	r3, [pc, #40]	; (8002b48 <TIM14_Callback+0x414>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	1c5a      	adds	r2, r3, #1
 8002b24:	4b08      	ldr	r3, [pc, #32]	; (8002b48 <TIM14_Callback+0x414>)
 8002b26:	601a      	str	r2, [r3, #0]
}
 8002b28:	46c0      	nop			; (mov r8, r8)
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bdb0      	pop	{r4, r5, r7, pc}
 8002b2e:	46c0      	nop			; (mov r8, r8)
 8002b30:	20000234 	.word	0x20000234
 8002b34:	20000240 	.word	0x20000240
 8002b38:	2000022c 	.word	0x2000022c
 8002b3c:	08009968 	.word	0x08009968
 8002b40:	08009978 	.word	0x08009978
 8002b44:	80000003 	.word	0x80000003
 8002b48:	2000023c 	.word	0x2000023c
 8002b4c:	000186a0 	.word	0x000186a0

08002b50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b52:	b085      	sub	sp, #20
 8002b54:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b56:	f001 fd8d 	bl	8004674 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b5a:	f001 f933 	bl	8003dc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b5e:	f001 faed 	bl	800413c <MX_GPIO_Init>
  MX_ADC1_Init();
 8002b62:	f001 f98d 	bl	8003e80 <MX_ADC1_Init>
  MX_TIM3_Init();
 8002b66:	f001 fa65 	bl	8004034 <MX_TIM3_Init>
  MX_TIM14_Init();
 8002b6a:	f001 fac3 	bl	80040f4 <MX_TIM14_Init>
  MX_RTC_Init();
 8002b6e:	f001 fa33 	bl	8003fd8 <MX_RTC_Init>
  MX_I2C1_Init();
 8002b72:	f001 f9f1 	bl	8003f58 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
	HAL_ADCEx_Calibration_Start(&hadc1);
 8002b76:	4ba7      	ldr	r3, [pc, #668]	; (8002e14 <main+0x2c4>)
 8002b78:	0018      	movs	r0, r3
 8002b7a:	f002 fd2b 	bl	80055d4 <HAL_ADCEx_Calibration_Start>
	HAL_TIM_Base_Start_IT(&htim14);
 8002b7e:	4ba6      	ldr	r3, [pc, #664]	; (8002e18 <main+0x2c8>)
 8002b80:	0018      	movs	r0, r3
 8002b82:	f005 f809 	bl	8007b98 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 8002b86:	4ba5      	ldr	r3, [pc, #660]	; (8002e1c <main+0x2cc>)
 8002b88:	0018      	movs	r0, r3
 8002b8a:	f005 f805 	bl	8007b98 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002b8e:	4ba3      	ldr	r3, [pc, #652]	; (8002e1c <main+0x2cc>)
 8002b90:	2100      	movs	r1, #0
 8002b92:	0018      	movs	r0, r3
 8002b94:	f005 f8a6 	bl	8007ce4 <HAL_TIM_PWM_Start>

	onTime = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0);
 8002b98:	4ba1      	ldr	r3, [pc, #644]	; (8002e20 <main+0x2d0>)
 8002b9a:	2100      	movs	r1, #0
 8002b9c:	0018      	movs	r0, r3
 8002b9e:	f004 ff88 	bl	8007ab2 <HAL_RTCEx_BKUPRead>
 8002ba2:	0003      	movs	r3, r0
 8002ba4:	b29a      	uxth	r2, r3
 8002ba6:	4b9f      	ldr	r3, [pc, #636]	; (8002e24 <main+0x2d4>)
 8002ba8:	801a      	strh	r2, [r3, #0]
	offTime = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1);
 8002baa:	4b9d      	ldr	r3, [pc, #628]	; (8002e20 <main+0x2d0>)
 8002bac:	2101      	movs	r1, #1
 8002bae:	0018      	movs	r0, r3
 8002bb0:	f004 ff7f 	bl	8007ab2 <HAL_RTCEx_BKUPRead>
 8002bb4:	0003      	movs	r3, r0
 8002bb6:	b29a      	uxth	r2, r3
 8002bb8:	4b9b      	ldr	r3, [pc, #620]	; (8002e28 <main+0x2d8>)
 8002bba:	801a      	strh	r2, [r3, #0]
	onBright =
			(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR2) != 0) ?
 8002bbc:	4b98      	ldr	r3, [pc, #608]	; (8002e20 <main+0x2d0>)
 8002bbe:	2102      	movs	r1, #2
 8002bc0:	0018      	movs	r0, r3
 8002bc2:	f004 ff76 	bl	8007ab2 <HAL_RTCEx_BKUPRead>
 8002bc6:	1e03      	subs	r3, r0, #0
	onBright =
 8002bc8:	d007      	beq.n	8002bda <main+0x8a>
					HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR2) : 50;
 8002bca:	4b95      	ldr	r3, [pc, #596]	; (8002e20 <main+0x2d0>)
 8002bcc:	2102      	movs	r1, #2
 8002bce:	0018      	movs	r0, r3
 8002bd0:	f004 ff6f 	bl	8007ab2 <HAL_RTCEx_BKUPRead>
 8002bd4:	0003      	movs	r3, r0
	onBright =
 8002bd6:	b29a      	uxth	r2, r3
 8002bd8:	e000      	b.n	8002bdc <main+0x8c>
 8002bda:	2232      	movs	r2, #50	; 0x32
 8002bdc:	4b93      	ldr	r3, [pc, #588]	; (8002e2c <main+0x2dc>)
 8002bde:	801a      	strh	r2, [r3, #0]
	offBright = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR3);
 8002be0:	4b8f      	ldr	r3, [pc, #572]	; (8002e20 <main+0x2d0>)
 8002be2:	2103      	movs	r1, #3
 8002be4:	0018      	movs	r0, r3
 8002be6:	f004 ff64 	bl	8007ab2 <HAL_RTCEx_BKUPRead>
 8002bea:	0003      	movs	r3, r0
 8002bec:	b29a      	uxth	r2, r3
 8002bee:	4b90      	ldr	r3, [pc, #576]	; (8002e30 <main+0x2e0>)
 8002bf0:	801a      	strh	r2, [r3, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

// Obsługa przetwornicy
		HAL_ADC_Start(&hadc1);
 8002bf2:	4b88      	ldr	r3, [pc, #544]	; (8002e14 <main+0x2c4>)
 8002bf4:	0018      	movs	r0, r3
 8002bf6:	f002 f8c3 	bl	8004d80 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	425a      	negs	r2, r3
 8002bfe:	4b85      	ldr	r3, [pc, #532]	; (8002e14 <main+0x2c4>)
 8002c00:	0011      	movs	r1, r2
 8002c02:	0018      	movs	r0, r3
 8002c04:	f002 f90a 	bl	8004e1c <HAL_ADC_PollForConversion>
		uint32_t value = HAL_ADC_GetValue(&hadc1);
 8002c08:	4b82      	ldr	r3, [pc, #520]	; (8002e14 <main+0x2c4>)
 8002c0a:	0018      	movs	r0, r3
 8002c0c:	f002 f99a 	bl	8004f44 <HAL_ADC_GetValue>
 8002c10:	0003      	movs	r3, r0
 8002c12:	60fb      	str	r3, [r7, #12]
		float voltage = (((3.3 * value)) / 4096) * 33.6;
 8002c14:	68f8      	ldr	r0, [r7, #12]
 8002c16:	f7ff fb51 	bl	80022bc <__aeabi_ui2d>
 8002c1a:	4a86      	ldr	r2, [pc, #536]	; (8002e34 <main+0x2e4>)
 8002c1c:	4b86      	ldr	r3, [pc, #536]	; (8002e38 <main+0x2e8>)
 8002c1e:	f7fe fc85 	bl	800152c <__aeabi_dmul>
 8002c22:	0002      	movs	r2, r0
 8002c24:	000b      	movs	r3, r1
 8002c26:	0010      	movs	r0, r2
 8002c28:	0019      	movs	r1, r3
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	4b83      	ldr	r3, [pc, #524]	; (8002e3c <main+0x2ec>)
 8002c2e:	f7fe f883 	bl	8000d38 <__aeabi_ddiv>
 8002c32:	0002      	movs	r2, r0
 8002c34:	000b      	movs	r3, r1
 8002c36:	0010      	movs	r0, r2
 8002c38:	0019      	movs	r1, r3
 8002c3a:	4a81      	ldr	r2, [pc, #516]	; (8002e40 <main+0x2f0>)
 8002c3c:	4b81      	ldr	r3, [pc, #516]	; (8002e44 <main+0x2f4>)
 8002c3e:	f7fe fc75 	bl	800152c <__aeabi_dmul>
 8002c42:	0002      	movs	r2, r0
 8002c44:	000b      	movs	r3, r1
 8002c46:	0010      	movs	r0, r2
 8002c48:	0019      	movs	r1, r3
 8002c4a:	f7ff fb5d 	bl	8002308 <__aeabi_d2f>
 8002c4e:	1c03      	adds	r3, r0, #0
 8002c50:	60bb      	str	r3, [r7, #8]
		if (35 < voltage) {
 8002c52:	497d      	ldr	r1, [pc, #500]	; (8002e48 <main+0x2f8>)
 8002c54:	68b8      	ldr	r0, [r7, #8]
 8002c56:	f7fd fc2d 	bl	80004b4 <__aeabi_fcmpgt>
 8002c5a:	1e03      	subs	r3, r0, #0
 8002c5c:	d00a      	beq.n	8002c74 <main+0x124>
			if (pwm > 0)
 8002c5e:	4b7b      	ldr	r3, [pc, #492]	; (8002e4c <main+0x2fc>)
 8002c60:	881b      	ldrh	r3, [r3, #0]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d010      	beq.n	8002c88 <main+0x138>
				pwm--;
 8002c66:	4b79      	ldr	r3, [pc, #484]	; (8002e4c <main+0x2fc>)
 8002c68:	881b      	ldrh	r3, [r3, #0]
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	b29a      	uxth	r2, r3
 8002c6e:	4b77      	ldr	r3, [pc, #476]	; (8002e4c <main+0x2fc>)
 8002c70:	801a      	strh	r2, [r3, #0]
 8002c72:	e009      	b.n	8002c88 <main+0x138>
		} else {
			if (pwm < 198)
 8002c74:	4b75      	ldr	r3, [pc, #468]	; (8002e4c <main+0x2fc>)
 8002c76:	881b      	ldrh	r3, [r3, #0]
 8002c78:	2bc5      	cmp	r3, #197	; 0xc5
 8002c7a:	d805      	bhi.n	8002c88 <main+0x138>
				pwm++;
 8002c7c:	4b73      	ldr	r3, [pc, #460]	; (8002e4c <main+0x2fc>)
 8002c7e:	881b      	ldrh	r3, [r3, #0]
 8002c80:	3301      	adds	r3, #1
 8002c82:	b29a      	uxth	r2, r3
 8002c84:	4b71      	ldr	r3, [pc, #452]	; (8002e4c <main+0x2fc>)
 8002c86:	801a      	strh	r2, [r3, #0]
		}
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pwm);
 8002c88:	4b70      	ldr	r3, [pc, #448]	; (8002e4c <main+0x2fc>)
 8002c8a:	881a      	ldrh	r2, [r3, #0]
 8002c8c:	4b63      	ldr	r3, [pc, #396]	; (8002e1c <main+0x2cc>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	635a      	str	r2, [r3, #52]	; 0x34
		if (setupMode == 0) { // Dla setupMode równego 0 zegarek pracuje normalnie
 8002c92:	4b6f      	ldr	r3, [pc, #444]	; (8002e50 <main+0x300>)
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d000      	beq.n	8002c9c <main+0x14c>
 8002c9a:	e067      	b.n	8002d6c <main+0x21c>
			if (dispValue % 100 != time.Minutes) {
 8002c9c:	4b6d      	ldr	r3, [pc, #436]	; (8002e54 <main+0x304>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2164      	movs	r1, #100	; 0x64
 8002ca2:	0018      	movs	r0, r3
 8002ca4:	f7fd fb9c 	bl	80003e0 <__aeabi_idivmod>
 8002ca8:	000b      	movs	r3, r1
 8002caa:	001a      	movs	r2, r3
 8002cac:	4b6a      	ldr	r3, [pc, #424]	; (8002e58 <main+0x308>)
 8002cae:	785b      	ldrb	r3, [r3, #1]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d009      	beq.n	8002cc8 <main+0x178>
				dispValue = (time.Hours * 100) + time.Minutes;
 8002cb4:	4b68      	ldr	r3, [pc, #416]	; (8002e58 <main+0x308>)
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	001a      	movs	r2, r3
 8002cba:	2364      	movs	r3, #100	; 0x64
 8002cbc:	4353      	muls	r3, r2
 8002cbe:	4a66      	ldr	r2, [pc, #408]	; (8002e58 <main+0x308>)
 8002cc0:	7852      	ldrb	r2, [r2, #1]
 8002cc2:	189a      	adds	r2, r3, r2
 8002cc4:	4b63      	ldr	r3, [pc, #396]	; (8002e54 <main+0x304>)
 8002cc6:	601a      	str	r2, [r3, #0]
			}
			if (onTime < offTime) {
 8002cc8:	4b56      	ldr	r3, [pc, #344]	; (8002e24 <main+0x2d4>)
 8002cca:	881a      	ldrh	r2, [r3, #0]
 8002ccc:	4b56      	ldr	r3, [pc, #344]	; (8002e28 <main+0x2d8>)
 8002cce:	881b      	ldrh	r3, [r3, #0]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d217      	bcs.n	8002d04 <main+0x1b4>
				if (dispValue >= onTime && dispValue < offTime) {
 8002cd4:	4b53      	ldr	r3, [pc, #332]	; (8002e24 <main+0x2d4>)
 8002cd6:	881b      	ldrh	r3, [r3, #0]
 8002cd8:	001a      	movs	r2, r3
 8002cda:	4b5e      	ldr	r3, [pc, #376]	; (8002e54 <main+0x304>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	dc0b      	bgt.n	8002cfa <main+0x1aa>
 8002ce2:	4b51      	ldr	r3, [pc, #324]	; (8002e28 <main+0x2d8>)
 8002ce4:	881b      	ldrh	r3, [r3, #0]
 8002ce6:	001a      	movs	r2, r3
 8002ce8:	4b5a      	ldr	r3, [pc, #360]	; (8002e54 <main+0x304>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	dd04      	ble.n	8002cfa <main+0x1aa>
					brightness = onBright;
 8002cf0:	4b4e      	ldr	r3, [pc, #312]	; (8002e2c <main+0x2dc>)
 8002cf2:	881a      	ldrh	r2, [r3, #0]
 8002cf4:	4b59      	ldr	r3, [pc, #356]	; (8002e5c <main+0x30c>)
 8002cf6:	801a      	strh	r2, [r3, #0]
 8002cf8:	e026      	b.n	8002d48 <main+0x1f8>
				} else {
					brightness = offBright;
 8002cfa:	4b4d      	ldr	r3, [pc, #308]	; (8002e30 <main+0x2e0>)
 8002cfc:	881a      	ldrh	r2, [r3, #0]
 8002cfe:	4b57      	ldr	r3, [pc, #348]	; (8002e5c <main+0x30c>)
 8002d00:	801a      	strh	r2, [r3, #0]
 8002d02:	e021      	b.n	8002d48 <main+0x1f8>
				}

			} else if (onTime > offTime) {
 8002d04:	4b47      	ldr	r3, [pc, #284]	; (8002e24 <main+0x2d4>)
 8002d06:	881a      	ldrh	r2, [r3, #0]
 8002d08:	4b47      	ldr	r3, [pc, #284]	; (8002e28 <main+0x2d8>)
 8002d0a:	881b      	ldrh	r3, [r3, #0]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d917      	bls.n	8002d40 <main+0x1f0>
				if (dispValue < onTime && dispValue >= offTime) {
 8002d10:	4b44      	ldr	r3, [pc, #272]	; (8002e24 <main+0x2d4>)
 8002d12:	881b      	ldrh	r3, [r3, #0]
 8002d14:	001a      	movs	r2, r3
 8002d16:	4b4f      	ldr	r3, [pc, #316]	; (8002e54 <main+0x304>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	dd0b      	ble.n	8002d36 <main+0x1e6>
 8002d1e:	4b42      	ldr	r3, [pc, #264]	; (8002e28 <main+0x2d8>)
 8002d20:	881b      	ldrh	r3, [r3, #0]
 8002d22:	001a      	movs	r2, r3
 8002d24:	4b4b      	ldr	r3, [pc, #300]	; (8002e54 <main+0x304>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	dc04      	bgt.n	8002d36 <main+0x1e6>
					brightness = offBright;
 8002d2c:	4b40      	ldr	r3, [pc, #256]	; (8002e30 <main+0x2e0>)
 8002d2e:	881a      	ldrh	r2, [r3, #0]
 8002d30:	4b4a      	ldr	r3, [pc, #296]	; (8002e5c <main+0x30c>)
 8002d32:	801a      	strh	r2, [r3, #0]
 8002d34:	e008      	b.n	8002d48 <main+0x1f8>
				} else {
					brightness = onBright;
 8002d36:	4b3d      	ldr	r3, [pc, #244]	; (8002e2c <main+0x2dc>)
 8002d38:	881a      	ldrh	r2, [r3, #0]
 8002d3a:	4b48      	ldr	r3, [pc, #288]	; (8002e5c <main+0x30c>)
 8002d3c:	801a      	strh	r2, [r3, #0]
 8002d3e:	e003      	b.n	8002d48 <main+0x1f8>
				}
			} else {
				brightness = onBright;
 8002d40:	4b3a      	ldr	r3, [pc, #232]	; (8002e2c <main+0x2dc>)
 8002d42:	881a      	ldrh	r2, [r3, #0]
 8002d44:	4b45      	ldr	r3, [pc, #276]	; (8002e5c <main+0x30c>)
 8002d46:	801a      	strh	r2, [r3, #0]
			}
			if (clickType == 5) {
 8002d48:	4b45      	ldr	r3, [pc, #276]	; (8002e60 <main+0x310>)
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	2b05      	cmp	r3, #5
 8002d4e:	d000      	beq.n	8002d52 <main+0x202>
 8002d50:	e74f      	b.n	8002bf2 <main+0xa2>
				clickType = 0;
 8002d52:	4b43      	ldr	r3, [pc, #268]	; (8002e60 <main+0x310>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	701a      	strb	r2, [r3, #0]
				setupDig = 0;
 8002d58:	4b42      	ldr	r3, [pc, #264]	; (8002e64 <main+0x314>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	701a      	strb	r2, [r3, #0]
				setupMode++;
 8002d5e:	4b3c      	ldr	r3, [pc, #240]	; (8002e50 <main+0x300>)
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	3301      	adds	r3, #1
 8002d64:	b2da      	uxtb	r2, r3
 8002d66:	4b3a      	ldr	r3, [pc, #232]	; (8002e50 <main+0x300>)
 8002d68:	701a      	strb	r2, [r3, #0]
 8002d6a:	e742      	b.n	8002bf2 <main+0xa2>
			}
		} else if (setupMode != 5) {
 8002d6c:	4b38      	ldr	r3, [pc, #224]	; (8002e50 <main+0x300>)
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	2b05      	cmp	r3, #5
 8002d72:	d100      	bne.n	8002d76 <main+0x226>
 8002d74:	e73d      	b.n	8002bf2 <main+0xa2>
			brightness = 50;
 8002d76:	4b39      	ldr	r3, [pc, #228]	; (8002e5c <main+0x30c>)
 8002d78:	2232      	movs	r2, #50	; 0x32
 8002d7a:	801a      	strh	r2, [r3, #0]
			if (clickType == 5) {
 8002d7c:	4b38      	ldr	r3, [pc, #224]	; (8002e60 <main+0x310>)
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	2b05      	cmp	r3, #5
 8002d82:	d106      	bne.n	8002d92 <main+0x242>
				clickType = 0;
 8002d84:	4b36      	ldr	r3, [pc, #216]	; (8002e60 <main+0x310>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	701a      	strb	r2, [r3, #0]
				setupMode = 0;
 8002d8a:	4b31      	ldr	r3, [pc, #196]	; (8002e50 <main+0x300>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	701a      	strb	r2, [r3, #0]
 8002d90:	e02c      	b.n	8002dec <main+0x29c>
			} else if (clickType == 4) {
 8002d92:	4b33      	ldr	r3, [pc, #204]	; (8002e60 <main+0x310>)
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	2b04      	cmp	r3, #4
 8002d98:	d112      	bne.n	8002dc0 <main+0x270>
				clickType = 0;
 8002d9a:	4b31      	ldr	r3, [pc, #196]	; (8002e60 <main+0x310>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	701a      	strb	r2, [r3, #0]
				setupDig = 0;
 8002da0:	4b30      	ldr	r3, [pc, #192]	; (8002e64 <main+0x314>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	701a      	strb	r2, [r3, #0]
				setupMode = (setupMode == 1) ? 4 : setupMode - 1;
 8002da6:	4b2a      	ldr	r3, [pc, #168]	; (8002e50 <main+0x300>)
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d004      	beq.n	8002db8 <main+0x268>
 8002dae:	4b28      	ldr	r3, [pc, #160]	; (8002e50 <main+0x300>)
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	3b01      	subs	r3, #1
 8002db4:	b2da      	uxtb	r2, r3
 8002db6:	e000      	b.n	8002dba <main+0x26a>
 8002db8:	2204      	movs	r2, #4
 8002dba:	4b25      	ldr	r3, [pc, #148]	; (8002e50 <main+0x300>)
 8002dbc:	701a      	strb	r2, [r3, #0]
 8002dbe:	e015      	b.n	8002dec <main+0x29c>
			} else if (clickType == 6) {
 8002dc0:	4b27      	ldr	r3, [pc, #156]	; (8002e60 <main+0x310>)
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	2b06      	cmp	r3, #6
 8002dc6:	d111      	bne.n	8002dec <main+0x29c>
				clickType = 0;
 8002dc8:	4b25      	ldr	r3, [pc, #148]	; (8002e60 <main+0x310>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	701a      	strb	r2, [r3, #0]
				setupDig = 0;
 8002dce:	4b25      	ldr	r3, [pc, #148]	; (8002e64 <main+0x314>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	701a      	strb	r2, [r3, #0]
				setupMode = (setupMode >= 4) ? 1 : setupMode + 1;
 8002dd4:	4b1e      	ldr	r3, [pc, #120]	; (8002e50 <main+0x300>)
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	2b03      	cmp	r3, #3
 8002dda:	d804      	bhi.n	8002de6 <main+0x296>
 8002ddc:	4b1c      	ldr	r3, [pc, #112]	; (8002e50 <main+0x300>)
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	3301      	adds	r3, #1
 8002de2:	b2da      	uxtb	r2, r3
 8002de4:	e000      	b.n	8002de8 <main+0x298>
 8002de6:	2201      	movs	r2, #1
 8002de8:	4b19      	ldr	r3, [pc, #100]	; (8002e50 <main+0x300>)
 8002dea:	701a      	strb	r2, [r3, #0]
			}
			switch (setupMode) {
 8002dec:	4b18      	ldr	r3, [pc, #96]	; (8002e50 <main+0x300>)
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	2b04      	cmp	r3, #4
 8002df2:	d101      	bne.n	8002df8 <main+0x2a8>
 8002df4:	f000 fd96 	bl	8003924 <main+0xdd4>
 8002df8:	dd00      	ble.n	8002dfc <main+0x2ac>
 8002dfa:	e6fa      	b.n	8002bf2 <main+0xa2>
 8002dfc:	2b03      	cmp	r3, #3
 8002dfe:	d100      	bne.n	8002e02 <main+0x2b2>
 8002e00:	e35e      	b.n	80034c0 <main+0x970>
 8002e02:	dd00      	ble.n	8002e06 <main+0x2b6>
 8002e04:	e6f5      	b.n	8002bf2 <main+0xa2>
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d02e      	beq.n	8002e68 <main+0x318>
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d100      	bne.n	8002e10 <main+0x2c0>
 8002e0e:	e272      	b.n	80032f6 <main+0x7a6>
 8002e10:	f000 ffc8 	bl	8003da4 <main+0x1254>
 8002e14:	20000094 	.word	0x20000094
 8002e18:	200001c4 	.word	0x200001c4
 8002e1c:	20000178 	.word	0x20000178
 8002e20:	2000014c 	.word	0x2000014c
 8002e24:	20000236 	.word	0x20000236
 8002e28:	20000238 	.word	0x20000238
 8002e2c:	20000004 	.word	0x20000004
 8002e30:	20000006 	.word	0x20000006
 8002e34:	66666666 	.word	0x66666666
 8002e38:	400a6666 	.word	0x400a6666
 8002e3c:	40b00000 	.word	0x40b00000
 8002e40:	cccccccd 	.word	0xcccccccd
 8002e44:	4040cccc 	.word	0x4040cccc
 8002e48:	420c0000 	.word	0x420c0000
 8002e4c:	20000002 	.word	0x20000002
 8002e50:	20000231 	.word	0x20000231
 8002e54:	20000228 	.word	0x20000228
 8002e58:	20000210 	.word	0x20000210
 8002e5c:	20000234 	.word	0x20000234
 8002e60:	20000230 	.word	0x20000230
 8002e64:	20000232 	.word	0x20000232
			case 1:
				dispValue = (time.Hours * 100) + time.Minutes;
 8002e68:	4bb2      	ldr	r3, [pc, #712]	; (8003134 <main+0x5e4>)
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	001a      	movs	r2, r3
 8002e6e:	2364      	movs	r3, #100	; 0x64
 8002e70:	4353      	muls	r3, r2
 8002e72:	4ab0      	ldr	r2, [pc, #704]	; (8003134 <main+0x5e4>)
 8002e74:	7852      	ldrb	r2, [r2, #1]
 8002e76:	189a      	adds	r2, r3, r2
 8002e78:	4baf      	ldr	r3, [pc, #700]	; (8003138 <main+0x5e8>)
 8002e7a:	601a      	str	r2, [r3, #0]
				newDig = ((int) (dispValue / pow(10.0, setupDig)) % 10);
 8002e7c:	4bae      	ldr	r3, [pc, #696]	; (8003138 <main+0x5e8>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	0018      	movs	r0, r3
 8002e82:	f7ff f9eb 	bl	800225c <__aeabi_i2d>
 8002e86:	0004      	movs	r4, r0
 8002e88:	000d      	movs	r5, r1
 8002e8a:	4bac      	ldr	r3, [pc, #688]	; (800313c <main+0x5ec>)
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	0018      	movs	r0, r3
 8002e90:	f7ff fa14 	bl	80022bc <__aeabi_ui2d>
 8002e94:	0002      	movs	r2, r0
 8002e96:	000b      	movs	r3, r1
 8002e98:	2000      	movs	r0, #0
 8002e9a:	49a9      	ldr	r1, [pc, #676]	; (8003140 <main+0x5f0>)
 8002e9c:	f005 fe2c 	bl	8008af8 <pow>
 8002ea0:	0002      	movs	r2, r0
 8002ea2:	000b      	movs	r3, r1
 8002ea4:	0020      	movs	r0, r4
 8002ea6:	0029      	movs	r1, r5
 8002ea8:	f7fd ff46 	bl	8000d38 <__aeabi_ddiv>
 8002eac:	0002      	movs	r2, r0
 8002eae:	000b      	movs	r3, r1
 8002eb0:	0010      	movs	r0, r2
 8002eb2:	0019      	movs	r1, r3
 8002eb4:	f7ff f99c 	bl	80021f0 <__aeabi_d2iz>
 8002eb8:	0003      	movs	r3, r0
 8002eba:	210a      	movs	r1, #10
 8002ebc:	0018      	movs	r0, r3
 8002ebe:	f7fd fa8f 	bl	80003e0 <__aeabi_idivmod>
 8002ec2:	000b      	movs	r3, r1
 8002ec4:	b2da      	uxtb	r2, r3
 8002ec6:	4b9f      	ldr	r3, [pc, #636]	; (8003144 <main+0x5f4>)
 8002ec8:	701a      	strb	r2, [r3, #0]
				if (clickType == 2) {
 8002eca:	4b9f      	ldr	r3, [pc, #636]	; (8003148 <main+0x5f8>)
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d13b      	bne.n	8002f4a <main+0x3fa>
					delayForBlink = 25000;
 8002ed2:	4b9e      	ldr	r3, [pc, #632]	; (800314c <main+0x5fc>)
 8002ed4:	4a9e      	ldr	r2, [pc, #632]	; (8003150 <main+0x600>)
 8002ed6:	601a      	str	r2, [r3, #0]
					clickType = 0;
 8002ed8:	4b9b      	ldr	r3, [pc, #620]	; (8003148 <main+0x5f8>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	701a      	strb	r2, [r3, #0]
					setupDig = (setupDig + 1) % 4;
 8002ede:	4b97      	ldr	r3, [pc, #604]	; (800313c <main+0x5ec>)
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	4a9b      	ldr	r2, [pc, #620]	; (8003154 <main+0x604>)
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	d504      	bpl.n	8002ef4 <main+0x3a4>
 8002eea:	3b01      	subs	r3, #1
 8002eec:	2204      	movs	r2, #4
 8002eee:	4252      	negs	r2, r2
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	b2da      	uxtb	r2, r3
 8002ef6:	4b91      	ldr	r3, [pc, #580]	; (800313c <main+0x5ec>)
 8002ef8:	701a      	strb	r2, [r3, #0]
					newDig = ((int) (dispValue / pow(10.0, setupDig)) % 10);
 8002efa:	4b8f      	ldr	r3, [pc, #572]	; (8003138 <main+0x5e8>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	0018      	movs	r0, r3
 8002f00:	f7ff f9ac 	bl	800225c <__aeabi_i2d>
 8002f04:	0004      	movs	r4, r0
 8002f06:	000d      	movs	r5, r1
 8002f08:	4b8c      	ldr	r3, [pc, #560]	; (800313c <main+0x5ec>)
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	0018      	movs	r0, r3
 8002f0e:	f7ff f9d5 	bl	80022bc <__aeabi_ui2d>
 8002f12:	0002      	movs	r2, r0
 8002f14:	000b      	movs	r3, r1
 8002f16:	2000      	movs	r0, #0
 8002f18:	4989      	ldr	r1, [pc, #548]	; (8003140 <main+0x5f0>)
 8002f1a:	f005 fded 	bl	8008af8 <pow>
 8002f1e:	0002      	movs	r2, r0
 8002f20:	000b      	movs	r3, r1
 8002f22:	0020      	movs	r0, r4
 8002f24:	0029      	movs	r1, r5
 8002f26:	f7fd ff07 	bl	8000d38 <__aeabi_ddiv>
 8002f2a:	0002      	movs	r2, r0
 8002f2c:	000b      	movs	r3, r1
 8002f2e:	0010      	movs	r0, r2
 8002f30:	0019      	movs	r1, r3
 8002f32:	f7ff f95d 	bl	80021f0 <__aeabi_d2iz>
 8002f36:	0003      	movs	r3, r0
 8002f38:	210a      	movs	r1, #10
 8002f3a:	0018      	movs	r0, r3
 8002f3c:	f7fd fa50 	bl	80003e0 <__aeabi_idivmod>
 8002f40:	000b      	movs	r3, r1
 8002f42:	b2da      	uxtb	r2, r3
 8002f44:	4b7f      	ldr	r3, [pc, #508]	; (8003144 <main+0x5f4>)
 8002f46:	701a      	strb	r2, [r3, #0]
 8002f48:	e113      	b.n	8003172 <main+0x622>
				} else if (clickType == 1) {
 8002f4a:	4b7f      	ldr	r3, [pc, #508]	; (8003148 <main+0x5f8>)
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d000      	beq.n	8002f54 <main+0x404>
 8002f52:	e07b      	b.n	800304c <main+0x4fc>
					clickType = 0;
 8002f54:	4b7c      	ldr	r3, [pc, #496]	; (8003148 <main+0x5f8>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	701a      	strb	r2, [r3, #0]
					if (setupDig == 0) {
 8002f5a:	4b78      	ldr	r3, [pc, #480]	; (800313c <main+0x5ec>)
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d10b      	bne.n	8002f7a <main+0x42a>
						newDig = (newDig + 1) % 10;
 8002f62:	4b78      	ldr	r3, [pc, #480]	; (8003144 <main+0x5f4>)
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	3301      	adds	r3, #1
 8002f68:	210a      	movs	r1, #10
 8002f6a:	0018      	movs	r0, r3
 8002f6c:	f7fd fa38 	bl	80003e0 <__aeabi_idivmod>
 8002f70:	000b      	movs	r3, r1
 8002f72:	b2da      	uxtb	r2, r3
 8002f74:	4b73      	ldr	r3, [pc, #460]	; (8003144 <main+0x5f4>)
 8002f76:	701a      	strb	r2, [r3, #0]
 8002f78:	e0fb      	b.n	8003172 <main+0x622>
					} else if (setupDig == 1) {
 8002f7a:	4b70      	ldr	r3, [pc, #448]	; (800313c <main+0x5ec>)
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d10b      	bne.n	8002f9a <main+0x44a>
						newDig = (newDig + 1) % 6;
 8002f82:	4b70      	ldr	r3, [pc, #448]	; (8003144 <main+0x5f4>)
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	3301      	adds	r3, #1
 8002f88:	2106      	movs	r1, #6
 8002f8a:	0018      	movs	r0, r3
 8002f8c:	f7fd fa28 	bl	80003e0 <__aeabi_idivmod>
 8002f90:	000b      	movs	r3, r1
 8002f92:	b2da      	uxtb	r2, r3
 8002f94:	4b6b      	ldr	r3, [pc, #428]	; (8003144 <main+0x5f4>)
 8002f96:	701a      	strb	r2, [r3, #0]
 8002f98:	e0eb      	b.n	8003172 <main+0x622>
					} else if (setupDig == 2) {
 8002f9a:	4b68      	ldr	r3, [pc, #416]	; (800313c <main+0x5ec>)
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d126      	bne.n	8002ff0 <main+0x4a0>
						if (((dispValue / 1000) % 10) == 2) {
 8002fa2:	4b65      	ldr	r3, [pc, #404]	; (8003138 <main+0x5e8>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	22fa      	movs	r2, #250	; 0xfa
 8002fa8:	0091      	lsls	r1, r2, #2
 8002faa:	0018      	movs	r0, r3
 8002fac:	f7fd f932 	bl	8000214 <__divsi3>
 8002fb0:	0003      	movs	r3, r0
 8002fb2:	210a      	movs	r1, #10
 8002fb4:	0018      	movs	r0, r3
 8002fb6:	f7fd fa13 	bl	80003e0 <__aeabi_idivmod>
 8002fba:	000b      	movs	r3, r1
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d10b      	bne.n	8002fd8 <main+0x488>
							newDig = (newDig + 1) % 5;
 8002fc0:	4b60      	ldr	r3, [pc, #384]	; (8003144 <main+0x5f4>)
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	2105      	movs	r1, #5
 8002fc8:	0018      	movs	r0, r3
 8002fca:	f7fd fa09 	bl	80003e0 <__aeabi_idivmod>
 8002fce:	000b      	movs	r3, r1
 8002fd0:	b2da      	uxtb	r2, r3
 8002fd2:	4b5c      	ldr	r3, [pc, #368]	; (8003144 <main+0x5f4>)
 8002fd4:	701a      	strb	r2, [r3, #0]
 8002fd6:	e0cc      	b.n	8003172 <main+0x622>
						} else {
							newDig = (newDig + 1) % 10;
 8002fd8:	4b5a      	ldr	r3, [pc, #360]	; (8003144 <main+0x5f4>)
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	3301      	adds	r3, #1
 8002fde:	210a      	movs	r1, #10
 8002fe0:	0018      	movs	r0, r3
 8002fe2:	f7fd f9fd 	bl	80003e0 <__aeabi_idivmod>
 8002fe6:	000b      	movs	r3, r1
 8002fe8:	b2da      	uxtb	r2, r3
 8002fea:	4b56      	ldr	r3, [pc, #344]	; (8003144 <main+0x5f4>)
 8002fec:	701a      	strb	r2, [r3, #0]
 8002fee:	e0c0      	b.n	8003172 <main+0x622>
						}
					} else if (setupDig == 3) {
 8002ff0:	4b52      	ldr	r3, [pc, #328]	; (800313c <main+0x5ec>)
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	2b03      	cmp	r3, #3
 8002ff6:	d000      	beq.n	8002ffa <main+0x4aa>
 8002ff8:	e0bb      	b.n	8003172 <main+0x622>
						if (((dispValue / 100) % 10) > 4) {
 8002ffa:	4b4f      	ldr	r3, [pc, #316]	; (8003138 <main+0x5e8>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2164      	movs	r1, #100	; 0x64
 8003000:	0018      	movs	r0, r3
 8003002:	f7fd f907 	bl	8000214 <__divsi3>
 8003006:	0003      	movs	r3, r0
 8003008:	210a      	movs	r1, #10
 800300a:	0018      	movs	r0, r3
 800300c:	f7fd f9e8 	bl	80003e0 <__aeabi_idivmod>
 8003010:	000b      	movs	r3, r1
 8003012:	2b04      	cmp	r3, #4
 8003014:	dd0e      	ble.n	8003034 <main+0x4e4>
							newDig = (newDig + 1) % 2;
 8003016:	4b4b      	ldr	r3, [pc, #300]	; (8003144 <main+0x5f4>)
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	3301      	adds	r3, #1
 800301c:	4a4e      	ldr	r2, [pc, #312]	; (8003158 <main+0x608>)
 800301e:	4013      	ands	r3, r2
 8003020:	d504      	bpl.n	800302c <main+0x4dc>
 8003022:	3b01      	subs	r3, #1
 8003024:	2202      	movs	r2, #2
 8003026:	4252      	negs	r2, r2
 8003028:	4313      	orrs	r3, r2
 800302a:	3301      	adds	r3, #1
 800302c:	b2da      	uxtb	r2, r3
 800302e:	4b45      	ldr	r3, [pc, #276]	; (8003144 <main+0x5f4>)
 8003030:	701a      	strb	r2, [r3, #0]
 8003032:	e09e      	b.n	8003172 <main+0x622>
						} else {
							newDig = (newDig + 1) % 3;
 8003034:	4b43      	ldr	r3, [pc, #268]	; (8003144 <main+0x5f4>)
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	3301      	adds	r3, #1
 800303a:	2103      	movs	r1, #3
 800303c:	0018      	movs	r0, r3
 800303e:	f7fd f9cf 	bl	80003e0 <__aeabi_idivmod>
 8003042:	000b      	movs	r3, r1
 8003044:	b2da      	uxtb	r2, r3
 8003046:	4b3f      	ldr	r3, [pc, #252]	; (8003144 <main+0x5f4>)
 8003048:	701a      	strb	r2, [r3, #0]
 800304a:	e092      	b.n	8003172 <main+0x622>
						}
					}
				} else if (clickType == 3) {
 800304c:	4b3e      	ldr	r3, [pc, #248]	; (8003148 <main+0x5f8>)
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	2b03      	cmp	r3, #3
 8003052:	d000      	beq.n	8003056 <main+0x506>
 8003054:	e08d      	b.n	8003172 <main+0x622>
					clickType = 0;
 8003056:	4b3c      	ldr	r3, [pc, #240]	; (8003148 <main+0x5f8>)
 8003058:	2200      	movs	r2, #0
 800305a:	701a      	strb	r2, [r3, #0]
					if (setupDig == 0) {
 800305c:	4b37      	ldr	r3, [pc, #220]	; (800313c <main+0x5ec>)
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d10b      	bne.n	800307c <main+0x52c>
						newDig = (newDig + 9) % 10;
 8003064:	4b37      	ldr	r3, [pc, #220]	; (8003144 <main+0x5f4>)
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	3309      	adds	r3, #9
 800306a:	210a      	movs	r1, #10
 800306c:	0018      	movs	r0, r3
 800306e:	f7fd f9b7 	bl	80003e0 <__aeabi_idivmod>
 8003072:	000b      	movs	r3, r1
 8003074:	b2da      	uxtb	r2, r3
 8003076:	4b33      	ldr	r3, [pc, #204]	; (8003144 <main+0x5f4>)
 8003078:	701a      	strb	r2, [r3, #0]
 800307a:	e07a      	b.n	8003172 <main+0x622>
					} else if (setupDig == 1) {
 800307c:	4b2f      	ldr	r3, [pc, #188]	; (800313c <main+0x5ec>)
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	2b01      	cmp	r3, #1
 8003082:	d10b      	bne.n	800309c <main+0x54c>
						newDig = (newDig + 5) % 6;
 8003084:	4b2f      	ldr	r3, [pc, #188]	; (8003144 <main+0x5f4>)
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	3305      	adds	r3, #5
 800308a:	2106      	movs	r1, #6
 800308c:	0018      	movs	r0, r3
 800308e:	f7fd f9a7 	bl	80003e0 <__aeabi_idivmod>
 8003092:	000b      	movs	r3, r1
 8003094:	b2da      	uxtb	r2, r3
 8003096:	4b2b      	ldr	r3, [pc, #172]	; (8003144 <main+0x5f4>)
 8003098:	701a      	strb	r2, [r3, #0]
 800309a:	e06a      	b.n	8003172 <main+0x622>
					} else if (setupDig == 2) {
 800309c:	4b27      	ldr	r3, [pc, #156]	; (800313c <main+0x5ec>)
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d126      	bne.n	80030f2 <main+0x5a2>
						if (((dispValue / 1000) % 10) == 2) {
 80030a4:	4b24      	ldr	r3, [pc, #144]	; (8003138 <main+0x5e8>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	22fa      	movs	r2, #250	; 0xfa
 80030aa:	0091      	lsls	r1, r2, #2
 80030ac:	0018      	movs	r0, r3
 80030ae:	f7fd f8b1 	bl	8000214 <__divsi3>
 80030b2:	0003      	movs	r3, r0
 80030b4:	210a      	movs	r1, #10
 80030b6:	0018      	movs	r0, r3
 80030b8:	f7fd f992 	bl	80003e0 <__aeabi_idivmod>
 80030bc:	000b      	movs	r3, r1
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d10b      	bne.n	80030da <main+0x58a>
							newDig = (newDig + 4) % 5;
 80030c2:	4b20      	ldr	r3, [pc, #128]	; (8003144 <main+0x5f4>)
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	3304      	adds	r3, #4
 80030c8:	2105      	movs	r1, #5
 80030ca:	0018      	movs	r0, r3
 80030cc:	f7fd f988 	bl	80003e0 <__aeabi_idivmod>
 80030d0:	000b      	movs	r3, r1
 80030d2:	b2da      	uxtb	r2, r3
 80030d4:	4b1b      	ldr	r3, [pc, #108]	; (8003144 <main+0x5f4>)
 80030d6:	701a      	strb	r2, [r3, #0]
 80030d8:	e04b      	b.n	8003172 <main+0x622>
						} else {
							newDig = (newDig + 9) % 10;
 80030da:	4b1a      	ldr	r3, [pc, #104]	; (8003144 <main+0x5f4>)
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	3309      	adds	r3, #9
 80030e0:	210a      	movs	r1, #10
 80030e2:	0018      	movs	r0, r3
 80030e4:	f7fd f97c 	bl	80003e0 <__aeabi_idivmod>
 80030e8:	000b      	movs	r3, r1
 80030ea:	b2da      	uxtb	r2, r3
 80030ec:	4b15      	ldr	r3, [pc, #84]	; (8003144 <main+0x5f4>)
 80030ee:	701a      	strb	r2, [r3, #0]
 80030f0:	e03f      	b.n	8003172 <main+0x622>
						}
					} else if (setupDig == 3) {
 80030f2:	4b12      	ldr	r3, [pc, #72]	; (800313c <main+0x5ec>)
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	2b03      	cmp	r3, #3
 80030f8:	d13b      	bne.n	8003172 <main+0x622>
						if (((dispValue / 100) % 10) > 4) {
 80030fa:	4b0f      	ldr	r3, [pc, #60]	; (8003138 <main+0x5e8>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2164      	movs	r1, #100	; 0x64
 8003100:	0018      	movs	r0, r3
 8003102:	f7fd f887 	bl	8000214 <__divsi3>
 8003106:	0003      	movs	r3, r0
 8003108:	210a      	movs	r1, #10
 800310a:	0018      	movs	r0, r3
 800310c:	f7fd f968 	bl	80003e0 <__aeabi_idivmod>
 8003110:	000b      	movs	r3, r1
 8003112:	2b04      	cmp	r3, #4
 8003114:	dd22      	ble.n	800315c <main+0x60c>
							newDig = (newDig + 1) % 2;
 8003116:	4b0b      	ldr	r3, [pc, #44]	; (8003144 <main+0x5f4>)
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	3301      	adds	r3, #1
 800311c:	4a0e      	ldr	r2, [pc, #56]	; (8003158 <main+0x608>)
 800311e:	4013      	ands	r3, r2
 8003120:	d504      	bpl.n	800312c <main+0x5dc>
 8003122:	3b01      	subs	r3, #1
 8003124:	2202      	movs	r2, #2
 8003126:	4252      	negs	r2, r2
 8003128:	4313      	orrs	r3, r2
 800312a:	3301      	adds	r3, #1
 800312c:	b2da      	uxtb	r2, r3
 800312e:	4b05      	ldr	r3, [pc, #20]	; (8003144 <main+0x5f4>)
 8003130:	701a      	strb	r2, [r3, #0]
 8003132:	e01e      	b.n	8003172 <main+0x622>
 8003134:	20000210 	.word	0x20000210
 8003138:	20000228 	.word	0x20000228
 800313c:	20000232 	.word	0x20000232
 8003140:	40240000 	.word	0x40240000
 8003144:	20000233 	.word	0x20000233
 8003148:	20000230 	.word	0x20000230
 800314c:	2000023c 	.word	0x2000023c
 8003150:	000061a8 	.word	0x000061a8
 8003154:	80000003 	.word	0x80000003
 8003158:	80000001 	.word	0x80000001
						} else {
							newDig = (newDig + 2) % 3;
 800315c:	4bcb      	ldr	r3, [pc, #812]	; (800348c <main+0x93c>)
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	3302      	adds	r3, #2
 8003162:	2103      	movs	r1, #3
 8003164:	0018      	movs	r0, r3
 8003166:	f7fd f93b 	bl	80003e0 <__aeabi_idivmod>
 800316a:	000b      	movs	r3, r1
 800316c:	b2da      	uxtb	r2, r3
 800316e:	4bc7      	ldr	r3, [pc, #796]	; (800348c <main+0x93c>)
 8003170:	701a      	strb	r2, [r3, #0]
						}
					}
				}
				if (newDig != ((int) (dispValue / pow(10.0, setupDig)) % 10)) {
 8003172:	4bc6      	ldr	r3, [pc, #792]	; (800348c <main+0x93c>)
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	001e      	movs	r6, r3
 8003178:	4bc5      	ldr	r3, [pc, #788]	; (8003490 <main+0x940>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	0018      	movs	r0, r3
 800317e:	f7ff f86d 	bl	800225c <__aeabi_i2d>
 8003182:	0004      	movs	r4, r0
 8003184:	000d      	movs	r5, r1
 8003186:	4bc3      	ldr	r3, [pc, #780]	; (8003494 <main+0x944>)
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	0018      	movs	r0, r3
 800318c:	f7ff f896 	bl	80022bc <__aeabi_ui2d>
 8003190:	0002      	movs	r2, r0
 8003192:	000b      	movs	r3, r1
 8003194:	2000      	movs	r0, #0
 8003196:	49c0      	ldr	r1, [pc, #768]	; (8003498 <main+0x948>)
 8003198:	f005 fcae 	bl	8008af8 <pow>
 800319c:	0002      	movs	r2, r0
 800319e:	000b      	movs	r3, r1
 80031a0:	0020      	movs	r0, r4
 80031a2:	0029      	movs	r1, r5
 80031a4:	f7fd fdc8 	bl	8000d38 <__aeabi_ddiv>
 80031a8:	0002      	movs	r2, r0
 80031aa:	000b      	movs	r3, r1
 80031ac:	0010      	movs	r0, r2
 80031ae:	0019      	movs	r1, r3
 80031b0:	f7ff f81e 	bl	80021f0 <__aeabi_d2iz>
 80031b4:	0003      	movs	r3, r0
 80031b6:	210a      	movs	r1, #10
 80031b8:	0018      	movs	r0, r3
 80031ba:	f7fd f911 	bl	80003e0 <__aeabi_idivmod>
 80031be:	000b      	movs	r3, r1
 80031c0:	429e      	cmp	r6, r3
 80031c2:	d101      	bne.n	80031c8 <main+0x678>
 80031c4:	f000 fde4 	bl	8003d90 <main+0x1240>
					delayForBlink = 0;
 80031c8:	4bb4      	ldr	r3, [pc, #720]	; (800349c <main+0x94c>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	601a      	str	r2, [r3, #0]
					dispValue = (dispValue
							- (((int) (dispValue / pow(10.0, setupDig)) % 10))
 80031ce:	4bb0      	ldr	r3, [pc, #704]	; (8003490 <main+0x940>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	0018      	movs	r0, r3
 80031d4:	f7ff f842 	bl	800225c <__aeabi_i2d>
 80031d8:	0004      	movs	r4, r0
 80031da:	000d      	movs	r5, r1
 80031dc:	4bac      	ldr	r3, [pc, #688]	; (8003490 <main+0x940>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	0018      	movs	r0, r3
 80031e2:	f7ff f83b 	bl	800225c <__aeabi_i2d>
 80031e6:	6038      	str	r0, [r7, #0]
 80031e8:	6079      	str	r1, [r7, #4]
 80031ea:	4baa      	ldr	r3, [pc, #680]	; (8003494 <main+0x944>)
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	0018      	movs	r0, r3
 80031f0:	f7ff f864 	bl	80022bc <__aeabi_ui2d>
 80031f4:	0002      	movs	r2, r0
 80031f6:	000b      	movs	r3, r1
 80031f8:	2000      	movs	r0, #0
 80031fa:	49a7      	ldr	r1, [pc, #668]	; (8003498 <main+0x948>)
 80031fc:	f005 fc7c 	bl	8008af8 <pow>
 8003200:	0002      	movs	r2, r0
 8003202:	000b      	movs	r3, r1
 8003204:	6838      	ldr	r0, [r7, #0]
 8003206:	6879      	ldr	r1, [r7, #4]
 8003208:	f7fd fd96 	bl	8000d38 <__aeabi_ddiv>
 800320c:	0002      	movs	r2, r0
 800320e:	000b      	movs	r3, r1
 8003210:	0010      	movs	r0, r2
 8003212:	0019      	movs	r1, r3
 8003214:	f7fe ffec 	bl	80021f0 <__aeabi_d2iz>
 8003218:	0003      	movs	r3, r0
 800321a:	210a      	movs	r1, #10
 800321c:	0018      	movs	r0, r3
 800321e:	f7fd f8df 	bl	80003e0 <__aeabi_idivmod>
 8003222:	000b      	movs	r3, r1
									* pow(10.0, setupDig))
 8003224:	0018      	movs	r0, r3
 8003226:	f7ff f819 	bl	800225c <__aeabi_i2d>
 800322a:	6038      	str	r0, [r7, #0]
 800322c:	6079      	str	r1, [r7, #4]
 800322e:	4b99      	ldr	r3, [pc, #612]	; (8003494 <main+0x944>)
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	0018      	movs	r0, r3
 8003234:	f7ff f842 	bl	80022bc <__aeabi_ui2d>
 8003238:	0002      	movs	r2, r0
 800323a:	000b      	movs	r3, r1
 800323c:	2000      	movs	r0, #0
 800323e:	4996      	ldr	r1, [pc, #600]	; (8003498 <main+0x948>)
 8003240:	f005 fc5a 	bl	8008af8 <pow>
 8003244:	0002      	movs	r2, r0
 8003246:	000b      	movs	r3, r1
 8003248:	6838      	ldr	r0, [r7, #0]
 800324a:	6879      	ldr	r1, [r7, #4]
 800324c:	f7fe f96e 	bl	800152c <__aeabi_dmul>
 8003250:	0002      	movs	r2, r0
 8003252:	000b      	movs	r3, r1
							- (((int) (dispValue / pow(10.0, setupDig)) % 10))
 8003254:	0020      	movs	r0, r4
 8003256:	0029      	movs	r1, r5
 8003258:	f7fe fc2a 	bl	8001ab0 <__aeabi_dsub>
 800325c:	0002      	movs	r2, r0
 800325e:	000b      	movs	r3, r1
 8003260:	603a      	str	r2, [r7, #0]
 8003262:	607b      	str	r3, [r7, #4]
							+ (newDig * pow(10.0, setupDig));
 8003264:	4b89      	ldr	r3, [pc, #548]	; (800348c <main+0x93c>)
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	0018      	movs	r0, r3
 800326a:	f7fe fff7 	bl	800225c <__aeabi_i2d>
 800326e:	0004      	movs	r4, r0
 8003270:	000d      	movs	r5, r1
 8003272:	4b88      	ldr	r3, [pc, #544]	; (8003494 <main+0x944>)
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	0018      	movs	r0, r3
 8003278:	f7ff f820 	bl	80022bc <__aeabi_ui2d>
 800327c:	0002      	movs	r2, r0
 800327e:	000b      	movs	r3, r1
 8003280:	2000      	movs	r0, #0
 8003282:	4985      	ldr	r1, [pc, #532]	; (8003498 <main+0x948>)
 8003284:	f005 fc38 	bl	8008af8 <pow>
 8003288:	0002      	movs	r2, r0
 800328a:	000b      	movs	r3, r1
 800328c:	0020      	movs	r0, r4
 800328e:	0029      	movs	r1, r5
 8003290:	f7fe f94c 	bl	800152c <__aeabi_dmul>
 8003294:	0002      	movs	r2, r0
 8003296:	000b      	movs	r3, r1
 8003298:	6838      	ldr	r0, [r7, #0]
 800329a:	6879      	ldr	r1, [r7, #4]
 800329c:	f7fd f9ec 	bl	8000678 <__aeabi_dadd>
 80032a0:	0002      	movs	r2, r0
 80032a2:	000b      	movs	r3, r1
					dispValue = (dispValue
 80032a4:	0010      	movs	r0, r2
 80032a6:	0019      	movs	r1, r3
 80032a8:	f7fe ffa2 	bl	80021f0 <__aeabi_d2iz>
 80032ac:	0002      	movs	r2, r0
 80032ae:	4b78      	ldr	r3, [pc, #480]	; (8003490 <main+0x940>)
 80032b0:	601a      	str	r2, [r3, #0]
					time.Hours = dispValue / 100;
 80032b2:	4b77      	ldr	r3, [pc, #476]	; (8003490 <main+0x940>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2164      	movs	r1, #100	; 0x64
 80032b8:	0018      	movs	r0, r3
 80032ba:	f7fc ffab 	bl	8000214 <__divsi3>
 80032be:	0003      	movs	r3, r0
 80032c0:	b2da      	uxtb	r2, r3
 80032c2:	4b77      	ldr	r3, [pc, #476]	; (80034a0 <main+0x950>)
 80032c4:	701a      	strb	r2, [r3, #0]
					time.Minutes = dispValue % 100;
 80032c6:	4b72      	ldr	r3, [pc, #456]	; (8003490 <main+0x940>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2164      	movs	r1, #100	; 0x64
 80032cc:	0018      	movs	r0, r3
 80032ce:	f7fd f887 	bl	80003e0 <__aeabi_idivmod>
 80032d2:	000b      	movs	r3, r1
 80032d4:	b2da      	uxtb	r2, r3
 80032d6:	4b72      	ldr	r3, [pc, #456]	; (80034a0 <main+0x950>)
 80032d8:	705a      	strb	r2, [r3, #1]
					time.Seconds = 0;
 80032da:	4b71      	ldr	r3, [pc, #452]	; (80034a0 <main+0x950>)
 80032dc:	2200      	movs	r2, #0
 80032de:	709a      	strb	r2, [r3, #2]
				Set_Time(time.Seconds,time.Minutes,time.Hours);
 80032e0:	4b6f      	ldr	r3, [pc, #444]	; (80034a0 <main+0x950>)
 80032e2:	7898      	ldrb	r0, [r3, #2]
 80032e4:	4b6e      	ldr	r3, [pc, #440]	; (80034a0 <main+0x950>)
 80032e6:	7859      	ldrb	r1, [r3, #1]
 80032e8:	4b6d      	ldr	r3, [pc, #436]	; (80034a0 <main+0x950>)
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	001a      	movs	r2, r3
 80032ee:	f7ff f8e3 	bl	80024b8 <Set_Time>
				}

				break;
 80032f2:	f000 fd4d 	bl	8003d90 <main+0x1240>
			case 2:
				dispValue = ((onBright == 100) ? 99 : onBright)
 80032f6:	4b6b      	ldr	r3, [pc, #428]	; (80034a4 <main+0x954>)
 80032f8:	881b      	ldrh	r3, [r3, #0]
 80032fa:	2b64      	cmp	r3, #100	; 0x64
 80032fc:	d003      	beq.n	8003306 <main+0x7b6>
 80032fe:	4b69      	ldr	r3, [pc, #420]	; (80034a4 <main+0x954>)
 8003300:	881b      	ldrh	r3, [r3, #0]
 8003302:	001a      	movs	r2, r3
 8003304:	e000      	b.n	8003308 <main+0x7b8>
 8003306:	2263      	movs	r2, #99	; 0x63
						+ (((offBright == 100) ? 99 : offBright) * 100);
 8003308:	4b67      	ldr	r3, [pc, #412]	; (80034a8 <main+0x958>)
 800330a:	881b      	ldrh	r3, [r3, #0]
 800330c:	2b64      	cmp	r3, #100	; 0x64
 800330e:	d005      	beq.n	800331c <main+0x7cc>
 8003310:	4b65      	ldr	r3, [pc, #404]	; (80034a8 <main+0x958>)
 8003312:	881b      	ldrh	r3, [r3, #0]
 8003314:	0019      	movs	r1, r3
 8003316:	2364      	movs	r3, #100	; 0x64
 8003318:	434b      	muls	r3, r1
 800331a:	e000      	b.n	800331e <main+0x7ce>
 800331c:	4b63      	ldr	r3, [pc, #396]	; (80034ac <main+0x95c>)
 800331e:	18d2      	adds	r2, r2, r3
				dispValue = ((onBright == 100) ? 99 : onBright)
 8003320:	4b5b      	ldr	r3, [pc, #364]	; (8003490 <main+0x940>)
 8003322:	601a      	str	r2, [r3, #0]
				if (clickType == 2) {
 8003324:	4b62      	ldr	r3, [pc, #392]	; (80034b0 <main+0x960>)
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	2b02      	cmp	r3, #2
 800332a:	d115      	bne.n	8003358 <main+0x808>
					delayForBlink = 25000;
 800332c:	4b5b      	ldr	r3, [pc, #364]	; (800349c <main+0x94c>)
 800332e:	4a61      	ldr	r2, [pc, #388]	; (80034b4 <main+0x964>)
 8003330:	601a      	str	r2, [r3, #0]
					clickType = 0;
 8003332:	4b5f      	ldr	r3, [pc, #380]	; (80034b0 <main+0x960>)
 8003334:	2200      	movs	r2, #0
 8003336:	701a      	strb	r2, [r3, #0]
					setupDig = (setupDig + 1) % 2;
 8003338:	4b56      	ldr	r3, [pc, #344]	; (8003494 <main+0x944>)
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	3301      	adds	r3, #1
 800333e:	4a5e      	ldr	r2, [pc, #376]	; (80034b8 <main+0x968>)
 8003340:	4013      	ands	r3, r2
 8003342:	d504      	bpl.n	800334e <main+0x7fe>
 8003344:	3b01      	subs	r3, #1
 8003346:	2202      	movs	r2, #2
 8003348:	4252      	negs	r2, r2
 800334a:	4313      	orrs	r3, r2
 800334c:	3301      	adds	r3, #1
 800334e:	b2da      	uxtb	r2, r3
 8003350:	4b50      	ldr	r3, [pc, #320]	; (8003494 <main+0x944>)
 8003352:	701a      	strb	r2, [r3, #0]
					} else {
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR3, offBright);
						offBright = (((offBright / 5) + 20) % 21) * 5;
					}
				}
				break;
 8003354:	f000 fd1f 	bl	8003d96 <main+0x1246>
				} else if (clickType == 1) {
 8003358:	4b55      	ldr	r3, [pc, #340]	; (80034b0 <main+0x960>)
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	2b01      	cmp	r3, #1
 800335e:	d147      	bne.n	80033f0 <main+0x8a0>
					delayForBlink = 0;
 8003360:	4b4e      	ldr	r3, [pc, #312]	; (800349c <main+0x94c>)
 8003362:	2200      	movs	r2, #0
 8003364:	601a      	str	r2, [r3, #0]
					clickType = 0;
 8003366:	4b52      	ldr	r3, [pc, #328]	; (80034b0 <main+0x960>)
 8003368:	2200      	movs	r2, #0
 800336a:	701a      	strb	r2, [r3, #0]
					if (setupDig == 0) {
 800336c:	4b49      	ldr	r3, [pc, #292]	; (8003494 <main+0x944>)
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d11e      	bne.n	80033b2 <main+0x862>
						onBright = (((onBright / 5) + 1) % 21) * 5;
 8003374:	4b4b      	ldr	r3, [pc, #300]	; (80034a4 <main+0x954>)
 8003376:	881b      	ldrh	r3, [r3, #0]
 8003378:	2105      	movs	r1, #5
 800337a:	0018      	movs	r0, r3
 800337c:	f7fc fec0 	bl	8000100 <__udivsi3>
 8003380:	0003      	movs	r3, r0
 8003382:	b29b      	uxth	r3, r3
 8003384:	3301      	adds	r3, #1
 8003386:	2115      	movs	r1, #21
 8003388:	0018      	movs	r0, r3
 800338a:	f7fd f829 	bl	80003e0 <__aeabi_idivmod>
 800338e:	000b      	movs	r3, r1
 8003390:	b29b      	uxth	r3, r3
 8003392:	1c1a      	adds	r2, r3, #0
 8003394:	0092      	lsls	r2, r2, #2
 8003396:	18d3      	adds	r3, r2, r3
 8003398:	b29a      	uxth	r2, r3
 800339a:	4b42      	ldr	r3, [pc, #264]	; (80034a4 <main+0x954>)
 800339c:	801a      	strh	r2, [r3, #0]
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR2, onBright);
 800339e:	4b41      	ldr	r3, [pc, #260]	; (80034a4 <main+0x954>)
 80033a0:	881b      	ldrh	r3, [r3, #0]
 80033a2:	001a      	movs	r2, r3
 80033a4:	4b45      	ldr	r3, [pc, #276]	; (80034bc <main+0x96c>)
 80033a6:	2102      	movs	r1, #2
 80033a8:	0018      	movs	r0, r3
 80033aa:	f004 fb65 	bl	8007a78 <HAL_RTCEx_BKUPWrite>
				break;
 80033ae:	f000 fcf2 	bl	8003d96 <main+0x1246>
						offBright = (((offBright / 5) + 1) % 21) * 5;
 80033b2:	4b3d      	ldr	r3, [pc, #244]	; (80034a8 <main+0x958>)
 80033b4:	881b      	ldrh	r3, [r3, #0]
 80033b6:	2105      	movs	r1, #5
 80033b8:	0018      	movs	r0, r3
 80033ba:	f7fc fea1 	bl	8000100 <__udivsi3>
 80033be:	0003      	movs	r3, r0
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	3301      	adds	r3, #1
 80033c4:	2115      	movs	r1, #21
 80033c6:	0018      	movs	r0, r3
 80033c8:	f7fd f80a 	bl	80003e0 <__aeabi_idivmod>
 80033cc:	000b      	movs	r3, r1
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	1c1a      	adds	r2, r3, #0
 80033d2:	0092      	lsls	r2, r2, #2
 80033d4:	18d3      	adds	r3, r2, r3
 80033d6:	b29a      	uxth	r2, r3
 80033d8:	4b33      	ldr	r3, [pc, #204]	; (80034a8 <main+0x958>)
 80033da:	801a      	strh	r2, [r3, #0]
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR3, offBright);
 80033dc:	4b32      	ldr	r3, [pc, #200]	; (80034a8 <main+0x958>)
 80033de:	881b      	ldrh	r3, [r3, #0]
 80033e0:	001a      	movs	r2, r3
 80033e2:	4b36      	ldr	r3, [pc, #216]	; (80034bc <main+0x96c>)
 80033e4:	2103      	movs	r1, #3
 80033e6:	0018      	movs	r0, r3
 80033e8:	f004 fb46 	bl	8007a78 <HAL_RTCEx_BKUPWrite>
				break;
 80033ec:	f000 fcd3 	bl	8003d96 <main+0x1246>
				} else if (clickType == 3) {
 80033f0:	4b2f      	ldr	r3, [pc, #188]	; (80034b0 <main+0x960>)
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	2b03      	cmp	r3, #3
 80033f6:	d001      	beq.n	80033fc <main+0x8ac>
 80033f8:	f000 fccd 	bl	8003d96 <main+0x1246>
					delayForBlink = 0;
 80033fc:	4b27      	ldr	r3, [pc, #156]	; (800349c <main+0x94c>)
 80033fe:	2200      	movs	r2, #0
 8003400:	601a      	str	r2, [r3, #0]
					clickType = 0;
 8003402:	4b2b      	ldr	r3, [pc, #172]	; (80034b0 <main+0x960>)
 8003404:	2200      	movs	r2, #0
 8003406:	701a      	strb	r2, [r3, #0]
					if (setupDig == 0) {
 8003408:	4b22      	ldr	r3, [pc, #136]	; (8003494 <main+0x944>)
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d11e      	bne.n	800344e <main+0x8fe>
						onBright = (((onBright / 5) + 20) % 21) * 5;
 8003410:	4b24      	ldr	r3, [pc, #144]	; (80034a4 <main+0x954>)
 8003412:	881b      	ldrh	r3, [r3, #0]
 8003414:	2105      	movs	r1, #5
 8003416:	0018      	movs	r0, r3
 8003418:	f7fc fe72 	bl	8000100 <__udivsi3>
 800341c:	0003      	movs	r3, r0
 800341e:	b29b      	uxth	r3, r3
 8003420:	3314      	adds	r3, #20
 8003422:	2115      	movs	r1, #21
 8003424:	0018      	movs	r0, r3
 8003426:	f7fc ffdb 	bl	80003e0 <__aeabi_idivmod>
 800342a:	000b      	movs	r3, r1
 800342c:	b29b      	uxth	r3, r3
 800342e:	1c1a      	adds	r2, r3, #0
 8003430:	0092      	lsls	r2, r2, #2
 8003432:	18d3      	adds	r3, r2, r3
 8003434:	b29a      	uxth	r2, r3
 8003436:	4b1b      	ldr	r3, [pc, #108]	; (80034a4 <main+0x954>)
 8003438:	801a      	strh	r2, [r3, #0]
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR2, onBright);
 800343a:	4b1a      	ldr	r3, [pc, #104]	; (80034a4 <main+0x954>)
 800343c:	881b      	ldrh	r3, [r3, #0]
 800343e:	001a      	movs	r2, r3
 8003440:	4b1e      	ldr	r3, [pc, #120]	; (80034bc <main+0x96c>)
 8003442:	2102      	movs	r1, #2
 8003444:	0018      	movs	r0, r3
 8003446:	f004 fb17 	bl	8007a78 <HAL_RTCEx_BKUPWrite>
				break;
 800344a:	f000 fca4 	bl	8003d96 <main+0x1246>
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR3, offBright);
 800344e:	4b16      	ldr	r3, [pc, #88]	; (80034a8 <main+0x958>)
 8003450:	881b      	ldrh	r3, [r3, #0]
 8003452:	001a      	movs	r2, r3
 8003454:	4b19      	ldr	r3, [pc, #100]	; (80034bc <main+0x96c>)
 8003456:	2103      	movs	r1, #3
 8003458:	0018      	movs	r0, r3
 800345a:	f004 fb0d 	bl	8007a78 <HAL_RTCEx_BKUPWrite>
						offBright = (((offBright / 5) + 20) % 21) * 5;
 800345e:	4b12      	ldr	r3, [pc, #72]	; (80034a8 <main+0x958>)
 8003460:	881b      	ldrh	r3, [r3, #0]
 8003462:	2105      	movs	r1, #5
 8003464:	0018      	movs	r0, r3
 8003466:	f7fc fe4b 	bl	8000100 <__udivsi3>
 800346a:	0003      	movs	r3, r0
 800346c:	b29b      	uxth	r3, r3
 800346e:	3314      	adds	r3, #20
 8003470:	2115      	movs	r1, #21
 8003472:	0018      	movs	r0, r3
 8003474:	f7fc ffb4 	bl	80003e0 <__aeabi_idivmod>
 8003478:	000b      	movs	r3, r1
 800347a:	b29b      	uxth	r3, r3
 800347c:	1c1a      	adds	r2, r3, #0
 800347e:	0092      	lsls	r2, r2, #2
 8003480:	18d3      	adds	r3, r2, r3
 8003482:	b29a      	uxth	r2, r3
 8003484:	4b08      	ldr	r3, [pc, #32]	; (80034a8 <main+0x958>)
 8003486:	801a      	strh	r2, [r3, #0]
				break;
 8003488:	f000 fc85 	bl	8003d96 <main+0x1246>
 800348c:	20000233 	.word	0x20000233
 8003490:	20000228 	.word	0x20000228
 8003494:	20000232 	.word	0x20000232
 8003498:	40240000 	.word	0x40240000
 800349c:	2000023c 	.word	0x2000023c
 80034a0:	20000210 	.word	0x20000210
 80034a4:	20000004 	.word	0x20000004
 80034a8:	20000006 	.word	0x20000006
 80034ac:	000026ac 	.word	0x000026ac
 80034b0:	20000230 	.word	0x20000230
 80034b4:	000061a8 	.word	0x000061a8
 80034b8:	80000001 	.word	0x80000001
 80034bc:	2000014c 	.word	0x2000014c
			case 3:
				dispValue = onTime;
 80034c0:	4bb4      	ldr	r3, [pc, #720]	; (8003794 <main+0xc44>)
 80034c2:	881b      	ldrh	r3, [r3, #0]
 80034c4:	001a      	movs	r2, r3
 80034c6:	4bb4      	ldr	r3, [pc, #720]	; (8003798 <main+0xc48>)
 80034c8:	601a      	str	r2, [r3, #0]
				newDig = ((int) (onTime / pow(10.0, setupDig)) % 10);
 80034ca:	4bb2      	ldr	r3, [pc, #712]	; (8003794 <main+0xc44>)
 80034cc:	881b      	ldrh	r3, [r3, #0]
 80034ce:	0018      	movs	r0, r3
 80034d0:	f7fe fec4 	bl	800225c <__aeabi_i2d>
 80034d4:	0004      	movs	r4, r0
 80034d6:	000d      	movs	r5, r1
 80034d8:	4bb0      	ldr	r3, [pc, #704]	; (800379c <main+0xc4c>)
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	0018      	movs	r0, r3
 80034de:	f7fe feed 	bl	80022bc <__aeabi_ui2d>
 80034e2:	0002      	movs	r2, r0
 80034e4:	000b      	movs	r3, r1
 80034e6:	2000      	movs	r0, #0
 80034e8:	49ad      	ldr	r1, [pc, #692]	; (80037a0 <main+0xc50>)
 80034ea:	f005 fb05 	bl	8008af8 <pow>
 80034ee:	0002      	movs	r2, r0
 80034f0:	000b      	movs	r3, r1
 80034f2:	0020      	movs	r0, r4
 80034f4:	0029      	movs	r1, r5
 80034f6:	f7fd fc1f 	bl	8000d38 <__aeabi_ddiv>
 80034fa:	0002      	movs	r2, r0
 80034fc:	000b      	movs	r3, r1
 80034fe:	0010      	movs	r0, r2
 8003500:	0019      	movs	r1, r3
 8003502:	f7fe fe75 	bl	80021f0 <__aeabi_d2iz>
 8003506:	0003      	movs	r3, r0
 8003508:	210a      	movs	r1, #10
 800350a:	0018      	movs	r0, r3
 800350c:	f7fc ff68 	bl	80003e0 <__aeabi_idivmod>
 8003510:	000b      	movs	r3, r1
 8003512:	b2da      	uxtb	r2, r3
 8003514:	4ba3      	ldr	r3, [pc, #652]	; (80037a4 <main+0xc54>)
 8003516:	701a      	strb	r2, [r3, #0]
				if (clickType == 2) {
 8003518:	4ba3      	ldr	r3, [pc, #652]	; (80037a8 <main+0xc58>)
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	2b02      	cmp	r3, #2
 800351e:	d13b      	bne.n	8003598 <main+0xa48>
					delayForBlink = 25000;
 8003520:	4ba2      	ldr	r3, [pc, #648]	; (80037ac <main+0xc5c>)
 8003522:	4aa3      	ldr	r2, [pc, #652]	; (80037b0 <main+0xc60>)
 8003524:	601a      	str	r2, [r3, #0]
					clickType = 0;
 8003526:	4ba0      	ldr	r3, [pc, #640]	; (80037a8 <main+0xc58>)
 8003528:	2200      	movs	r2, #0
 800352a:	701a      	strb	r2, [r3, #0]
					setupDig = (setupDig + 1) % 4;
 800352c:	4b9b      	ldr	r3, [pc, #620]	; (800379c <main+0xc4c>)
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	3301      	adds	r3, #1
 8003532:	4aa0      	ldr	r2, [pc, #640]	; (80037b4 <main+0xc64>)
 8003534:	4013      	ands	r3, r2
 8003536:	d504      	bpl.n	8003542 <main+0x9f2>
 8003538:	3b01      	subs	r3, #1
 800353a:	2204      	movs	r2, #4
 800353c:	4252      	negs	r2, r2
 800353e:	4313      	orrs	r3, r2
 8003540:	3301      	adds	r3, #1
 8003542:	b2da      	uxtb	r2, r3
 8003544:	4b95      	ldr	r3, [pc, #596]	; (800379c <main+0xc4c>)
 8003546:	701a      	strb	r2, [r3, #0]
					newDig = ((int) (onTime / pow(10.0, setupDig)) % 10);
 8003548:	4b92      	ldr	r3, [pc, #584]	; (8003794 <main+0xc44>)
 800354a:	881b      	ldrh	r3, [r3, #0]
 800354c:	0018      	movs	r0, r3
 800354e:	f7fe fe85 	bl	800225c <__aeabi_i2d>
 8003552:	0004      	movs	r4, r0
 8003554:	000d      	movs	r5, r1
 8003556:	4b91      	ldr	r3, [pc, #580]	; (800379c <main+0xc4c>)
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	0018      	movs	r0, r3
 800355c:	f7fe feae 	bl	80022bc <__aeabi_ui2d>
 8003560:	0002      	movs	r2, r0
 8003562:	000b      	movs	r3, r1
 8003564:	2000      	movs	r0, #0
 8003566:	498e      	ldr	r1, [pc, #568]	; (80037a0 <main+0xc50>)
 8003568:	f005 fac6 	bl	8008af8 <pow>
 800356c:	0002      	movs	r2, r0
 800356e:	000b      	movs	r3, r1
 8003570:	0020      	movs	r0, r4
 8003572:	0029      	movs	r1, r5
 8003574:	f7fd fbe0 	bl	8000d38 <__aeabi_ddiv>
 8003578:	0002      	movs	r2, r0
 800357a:	000b      	movs	r3, r1
 800357c:	0010      	movs	r0, r2
 800357e:	0019      	movs	r1, r3
 8003580:	f7fe fe36 	bl	80021f0 <__aeabi_d2iz>
 8003584:	0003      	movs	r3, r0
 8003586:	210a      	movs	r1, #10
 8003588:	0018      	movs	r0, r3
 800358a:	f7fc ff29 	bl	80003e0 <__aeabi_idivmod>
 800358e:	000b      	movs	r3, r1
 8003590:	b2da      	uxtb	r2, r3
 8003592:	4b84      	ldr	r3, [pc, #528]	; (80037a4 <main+0xc54>)
 8003594:	701a      	strb	r2, [r3, #0]
 8003596:	e11c      	b.n	80037d2 <main+0xc82>
				} else if (clickType == 1) {
 8003598:	4b83      	ldr	r3, [pc, #524]	; (80037a8 <main+0xc58>)
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	2b01      	cmp	r3, #1
 800359e:	d000      	beq.n	80035a2 <main+0xa52>
 80035a0:	e07f      	b.n	80036a2 <main+0xb52>
					clickType = 0;
 80035a2:	4b81      	ldr	r3, [pc, #516]	; (80037a8 <main+0xc58>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	701a      	strb	r2, [r3, #0]
					if (setupDig == 0) {
 80035a8:	4b7c      	ldr	r3, [pc, #496]	; (800379c <main+0xc4c>)
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d10b      	bne.n	80035c8 <main+0xa78>
						newDig = (newDig + 1) % 10;
 80035b0:	4b7c      	ldr	r3, [pc, #496]	; (80037a4 <main+0xc54>)
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	3301      	adds	r3, #1
 80035b6:	210a      	movs	r1, #10
 80035b8:	0018      	movs	r0, r3
 80035ba:	f7fc ff11 	bl	80003e0 <__aeabi_idivmod>
 80035be:	000b      	movs	r3, r1
 80035c0:	b2da      	uxtb	r2, r3
 80035c2:	4b78      	ldr	r3, [pc, #480]	; (80037a4 <main+0xc54>)
 80035c4:	701a      	strb	r2, [r3, #0]
 80035c6:	e104      	b.n	80037d2 <main+0xc82>
					} else if (setupDig == 1) {
 80035c8:	4b74      	ldr	r3, [pc, #464]	; (800379c <main+0xc4c>)
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d10b      	bne.n	80035e8 <main+0xa98>
						newDig = (newDig + 1) % 6;
 80035d0:	4b74      	ldr	r3, [pc, #464]	; (80037a4 <main+0xc54>)
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	3301      	adds	r3, #1
 80035d6:	2106      	movs	r1, #6
 80035d8:	0018      	movs	r0, r3
 80035da:	f7fc ff01 	bl	80003e0 <__aeabi_idivmod>
 80035de:	000b      	movs	r3, r1
 80035e0:	b2da      	uxtb	r2, r3
 80035e2:	4b70      	ldr	r3, [pc, #448]	; (80037a4 <main+0xc54>)
 80035e4:	701a      	strb	r2, [r3, #0]
 80035e6:	e0f4      	b.n	80037d2 <main+0xc82>
					} else if (setupDig == 2) {
 80035e8:	4b6c      	ldr	r3, [pc, #432]	; (800379c <main+0xc4c>)
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d128      	bne.n	8003642 <main+0xaf2>
						if (((onTime / 1000) % 10) == 2) {
 80035f0:	4b68      	ldr	r3, [pc, #416]	; (8003794 <main+0xc44>)
 80035f2:	881b      	ldrh	r3, [r3, #0]
 80035f4:	22fa      	movs	r2, #250	; 0xfa
 80035f6:	0091      	lsls	r1, r2, #2
 80035f8:	0018      	movs	r0, r3
 80035fa:	f7fc fd81 	bl	8000100 <__udivsi3>
 80035fe:	0003      	movs	r3, r0
 8003600:	b29b      	uxth	r3, r3
 8003602:	210a      	movs	r1, #10
 8003604:	0018      	movs	r0, r3
 8003606:	f7fc fe01 	bl	800020c <__aeabi_uidivmod>
 800360a:	000b      	movs	r3, r1
 800360c:	b29b      	uxth	r3, r3
 800360e:	2b02      	cmp	r3, #2
 8003610:	d10b      	bne.n	800362a <main+0xada>
							newDig = (newDig + 1) % 5;
 8003612:	4b64      	ldr	r3, [pc, #400]	; (80037a4 <main+0xc54>)
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	3301      	adds	r3, #1
 8003618:	2105      	movs	r1, #5
 800361a:	0018      	movs	r0, r3
 800361c:	f7fc fee0 	bl	80003e0 <__aeabi_idivmod>
 8003620:	000b      	movs	r3, r1
 8003622:	b2da      	uxtb	r2, r3
 8003624:	4b5f      	ldr	r3, [pc, #380]	; (80037a4 <main+0xc54>)
 8003626:	701a      	strb	r2, [r3, #0]
 8003628:	e0d3      	b.n	80037d2 <main+0xc82>
						} else {
							newDig = (newDig + 1) % 10;
 800362a:	4b5e      	ldr	r3, [pc, #376]	; (80037a4 <main+0xc54>)
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	3301      	adds	r3, #1
 8003630:	210a      	movs	r1, #10
 8003632:	0018      	movs	r0, r3
 8003634:	f7fc fed4 	bl	80003e0 <__aeabi_idivmod>
 8003638:	000b      	movs	r3, r1
 800363a:	b2da      	uxtb	r2, r3
 800363c:	4b59      	ldr	r3, [pc, #356]	; (80037a4 <main+0xc54>)
 800363e:	701a      	strb	r2, [r3, #0]
 8003640:	e0c7      	b.n	80037d2 <main+0xc82>
						}
					} else if (setupDig == 3) {
 8003642:	4b56      	ldr	r3, [pc, #344]	; (800379c <main+0xc4c>)
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	2b03      	cmp	r3, #3
 8003648:	d000      	beq.n	800364c <main+0xafc>
 800364a:	e0c2      	b.n	80037d2 <main+0xc82>
						if (((onTime / 100) % 10) > 4) {
 800364c:	4b51      	ldr	r3, [pc, #324]	; (8003794 <main+0xc44>)
 800364e:	881b      	ldrh	r3, [r3, #0]
 8003650:	2164      	movs	r1, #100	; 0x64
 8003652:	0018      	movs	r0, r3
 8003654:	f7fc fd54 	bl	8000100 <__udivsi3>
 8003658:	0003      	movs	r3, r0
 800365a:	b29b      	uxth	r3, r3
 800365c:	210a      	movs	r1, #10
 800365e:	0018      	movs	r0, r3
 8003660:	f7fc fdd4 	bl	800020c <__aeabi_uidivmod>
 8003664:	000b      	movs	r3, r1
 8003666:	b29b      	uxth	r3, r3
 8003668:	2b04      	cmp	r3, #4
 800366a:	d90e      	bls.n	800368a <main+0xb3a>
							newDig = (newDig + 1) % 2;
 800366c:	4b4d      	ldr	r3, [pc, #308]	; (80037a4 <main+0xc54>)
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	3301      	adds	r3, #1
 8003672:	4a51      	ldr	r2, [pc, #324]	; (80037b8 <main+0xc68>)
 8003674:	4013      	ands	r3, r2
 8003676:	d504      	bpl.n	8003682 <main+0xb32>
 8003678:	3b01      	subs	r3, #1
 800367a:	2202      	movs	r2, #2
 800367c:	4252      	negs	r2, r2
 800367e:	4313      	orrs	r3, r2
 8003680:	3301      	adds	r3, #1
 8003682:	b2da      	uxtb	r2, r3
 8003684:	4b47      	ldr	r3, [pc, #284]	; (80037a4 <main+0xc54>)
 8003686:	701a      	strb	r2, [r3, #0]
 8003688:	e0a3      	b.n	80037d2 <main+0xc82>
						} else {
							newDig = (newDig + 1) % 3;
 800368a:	4b46      	ldr	r3, [pc, #280]	; (80037a4 <main+0xc54>)
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	3301      	adds	r3, #1
 8003690:	2103      	movs	r1, #3
 8003692:	0018      	movs	r0, r3
 8003694:	f7fc fea4 	bl	80003e0 <__aeabi_idivmod>
 8003698:	000b      	movs	r3, r1
 800369a:	b2da      	uxtb	r2, r3
 800369c:	4b41      	ldr	r3, [pc, #260]	; (80037a4 <main+0xc54>)
 800369e:	701a      	strb	r2, [r3, #0]
 80036a0:	e097      	b.n	80037d2 <main+0xc82>
						}
					}
				} else if (clickType == 3) {
 80036a2:	4b41      	ldr	r3, [pc, #260]	; (80037a8 <main+0xc58>)
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	2b03      	cmp	r3, #3
 80036a8:	d000      	beq.n	80036ac <main+0xb5c>
 80036aa:	e092      	b.n	80037d2 <main+0xc82>
					clickType = 0;
 80036ac:	4b3e      	ldr	r3, [pc, #248]	; (80037a8 <main+0xc58>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	701a      	strb	r2, [r3, #0]
					if (setupDig == 0) {
 80036b2:	4b3a      	ldr	r3, [pc, #232]	; (800379c <main+0xc4c>)
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d10b      	bne.n	80036d2 <main+0xb82>
						newDig = (newDig + 9) % 10;
 80036ba:	4b3a      	ldr	r3, [pc, #232]	; (80037a4 <main+0xc54>)
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	3309      	adds	r3, #9
 80036c0:	210a      	movs	r1, #10
 80036c2:	0018      	movs	r0, r3
 80036c4:	f7fc fe8c 	bl	80003e0 <__aeabi_idivmod>
 80036c8:	000b      	movs	r3, r1
 80036ca:	b2da      	uxtb	r2, r3
 80036cc:	4b35      	ldr	r3, [pc, #212]	; (80037a4 <main+0xc54>)
 80036ce:	701a      	strb	r2, [r3, #0]
 80036d0:	e07f      	b.n	80037d2 <main+0xc82>
					} else if (setupDig == 1) {
 80036d2:	4b32      	ldr	r3, [pc, #200]	; (800379c <main+0xc4c>)
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d10b      	bne.n	80036f2 <main+0xba2>
						newDig = (newDig + 5) % 6;
 80036da:	4b32      	ldr	r3, [pc, #200]	; (80037a4 <main+0xc54>)
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	3305      	adds	r3, #5
 80036e0:	2106      	movs	r1, #6
 80036e2:	0018      	movs	r0, r3
 80036e4:	f7fc fe7c 	bl	80003e0 <__aeabi_idivmod>
 80036e8:	000b      	movs	r3, r1
 80036ea:	b2da      	uxtb	r2, r3
 80036ec:	4b2d      	ldr	r3, [pc, #180]	; (80037a4 <main+0xc54>)
 80036ee:	701a      	strb	r2, [r3, #0]
 80036f0:	e06f      	b.n	80037d2 <main+0xc82>
					} else if (setupDig == 2) {
 80036f2:	4b2a      	ldr	r3, [pc, #168]	; (800379c <main+0xc4c>)
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d128      	bne.n	800374c <main+0xbfc>
						if (((onTime / 1000) % 10) == 2) {
 80036fa:	4b26      	ldr	r3, [pc, #152]	; (8003794 <main+0xc44>)
 80036fc:	881b      	ldrh	r3, [r3, #0]
 80036fe:	22fa      	movs	r2, #250	; 0xfa
 8003700:	0091      	lsls	r1, r2, #2
 8003702:	0018      	movs	r0, r3
 8003704:	f7fc fcfc 	bl	8000100 <__udivsi3>
 8003708:	0003      	movs	r3, r0
 800370a:	b29b      	uxth	r3, r3
 800370c:	210a      	movs	r1, #10
 800370e:	0018      	movs	r0, r3
 8003710:	f7fc fd7c 	bl	800020c <__aeabi_uidivmod>
 8003714:	000b      	movs	r3, r1
 8003716:	b29b      	uxth	r3, r3
 8003718:	2b02      	cmp	r3, #2
 800371a:	d10b      	bne.n	8003734 <main+0xbe4>
							newDig = (newDig + 4) % 5;
 800371c:	4b21      	ldr	r3, [pc, #132]	; (80037a4 <main+0xc54>)
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	3304      	adds	r3, #4
 8003722:	2105      	movs	r1, #5
 8003724:	0018      	movs	r0, r3
 8003726:	f7fc fe5b 	bl	80003e0 <__aeabi_idivmod>
 800372a:	000b      	movs	r3, r1
 800372c:	b2da      	uxtb	r2, r3
 800372e:	4b1d      	ldr	r3, [pc, #116]	; (80037a4 <main+0xc54>)
 8003730:	701a      	strb	r2, [r3, #0]
 8003732:	e04e      	b.n	80037d2 <main+0xc82>
						} else {
							newDig = (newDig + 9) % 10;
 8003734:	4b1b      	ldr	r3, [pc, #108]	; (80037a4 <main+0xc54>)
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	3309      	adds	r3, #9
 800373a:	210a      	movs	r1, #10
 800373c:	0018      	movs	r0, r3
 800373e:	f7fc fe4f 	bl	80003e0 <__aeabi_idivmod>
 8003742:	000b      	movs	r3, r1
 8003744:	b2da      	uxtb	r2, r3
 8003746:	4b17      	ldr	r3, [pc, #92]	; (80037a4 <main+0xc54>)
 8003748:	701a      	strb	r2, [r3, #0]
 800374a:	e042      	b.n	80037d2 <main+0xc82>
						}
					} else if (setupDig == 3) {
 800374c:	4b13      	ldr	r3, [pc, #76]	; (800379c <main+0xc4c>)
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	2b03      	cmp	r3, #3
 8003752:	d13e      	bne.n	80037d2 <main+0xc82>
						if (((onTime / 100) % 10) > 4) {
 8003754:	4b0f      	ldr	r3, [pc, #60]	; (8003794 <main+0xc44>)
 8003756:	881b      	ldrh	r3, [r3, #0]
 8003758:	2164      	movs	r1, #100	; 0x64
 800375a:	0018      	movs	r0, r3
 800375c:	f7fc fcd0 	bl	8000100 <__udivsi3>
 8003760:	0003      	movs	r3, r0
 8003762:	b29b      	uxth	r3, r3
 8003764:	210a      	movs	r1, #10
 8003766:	0018      	movs	r0, r3
 8003768:	f7fc fd50 	bl	800020c <__aeabi_uidivmod>
 800376c:	000b      	movs	r3, r1
 800376e:	b29b      	uxth	r3, r3
 8003770:	2b04      	cmp	r3, #4
 8003772:	d923      	bls.n	80037bc <main+0xc6c>
							newDig = (newDig + 1) % 2;
 8003774:	4b0b      	ldr	r3, [pc, #44]	; (80037a4 <main+0xc54>)
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	3301      	adds	r3, #1
 800377a:	4a0f      	ldr	r2, [pc, #60]	; (80037b8 <main+0xc68>)
 800377c:	4013      	ands	r3, r2
 800377e:	d504      	bpl.n	800378a <main+0xc3a>
 8003780:	3b01      	subs	r3, #1
 8003782:	2202      	movs	r2, #2
 8003784:	4252      	negs	r2, r2
 8003786:	4313      	orrs	r3, r2
 8003788:	3301      	adds	r3, #1
 800378a:	b2da      	uxtb	r2, r3
 800378c:	4b05      	ldr	r3, [pc, #20]	; (80037a4 <main+0xc54>)
 800378e:	701a      	strb	r2, [r3, #0]
 8003790:	e01f      	b.n	80037d2 <main+0xc82>
 8003792:	46c0      	nop			; (mov r8, r8)
 8003794:	20000236 	.word	0x20000236
 8003798:	20000228 	.word	0x20000228
 800379c:	20000232 	.word	0x20000232
 80037a0:	40240000 	.word	0x40240000
 80037a4:	20000233 	.word	0x20000233
 80037a8:	20000230 	.word	0x20000230
 80037ac:	2000023c 	.word	0x2000023c
 80037b0:	000061a8 	.word	0x000061a8
 80037b4:	80000003 	.word	0x80000003
 80037b8:	80000001 	.word	0x80000001
						} else {
							newDig = (newDig + 2) % 3;
 80037bc:	4bde      	ldr	r3, [pc, #888]	; (8003b38 <main+0xfe8>)
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	3302      	adds	r3, #2
 80037c2:	2103      	movs	r1, #3
 80037c4:	0018      	movs	r0, r3
 80037c6:	f7fc fe0b 	bl	80003e0 <__aeabi_idivmod>
 80037ca:	000b      	movs	r3, r1
 80037cc:	b2da      	uxtb	r2, r3
 80037ce:	4bda      	ldr	r3, [pc, #872]	; (8003b38 <main+0xfe8>)
 80037d0:	701a      	strb	r2, [r3, #0]
						}
					}
				}
				if (newDig != ((int) (onTime / pow(10.0, setupDig)) % 10)) {
 80037d2:	4bd9      	ldr	r3, [pc, #868]	; (8003b38 <main+0xfe8>)
 80037d4:	781b      	ldrb	r3, [r3, #0]
 80037d6:	001e      	movs	r6, r3
 80037d8:	4bd8      	ldr	r3, [pc, #864]	; (8003b3c <main+0xfec>)
 80037da:	881b      	ldrh	r3, [r3, #0]
 80037dc:	0018      	movs	r0, r3
 80037de:	f7fe fd3d 	bl	800225c <__aeabi_i2d>
 80037e2:	0004      	movs	r4, r0
 80037e4:	000d      	movs	r5, r1
 80037e6:	4bd6      	ldr	r3, [pc, #856]	; (8003b40 <main+0xff0>)
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	0018      	movs	r0, r3
 80037ec:	f7fe fd66 	bl	80022bc <__aeabi_ui2d>
 80037f0:	0002      	movs	r2, r0
 80037f2:	000b      	movs	r3, r1
 80037f4:	2000      	movs	r0, #0
 80037f6:	49d3      	ldr	r1, [pc, #844]	; (8003b44 <main+0xff4>)
 80037f8:	f005 f97e 	bl	8008af8 <pow>
 80037fc:	0002      	movs	r2, r0
 80037fe:	000b      	movs	r3, r1
 8003800:	0020      	movs	r0, r4
 8003802:	0029      	movs	r1, r5
 8003804:	f7fd fa98 	bl	8000d38 <__aeabi_ddiv>
 8003808:	0002      	movs	r2, r0
 800380a:	000b      	movs	r3, r1
 800380c:	0010      	movs	r0, r2
 800380e:	0019      	movs	r1, r3
 8003810:	f7fe fcee 	bl	80021f0 <__aeabi_d2iz>
 8003814:	0003      	movs	r3, r0
 8003816:	210a      	movs	r1, #10
 8003818:	0018      	movs	r0, r3
 800381a:	f7fc fde1 	bl	80003e0 <__aeabi_idivmod>
 800381e:	000b      	movs	r3, r1
 8003820:	429e      	cmp	r6, r3
 8003822:	d100      	bne.n	8003826 <main+0xcd6>
 8003824:	e2ba      	b.n	8003d9c <main+0x124c>
					delayForBlink = 0;
 8003826:	4bc8      	ldr	r3, [pc, #800]	; (8003b48 <main+0xff8>)
 8003828:	2200      	movs	r2, #0
 800382a:	601a      	str	r2, [r3, #0]
					onTime = (onTime
							- (((int) (onTime / pow(10.0, setupDig)) % 10))
 800382c:	4bc3      	ldr	r3, [pc, #780]	; (8003b3c <main+0xfec>)
 800382e:	881b      	ldrh	r3, [r3, #0]
 8003830:	0018      	movs	r0, r3
 8003832:	f7fe fd13 	bl	800225c <__aeabi_i2d>
 8003836:	0004      	movs	r4, r0
 8003838:	000d      	movs	r5, r1
 800383a:	4bc0      	ldr	r3, [pc, #768]	; (8003b3c <main+0xfec>)
 800383c:	881b      	ldrh	r3, [r3, #0]
 800383e:	0018      	movs	r0, r3
 8003840:	f7fe fd0c 	bl	800225c <__aeabi_i2d>
 8003844:	6038      	str	r0, [r7, #0]
 8003846:	6079      	str	r1, [r7, #4]
 8003848:	4bbd      	ldr	r3, [pc, #756]	; (8003b40 <main+0xff0>)
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	0018      	movs	r0, r3
 800384e:	f7fe fd35 	bl	80022bc <__aeabi_ui2d>
 8003852:	0002      	movs	r2, r0
 8003854:	000b      	movs	r3, r1
 8003856:	2000      	movs	r0, #0
 8003858:	49ba      	ldr	r1, [pc, #744]	; (8003b44 <main+0xff4>)
 800385a:	f005 f94d 	bl	8008af8 <pow>
 800385e:	0002      	movs	r2, r0
 8003860:	000b      	movs	r3, r1
 8003862:	6838      	ldr	r0, [r7, #0]
 8003864:	6879      	ldr	r1, [r7, #4]
 8003866:	f7fd fa67 	bl	8000d38 <__aeabi_ddiv>
 800386a:	0002      	movs	r2, r0
 800386c:	000b      	movs	r3, r1
 800386e:	0010      	movs	r0, r2
 8003870:	0019      	movs	r1, r3
 8003872:	f7fe fcbd 	bl	80021f0 <__aeabi_d2iz>
 8003876:	0003      	movs	r3, r0
 8003878:	210a      	movs	r1, #10
 800387a:	0018      	movs	r0, r3
 800387c:	f7fc fdb0 	bl	80003e0 <__aeabi_idivmod>
 8003880:	000b      	movs	r3, r1
									* pow(10.0, setupDig))
 8003882:	0018      	movs	r0, r3
 8003884:	f7fe fcea 	bl	800225c <__aeabi_i2d>
 8003888:	6038      	str	r0, [r7, #0]
 800388a:	6079      	str	r1, [r7, #4]
 800388c:	4bac      	ldr	r3, [pc, #688]	; (8003b40 <main+0xff0>)
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	0018      	movs	r0, r3
 8003892:	f7fe fd13 	bl	80022bc <__aeabi_ui2d>
 8003896:	0002      	movs	r2, r0
 8003898:	000b      	movs	r3, r1
 800389a:	2000      	movs	r0, #0
 800389c:	49a9      	ldr	r1, [pc, #676]	; (8003b44 <main+0xff4>)
 800389e:	f005 f92b 	bl	8008af8 <pow>
 80038a2:	0002      	movs	r2, r0
 80038a4:	000b      	movs	r3, r1
 80038a6:	6838      	ldr	r0, [r7, #0]
 80038a8:	6879      	ldr	r1, [r7, #4]
 80038aa:	f7fd fe3f 	bl	800152c <__aeabi_dmul>
 80038ae:	0002      	movs	r2, r0
 80038b0:	000b      	movs	r3, r1
							- (((int) (onTime / pow(10.0, setupDig)) % 10))
 80038b2:	0020      	movs	r0, r4
 80038b4:	0029      	movs	r1, r5
 80038b6:	f7fe f8fb 	bl	8001ab0 <__aeabi_dsub>
 80038ba:	0002      	movs	r2, r0
 80038bc:	000b      	movs	r3, r1
 80038be:	603a      	str	r2, [r7, #0]
 80038c0:	607b      	str	r3, [r7, #4]
							+ (newDig * pow(10.0, setupDig));
 80038c2:	4b9d      	ldr	r3, [pc, #628]	; (8003b38 <main+0xfe8>)
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	0018      	movs	r0, r3
 80038c8:	f7fe fcc8 	bl	800225c <__aeabi_i2d>
 80038cc:	0004      	movs	r4, r0
 80038ce:	000d      	movs	r5, r1
 80038d0:	4b9b      	ldr	r3, [pc, #620]	; (8003b40 <main+0xff0>)
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	0018      	movs	r0, r3
 80038d6:	f7fe fcf1 	bl	80022bc <__aeabi_ui2d>
 80038da:	0002      	movs	r2, r0
 80038dc:	000b      	movs	r3, r1
 80038de:	2000      	movs	r0, #0
 80038e0:	4998      	ldr	r1, [pc, #608]	; (8003b44 <main+0xff4>)
 80038e2:	f005 f909 	bl	8008af8 <pow>
 80038e6:	0002      	movs	r2, r0
 80038e8:	000b      	movs	r3, r1
 80038ea:	0020      	movs	r0, r4
 80038ec:	0029      	movs	r1, r5
 80038ee:	f7fd fe1d 	bl	800152c <__aeabi_dmul>
 80038f2:	0002      	movs	r2, r0
 80038f4:	000b      	movs	r3, r1
 80038f6:	6838      	ldr	r0, [r7, #0]
 80038f8:	6879      	ldr	r1, [r7, #4]
 80038fa:	f7fc febd 	bl	8000678 <__aeabi_dadd>
 80038fe:	0002      	movs	r2, r0
 8003900:	000b      	movs	r3, r1
					onTime = (onTime
 8003902:	0010      	movs	r0, r2
 8003904:	0019      	movs	r1, r3
 8003906:	f7fc fde9 	bl	80004dc <__aeabi_d2uiz>
 800390a:	0003      	movs	r3, r0
 800390c:	b29a      	uxth	r2, r3
 800390e:	4b8b      	ldr	r3, [pc, #556]	; (8003b3c <main+0xfec>)
 8003910:	801a      	strh	r2, [r3, #0]
					HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, onTime);
 8003912:	4b8a      	ldr	r3, [pc, #552]	; (8003b3c <main+0xfec>)
 8003914:	881b      	ldrh	r3, [r3, #0]
 8003916:	001a      	movs	r2, r3
 8003918:	4b8c      	ldr	r3, [pc, #560]	; (8003b4c <main+0xffc>)
 800391a:	2100      	movs	r1, #0
 800391c:	0018      	movs	r0, r3
 800391e:	f004 f8ab 	bl	8007a78 <HAL_RTCEx_BKUPWrite>
				}

				break;
 8003922:	e23b      	b.n	8003d9c <main+0x124c>
			case 4:
				dispValue = offTime;
 8003924:	4b8a      	ldr	r3, [pc, #552]	; (8003b50 <main+0x1000>)
 8003926:	881b      	ldrh	r3, [r3, #0]
 8003928:	001a      	movs	r2, r3
 800392a:	4b8a      	ldr	r3, [pc, #552]	; (8003b54 <main+0x1004>)
 800392c:	601a      	str	r2, [r3, #0]
				newDig = ((int) (offTime / pow(10.0, setupDig)) % 10);
 800392e:	4b88      	ldr	r3, [pc, #544]	; (8003b50 <main+0x1000>)
 8003930:	881b      	ldrh	r3, [r3, #0]
 8003932:	0018      	movs	r0, r3
 8003934:	f7fe fc92 	bl	800225c <__aeabi_i2d>
 8003938:	0004      	movs	r4, r0
 800393a:	000d      	movs	r5, r1
 800393c:	4b80      	ldr	r3, [pc, #512]	; (8003b40 <main+0xff0>)
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	0018      	movs	r0, r3
 8003942:	f7fe fcbb 	bl	80022bc <__aeabi_ui2d>
 8003946:	0002      	movs	r2, r0
 8003948:	000b      	movs	r3, r1
 800394a:	2000      	movs	r0, #0
 800394c:	497d      	ldr	r1, [pc, #500]	; (8003b44 <main+0xff4>)
 800394e:	f005 f8d3 	bl	8008af8 <pow>
 8003952:	0002      	movs	r2, r0
 8003954:	000b      	movs	r3, r1
 8003956:	0020      	movs	r0, r4
 8003958:	0029      	movs	r1, r5
 800395a:	f7fd f9ed 	bl	8000d38 <__aeabi_ddiv>
 800395e:	0002      	movs	r2, r0
 8003960:	000b      	movs	r3, r1
 8003962:	0010      	movs	r0, r2
 8003964:	0019      	movs	r1, r3
 8003966:	f7fe fc43 	bl	80021f0 <__aeabi_d2iz>
 800396a:	0003      	movs	r3, r0
 800396c:	210a      	movs	r1, #10
 800396e:	0018      	movs	r0, r3
 8003970:	f7fc fd36 	bl	80003e0 <__aeabi_idivmod>
 8003974:	000b      	movs	r3, r1
 8003976:	b2da      	uxtb	r2, r3
 8003978:	4b6f      	ldr	r3, [pc, #444]	; (8003b38 <main+0xfe8>)
 800397a:	701a      	strb	r2, [r3, #0]
				if (clickType == 2) {
 800397c:	4b76      	ldr	r3, [pc, #472]	; (8003b58 <main+0x1008>)
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	2b02      	cmp	r3, #2
 8003982:	d13b      	bne.n	80039fc <main+0xeac>
					delayForBlink = 25000;
 8003984:	4b70      	ldr	r3, [pc, #448]	; (8003b48 <main+0xff8>)
 8003986:	4a75      	ldr	r2, [pc, #468]	; (8003b5c <main+0x100c>)
 8003988:	601a      	str	r2, [r3, #0]
					clickType = 0;
 800398a:	4b73      	ldr	r3, [pc, #460]	; (8003b58 <main+0x1008>)
 800398c:	2200      	movs	r2, #0
 800398e:	701a      	strb	r2, [r3, #0]
					setupDig = (setupDig + 1) % 4;
 8003990:	4b6b      	ldr	r3, [pc, #428]	; (8003b40 <main+0xff0>)
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	3301      	adds	r3, #1
 8003996:	4a72      	ldr	r2, [pc, #456]	; (8003b60 <main+0x1010>)
 8003998:	4013      	ands	r3, r2
 800399a:	d504      	bpl.n	80039a6 <main+0xe56>
 800399c:	3b01      	subs	r3, #1
 800399e:	2204      	movs	r2, #4
 80039a0:	4252      	negs	r2, r2
 80039a2:	4313      	orrs	r3, r2
 80039a4:	3301      	adds	r3, #1
 80039a6:	b2da      	uxtb	r2, r3
 80039a8:	4b65      	ldr	r3, [pc, #404]	; (8003b40 <main+0xff0>)
 80039aa:	701a      	strb	r2, [r3, #0]
					newDig = ((int) (offTime / pow(10.0, setupDig)) % 10);
 80039ac:	4b68      	ldr	r3, [pc, #416]	; (8003b50 <main+0x1000>)
 80039ae:	881b      	ldrh	r3, [r3, #0]
 80039b0:	0018      	movs	r0, r3
 80039b2:	f7fe fc53 	bl	800225c <__aeabi_i2d>
 80039b6:	0004      	movs	r4, r0
 80039b8:	000d      	movs	r5, r1
 80039ba:	4b61      	ldr	r3, [pc, #388]	; (8003b40 <main+0xff0>)
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	0018      	movs	r0, r3
 80039c0:	f7fe fc7c 	bl	80022bc <__aeabi_ui2d>
 80039c4:	0002      	movs	r2, r0
 80039c6:	000b      	movs	r3, r1
 80039c8:	2000      	movs	r0, #0
 80039ca:	495e      	ldr	r1, [pc, #376]	; (8003b44 <main+0xff4>)
 80039cc:	f005 f894 	bl	8008af8 <pow>
 80039d0:	0002      	movs	r2, r0
 80039d2:	000b      	movs	r3, r1
 80039d4:	0020      	movs	r0, r4
 80039d6:	0029      	movs	r1, r5
 80039d8:	f7fd f9ae 	bl	8000d38 <__aeabi_ddiv>
 80039dc:	0002      	movs	r2, r0
 80039de:	000b      	movs	r3, r1
 80039e0:	0010      	movs	r0, r2
 80039e2:	0019      	movs	r1, r3
 80039e4:	f7fe fc04 	bl	80021f0 <__aeabi_d2iz>
 80039e8:	0003      	movs	r3, r0
 80039ea:	210a      	movs	r1, #10
 80039ec:	0018      	movs	r0, r3
 80039ee:	f7fc fcf7 	bl	80003e0 <__aeabi_idivmod>
 80039f2:	000b      	movs	r3, r1
 80039f4:	b2da      	uxtb	r2, r3
 80039f6:	4b50      	ldr	r3, [pc, #320]	; (8003b38 <main+0xfe8>)
 80039f8:	701a      	strb	r2, [r3, #0]
 80039fa:	e120      	b.n	8003c3e <main+0x10ee>
				} else if (clickType == 1) {
 80039fc:	4b56      	ldr	r3, [pc, #344]	; (8003b58 <main+0x1008>)
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d000      	beq.n	8003a06 <main+0xeb6>
 8003a04:	e07f      	b.n	8003b06 <main+0xfb6>
					clickType = 0;
 8003a06:	4b54      	ldr	r3, [pc, #336]	; (8003b58 <main+0x1008>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	701a      	strb	r2, [r3, #0]
					if (setupDig == 0) {
 8003a0c:	4b4c      	ldr	r3, [pc, #304]	; (8003b40 <main+0xff0>)
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d10b      	bne.n	8003a2c <main+0xedc>
						newDig = (newDig + 1) % 10;
 8003a14:	4b48      	ldr	r3, [pc, #288]	; (8003b38 <main+0xfe8>)
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	3301      	adds	r3, #1
 8003a1a:	210a      	movs	r1, #10
 8003a1c:	0018      	movs	r0, r3
 8003a1e:	f7fc fcdf 	bl	80003e0 <__aeabi_idivmod>
 8003a22:	000b      	movs	r3, r1
 8003a24:	b2da      	uxtb	r2, r3
 8003a26:	4b44      	ldr	r3, [pc, #272]	; (8003b38 <main+0xfe8>)
 8003a28:	701a      	strb	r2, [r3, #0]
 8003a2a:	e108      	b.n	8003c3e <main+0x10ee>
					} else if (setupDig == 1) {
 8003a2c:	4b44      	ldr	r3, [pc, #272]	; (8003b40 <main+0xff0>)
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d10b      	bne.n	8003a4c <main+0xefc>
						newDig = (newDig + 1) % 6;
 8003a34:	4b40      	ldr	r3, [pc, #256]	; (8003b38 <main+0xfe8>)
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	3301      	adds	r3, #1
 8003a3a:	2106      	movs	r1, #6
 8003a3c:	0018      	movs	r0, r3
 8003a3e:	f7fc fccf 	bl	80003e0 <__aeabi_idivmod>
 8003a42:	000b      	movs	r3, r1
 8003a44:	b2da      	uxtb	r2, r3
 8003a46:	4b3c      	ldr	r3, [pc, #240]	; (8003b38 <main+0xfe8>)
 8003a48:	701a      	strb	r2, [r3, #0]
 8003a4a:	e0f8      	b.n	8003c3e <main+0x10ee>
					} else if (setupDig == 2) {
 8003a4c:	4b3c      	ldr	r3, [pc, #240]	; (8003b40 <main+0xff0>)
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d128      	bne.n	8003aa6 <main+0xf56>
						if (((offTime / 1000) % 10) == 2) {
 8003a54:	4b3e      	ldr	r3, [pc, #248]	; (8003b50 <main+0x1000>)
 8003a56:	881b      	ldrh	r3, [r3, #0]
 8003a58:	22fa      	movs	r2, #250	; 0xfa
 8003a5a:	0091      	lsls	r1, r2, #2
 8003a5c:	0018      	movs	r0, r3
 8003a5e:	f7fc fb4f 	bl	8000100 <__udivsi3>
 8003a62:	0003      	movs	r3, r0
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	210a      	movs	r1, #10
 8003a68:	0018      	movs	r0, r3
 8003a6a:	f7fc fbcf 	bl	800020c <__aeabi_uidivmod>
 8003a6e:	000b      	movs	r3, r1
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d10b      	bne.n	8003a8e <main+0xf3e>
							newDig = (newDig + 1) % 5;
 8003a76:	4b30      	ldr	r3, [pc, #192]	; (8003b38 <main+0xfe8>)
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	3301      	adds	r3, #1
 8003a7c:	2105      	movs	r1, #5
 8003a7e:	0018      	movs	r0, r3
 8003a80:	f7fc fcae 	bl	80003e0 <__aeabi_idivmod>
 8003a84:	000b      	movs	r3, r1
 8003a86:	b2da      	uxtb	r2, r3
 8003a88:	4b2b      	ldr	r3, [pc, #172]	; (8003b38 <main+0xfe8>)
 8003a8a:	701a      	strb	r2, [r3, #0]
 8003a8c:	e0d7      	b.n	8003c3e <main+0x10ee>
						} else {
							newDig = (newDig + 1) % 10;
 8003a8e:	4b2a      	ldr	r3, [pc, #168]	; (8003b38 <main+0xfe8>)
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	3301      	adds	r3, #1
 8003a94:	210a      	movs	r1, #10
 8003a96:	0018      	movs	r0, r3
 8003a98:	f7fc fca2 	bl	80003e0 <__aeabi_idivmod>
 8003a9c:	000b      	movs	r3, r1
 8003a9e:	b2da      	uxtb	r2, r3
 8003aa0:	4b25      	ldr	r3, [pc, #148]	; (8003b38 <main+0xfe8>)
 8003aa2:	701a      	strb	r2, [r3, #0]
 8003aa4:	e0cb      	b.n	8003c3e <main+0x10ee>
						}
					} else if (setupDig == 3) {
 8003aa6:	4b26      	ldr	r3, [pc, #152]	; (8003b40 <main+0xff0>)
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	2b03      	cmp	r3, #3
 8003aac:	d000      	beq.n	8003ab0 <main+0xf60>
 8003aae:	e0c6      	b.n	8003c3e <main+0x10ee>
						if (((offTime / 100) % 10) > 4) {
 8003ab0:	4b27      	ldr	r3, [pc, #156]	; (8003b50 <main+0x1000>)
 8003ab2:	881b      	ldrh	r3, [r3, #0]
 8003ab4:	2164      	movs	r1, #100	; 0x64
 8003ab6:	0018      	movs	r0, r3
 8003ab8:	f7fc fb22 	bl	8000100 <__udivsi3>
 8003abc:	0003      	movs	r3, r0
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	210a      	movs	r1, #10
 8003ac2:	0018      	movs	r0, r3
 8003ac4:	f7fc fba2 	bl	800020c <__aeabi_uidivmod>
 8003ac8:	000b      	movs	r3, r1
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	2b04      	cmp	r3, #4
 8003ace:	d90e      	bls.n	8003aee <main+0xf9e>
							newDig = (newDig + 1) % 2;
 8003ad0:	4b19      	ldr	r3, [pc, #100]	; (8003b38 <main+0xfe8>)
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	4a23      	ldr	r2, [pc, #140]	; (8003b64 <main+0x1014>)
 8003ad8:	4013      	ands	r3, r2
 8003ada:	d504      	bpl.n	8003ae6 <main+0xf96>
 8003adc:	3b01      	subs	r3, #1
 8003ade:	2202      	movs	r2, #2
 8003ae0:	4252      	negs	r2, r2
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	3301      	adds	r3, #1
 8003ae6:	b2da      	uxtb	r2, r3
 8003ae8:	4b13      	ldr	r3, [pc, #76]	; (8003b38 <main+0xfe8>)
 8003aea:	701a      	strb	r2, [r3, #0]
 8003aec:	e0a7      	b.n	8003c3e <main+0x10ee>
						} else {
							newDig = (newDig + 1) % 3;
 8003aee:	4b12      	ldr	r3, [pc, #72]	; (8003b38 <main+0xfe8>)
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	3301      	adds	r3, #1
 8003af4:	2103      	movs	r1, #3
 8003af6:	0018      	movs	r0, r3
 8003af8:	f7fc fc72 	bl	80003e0 <__aeabi_idivmod>
 8003afc:	000b      	movs	r3, r1
 8003afe:	b2da      	uxtb	r2, r3
 8003b00:	4b0d      	ldr	r3, [pc, #52]	; (8003b38 <main+0xfe8>)
 8003b02:	701a      	strb	r2, [r3, #0]
 8003b04:	e09b      	b.n	8003c3e <main+0x10ee>
						}
					}
				} else if (clickType == 3) {
 8003b06:	4b14      	ldr	r3, [pc, #80]	; (8003b58 <main+0x1008>)
 8003b08:	781b      	ldrb	r3, [r3, #0]
 8003b0a:	2b03      	cmp	r3, #3
 8003b0c:	d000      	beq.n	8003b10 <main+0xfc0>
 8003b0e:	e096      	b.n	8003c3e <main+0x10ee>
					clickType = 0;
 8003b10:	4b11      	ldr	r3, [pc, #68]	; (8003b58 <main+0x1008>)
 8003b12:	2200      	movs	r2, #0
 8003b14:	701a      	strb	r2, [r3, #0]
					if (setupDig == 0) {
 8003b16:	4b0a      	ldr	r3, [pc, #40]	; (8003b40 <main+0xff0>)
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d124      	bne.n	8003b68 <main+0x1018>
						newDig = (newDig + 9) % 10;
 8003b1e:	4b06      	ldr	r3, [pc, #24]	; (8003b38 <main+0xfe8>)
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	3309      	adds	r3, #9
 8003b24:	210a      	movs	r1, #10
 8003b26:	0018      	movs	r0, r3
 8003b28:	f7fc fc5a 	bl	80003e0 <__aeabi_idivmod>
 8003b2c:	000b      	movs	r3, r1
 8003b2e:	b2da      	uxtb	r2, r3
 8003b30:	4b01      	ldr	r3, [pc, #4]	; (8003b38 <main+0xfe8>)
 8003b32:	701a      	strb	r2, [r3, #0]
 8003b34:	e083      	b.n	8003c3e <main+0x10ee>
 8003b36:	46c0      	nop			; (mov r8, r8)
 8003b38:	20000233 	.word	0x20000233
 8003b3c:	20000236 	.word	0x20000236
 8003b40:	20000232 	.word	0x20000232
 8003b44:	40240000 	.word	0x40240000
 8003b48:	2000023c 	.word	0x2000023c
 8003b4c:	2000014c 	.word	0x2000014c
 8003b50:	20000238 	.word	0x20000238
 8003b54:	20000228 	.word	0x20000228
 8003b58:	20000230 	.word	0x20000230
 8003b5c:	000061a8 	.word	0x000061a8
 8003b60:	80000003 	.word	0x80000003
 8003b64:	80000001 	.word	0x80000001
					} else if (setupDig == 1) {
 8003b68:	4b8f      	ldr	r3, [pc, #572]	; (8003da8 <main+0x1258>)
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d10b      	bne.n	8003b88 <main+0x1038>
						newDig = (newDig + 5) % 6;
 8003b70:	4b8e      	ldr	r3, [pc, #568]	; (8003dac <main+0x125c>)
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	3305      	adds	r3, #5
 8003b76:	2106      	movs	r1, #6
 8003b78:	0018      	movs	r0, r3
 8003b7a:	f7fc fc31 	bl	80003e0 <__aeabi_idivmod>
 8003b7e:	000b      	movs	r3, r1
 8003b80:	b2da      	uxtb	r2, r3
 8003b82:	4b8a      	ldr	r3, [pc, #552]	; (8003dac <main+0x125c>)
 8003b84:	701a      	strb	r2, [r3, #0]
 8003b86:	e05a      	b.n	8003c3e <main+0x10ee>
					} else if (setupDig == 2) {
 8003b88:	4b87      	ldr	r3, [pc, #540]	; (8003da8 <main+0x1258>)
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d128      	bne.n	8003be2 <main+0x1092>
						if (((offTime / 1000) % 10) == 2) {
 8003b90:	4b87      	ldr	r3, [pc, #540]	; (8003db0 <main+0x1260>)
 8003b92:	881b      	ldrh	r3, [r3, #0]
 8003b94:	22fa      	movs	r2, #250	; 0xfa
 8003b96:	0091      	lsls	r1, r2, #2
 8003b98:	0018      	movs	r0, r3
 8003b9a:	f7fc fab1 	bl	8000100 <__udivsi3>
 8003b9e:	0003      	movs	r3, r0
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	210a      	movs	r1, #10
 8003ba4:	0018      	movs	r0, r3
 8003ba6:	f7fc fb31 	bl	800020c <__aeabi_uidivmod>
 8003baa:	000b      	movs	r3, r1
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d10b      	bne.n	8003bca <main+0x107a>
							newDig = (newDig + 4) % 5;
 8003bb2:	4b7e      	ldr	r3, [pc, #504]	; (8003dac <main+0x125c>)
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	3304      	adds	r3, #4
 8003bb8:	2105      	movs	r1, #5
 8003bba:	0018      	movs	r0, r3
 8003bbc:	f7fc fc10 	bl	80003e0 <__aeabi_idivmod>
 8003bc0:	000b      	movs	r3, r1
 8003bc2:	b2da      	uxtb	r2, r3
 8003bc4:	4b79      	ldr	r3, [pc, #484]	; (8003dac <main+0x125c>)
 8003bc6:	701a      	strb	r2, [r3, #0]
 8003bc8:	e039      	b.n	8003c3e <main+0x10ee>
						} else {
							newDig = (newDig + 9) % 10;
 8003bca:	4b78      	ldr	r3, [pc, #480]	; (8003dac <main+0x125c>)
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	3309      	adds	r3, #9
 8003bd0:	210a      	movs	r1, #10
 8003bd2:	0018      	movs	r0, r3
 8003bd4:	f7fc fc04 	bl	80003e0 <__aeabi_idivmod>
 8003bd8:	000b      	movs	r3, r1
 8003bda:	b2da      	uxtb	r2, r3
 8003bdc:	4b73      	ldr	r3, [pc, #460]	; (8003dac <main+0x125c>)
 8003bde:	701a      	strb	r2, [r3, #0]
 8003be0:	e02d      	b.n	8003c3e <main+0x10ee>
						}
					} else if (setupDig == 3) {
 8003be2:	4b71      	ldr	r3, [pc, #452]	; (8003da8 <main+0x1258>)
 8003be4:	781b      	ldrb	r3, [r3, #0]
 8003be6:	2b03      	cmp	r3, #3
 8003be8:	d129      	bne.n	8003c3e <main+0x10ee>
						if (((offTime / 100) % 10) > 4) {
 8003bea:	4b71      	ldr	r3, [pc, #452]	; (8003db0 <main+0x1260>)
 8003bec:	881b      	ldrh	r3, [r3, #0]
 8003bee:	2164      	movs	r1, #100	; 0x64
 8003bf0:	0018      	movs	r0, r3
 8003bf2:	f7fc fa85 	bl	8000100 <__udivsi3>
 8003bf6:	0003      	movs	r3, r0
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	210a      	movs	r1, #10
 8003bfc:	0018      	movs	r0, r3
 8003bfe:	f7fc fb05 	bl	800020c <__aeabi_uidivmod>
 8003c02:	000b      	movs	r3, r1
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	2b04      	cmp	r3, #4
 8003c08:	d90e      	bls.n	8003c28 <main+0x10d8>
							newDig = (newDig + 1) % 2;
 8003c0a:	4b68      	ldr	r3, [pc, #416]	; (8003dac <main+0x125c>)
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	3301      	adds	r3, #1
 8003c10:	4a68      	ldr	r2, [pc, #416]	; (8003db4 <main+0x1264>)
 8003c12:	4013      	ands	r3, r2
 8003c14:	d504      	bpl.n	8003c20 <main+0x10d0>
 8003c16:	3b01      	subs	r3, #1
 8003c18:	2202      	movs	r2, #2
 8003c1a:	4252      	negs	r2, r2
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	3301      	adds	r3, #1
 8003c20:	b2da      	uxtb	r2, r3
 8003c22:	4b62      	ldr	r3, [pc, #392]	; (8003dac <main+0x125c>)
 8003c24:	701a      	strb	r2, [r3, #0]
 8003c26:	e00a      	b.n	8003c3e <main+0x10ee>
						} else {
							newDig = (newDig + 2) % 3;
 8003c28:	4b60      	ldr	r3, [pc, #384]	; (8003dac <main+0x125c>)
 8003c2a:	781b      	ldrb	r3, [r3, #0]
 8003c2c:	3302      	adds	r3, #2
 8003c2e:	2103      	movs	r1, #3
 8003c30:	0018      	movs	r0, r3
 8003c32:	f7fc fbd5 	bl	80003e0 <__aeabi_idivmod>
 8003c36:	000b      	movs	r3, r1
 8003c38:	b2da      	uxtb	r2, r3
 8003c3a:	4b5c      	ldr	r3, [pc, #368]	; (8003dac <main+0x125c>)
 8003c3c:	701a      	strb	r2, [r3, #0]
						}
					}
				}
				if (newDig != ((int) (offTime / pow(10.0, setupDig)) % 10)) {
 8003c3e:	4b5b      	ldr	r3, [pc, #364]	; (8003dac <main+0x125c>)
 8003c40:	781b      	ldrb	r3, [r3, #0]
 8003c42:	001e      	movs	r6, r3
 8003c44:	4b5a      	ldr	r3, [pc, #360]	; (8003db0 <main+0x1260>)
 8003c46:	881b      	ldrh	r3, [r3, #0]
 8003c48:	0018      	movs	r0, r3
 8003c4a:	f7fe fb07 	bl	800225c <__aeabi_i2d>
 8003c4e:	0004      	movs	r4, r0
 8003c50:	000d      	movs	r5, r1
 8003c52:	4b55      	ldr	r3, [pc, #340]	; (8003da8 <main+0x1258>)
 8003c54:	781b      	ldrb	r3, [r3, #0]
 8003c56:	0018      	movs	r0, r3
 8003c58:	f7fe fb30 	bl	80022bc <__aeabi_ui2d>
 8003c5c:	0002      	movs	r2, r0
 8003c5e:	000b      	movs	r3, r1
 8003c60:	2000      	movs	r0, #0
 8003c62:	4955      	ldr	r1, [pc, #340]	; (8003db8 <main+0x1268>)
 8003c64:	f004 ff48 	bl	8008af8 <pow>
 8003c68:	0002      	movs	r2, r0
 8003c6a:	000b      	movs	r3, r1
 8003c6c:	0020      	movs	r0, r4
 8003c6e:	0029      	movs	r1, r5
 8003c70:	f7fd f862 	bl	8000d38 <__aeabi_ddiv>
 8003c74:	0002      	movs	r2, r0
 8003c76:	000b      	movs	r3, r1
 8003c78:	0010      	movs	r0, r2
 8003c7a:	0019      	movs	r1, r3
 8003c7c:	f7fe fab8 	bl	80021f0 <__aeabi_d2iz>
 8003c80:	0003      	movs	r3, r0
 8003c82:	210a      	movs	r1, #10
 8003c84:	0018      	movs	r0, r3
 8003c86:	f7fc fbab 	bl	80003e0 <__aeabi_idivmod>
 8003c8a:	000b      	movs	r3, r1
 8003c8c:	429e      	cmp	r6, r3
 8003c8e:	d100      	bne.n	8003c92 <main+0x1142>
 8003c90:	e087      	b.n	8003da2 <main+0x1252>
					delayForBlink = 0;
 8003c92:	4b4a      	ldr	r3, [pc, #296]	; (8003dbc <main+0x126c>)
 8003c94:	2200      	movs	r2, #0
 8003c96:	601a      	str	r2, [r3, #0]
					offTime = (offTime
							- (((int) (offTime / pow(10.0, setupDig)) % 10))
 8003c98:	4b45      	ldr	r3, [pc, #276]	; (8003db0 <main+0x1260>)
 8003c9a:	881b      	ldrh	r3, [r3, #0]
 8003c9c:	0018      	movs	r0, r3
 8003c9e:	f7fe fadd 	bl	800225c <__aeabi_i2d>
 8003ca2:	0004      	movs	r4, r0
 8003ca4:	000d      	movs	r5, r1
 8003ca6:	4b42      	ldr	r3, [pc, #264]	; (8003db0 <main+0x1260>)
 8003ca8:	881b      	ldrh	r3, [r3, #0]
 8003caa:	0018      	movs	r0, r3
 8003cac:	f7fe fad6 	bl	800225c <__aeabi_i2d>
 8003cb0:	6038      	str	r0, [r7, #0]
 8003cb2:	6079      	str	r1, [r7, #4]
 8003cb4:	4b3c      	ldr	r3, [pc, #240]	; (8003da8 <main+0x1258>)
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	0018      	movs	r0, r3
 8003cba:	f7fe faff 	bl	80022bc <__aeabi_ui2d>
 8003cbe:	0002      	movs	r2, r0
 8003cc0:	000b      	movs	r3, r1
 8003cc2:	2000      	movs	r0, #0
 8003cc4:	493c      	ldr	r1, [pc, #240]	; (8003db8 <main+0x1268>)
 8003cc6:	f004 ff17 	bl	8008af8 <pow>
 8003cca:	0002      	movs	r2, r0
 8003ccc:	000b      	movs	r3, r1
 8003cce:	6838      	ldr	r0, [r7, #0]
 8003cd0:	6879      	ldr	r1, [r7, #4]
 8003cd2:	f7fd f831 	bl	8000d38 <__aeabi_ddiv>
 8003cd6:	0002      	movs	r2, r0
 8003cd8:	000b      	movs	r3, r1
 8003cda:	0010      	movs	r0, r2
 8003cdc:	0019      	movs	r1, r3
 8003cde:	f7fe fa87 	bl	80021f0 <__aeabi_d2iz>
 8003ce2:	0003      	movs	r3, r0
 8003ce4:	210a      	movs	r1, #10
 8003ce6:	0018      	movs	r0, r3
 8003ce8:	f7fc fb7a 	bl	80003e0 <__aeabi_idivmod>
 8003cec:	000b      	movs	r3, r1
									* pow(10.0, setupDig))
 8003cee:	0018      	movs	r0, r3
 8003cf0:	f7fe fab4 	bl	800225c <__aeabi_i2d>
 8003cf4:	6038      	str	r0, [r7, #0]
 8003cf6:	6079      	str	r1, [r7, #4]
 8003cf8:	4b2b      	ldr	r3, [pc, #172]	; (8003da8 <main+0x1258>)
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	0018      	movs	r0, r3
 8003cfe:	f7fe fadd 	bl	80022bc <__aeabi_ui2d>
 8003d02:	0002      	movs	r2, r0
 8003d04:	000b      	movs	r3, r1
 8003d06:	2000      	movs	r0, #0
 8003d08:	492b      	ldr	r1, [pc, #172]	; (8003db8 <main+0x1268>)
 8003d0a:	f004 fef5 	bl	8008af8 <pow>
 8003d0e:	0002      	movs	r2, r0
 8003d10:	000b      	movs	r3, r1
 8003d12:	6838      	ldr	r0, [r7, #0]
 8003d14:	6879      	ldr	r1, [r7, #4]
 8003d16:	f7fd fc09 	bl	800152c <__aeabi_dmul>
 8003d1a:	0002      	movs	r2, r0
 8003d1c:	000b      	movs	r3, r1
							- (((int) (offTime / pow(10.0, setupDig)) % 10))
 8003d1e:	0020      	movs	r0, r4
 8003d20:	0029      	movs	r1, r5
 8003d22:	f7fd fec5 	bl	8001ab0 <__aeabi_dsub>
 8003d26:	0002      	movs	r2, r0
 8003d28:	000b      	movs	r3, r1
 8003d2a:	603a      	str	r2, [r7, #0]
 8003d2c:	607b      	str	r3, [r7, #4]
							+ (newDig * pow(10.0, setupDig));
 8003d2e:	4b1f      	ldr	r3, [pc, #124]	; (8003dac <main+0x125c>)
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	0018      	movs	r0, r3
 8003d34:	f7fe fa92 	bl	800225c <__aeabi_i2d>
 8003d38:	0004      	movs	r4, r0
 8003d3a:	000d      	movs	r5, r1
 8003d3c:	4b1a      	ldr	r3, [pc, #104]	; (8003da8 <main+0x1258>)
 8003d3e:	781b      	ldrb	r3, [r3, #0]
 8003d40:	0018      	movs	r0, r3
 8003d42:	f7fe fabb 	bl	80022bc <__aeabi_ui2d>
 8003d46:	0002      	movs	r2, r0
 8003d48:	000b      	movs	r3, r1
 8003d4a:	2000      	movs	r0, #0
 8003d4c:	491a      	ldr	r1, [pc, #104]	; (8003db8 <main+0x1268>)
 8003d4e:	f004 fed3 	bl	8008af8 <pow>
 8003d52:	0002      	movs	r2, r0
 8003d54:	000b      	movs	r3, r1
 8003d56:	0020      	movs	r0, r4
 8003d58:	0029      	movs	r1, r5
 8003d5a:	f7fd fbe7 	bl	800152c <__aeabi_dmul>
 8003d5e:	0002      	movs	r2, r0
 8003d60:	000b      	movs	r3, r1
 8003d62:	6838      	ldr	r0, [r7, #0]
 8003d64:	6879      	ldr	r1, [r7, #4]
 8003d66:	f7fc fc87 	bl	8000678 <__aeabi_dadd>
 8003d6a:	0002      	movs	r2, r0
 8003d6c:	000b      	movs	r3, r1
					offTime = (offTime
 8003d6e:	0010      	movs	r0, r2
 8003d70:	0019      	movs	r1, r3
 8003d72:	f7fc fbb3 	bl	80004dc <__aeabi_d2uiz>
 8003d76:	0003      	movs	r3, r0
 8003d78:	b29a      	uxth	r2, r3
 8003d7a:	4b0d      	ldr	r3, [pc, #52]	; (8003db0 <main+0x1260>)
 8003d7c:	801a      	strh	r2, [r3, #0]
					HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, offTime);
 8003d7e:	4b0c      	ldr	r3, [pc, #48]	; (8003db0 <main+0x1260>)
 8003d80:	881b      	ldrh	r3, [r3, #0]
 8003d82:	001a      	movs	r2, r3
 8003d84:	4b0e      	ldr	r3, [pc, #56]	; (8003dc0 <main+0x1270>)
 8003d86:	2101      	movs	r1, #1
 8003d88:	0018      	movs	r0, r3
 8003d8a:	f003 fe75 	bl	8007a78 <HAL_RTCEx_BKUPWrite>
				}

				break;
 8003d8e:	e008      	b.n	8003da2 <main+0x1252>
				break;
 8003d90:	46c0      	nop			; (mov r8, r8)
 8003d92:	f7fe ff2e 	bl	8002bf2 <main+0xa2>
				break;
 8003d96:	46c0      	nop			; (mov r8, r8)
 8003d98:	f7fe ff2b 	bl	8002bf2 <main+0xa2>
				break;
 8003d9c:	46c0      	nop			; (mov r8, r8)
 8003d9e:	f7fe ff28 	bl	8002bf2 <main+0xa2>
				break;
 8003da2:	46c0      	nop			; (mov r8, r8)
	while (1) {
 8003da4:	f7fe ff25 	bl	8002bf2 <main+0xa2>
 8003da8:	20000232 	.word	0x20000232
 8003dac:	20000233 	.word	0x20000233
 8003db0:	20000238 	.word	0x20000238
 8003db4:	80000001 	.word	0x80000001
 8003db8:	40240000 	.word	0x40240000
 8003dbc:	2000023c 	.word	0x2000023c
 8003dc0:	2000014c 	.word	0x2000014c

08003dc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003dc4:	b590      	push	{r4, r7, lr}
 8003dc6:	b093      	sub	sp, #76	; 0x4c
 8003dc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003dca:	2414      	movs	r4, #20
 8003dcc:	193b      	adds	r3, r7, r4
 8003dce:	0018      	movs	r0, r3
 8003dd0:	2334      	movs	r3, #52	; 0x34
 8003dd2:	001a      	movs	r2, r3
 8003dd4:	2100      	movs	r1, #0
 8003dd6:	f004 fe5d 	bl	8008a94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003dda:	1d3b      	adds	r3, r7, #4
 8003ddc:	0018      	movs	r0, r3
 8003dde:	2310      	movs	r3, #16
 8003de0:	001a      	movs	r2, r3
 8003de2:	2100      	movs	r1, #0
 8003de4:	f004 fe56 	bl	8008a94 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003de8:	2380      	movs	r3, #128	; 0x80
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	0018      	movs	r0, r3
 8003dee:	f002 fef3 	bl	8006bd8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8003df2:	193b      	adds	r3, r7, r4
 8003df4:	220a      	movs	r2, #10
 8003df6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003df8:	193b      	adds	r3, r7, r4
 8003dfa:	2280      	movs	r2, #128	; 0x80
 8003dfc:	0052      	lsls	r2, r2, #1
 8003dfe:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8003e00:	0021      	movs	r1, r4
 8003e02:	187b      	adds	r3, r7, r1
 8003e04:	2200      	movs	r2, #0
 8003e06:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003e08:	187b      	adds	r3, r7, r1
 8003e0a:	2240      	movs	r2, #64	; 0x40
 8003e0c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003e0e:	187b      	adds	r3, r7, r1
 8003e10:	2201      	movs	r2, #1
 8003e12:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003e14:	187b      	adds	r3, r7, r1
 8003e16:	2202      	movs	r2, #2
 8003e18:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003e1a:	187b      	adds	r3, r7, r1
 8003e1c:	2202      	movs	r2, #2
 8003e1e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8003e20:	187b      	adds	r3, r7, r1
 8003e22:	2200      	movs	r2, #0
 8003e24:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8003e26:	187b      	adds	r3, r7, r1
 8003e28:	2208      	movs	r2, #8
 8003e2a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003e2c:	187b      	adds	r3, r7, r1
 8003e2e:	2280      	movs	r2, #128	; 0x80
 8003e30:	0292      	lsls	r2, r2, #10
 8003e32:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8003e34:	187b      	adds	r3, r7, r1
 8003e36:	22c0      	movs	r2, #192	; 0xc0
 8003e38:	05d2      	lsls	r2, r2, #23
 8003e3a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003e3c:	187b      	adds	r3, r7, r1
 8003e3e:	0018      	movs	r0, r3
 8003e40:	f002 ff0a 	bl	8006c58 <HAL_RCC_OscConfig>
 8003e44:	1e03      	subs	r3, r0, #0
 8003e46:	d001      	beq.n	8003e4c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8003e48:	f000 fa18 	bl	800427c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003e4c:	1d3b      	adds	r3, r7, #4
 8003e4e:	2207      	movs	r2, #7
 8003e50:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003e52:	1d3b      	adds	r3, r7, #4
 8003e54:	2202      	movs	r2, #2
 8003e56:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003e58:	1d3b      	adds	r3, r7, #4
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003e5e:	1d3b      	adds	r3, r7, #4
 8003e60:	2200      	movs	r2, #0
 8003e62:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003e64:	1d3b      	adds	r3, r7, #4
 8003e66:	2101      	movs	r1, #1
 8003e68:	0018      	movs	r0, r3
 8003e6a:	f003 fa05 	bl	8007278 <HAL_RCC_ClockConfig>
 8003e6e:	1e03      	subs	r3, r0, #0
 8003e70:	d001      	beq.n	8003e76 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8003e72:	f000 fa03 	bl	800427c <Error_Handler>
  }
}
 8003e76:	46c0      	nop			; (mov r8, r8)
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	b013      	add	sp, #76	; 0x4c
 8003e7c:	bd90      	pop	{r4, r7, pc}
	...

08003e80 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b084      	sub	sp, #16
 8003e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003e86:	1d3b      	adds	r3, r7, #4
 8003e88:	0018      	movs	r0, r3
 8003e8a:	230c      	movs	r3, #12
 8003e8c:	001a      	movs	r2, r3
 8003e8e:	2100      	movs	r1, #0
 8003e90:	f004 fe00 	bl	8008a94 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003e94:	4b2d      	ldr	r3, [pc, #180]	; (8003f4c <MX_ADC1_Init+0xcc>)
 8003e96:	4a2e      	ldr	r2, [pc, #184]	; (8003f50 <MX_ADC1_Init+0xd0>)
 8003e98:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003e9a:	4b2c      	ldr	r3, [pc, #176]	; (8003f4c <MX_ADC1_Init+0xcc>)
 8003e9c:	2280      	movs	r2, #128	; 0x80
 8003e9e:	05d2      	lsls	r2, r2, #23
 8003ea0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003ea2:	4b2a      	ldr	r3, [pc, #168]	; (8003f4c <MX_ADC1_Init+0xcc>)
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003ea8:	4b28      	ldr	r3, [pc, #160]	; (8003f4c <MX_ADC1_Init+0xcc>)
 8003eaa:	2200      	movs	r2, #0
 8003eac:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003eae:	4b27      	ldr	r3, [pc, #156]	; (8003f4c <MX_ADC1_Init+0xcc>)
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003eb4:	4b25      	ldr	r3, [pc, #148]	; (8003f4c <MX_ADC1_Init+0xcc>)
 8003eb6:	2204      	movs	r2, #4
 8003eb8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003eba:	4b24      	ldr	r3, [pc, #144]	; (8003f4c <MX_ADC1_Init+0xcc>)
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8003ec0:	4b22      	ldr	r3, [pc, #136]	; (8003f4c <MX_ADC1_Init+0xcc>)
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003ec6:	4b21      	ldr	r3, [pc, #132]	; (8003f4c <MX_ADC1_Init+0xcc>)
 8003ec8:	2200      	movs	r2, #0
 8003eca:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8003ecc:	4b1f      	ldr	r3, [pc, #124]	; (8003f4c <MX_ADC1_Init+0xcc>)
 8003ece:	2201      	movs	r2, #1
 8003ed0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003ed2:	4b1e      	ldr	r3, [pc, #120]	; (8003f4c <MX_ADC1_Init+0xcc>)
 8003ed4:	2220      	movs	r2, #32
 8003ed6:	2100      	movs	r1, #0
 8003ed8:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003eda:	4b1c      	ldr	r3, [pc, #112]	; (8003f4c <MX_ADC1_Init+0xcc>)
 8003edc:	2200      	movs	r2, #0
 8003ede:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003ee0:	4b1a      	ldr	r3, [pc, #104]	; (8003f4c <MX_ADC1_Init+0xcc>)
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003ee6:	4b19      	ldr	r3, [pc, #100]	; (8003f4c <MX_ADC1_Init+0xcc>)
 8003ee8:	222c      	movs	r2, #44	; 0x2c
 8003eea:	2100      	movs	r1, #0
 8003eec:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003eee:	4b17      	ldr	r3, [pc, #92]	; (8003f4c <MX_ADC1_Init+0xcc>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8003ef4:	4b15      	ldr	r3, [pc, #84]	; (8003f4c <MX_ADC1_Init+0xcc>)
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8003efa:	4b14      	ldr	r3, [pc, #80]	; (8003f4c <MX_ADC1_Init+0xcc>)
 8003efc:	2200      	movs	r2, #0
 8003efe:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8003f00:	4b12      	ldr	r3, [pc, #72]	; (8003f4c <MX_ADC1_Init+0xcc>)
 8003f02:	223c      	movs	r2, #60	; 0x3c
 8003f04:	2100      	movs	r1, #0
 8003f06:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8003f08:	4b10      	ldr	r3, [pc, #64]	; (8003f4c <MX_ADC1_Init+0xcc>)
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003f0e:	4b0f      	ldr	r3, [pc, #60]	; (8003f4c <MX_ADC1_Init+0xcc>)
 8003f10:	0018      	movs	r0, r3
 8003f12:	f000 fd8d 	bl	8004a30 <HAL_ADC_Init>
 8003f16:	1e03      	subs	r3, r0, #0
 8003f18:	d001      	beq.n	8003f1e <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8003f1a:	f000 f9af 	bl	800427c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8003f1e:	1d3b      	adds	r3, r7, #4
 8003f20:	4a0c      	ldr	r2, [pc, #48]	; (8003f54 <MX_ADC1_Init+0xd4>)
 8003f22:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003f24:	1d3b      	adds	r3, r7, #4
 8003f26:	2200      	movs	r2, #0
 8003f28:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8003f2a:	1d3b      	adds	r3, r7, #4
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003f30:	1d3a      	adds	r2, r7, #4
 8003f32:	4b06      	ldr	r3, [pc, #24]	; (8003f4c <MX_ADC1_Init+0xcc>)
 8003f34:	0011      	movs	r1, r2
 8003f36:	0018      	movs	r0, r3
 8003f38:	f001 f810 	bl	8004f5c <HAL_ADC_ConfigChannel>
 8003f3c:	1e03      	subs	r3, r0, #0
 8003f3e:	d001      	beq.n	8003f44 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8003f40:	f000 f99c 	bl	800427c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003f44:	46c0      	nop			; (mov r8, r8)
 8003f46:	46bd      	mov	sp, r7
 8003f48:	b004      	add	sp, #16
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	20000094 	.word	0x20000094
 8003f50:	40012400 	.word	0x40012400
 8003f54:	20000100 	.word	0x20000100

08003f58 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003f5c:	4b1b      	ldr	r3, [pc, #108]	; (8003fcc <MX_I2C1_Init+0x74>)
 8003f5e:	4a1c      	ldr	r2, [pc, #112]	; (8003fd0 <MX_I2C1_Init+0x78>)
 8003f60:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00300F38;
 8003f62:	4b1a      	ldr	r3, [pc, #104]	; (8003fcc <MX_I2C1_Init+0x74>)
 8003f64:	4a1b      	ldr	r2, [pc, #108]	; (8003fd4 <MX_I2C1_Init+0x7c>)
 8003f66:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003f68:	4b18      	ldr	r3, [pc, #96]	; (8003fcc <MX_I2C1_Init+0x74>)
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003f6e:	4b17      	ldr	r3, [pc, #92]	; (8003fcc <MX_I2C1_Init+0x74>)
 8003f70:	2201      	movs	r2, #1
 8003f72:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003f74:	4b15      	ldr	r3, [pc, #84]	; (8003fcc <MX_I2C1_Init+0x74>)
 8003f76:	2200      	movs	r2, #0
 8003f78:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003f7a:	4b14      	ldr	r3, [pc, #80]	; (8003fcc <MX_I2C1_Init+0x74>)
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003f80:	4b12      	ldr	r3, [pc, #72]	; (8003fcc <MX_I2C1_Init+0x74>)
 8003f82:	2200      	movs	r2, #0
 8003f84:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003f86:	4b11      	ldr	r3, [pc, #68]	; (8003fcc <MX_I2C1_Init+0x74>)
 8003f88:	2200      	movs	r2, #0
 8003f8a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003f8c:	4b0f      	ldr	r3, [pc, #60]	; (8003fcc <MX_I2C1_Init+0x74>)
 8003f8e:	2200      	movs	r2, #0
 8003f90:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003f92:	4b0e      	ldr	r3, [pc, #56]	; (8003fcc <MX_I2C1_Init+0x74>)
 8003f94:	0018      	movs	r0, r3
 8003f96:	f001 fe99 	bl	8005ccc <HAL_I2C_Init>
 8003f9a:	1e03      	subs	r3, r0, #0
 8003f9c:	d001      	beq.n	8003fa2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003f9e:	f000 f96d 	bl	800427c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003fa2:	4b0a      	ldr	r3, [pc, #40]	; (8003fcc <MX_I2C1_Init+0x74>)
 8003fa4:	2100      	movs	r1, #0
 8003fa6:	0018      	movs	r0, r3
 8003fa8:	f002 fd7e 	bl	8006aa8 <HAL_I2CEx_ConfigAnalogFilter>
 8003fac:	1e03      	subs	r3, r0, #0
 8003fae:	d001      	beq.n	8003fb4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003fb0:	f000 f964 	bl	800427c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003fb4:	4b05      	ldr	r3, [pc, #20]	; (8003fcc <MX_I2C1_Init+0x74>)
 8003fb6:	2100      	movs	r1, #0
 8003fb8:	0018      	movs	r0, r3
 8003fba:	f002 fdc1 	bl	8006b40 <HAL_I2CEx_ConfigDigitalFilter>
 8003fbe:	1e03      	subs	r3, r0, #0
 8003fc0:	d001      	beq.n	8003fc6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003fc2:	f000 f95b 	bl	800427c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003fc6:	46c0      	nop			; (mov r8, r8)
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	200000f8 	.word	0x200000f8
 8003fd0:	40005400 	.word	0x40005400
 8003fd4:	00300f38 	.word	0x00300f38

08003fd8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003fdc:	4b13      	ldr	r3, [pc, #76]	; (800402c <MX_RTC_Init+0x54>)
 8003fde:	4a14      	ldr	r2, [pc, #80]	; (8004030 <MX_RTC_Init+0x58>)
 8003fe0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003fe2:	4b12      	ldr	r3, [pc, #72]	; (800402c <MX_RTC_Init+0x54>)
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8003fe8:	4b10      	ldr	r3, [pc, #64]	; (800402c <MX_RTC_Init+0x54>)
 8003fea:	227f      	movs	r2, #127	; 0x7f
 8003fec:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8003fee:	4b0f      	ldr	r3, [pc, #60]	; (800402c <MX_RTC_Init+0x54>)
 8003ff0:	22ff      	movs	r2, #255	; 0xff
 8003ff2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003ff4:	4b0d      	ldr	r3, [pc, #52]	; (800402c <MX_RTC_Init+0x54>)
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003ffa:	4b0c      	ldr	r3, [pc, #48]	; (800402c <MX_RTC_Init+0x54>)
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004000:	4b0a      	ldr	r3, [pc, #40]	; (800402c <MX_RTC_Init+0x54>)
 8004002:	2200      	movs	r2, #0
 8004004:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004006:	4b09      	ldr	r3, [pc, #36]	; (800402c <MX_RTC_Init+0x54>)
 8004008:	2280      	movs	r2, #128	; 0x80
 800400a:	05d2      	lsls	r2, r2, #23
 800400c:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800400e:	4b07      	ldr	r3, [pc, #28]	; (800402c <MX_RTC_Init+0x54>)
 8004010:	2200      	movs	r2, #0
 8004012:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004014:	4b05      	ldr	r3, [pc, #20]	; (800402c <MX_RTC_Init+0x54>)
 8004016:	0018      	movs	r0, r3
 8004018:	f003 fbde 	bl	80077d8 <HAL_RTC_Init>
 800401c:	1e03      	subs	r3, r0, #0
 800401e:	d001      	beq.n	8004024 <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 8004020:	f000 f92c 	bl	800427c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8004024:	46c0      	nop			; (mov r8, r8)
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	46c0      	nop			; (mov r8, r8)
 800402c:	2000014c 	.word	0x2000014c
 8004030:	40002800 	.word	0x40002800

08004034 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b08a      	sub	sp, #40	; 0x28
 8004038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800403a:	231c      	movs	r3, #28
 800403c:	18fb      	adds	r3, r7, r3
 800403e:	0018      	movs	r0, r3
 8004040:	230c      	movs	r3, #12
 8004042:	001a      	movs	r2, r3
 8004044:	2100      	movs	r1, #0
 8004046:	f004 fd25 	bl	8008a94 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800404a:	003b      	movs	r3, r7
 800404c:	0018      	movs	r0, r3
 800404e:	231c      	movs	r3, #28
 8004050:	001a      	movs	r2, r3
 8004052:	2100      	movs	r1, #0
 8004054:	f004 fd1e 	bl	8008a94 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004058:	4b24      	ldr	r3, [pc, #144]	; (80040ec <MX_TIM3_Init+0xb8>)
 800405a:	4a25      	ldr	r2, [pc, #148]	; (80040f0 <MX_TIM3_Init+0xbc>)
 800405c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 800405e:	4b23      	ldr	r3, [pc, #140]	; (80040ec <MX_TIM3_Init+0xb8>)
 8004060:	2201      	movs	r2, #1
 8004062:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004064:	4b21      	ldr	r3, [pc, #132]	; (80040ec <MX_TIM3_Init+0xb8>)
 8004066:	2200      	movs	r2, #0
 8004068:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 427;
 800406a:	4b20      	ldr	r3, [pc, #128]	; (80040ec <MX_TIM3_Init+0xb8>)
 800406c:	22ac      	movs	r2, #172	; 0xac
 800406e:	32ff      	adds	r2, #255	; 0xff
 8004070:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004072:	4b1e      	ldr	r3, [pc, #120]	; (80040ec <MX_TIM3_Init+0xb8>)
 8004074:	2200      	movs	r2, #0
 8004076:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004078:	4b1c      	ldr	r3, [pc, #112]	; (80040ec <MX_TIM3_Init+0xb8>)
 800407a:	2200      	movs	r2, #0
 800407c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800407e:	4b1b      	ldr	r3, [pc, #108]	; (80040ec <MX_TIM3_Init+0xb8>)
 8004080:	0018      	movs	r0, r3
 8004082:	f003 fdd7 	bl	8007c34 <HAL_TIM_PWM_Init>
 8004086:	1e03      	subs	r3, r0, #0
 8004088:	d001      	beq.n	800408e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800408a:	f000 f8f7 	bl	800427c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800408e:	211c      	movs	r1, #28
 8004090:	187b      	adds	r3, r7, r1
 8004092:	2200      	movs	r2, #0
 8004094:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004096:	187b      	adds	r3, r7, r1
 8004098:	2200      	movs	r2, #0
 800409a:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800409c:	187a      	adds	r2, r7, r1
 800409e:	4b13      	ldr	r3, [pc, #76]	; (80040ec <MX_TIM3_Init+0xb8>)
 80040a0:	0011      	movs	r1, r2
 80040a2:	0018      	movs	r0, r3
 80040a4:	f004 fc7c 	bl	80089a0 <HAL_TIMEx_MasterConfigSynchronization>
 80040a8:	1e03      	subs	r3, r0, #0
 80040aa:	d001      	beq.n	80040b0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80040ac:	f000 f8e6 	bl	800427c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80040b0:	003b      	movs	r3, r7
 80040b2:	2260      	movs	r2, #96	; 0x60
 80040b4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80040b6:	003b      	movs	r3, r7
 80040b8:	2200      	movs	r2, #0
 80040ba:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80040bc:	003b      	movs	r3, r7
 80040be:	2200      	movs	r2, #0
 80040c0:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80040c2:	003b      	movs	r3, r7
 80040c4:	2200      	movs	r2, #0
 80040c6:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80040c8:	0039      	movs	r1, r7
 80040ca:	4b08      	ldr	r3, [pc, #32]	; (80040ec <MX_TIM3_Init+0xb8>)
 80040cc:	2200      	movs	r2, #0
 80040ce:	0018      	movs	r0, r3
 80040d0:	f004 f812 	bl	80080f8 <HAL_TIM_PWM_ConfigChannel>
 80040d4:	1e03      	subs	r3, r0, #0
 80040d6:	d001      	beq.n	80040dc <MX_TIM3_Init+0xa8>
  {
    Error_Handler();
 80040d8:	f000 f8d0 	bl	800427c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80040dc:	4b03      	ldr	r3, [pc, #12]	; (80040ec <MX_TIM3_Init+0xb8>)
 80040de:	0018      	movs	r0, r3
 80040e0:	f000 fa20 	bl	8004524 <HAL_TIM_MspPostInit>

}
 80040e4:	46c0      	nop			; (mov r8, r8)
 80040e6:	46bd      	mov	sp, r7
 80040e8:	b00a      	add	sp, #40	; 0x28
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	20000178 	.word	0x20000178
 80040f0:	40000400 	.word	0x40000400

080040f4 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80040f8:	4b0e      	ldr	r3, [pc, #56]	; (8004134 <MX_TIM14_Init+0x40>)
 80040fa:	4a0f      	ldr	r2, [pc, #60]	; (8004138 <MX_TIM14_Init+0x44>)
 80040fc:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 31;
 80040fe:	4b0d      	ldr	r3, [pc, #52]	; (8004134 <MX_TIM14_Init+0x40>)
 8004100:	221f      	movs	r2, #31
 8004102:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004104:	4b0b      	ldr	r3, [pc, #44]	; (8004134 <MX_TIM14_Init+0x40>)
 8004106:	2200      	movs	r2, #0
 8004108:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 9;
 800410a:	4b0a      	ldr	r3, [pc, #40]	; (8004134 <MX_TIM14_Init+0x40>)
 800410c:	2209      	movs	r2, #9
 800410e:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004110:	4b08      	ldr	r3, [pc, #32]	; (8004134 <MX_TIM14_Init+0x40>)
 8004112:	2200      	movs	r2, #0
 8004114:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004116:	4b07      	ldr	r3, [pc, #28]	; (8004134 <MX_TIM14_Init+0x40>)
 8004118:	2200      	movs	r2, #0
 800411a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800411c:	4b05      	ldr	r3, [pc, #20]	; (8004134 <MX_TIM14_Init+0x40>)
 800411e:	0018      	movs	r0, r3
 8004120:	f003 fce2 	bl	8007ae8 <HAL_TIM_Base_Init>
 8004124:	1e03      	subs	r3, r0, #0
 8004126:	d001      	beq.n	800412c <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8004128:	f000 f8a8 	bl	800427c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800412c:	46c0      	nop			; (mov r8, r8)
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
 8004132:	46c0      	nop			; (mov r8, r8)
 8004134:	200001c4 	.word	0x200001c4
 8004138:	40002000 	.word	0x40002000

0800413c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800413c:	b590      	push	{r4, r7, lr}
 800413e:	b08b      	sub	sp, #44	; 0x2c
 8004140:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004142:	2414      	movs	r4, #20
 8004144:	193b      	adds	r3, r7, r4
 8004146:	0018      	movs	r0, r3
 8004148:	2314      	movs	r3, #20
 800414a:	001a      	movs	r2, r3
 800414c:	2100      	movs	r1, #0
 800414e:	f004 fca1 	bl	8008a94 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004152:	4b44      	ldr	r3, [pc, #272]	; (8004264 <MX_GPIO_Init+0x128>)
 8004154:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004156:	4b43      	ldr	r3, [pc, #268]	; (8004264 <MX_GPIO_Init+0x128>)
 8004158:	2101      	movs	r1, #1
 800415a:	430a      	orrs	r2, r1
 800415c:	635a      	str	r2, [r3, #52]	; 0x34
 800415e:	4b41      	ldr	r3, [pc, #260]	; (8004264 <MX_GPIO_Init+0x128>)
 8004160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004162:	2201      	movs	r2, #1
 8004164:	4013      	ands	r3, r2
 8004166:	613b      	str	r3, [r7, #16]
 8004168:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800416a:	4b3e      	ldr	r3, [pc, #248]	; (8004264 <MX_GPIO_Init+0x128>)
 800416c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800416e:	4b3d      	ldr	r3, [pc, #244]	; (8004264 <MX_GPIO_Init+0x128>)
 8004170:	2102      	movs	r1, #2
 8004172:	430a      	orrs	r2, r1
 8004174:	635a      	str	r2, [r3, #52]	; 0x34
 8004176:	4b3b      	ldr	r3, [pc, #236]	; (8004264 <MX_GPIO_Init+0x128>)
 8004178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800417a:	2202      	movs	r2, #2
 800417c:	4013      	ands	r3, r2
 800417e:	60fb      	str	r3, [r7, #12]
 8004180:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004182:	4b38      	ldr	r3, [pc, #224]	; (8004264 <MX_GPIO_Init+0x128>)
 8004184:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004186:	4b37      	ldr	r3, [pc, #220]	; (8004264 <MX_GPIO_Init+0x128>)
 8004188:	2104      	movs	r1, #4
 800418a:	430a      	orrs	r2, r1
 800418c:	635a      	str	r2, [r3, #52]	; 0x34
 800418e:	4b35      	ldr	r3, [pc, #212]	; (8004264 <MX_GPIO_Init+0x128>)
 8004190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004192:	2204      	movs	r2, #4
 8004194:	4013      	ands	r3, r2
 8004196:	60bb      	str	r3, [r7, #8]
 8004198:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800419a:	4b32      	ldr	r3, [pc, #200]	; (8004264 <MX_GPIO_Init+0x128>)
 800419c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800419e:	4b31      	ldr	r3, [pc, #196]	; (8004264 <MX_GPIO_Init+0x128>)
 80041a0:	2108      	movs	r1, #8
 80041a2:	430a      	orrs	r2, r1
 80041a4:	635a      	str	r2, [r3, #52]	; 0x34
 80041a6:	4b2f      	ldr	r3, [pc, #188]	; (8004264 <MX_GPIO_Init+0x128>)
 80041a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041aa:	2208      	movs	r2, #8
 80041ac:	4013      	ands	r3, r2
 80041ae:	607b      	str	r3, [r7, #4]
 80041b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SA_Pin|SB_Pin|SC_Pin|SD_Pin
 80041b2:	492d      	ldr	r1, [pc, #180]	; (8004268 <MX_GPIO_Init+0x12c>)
 80041b4:	23a0      	movs	r3, #160	; 0xa0
 80041b6:	05db      	lsls	r3, r3, #23
 80041b8:	2200      	movs	r2, #0
 80041ba:	0018      	movs	r0, r3
 80041bc:	f001 fd3f 	bl	8005c3e <HAL_GPIO_WritePin>
                          |SE_Pin|SF_Pin|SG_Pin|SDP_Pin
                          |D0_Pin|D1_Pin|D2_Pin|D3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SA_Pin SB_Pin D0_Pin D1_Pin */
  GPIO_InitStruct.Pin = SA_Pin|SB_Pin|D0_Pin|D1_Pin;
 80041c0:	193b      	adds	r3, r7, r4
 80041c2:	4a2a      	ldr	r2, [pc, #168]	; (800426c <MX_GPIO_Init+0x130>)
 80041c4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041c6:	193b      	adds	r3, r7, r4
 80041c8:	2201      	movs	r2, #1
 80041ca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80041cc:	193b      	adds	r3, r7, r4
 80041ce:	2202      	movs	r2, #2
 80041d0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041d2:	193b      	adds	r3, r7, r4
 80041d4:	2203      	movs	r2, #3
 80041d6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041d8:	193a      	adds	r2, r7, r4
 80041da:	23a0      	movs	r3, #160	; 0xa0
 80041dc:	05db      	lsls	r3, r3, #23
 80041de:	0011      	movs	r1, r2
 80041e0:	0018      	movs	r0, r3
 80041e2:	f001 fbab 	bl	800593c <HAL_GPIO_Init>

  /*Configure GPIO pins : SC_Pin SD_Pin SE_Pin SF_Pin
                           SG_Pin SDP_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = SC_Pin|SD_Pin|SE_Pin|SF_Pin
 80041e6:	193b      	adds	r3, r7, r4
 80041e8:	4a21      	ldr	r2, [pc, #132]	; (8004270 <MX_GPIO_Init+0x134>)
 80041ea:	601a      	str	r2, [r3, #0]
                          |SG_Pin|SDP_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041ec:	193b      	adds	r3, r7, r4
 80041ee:	2201      	movs	r2, #1
 80041f0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041f2:	193b      	adds	r3, r7, r4
 80041f4:	2200      	movs	r2, #0
 80041f6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041f8:	193b      	adds	r3, r7, r4
 80041fa:	2200      	movs	r2, #0
 80041fc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041fe:	193a      	adds	r2, r7, r4
 8004200:	23a0      	movs	r3, #160	; 0xa0
 8004202:	05db      	lsls	r3, r3, #23
 8004204:	0011      	movs	r1, r2
 8004206:	0018      	movs	r0, r3
 8004208:	f001 fb98 	bl	800593c <HAL_GPIO_Init>

  /*Configure GPIO pins : SW0_Pin SW1_Pin SW2_Pin */
  GPIO_InitStruct.Pin = SW0_Pin|SW1_Pin|SW2_Pin;
 800420c:	0021      	movs	r1, r4
 800420e:	187b      	adds	r3, r7, r1
 8004210:	2207      	movs	r2, #7
 8004212:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8004214:	187b      	adds	r3, r7, r1
 8004216:	22c4      	movs	r2, #196	; 0xc4
 8004218:	0392      	lsls	r2, r2, #14
 800421a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800421c:	187b      	adds	r3, r7, r1
 800421e:	2200      	movs	r2, #0
 8004220:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004222:	187b      	adds	r3, r7, r1
 8004224:	4a13      	ldr	r2, [pc, #76]	; (8004274 <MX_GPIO_Init+0x138>)
 8004226:	0019      	movs	r1, r3
 8004228:	0010      	movs	r0, r2
 800422a:	f001 fb87 	bl	800593c <HAL_GPIO_Init>

  /**/
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PA9);
 800422e:	4b12      	ldr	r3, [pc, #72]	; (8004278 <MX_GPIO_Init+0x13c>)
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	4b11      	ldr	r3, [pc, #68]	; (8004278 <MX_GPIO_Init+0x13c>)
 8004234:	2180      	movs	r1, #128	; 0x80
 8004236:	03c9      	lsls	r1, r1, #15
 8004238:	430a      	orrs	r2, r1
 800423a:	601a      	str	r2, [r3, #0]

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 3, 0);
 800423c:	2200      	movs	r2, #0
 800423e:	2103      	movs	r1, #3
 8004240:	2005      	movs	r0, #5
 8004242:	f001 fb49 	bl	80058d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8004246:	2005      	movs	r0, #5
 8004248:	f001 fb5b 	bl	8005902 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 3, 0);
 800424c:	2200      	movs	r2, #0
 800424e:	2103      	movs	r1, #3
 8004250:	2006      	movs	r0, #6
 8004252:	f001 fb41 	bl	80058d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8004256:	2006      	movs	r0, #6
 8004258:	f001 fb53 	bl	8005902 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */

/* USER CODE END MX_GPIO_Init_2 */
}
 800425c:	46c0      	nop			; (mov r8, r8)
 800425e:	46bd      	mov	sp, r7
 8004260:	b00b      	add	sp, #44	; 0x2c
 8004262:	bd90      	pop	{r4, r7, pc}
 8004264:	40021000 	.word	0x40021000
 8004268:	00000fff 	.word	0x00000fff
 800426c:	00000303 	.word	0x00000303
 8004270:	00000cfc 	.word	0x00000cfc
 8004274:	50000c00 	.word	0x50000c00
 8004278:	40010000 	.word	0x40010000

0800427c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004280:	b672      	cpsid	i
}
 8004282:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8004284:	e7fe      	b.n	8004284 <Error_Handler+0x8>
	...

08004288 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b082      	sub	sp, #8
 800428c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800428e:	4b0f      	ldr	r3, [pc, #60]	; (80042cc <HAL_MspInit+0x44>)
 8004290:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004292:	4b0e      	ldr	r3, [pc, #56]	; (80042cc <HAL_MspInit+0x44>)
 8004294:	2101      	movs	r1, #1
 8004296:	430a      	orrs	r2, r1
 8004298:	641a      	str	r2, [r3, #64]	; 0x40
 800429a:	4b0c      	ldr	r3, [pc, #48]	; (80042cc <HAL_MspInit+0x44>)
 800429c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429e:	2201      	movs	r2, #1
 80042a0:	4013      	ands	r3, r2
 80042a2:	607b      	str	r3, [r7, #4]
 80042a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80042a6:	4b09      	ldr	r3, [pc, #36]	; (80042cc <HAL_MspInit+0x44>)
 80042a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042aa:	4b08      	ldr	r3, [pc, #32]	; (80042cc <HAL_MspInit+0x44>)
 80042ac:	2180      	movs	r1, #128	; 0x80
 80042ae:	0549      	lsls	r1, r1, #21
 80042b0:	430a      	orrs	r2, r1
 80042b2:	63da      	str	r2, [r3, #60]	; 0x3c
 80042b4:	4b05      	ldr	r3, [pc, #20]	; (80042cc <HAL_MspInit+0x44>)
 80042b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042b8:	2380      	movs	r3, #128	; 0x80
 80042ba:	055b      	lsls	r3, r3, #21
 80042bc:	4013      	ands	r3, r2
 80042be:	603b      	str	r3, [r7, #0]
 80042c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80042c2:	46c0      	nop			; (mov r8, r8)
 80042c4:	46bd      	mov	sp, r7
 80042c6:	b002      	add	sp, #8
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	46c0      	nop			; (mov r8, r8)
 80042cc:	40021000 	.word	0x40021000

080042d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80042d0:	b590      	push	{r4, r7, lr}
 80042d2:	b08b      	sub	sp, #44	; 0x2c
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042d8:	2414      	movs	r4, #20
 80042da:	193b      	adds	r3, r7, r4
 80042dc:	0018      	movs	r0, r3
 80042de:	2314      	movs	r3, #20
 80042e0:	001a      	movs	r2, r3
 80042e2:	2100      	movs	r1, #0
 80042e4:	f004 fbd6 	bl	8008a94 <memset>
  if(hadc->Instance==ADC1)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a17      	ldr	r2, [pc, #92]	; (800434c <HAL_ADC_MspInit+0x7c>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d128      	bne.n	8004344 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80042f2:	4b17      	ldr	r3, [pc, #92]	; (8004350 <HAL_ADC_MspInit+0x80>)
 80042f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042f6:	4b16      	ldr	r3, [pc, #88]	; (8004350 <HAL_ADC_MspInit+0x80>)
 80042f8:	2180      	movs	r1, #128	; 0x80
 80042fa:	0349      	lsls	r1, r1, #13
 80042fc:	430a      	orrs	r2, r1
 80042fe:	641a      	str	r2, [r3, #64]	; 0x40
 8004300:	4b13      	ldr	r3, [pc, #76]	; (8004350 <HAL_ADC_MspInit+0x80>)
 8004302:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004304:	2380      	movs	r3, #128	; 0x80
 8004306:	035b      	lsls	r3, r3, #13
 8004308:	4013      	ands	r3, r2
 800430a:	613b      	str	r3, [r7, #16]
 800430c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800430e:	4b10      	ldr	r3, [pc, #64]	; (8004350 <HAL_ADC_MspInit+0x80>)
 8004310:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004312:	4b0f      	ldr	r3, [pc, #60]	; (8004350 <HAL_ADC_MspInit+0x80>)
 8004314:	2102      	movs	r1, #2
 8004316:	430a      	orrs	r2, r1
 8004318:	635a      	str	r2, [r3, #52]	; 0x34
 800431a:	4b0d      	ldr	r3, [pc, #52]	; (8004350 <HAL_ADC_MspInit+0x80>)
 800431c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800431e:	2202      	movs	r2, #2
 8004320:	4013      	ands	r3, r2
 8004322:	60fb      	str	r3, [r7, #12]
 8004324:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004326:	193b      	adds	r3, r7, r4
 8004328:	2201      	movs	r2, #1
 800432a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800432c:	193b      	adds	r3, r7, r4
 800432e:	2203      	movs	r2, #3
 8004330:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004332:	193b      	adds	r3, r7, r4
 8004334:	2200      	movs	r2, #0
 8004336:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004338:	193b      	adds	r3, r7, r4
 800433a:	4a06      	ldr	r2, [pc, #24]	; (8004354 <HAL_ADC_MspInit+0x84>)
 800433c:	0019      	movs	r1, r3
 800433e:	0010      	movs	r0, r2
 8004340:	f001 fafc 	bl	800593c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004344:	46c0      	nop			; (mov r8, r8)
 8004346:	46bd      	mov	sp, r7
 8004348:	b00b      	add	sp, #44	; 0x2c
 800434a:	bd90      	pop	{r4, r7, pc}
 800434c:	40012400 	.word	0x40012400
 8004350:	40021000 	.word	0x40021000
 8004354:	50000400 	.word	0x50000400

08004358 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004358:	b590      	push	{r4, r7, lr}
 800435a:	b091      	sub	sp, #68	; 0x44
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004360:	232c      	movs	r3, #44	; 0x2c
 8004362:	18fb      	adds	r3, r7, r3
 8004364:	0018      	movs	r0, r3
 8004366:	2314      	movs	r3, #20
 8004368:	001a      	movs	r2, r3
 800436a:	2100      	movs	r1, #0
 800436c:	f004 fb92 	bl	8008a94 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004370:	2414      	movs	r4, #20
 8004372:	193b      	adds	r3, r7, r4
 8004374:	0018      	movs	r0, r3
 8004376:	2318      	movs	r3, #24
 8004378:	001a      	movs	r2, r3
 800437a:	2100      	movs	r1, #0
 800437c:	f004 fb8a 	bl	8008a94 <memset>
  if(hi2c->Instance==I2C1)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a22      	ldr	r2, [pc, #136]	; (8004410 <HAL_I2C_MspInit+0xb8>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d13d      	bne.n	8004406 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800438a:	193b      	adds	r3, r7, r4
 800438c:	2220      	movs	r2, #32
 800438e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004390:	193b      	adds	r3, r7, r4
 8004392:	2200      	movs	r2, #0
 8004394:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004396:	193b      	adds	r3, r7, r4
 8004398:	0018      	movs	r0, r3
 800439a:	f003 f8f7 	bl	800758c <HAL_RCCEx_PeriphCLKConfig>
 800439e:	1e03      	subs	r3, r0, #0
 80043a0:	d001      	beq.n	80043a6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80043a2:	f7ff ff6b 	bl	800427c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043a6:	4b1b      	ldr	r3, [pc, #108]	; (8004414 <HAL_I2C_MspInit+0xbc>)
 80043a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043aa:	4b1a      	ldr	r3, [pc, #104]	; (8004414 <HAL_I2C_MspInit+0xbc>)
 80043ac:	2102      	movs	r1, #2
 80043ae:	430a      	orrs	r2, r1
 80043b0:	635a      	str	r2, [r3, #52]	; 0x34
 80043b2:	4b18      	ldr	r3, [pc, #96]	; (8004414 <HAL_I2C_MspInit+0xbc>)
 80043b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043b6:	2202      	movs	r2, #2
 80043b8:	4013      	ands	r3, r2
 80043ba:	613b      	str	r3, [r7, #16]
 80043bc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80043be:	212c      	movs	r1, #44	; 0x2c
 80043c0:	187b      	adds	r3, r7, r1
 80043c2:	22c0      	movs	r2, #192	; 0xc0
 80043c4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80043c6:	187b      	adds	r3, r7, r1
 80043c8:	2212      	movs	r2, #18
 80043ca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043cc:	187b      	adds	r3, r7, r1
 80043ce:	2200      	movs	r2, #0
 80043d0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043d2:	187b      	adds	r3, r7, r1
 80043d4:	2200      	movs	r2, #0
 80043d6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80043d8:	187b      	adds	r3, r7, r1
 80043da:	2206      	movs	r2, #6
 80043dc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043de:	187b      	adds	r3, r7, r1
 80043e0:	4a0d      	ldr	r2, [pc, #52]	; (8004418 <HAL_I2C_MspInit+0xc0>)
 80043e2:	0019      	movs	r1, r3
 80043e4:	0010      	movs	r0, r2
 80043e6:	f001 faa9 	bl	800593c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80043ea:	4b0a      	ldr	r3, [pc, #40]	; (8004414 <HAL_I2C_MspInit+0xbc>)
 80043ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043ee:	4b09      	ldr	r3, [pc, #36]	; (8004414 <HAL_I2C_MspInit+0xbc>)
 80043f0:	2180      	movs	r1, #128	; 0x80
 80043f2:	0389      	lsls	r1, r1, #14
 80043f4:	430a      	orrs	r2, r1
 80043f6:	63da      	str	r2, [r3, #60]	; 0x3c
 80043f8:	4b06      	ldr	r3, [pc, #24]	; (8004414 <HAL_I2C_MspInit+0xbc>)
 80043fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043fc:	2380      	movs	r3, #128	; 0x80
 80043fe:	039b      	lsls	r3, r3, #14
 8004400:	4013      	ands	r3, r2
 8004402:	60fb      	str	r3, [r7, #12]
 8004404:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004406:	46c0      	nop			; (mov r8, r8)
 8004408:	46bd      	mov	sp, r7
 800440a:	b011      	add	sp, #68	; 0x44
 800440c:	bd90      	pop	{r4, r7, pc}
 800440e:	46c0      	nop			; (mov r8, r8)
 8004410:	40005400 	.word	0x40005400
 8004414:	40021000 	.word	0x40021000
 8004418:	50000400 	.word	0x50000400

0800441c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800441c:	b590      	push	{r4, r7, lr}
 800441e:	b08b      	sub	sp, #44	; 0x2c
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004424:	2410      	movs	r4, #16
 8004426:	193b      	adds	r3, r7, r4
 8004428:	0018      	movs	r0, r3
 800442a:	2318      	movs	r3, #24
 800442c:	001a      	movs	r2, r3
 800442e:	2100      	movs	r1, #0
 8004430:	f004 fb30 	bl	8008a94 <memset>
  if(hrtc->Instance==RTC)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a15      	ldr	r2, [pc, #84]	; (8004490 <HAL_RTC_MspInit+0x74>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d124      	bne.n	8004488 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800443e:	193b      	adds	r3, r7, r4
 8004440:	2280      	movs	r2, #128	; 0x80
 8004442:	0292      	lsls	r2, r2, #10
 8004444:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004446:	193b      	adds	r3, r7, r4
 8004448:	2280      	movs	r2, #128	; 0x80
 800444a:	0092      	lsls	r2, r2, #2
 800444c:	615a      	str	r2, [r3, #20]

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800444e:	193b      	adds	r3, r7, r4
 8004450:	0018      	movs	r0, r3
 8004452:	f003 f89b 	bl	800758c <HAL_RCCEx_PeriphCLKConfig>
 8004456:	1e03      	subs	r3, r0, #0
 8004458:	d001      	beq.n	800445e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800445a:	f7ff ff0f 	bl	800427c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800445e:	4b0d      	ldr	r3, [pc, #52]	; (8004494 <HAL_RTC_MspInit+0x78>)
 8004460:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004462:	4b0c      	ldr	r3, [pc, #48]	; (8004494 <HAL_RTC_MspInit+0x78>)
 8004464:	2180      	movs	r1, #128	; 0x80
 8004466:	0209      	lsls	r1, r1, #8
 8004468:	430a      	orrs	r2, r1
 800446a:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800446c:	4b09      	ldr	r3, [pc, #36]	; (8004494 <HAL_RTC_MspInit+0x78>)
 800446e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004470:	4b08      	ldr	r3, [pc, #32]	; (8004494 <HAL_RTC_MspInit+0x78>)
 8004472:	2180      	movs	r1, #128	; 0x80
 8004474:	00c9      	lsls	r1, r1, #3
 8004476:	430a      	orrs	r2, r1
 8004478:	63da      	str	r2, [r3, #60]	; 0x3c
 800447a:	4b06      	ldr	r3, [pc, #24]	; (8004494 <HAL_RTC_MspInit+0x78>)
 800447c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800447e:	2380      	movs	r3, #128	; 0x80
 8004480:	00db      	lsls	r3, r3, #3
 8004482:	4013      	ands	r3, r2
 8004484:	60fb      	str	r3, [r7, #12]
 8004486:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004488:	46c0      	nop			; (mov r8, r8)
 800448a:	46bd      	mov	sp, r7
 800448c:	b00b      	add	sp, #44	; 0x2c
 800448e:	bd90      	pop	{r4, r7, pc}
 8004490:	40002800 	.word	0x40002800
 8004494:	40021000 	.word	0x40021000

08004498 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b084      	sub	sp, #16
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a09      	ldr	r2, [pc, #36]	; (80044cc <HAL_TIM_PWM_MspInit+0x34>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d10b      	bne.n	80044c2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80044aa:	4b09      	ldr	r3, [pc, #36]	; (80044d0 <HAL_TIM_PWM_MspInit+0x38>)
 80044ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044ae:	4b08      	ldr	r3, [pc, #32]	; (80044d0 <HAL_TIM_PWM_MspInit+0x38>)
 80044b0:	2102      	movs	r1, #2
 80044b2:	430a      	orrs	r2, r1
 80044b4:	63da      	str	r2, [r3, #60]	; 0x3c
 80044b6:	4b06      	ldr	r3, [pc, #24]	; (80044d0 <HAL_TIM_PWM_MspInit+0x38>)
 80044b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ba:	2202      	movs	r2, #2
 80044bc:	4013      	ands	r3, r2
 80044be:	60fb      	str	r3, [r7, #12]
 80044c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80044c2:	46c0      	nop			; (mov r8, r8)
 80044c4:	46bd      	mov	sp, r7
 80044c6:	b004      	add	sp, #16
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	46c0      	nop			; (mov r8, r8)
 80044cc:	40000400 	.word	0x40000400
 80044d0:	40021000 	.word	0x40021000

080044d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b084      	sub	sp, #16
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a0e      	ldr	r2, [pc, #56]	; (800451c <HAL_TIM_Base_MspInit+0x48>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d115      	bne.n	8004512 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 80044e6:	4b0e      	ldr	r3, [pc, #56]	; (8004520 <HAL_TIM_Base_MspInit+0x4c>)
 80044e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044ea:	4b0d      	ldr	r3, [pc, #52]	; (8004520 <HAL_TIM_Base_MspInit+0x4c>)
 80044ec:	2180      	movs	r1, #128	; 0x80
 80044ee:	0209      	lsls	r1, r1, #8
 80044f0:	430a      	orrs	r2, r1
 80044f2:	641a      	str	r2, [r3, #64]	; 0x40
 80044f4:	4b0a      	ldr	r3, [pc, #40]	; (8004520 <HAL_TIM_Base_MspInit+0x4c>)
 80044f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044f8:	2380      	movs	r3, #128	; 0x80
 80044fa:	021b      	lsls	r3, r3, #8
 80044fc:	4013      	ands	r3, r2
 80044fe:	60fb      	str	r3, [r7, #12]
 8004500:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 2, 0);
 8004502:	2200      	movs	r2, #0
 8004504:	2102      	movs	r1, #2
 8004506:	2013      	movs	r0, #19
 8004508:	f001 f9e6 	bl	80058d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 800450c:	2013      	movs	r0, #19
 800450e:	f001 f9f8 	bl	8005902 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8004512:	46c0      	nop			; (mov r8, r8)
 8004514:	46bd      	mov	sp, r7
 8004516:	b004      	add	sp, #16
 8004518:	bd80      	pop	{r7, pc}
 800451a:	46c0      	nop			; (mov r8, r8)
 800451c:	40002000 	.word	0x40002000
 8004520:	40021000 	.word	0x40021000

08004524 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004524:	b590      	push	{r4, r7, lr}
 8004526:	b089      	sub	sp, #36	; 0x24
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800452c:	240c      	movs	r4, #12
 800452e:	193b      	adds	r3, r7, r4
 8004530:	0018      	movs	r0, r3
 8004532:	2314      	movs	r3, #20
 8004534:	001a      	movs	r2, r3
 8004536:	2100      	movs	r1, #0
 8004538:	f004 faac 	bl	8008a94 <memset>
  if(htim->Instance==TIM3)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a14      	ldr	r2, [pc, #80]	; (8004594 <HAL_TIM_MspPostInit+0x70>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d121      	bne.n	800458a <HAL_TIM_MspPostInit+0x66>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004546:	4b14      	ldr	r3, [pc, #80]	; (8004598 <HAL_TIM_MspPostInit+0x74>)
 8004548:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800454a:	4b13      	ldr	r3, [pc, #76]	; (8004598 <HAL_TIM_MspPostInit+0x74>)
 800454c:	2104      	movs	r1, #4
 800454e:	430a      	orrs	r2, r1
 8004550:	635a      	str	r2, [r3, #52]	; 0x34
 8004552:	4b11      	ldr	r3, [pc, #68]	; (8004598 <HAL_TIM_MspPostInit+0x74>)
 8004554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004556:	2204      	movs	r2, #4
 8004558:	4013      	ands	r3, r2
 800455a:	60bb      	str	r3, [r7, #8]
 800455c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800455e:	0021      	movs	r1, r4
 8004560:	187b      	adds	r3, r7, r1
 8004562:	2240      	movs	r2, #64	; 0x40
 8004564:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004566:	187b      	adds	r3, r7, r1
 8004568:	2202      	movs	r2, #2
 800456a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800456c:	187b      	adds	r3, r7, r1
 800456e:	2200      	movs	r2, #0
 8004570:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004572:	187b      	adds	r3, r7, r1
 8004574:	2200      	movs	r2, #0
 8004576:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8004578:	187b      	adds	r3, r7, r1
 800457a:	2201      	movs	r2, #1
 800457c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800457e:	187b      	adds	r3, r7, r1
 8004580:	4a06      	ldr	r2, [pc, #24]	; (800459c <HAL_TIM_MspPostInit+0x78>)
 8004582:	0019      	movs	r1, r3
 8004584:	0010      	movs	r0, r2
 8004586:	f001 f9d9 	bl	800593c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800458a:	46c0      	nop			; (mov r8, r8)
 800458c:	46bd      	mov	sp, r7
 800458e:	b009      	add	sp, #36	; 0x24
 8004590:	bd90      	pop	{r4, r7, pc}
 8004592:	46c0      	nop			; (mov r8, r8)
 8004594:	40000400 	.word	0x40000400
 8004598:	40021000 	.word	0x40021000
 800459c:	50000800 	.word	0x50000800

080045a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80045a4:	e7fe      	b.n	80045a4 <NMI_Handler+0x4>

080045a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80045a6:	b580      	push	{r7, lr}
 80045a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80045aa:	e7fe      	b.n	80045aa <HardFault_Handler+0x4>

080045ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80045b0:	46c0      	nop			; (mov r8, r8)
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}

080045b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80045b6:	b580      	push	{r7, lr}
 80045b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80045ba:	46c0      	nop			; (mov r8, r8)
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}

080045c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	customTick();
 80045c4:	f7fe f81a 	bl	80025fc <customTick>

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80045c8:	f000 f8be 	bl	8004748 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80045cc:	46c0      	nop			; (mov r8, r8)
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}

080045d2 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80045d2:	b580      	push	{r7, lr}
 80045d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW0_Pin);
 80045d6:	2001      	movs	r0, #1
 80045d8:	f001 fb4e 	bl	8005c78 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SW1_Pin);
 80045dc:	2002      	movs	r0, #2
 80045de:	f001 fb4b 	bl	8005c78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80045e2:	46c0      	nop			; (mov r8, r8)
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW2_Pin);
 80045ec:	2004      	movs	r0, #4
 80045ee:	f001 fb43 	bl	8005c78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 80045f2:	46c0      	nop			; (mov r8, r8)
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}

080045f8 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */
	TIM14_Callback();
 80045fc:	f7fe f89a 	bl	8002734 <TIM14_Callback>
  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8004600:	4b03      	ldr	r3, [pc, #12]	; (8004610 <TIM14_IRQHandler+0x18>)
 8004602:	0018      	movs	r0, r3
 8004604:	f003 fc46 	bl	8007e94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8004608:	46c0      	nop			; (mov r8, r8)
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
 800460e:	46c0      	nop			; (mov r8, r8)
 8004610:	200001c4 	.word	0x200001c4

08004614 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004618:	46c0      	nop			; (mov r8, r8)
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
	...

08004620 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
			  ldr   r0, =_estack
 8004620:	480d      	ldr	r0, [pc, #52]	; (8004658 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004622:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004624:	f7ff fff6 	bl	8004614 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004628:	480c      	ldr	r0, [pc, #48]	; (800465c <LoopForever+0x6>)
  ldr r1, =_edata
 800462a:	490d      	ldr	r1, [pc, #52]	; (8004660 <LoopForever+0xa>)
  ldr r2, =_sidata
 800462c:	4a0d      	ldr	r2, [pc, #52]	; (8004664 <LoopForever+0xe>)
  movs r3, #0
 800462e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004630:	e002      	b.n	8004638 <LoopCopyDataInit>

08004632 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004632:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004634:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004636:	3304      	adds	r3, #4

08004638 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004638:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800463a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800463c:	d3f9      	bcc.n	8004632 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800463e:	4a0a      	ldr	r2, [pc, #40]	; (8004668 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004640:	4c0a      	ldr	r4, [pc, #40]	; (800466c <LoopForever+0x16>)
  movs r3, #0
 8004642:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004644:	e001      	b.n	800464a <LoopFillZerobss>

08004646 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004646:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004648:	3204      	adds	r2, #4

0800464a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800464a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800464c:	d3fb      	bcc.n	8004646 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800464e:	f004 fa2f 	bl	8008ab0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8004652:	f7fe fa7d 	bl	8002b50 <main>

08004656 <LoopForever>:

LoopForever:
  b LoopForever
 8004656:	e7fe      	b.n	8004656 <LoopForever>
			  ldr   r0, =_estack
 8004658:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800465c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004660:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8004664:	08009a98 	.word	0x08009a98
  ldr r2, =_sbss
 8004668:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800466c:	20000380 	.word	0x20000380

08004670 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004670:	e7fe      	b.n	8004670 <ADC1_IRQHandler>
	...

08004674 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b082      	sub	sp, #8
 8004678:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800467a:	1dfb      	adds	r3, r7, #7
 800467c:	2200      	movs	r2, #0
 800467e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004680:	4b0b      	ldr	r3, [pc, #44]	; (80046b0 <HAL_Init+0x3c>)
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	4b0a      	ldr	r3, [pc, #40]	; (80046b0 <HAL_Init+0x3c>)
 8004686:	2180      	movs	r1, #128	; 0x80
 8004688:	0049      	lsls	r1, r1, #1
 800468a:	430a      	orrs	r2, r1
 800468c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800468e:	2000      	movs	r0, #0
 8004690:	f000 f810 	bl	80046b4 <HAL_InitTick>
 8004694:	1e03      	subs	r3, r0, #0
 8004696:	d003      	beq.n	80046a0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8004698:	1dfb      	adds	r3, r7, #7
 800469a:	2201      	movs	r2, #1
 800469c:	701a      	strb	r2, [r3, #0]
 800469e:	e001      	b.n	80046a4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80046a0:	f7ff fdf2 	bl	8004288 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80046a4:	1dfb      	adds	r3, r7, #7
 80046a6:	781b      	ldrb	r3, [r3, #0]
}
 80046a8:	0018      	movs	r0, r3
 80046aa:	46bd      	mov	sp, r7
 80046ac:	b002      	add	sp, #8
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	40022000 	.word	0x40022000

080046b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80046b4:	b590      	push	{r4, r7, lr}
 80046b6:	b085      	sub	sp, #20
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80046bc:	230f      	movs	r3, #15
 80046be:	18fb      	adds	r3, r7, r3
 80046c0:	2200      	movs	r2, #0
 80046c2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80046c4:	4b1d      	ldr	r3, [pc, #116]	; (800473c <HAL_InitTick+0x88>)
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d02b      	beq.n	8004724 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80046cc:	4b1c      	ldr	r3, [pc, #112]	; (8004740 <HAL_InitTick+0x8c>)
 80046ce:	681c      	ldr	r4, [r3, #0]
 80046d0:	4b1a      	ldr	r3, [pc, #104]	; (800473c <HAL_InitTick+0x88>)
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	0019      	movs	r1, r3
 80046d6:	23fa      	movs	r3, #250	; 0xfa
 80046d8:	0098      	lsls	r0, r3, #2
 80046da:	f7fb fd11 	bl	8000100 <__udivsi3>
 80046de:	0003      	movs	r3, r0
 80046e0:	0019      	movs	r1, r3
 80046e2:	0020      	movs	r0, r4
 80046e4:	f7fb fd0c 	bl	8000100 <__udivsi3>
 80046e8:	0003      	movs	r3, r0
 80046ea:	0018      	movs	r0, r3
 80046ec:	f001 f919 	bl	8005922 <HAL_SYSTICK_Config>
 80046f0:	1e03      	subs	r3, r0, #0
 80046f2:	d112      	bne.n	800471a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2b03      	cmp	r3, #3
 80046f8:	d80a      	bhi.n	8004710 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80046fa:	6879      	ldr	r1, [r7, #4]
 80046fc:	2301      	movs	r3, #1
 80046fe:	425b      	negs	r3, r3
 8004700:	2200      	movs	r2, #0
 8004702:	0018      	movs	r0, r3
 8004704:	f001 f8e8 	bl	80058d8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004708:	4b0e      	ldr	r3, [pc, #56]	; (8004744 <HAL_InitTick+0x90>)
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	601a      	str	r2, [r3, #0]
 800470e:	e00d      	b.n	800472c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8004710:	230f      	movs	r3, #15
 8004712:	18fb      	adds	r3, r7, r3
 8004714:	2201      	movs	r2, #1
 8004716:	701a      	strb	r2, [r3, #0]
 8004718:	e008      	b.n	800472c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800471a:	230f      	movs	r3, #15
 800471c:	18fb      	adds	r3, r7, r3
 800471e:	2201      	movs	r2, #1
 8004720:	701a      	strb	r2, [r3, #0]
 8004722:	e003      	b.n	800472c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004724:	230f      	movs	r3, #15
 8004726:	18fb      	adds	r3, r7, r3
 8004728:	2201      	movs	r2, #1
 800472a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800472c:	230f      	movs	r3, #15
 800472e:	18fb      	adds	r3, r7, r3
 8004730:	781b      	ldrb	r3, [r3, #0]
}
 8004732:	0018      	movs	r0, r3
 8004734:	46bd      	mov	sp, r7
 8004736:	b005      	add	sp, #20
 8004738:	bd90      	pop	{r4, r7, pc}
 800473a:	46c0      	nop			; (mov r8, r8)
 800473c:	20000010 	.word	0x20000010
 8004740:	20000008 	.word	0x20000008
 8004744:	2000000c 	.word	0x2000000c

08004748 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800474c:	4b05      	ldr	r3, [pc, #20]	; (8004764 <HAL_IncTick+0x1c>)
 800474e:	781b      	ldrb	r3, [r3, #0]
 8004750:	001a      	movs	r2, r3
 8004752:	4b05      	ldr	r3, [pc, #20]	; (8004768 <HAL_IncTick+0x20>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	18d2      	adds	r2, r2, r3
 8004758:	4b03      	ldr	r3, [pc, #12]	; (8004768 <HAL_IncTick+0x20>)
 800475a:	601a      	str	r2, [r3, #0]
}
 800475c:	46c0      	nop			; (mov r8, r8)
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
 8004762:	46c0      	nop			; (mov r8, r8)
 8004764:	20000010 	.word	0x20000010
 8004768:	20000244 	.word	0x20000244

0800476c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	af00      	add	r7, sp, #0
  return uwTick;
 8004770:	4b02      	ldr	r3, [pc, #8]	; (800477c <HAL_GetTick+0x10>)
 8004772:	681b      	ldr	r3, [r3, #0]
}
 8004774:	0018      	movs	r0, r3
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
 800477a:	46c0      	nop			; (mov r8, r8)
 800477c:	20000244 	.word	0x20000244

08004780 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b082      	sub	sp, #8
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a05      	ldr	r2, [pc, #20]	; (80047a4 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8004790:	401a      	ands	r2, r3
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	431a      	orrs	r2, r3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	601a      	str	r2, [r3, #0]
}
 800479a:	46c0      	nop			; (mov r8, r8)
 800479c:	46bd      	mov	sp, r7
 800479e:	b002      	add	sp, #8
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	46c0      	nop			; (mov r8, r8)
 80047a4:	fe3fffff 	.word	0xfe3fffff

080047a8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b082      	sub	sp, #8
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	23e0      	movs	r3, #224	; 0xe0
 80047b6:	045b      	lsls	r3, r3, #17
 80047b8:	4013      	ands	r3, r2
}
 80047ba:	0018      	movs	r0, r3
 80047bc:	46bd      	mov	sp, r7
 80047be:	b002      	add	sp, #8
 80047c0:	bd80      	pop	{r7, pc}

080047c2 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80047c2:	b580      	push	{r7, lr}
 80047c4:	b084      	sub	sp, #16
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	60f8      	str	r0, [r7, #12]
 80047ca:	60b9      	str	r1, [r7, #8]
 80047cc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	695b      	ldr	r3, [r3, #20]
 80047d2:	68ba      	ldr	r2, [r7, #8]
 80047d4:	2104      	movs	r1, #4
 80047d6:	400a      	ands	r2, r1
 80047d8:	2107      	movs	r1, #7
 80047da:	4091      	lsls	r1, r2
 80047dc:	000a      	movs	r2, r1
 80047de:	43d2      	mvns	r2, r2
 80047e0:	401a      	ands	r2, r3
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	2104      	movs	r1, #4
 80047e6:	400b      	ands	r3, r1
 80047e8:	6879      	ldr	r1, [r7, #4]
 80047ea:	4099      	lsls	r1, r3
 80047ec:	000b      	movs	r3, r1
 80047ee:	431a      	orrs	r2, r3
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80047f4:	46c0      	nop			; (mov r8, r8)
 80047f6:	46bd      	mov	sp, r7
 80047f8:	b004      	add	sp, #16
 80047fa:	bd80      	pop	{r7, pc}

080047fc <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b082      	sub	sp, #8
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	695b      	ldr	r3, [r3, #20]
 800480a:	683a      	ldr	r2, [r7, #0]
 800480c:	2104      	movs	r1, #4
 800480e:	400a      	ands	r2, r1
 8004810:	2107      	movs	r1, #7
 8004812:	4091      	lsls	r1, r2
 8004814:	000a      	movs	r2, r1
 8004816:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	2104      	movs	r1, #4
 800481c:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800481e:	40da      	lsrs	r2, r3
 8004820:	0013      	movs	r3, r2
}
 8004822:	0018      	movs	r0, r3
 8004824:	46bd      	mov	sp, r7
 8004826:	b002      	add	sp, #8
 8004828:	bd80      	pop	{r7, pc}

0800482a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800482a:	b580      	push	{r7, lr}
 800482c:	b082      	sub	sp, #8
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	68da      	ldr	r2, [r3, #12]
 8004836:	23c0      	movs	r3, #192	; 0xc0
 8004838:	011b      	lsls	r3, r3, #4
 800483a:	4013      	ands	r3, r2
 800483c:	d101      	bne.n	8004842 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800483e:	2301      	movs	r3, #1
 8004840:	e000      	b.n	8004844 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004842:	2300      	movs	r3, #0
}
 8004844:	0018      	movs	r0, r3
 8004846:	46bd      	mov	sp, r7
 8004848:	b002      	add	sp, #8
 800484a:	bd80      	pop	{r7, pc}

0800484c <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b084      	sub	sp, #16
 8004850:	af00      	add	r7, sp, #0
 8004852:	60f8      	str	r0, [r7, #12]
 8004854:	60b9      	str	r1, [r7, #8]
 8004856:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800485c:	68ba      	ldr	r2, [r7, #8]
 800485e:	211f      	movs	r1, #31
 8004860:	400a      	ands	r2, r1
 8004862:	210f      	movs	r1, #15
 8004864:	4091      	lsls	r1, r2
 8004866:	000a      	movs	r2, r1
 8004868:	43d2      	mvns	r2, r2
 800486a:	401a      	ands	r2, r3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	0e9b      	lsrs	r3, r3, #26
 8004870:	210f      	movs	r1, #15
 8004872:	4019      	ands	r1, r3
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	201f      	movs	r0, #31
 8004878:	4003      	ands	r3, r0
 800487a:	4099      	lsls	r1, r3
 800487c:	000b      	movs	r3, r1
 800487e:	431a      	orrs	r2, r3
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004884:	46c0      	nop			; (mov r8, r8)
 8004886:	46bd      	mov	sp, r7
 8004888:	b004      	add	sp, #16
 800488a:	bd80      	pop	{r7, pc}

0800488c <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	035b      	lsls	r3, r3, #13
 800489e:	0b5b      	lsrs	r3, r3, #13
 80048a0:	431a      	orrs	r2, r3
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80048a6:	46c0      	nop			; (mov r8, r8)
 80048a8:	46bd      	mov	sp, r7
 80048aa:	b002      	add	sp, #8
 80048ac:	bd80      	pop	{r7, pc}

080048ae <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80048ae:	b580      	push	{r7, lr}
 80048b0:	b082      	sub	sp, #8
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	6078      	str	r0, [r7, #4]
 80048b6:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048bc:	683a      	ldr	r2, [r7, #0]
 80048be:	0352      	lsls	r2, r2, #13
 80048c0:	0b52      	lsrs	r2, r2, #13
 80048c2:	43d2      	mvns	r2, r2
 80048c4:	401a      	ands	r2, r3
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80048ca:	46c0      	nop			; (mov r8, r8)
 80048cc:	46bd      	mov	sp, r7
 80048ce:	b002      	add	sp, #8
 80048d0:	bd80      	pop	{r7, pc}
	...

080048d4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b084      	sub	sp, #16
 80048d8:	af00      	add	r7, sp, #0
 80048da:	60f8      	str	r0, [r7, #12]
 80048dc:	60b9      	str	r1, [r7, #8]
 80048de:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	695b      	ldr	r3, [r3, #20]
 80048e4:	68ba      	ldr	r2, [r7, #8]
 80048e6:	0212      	lsls	r2, r2, #8
 80048e8:	43d2      	mvns	r2, r2
 80048ea:	401a      	ands	r2, r3
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	021b      	lsls	r3, r3, #8
 80048f0:	6879      	ldr	r1, [r7, #4]
 80048f2:	400b      	ands	r3, r1
 80048f4:	4904      	ldr	r1, [pc, #16]	; (8004908 <LL_ADC_SetChannelSamplingTime+0x34>)
 80048f6:	400b      	ands	r3, r1
 80048f8:	431a      	orrs	r2, r3
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80048fe:	46c0      	nop			; (mov r8, r8)
 8004900:	46bd      	mov	sp, r7
 8004902:	b004      	add	sp, #16
 8004904:	bd80      	pop	{r7, pc}
 8004906:	46c0      	nop			; (mov r8, r8)
 8004908:	07ffff00 	.word	0x07ffff00

0800490c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b082      	sub	sp, #8
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	4a05      	ldr	r2, [pc, #20]	; (8004930 <LL_ADC_EnableInternalRegulator+0x24>)
 800491a:	4013      	ands	r3, r2
 800491c:	2280      	movs	r2, #128	; 0x80
 800491e:	0552      	lsls	r2, r2, #21
 8004920:	431a      	orrs	r2, r3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004926:	46c0      	nop			; (mov r8, r8)
 8004928:	46bd      	mov	sp, r7
 800492a:	b002      	add	sp, #8
 800492c:	bd80      	pop	{r7, pc}
 800492e:	46c0      	nop			; (mov r8, r8)
 8004930:	6fffffe8 	.word	0x6fffffe8

08004934 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b082      	sub	sp, #8
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	689a      	ldr	r2, [r3, #8]
 8004940:	2380      	movs	r3, #128	; 0x80
 8004942:	055b      	lsls	r3, r3, #21
 8004944:	401a      	ands	r2, r3
 8004946:	2380      	movs	r3, #128	; 0x80
 8004948:	055b      	lsls	r3, r3, #21
 800494a:	429a      	cmp	r2, r3
 800494c:	d101      	bne.n	8004952 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800494e:	2301      	movs	r3, #1
 8004950:	e000      	b.n	8004954 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8004952:	2300      	movs	r3, #0
}
 8004954:	0018      	movs	r0, r3
 8004956:	46bd      	mov	sp, r7
 8004958:	b002      	add	sp, #8
 800495a:	bd80      	pop	{r7, pc}

0800495c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b082      	sub	sp, #8
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	4a04      	ldr	r2, [pc, #16]	; (800497c <LL_ADC_Enable+0x20>)
 800496a:	4013      	ands	r3, r2
 800496c:	2201      	movs	r2, #1
 800496e:	431a      	orrs	r2, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004974:	46c0      	nop			; (mov r8, r8)
 8004976:	46bd      	mov	sp, r7
 8004978:	b002      	add	sp, #8
 800497a:	bd80      	pop	{r7, pc}
 800497c:	7fffffe8 	.word	0x7fffffe8

08004980 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b082      	sub	sp, #8
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	4a04      	ldr	r2, [pc, #16]	; (80049a0 <LL_ADC_Disable+0x20>)
 800498e:	4013      	ands	r3, r2
 8004990:	2202      	movs	r2, #2
 8004992:	431a      	orrs	r2, r3
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004998:	46c0      	nop			; (mov r8, r8)
 800499a:	46bd      	mov	sp, r7
 800499c:	b002      	add	sp, #8
 800499e:	bd80      	pop	{r7, pc}
 80049a0:	7fffffe8 	.word	0x7fffffe8

080049a4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b082      	sub	sp, #8
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	2201      	movs	r2, #1
 80049b2:	4013      	ands	r3, r2
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d101      	bne.n	80049bc <LL_ADC_IsEnabled+0x18>
 80049b8:	2301      	movs	r3, #1
 80049ba:	e000      	b.n	80049be <LL_ADC_IsEnabled+0x1a>
 80049bc:	2300      	movs	r3, #0
}
 80049be:	0018      	movs	r0, r3
 80049c0:	46bd      	mov	sp, r7
 80049c2:	b002      	add	sp, #8
 80049c4:	bd80      	pop	{r7, pc}

080049c6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80049c6:	b580      	push	{r7, lr}
 80049c8:	b082      	sub	sp, #8
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	2202      	movs	r2, #2
 80049d4:	4013      	ands	r3, r2
 80049d6:	2b02      	cmp	r3, #2
 80049d8:	d101      	bne.n	80049de <LL_ADC_IsDisableOngoing+0x18>
 80049da:	2301      	movs	r3, #1
 80049dc:	e000      	b.n	80049e0 <LL_ADC_IsDisableOngoing+0x1a>
 80049de:	2300      	movs	r3, #0
}
 80049e0:	0018      	movs	r0, r3
 80049e2:	46bd      	mov	sp, r7
 80049e4:	b002      	add	sp, #8
 80049e6:	bd80      	pop	{r7, pc}

080049e8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b082      	sub	sp, #8
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	4a04      	ldr	r2, [pc, #16]	; (8004a08 <LL_ADC_REG_StartConversion+0x20>)
 80049f6:	4013      	ands	r3, r2
 80049f8:	2204      	movs	r2, #4
 80049fa:	431a      	orrs	r2, r3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004a00:	46c0      	nop			; (mov r8, r8)
 8004a02:	46bd      	mov	sp, r7
 8004a04:	b002      	add	sp, #8
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	7fffffe8 	.word	0x7fffffe8

08004a0c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b082      	sub	sp, #8
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	2204      	movs	r2, #4
 8004a1a:	4013      	ands	r3, r2
 8004a1c:	2b04      	cmp	r3, #4
 8004a1e:	d101      	bne.n	8004a24 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004a20:	2301      	movs	r3, #1
 8004a22:	e000      	b.n	8004a26 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004a24:	2300      	movs	r3, #0
}
 8004a26:	0018      	movs	r0, r3
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	b002      	add	sp, #8
 8004a2c:	bd80      	pop	{r7, pc}
	...

08004a30 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b088      	sub	sp, #32
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a38:	231f      	movs	r3, #31
 8004a3a:	18fb      	adds	r3, r7, r3
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8004a40:	2300      	movs	r3, #0
 8004a42:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8004a44:	2300      	movs	r3, #0
 8004a46:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d101      	bne.n	8004a56 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e17f      	b.n	8004d56 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d10a      	bne.n	8004a74 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	0018      	movs	r0, r3
 8004a62:	f7ff fc35 	bl	80042d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2254      	movs	r2, #84	; 0x54
 8004a70:	2100      	movs	r1, #0
 8004a72:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	0018      	movs	r0, r3
 8004a7a:	f7ff ff5b 	bl	8004934 <LL_ADC_IsInternalRegulatorEnabled>
 8004a7e:	1e03      	subs	r3, r0, #0
 8004a80:	d115      	bne.n	8004aae <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	0018      	movs	r0, r3
 8004a88:	f7ff ff40 	bl	800490c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004a8c:	4bb4      	ldr	r3, [pc, #720]	; (8004d60 <HAL_ADC_Init+0x330>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	49b4      	ldr	r1, [pc, #720]	; (8004d64 <HAL_ADC_Init+0x334>)
 8004a92:	0018      	movs	r0, r3
 8004a94:	f7fb fb34 	bl	8000100 <__udivsi3>
 8004a98:	0003      	movs	r3, r0
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	005b      	lsls	r3, r3, #1
 8004a9e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004aa0:	e002      	b.n	8004aa8 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	3b01      	subs	r3, #1
 8004aa6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d1f9      	bne.n	8004aa2 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	0018      	movs	r0, r3
 8004ab4:	f7ff ff3e 	bl	8004934 <LL_ADC_IsInternalRegulatorEnabled>
 8004ab8:	1e03      	subs	r3, r0, #0
 8004aba:	d10f      	bne.n	8004adc <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ac0:	2210      	movs	r2, #16
 8004ac2:	431a      	orrs	r2, r3
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004acc:	2201      	movs	r2, #1
 8004ace:	431a      	orrs	r2, r3
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004ad4:	231f      	movs	r3, #31
 8004ad6:	18fb      	adds	r3, r7, r3
 8004ad8:	2201      	movs	r2, #1
 8004ada:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	0018      	movs	r0, r3
 8004ae2:	f7ff ff93 	bl	8004a0c <LL_ADC_REG_IsConversionOngoing>
 8004ae6:	0003      	movs	r3, r0
 8004ae8:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aee:	2210      	movs	r2, #16
 8004af0:	4013      	ands	r3, r2
 8004af2:	d000      	beq.n	8004af6 <HAL_ADC_Init+0xc6>
 8004af4:	e122      	b.n	8004d3c <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d000      	beq.n	8004afe <HAL_ADC_Init+0xce>
 8004afc:	e11e      	b.n	8004d3c <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b02:	4a99      	ldr	r2, [pc, #612]	; (8004d68 <HAL_ADC_Init+0x338>)
 8004b04:	4013      	ands	r3, r2
 8004b06:	2202      	movs	r2, #2
 8004b08:	431a      	orrs	r2, r3
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	0018      	movs	r0, r3
 8004b14:	f7ff ff46 	bl	80049a4 <LL_ADC_IsEnabled>
 8004b18:	1e03      	subs	r3, r0, #0
 8004b1a:	d000      	beq.n	8004b1e <HAL_ADC_Init+0xee>
 8004b1c:	e0ad      	b.n	8004c7a <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	7e1b      	ldrb	r3, [r3, #24]
 8004b26:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8004b28:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	7e5b      	ldrb	r3, [r3, #25]
 8004b2e:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8004b30:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	7e9b      	ldrb	r3, [r3, #26]
 8004b36:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8004b38:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d002      	beq.n	8004b48 <HAL_ADC_Init+0x118>
 8004b42:	2380      	movs	r3, #128	; 0x80
 8004b44:	015b      	lsls	r3, r3, #5
 8004b46:	e000      	b.n	8004b4a <HAL_ADC_Init+0x11a>
 8004b48:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8004b4a:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8004b50:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	da04      	bge.n	8004b64 <HAL_ADC_Init+0x134>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	005b      	lsls	r3, r3, #1
 8004b60:	085b      	lsrs	r3, r3, #1
 8004b62:	e001      	b.n	8004b68 <HAL_ADC_Init+0x138>
 8004b64:	2380      	movs	r3, #128	; 0x80
 8004b66:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8004b68:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	212c      	movs	r1, #44	; 0x2c
 8004b6e:	5c5b      	ldrb	r3, [r3, r1]
 8004b70:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8004b72:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8004b74:	69ba      	ldr	r2, [r7, #24]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2220      	movs	r2, #32
 8004b7e:	5c9b      	ldrb	r3, [r3, r2]
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d115      	bne.n	8004bb0 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	7e9b      	ldrb	r3, [r3, #26]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d105      	bne.n	8004b98 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	2280      	movs	r2, #128	; 0x80
 8004b90:	0252      	lsls	r2, r2, #9
 8004b92:	4313      	orrs	r3, r2
 8004b94:	61bb      	str	r3, [r7, #24]
 8004b96:	e00b      	b.n	8004bb0 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b9c:	2220      	movs	r2, #32
 8004b9e:	431a      	orrs	r2, r3
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ba8:	2201      	movs	r2, #1
 8004baa:	431a      	orrs	r2, r3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d00a      	beq.n	8004bce <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004bbc:	23e0      	movs	r3, #224	; 0xe0
 8004bbe:	005b      	lsls	r3, r3, #1
 8004bc0:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	69ba      	ldr	r2, [r7, #24]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	4a65      	ldr	r2, [pc, #404]	; (8004d6c <HAL_ADC_Init+0x33c>)
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	0019      	movs	r1, r3
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	69ba      	ldr	r2, [r7, #24]
 8004be0:	430a      	orrs	r2, r1
 8004be2:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	0f9b      	lsrs	r3, r3, #30
 8004bea:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	697a      	ldr	r2, [r7, #20]
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	223c      	movs	r2, #60	; 0x3c
 8004bfc:	5c9b      	ldrb	r3, [r3, r2]
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d111      	bne.n	8004c26 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	0f9b      	lsrs	r3, r3, #30
 8004c08:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004c0e:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8004c14:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8004c1a:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	2201      	movs	r2, #1
 8004c22:	4313      	orrs	r3, r2
 8004c24:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	691b      	ldr	r3, [r3, #16]
 8004c2c:	4a50      	ldr	r2, [pc, #320]	; (8004d70 <HAL_ADC_Init+0x340>)
 8004c2e:	4013      	ands	r3, r2
 8004c30:	0019      	movs	r1, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	697a      	ldr	r2, [r7, #20]
 8004c38:	430a      	orrs	r2, r1
 8004c3a:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	685a      	ldr	r2, [r3, #4]
 8004c40:	23c0      	movs	r3, #192	; 0xc0
 8004c42:	061b      	lsls	r3, r3, #24
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d018      	beq.n	8004c7a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8004c4c:	2380      	movs	r3, #128	; 0x80
 8004c4e:	05db      	lsls	r3, r3, #23
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d012      	beq.n	8004c7a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8004c58:	2380      	movs	r3, #128	; 0x80
 8004c5a:	061b      	lsls	r3, r3, #24
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d00c      	beq.n	8004c7a <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8004c60:	4b44      	ldr	r3, [pc, #272]	; (8004d74 <HAL_ADC_Init+0x344>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a44      	ldr	r2, [pc, #272]	; (8004d78 <HAL_ADC_Init+0x348>)
 8004c66:	4013      	ands	r3, r2
 8004c68:	0019      	movs	r1, r3
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	685a      	ldr	r2, [r3, #4]
 8004c6e:	23f0      	movs	r3, #240	; 0xf0
 8004c70:	039b      	lsls	r3, r3, #14
 8004c72:	401a      	ands	r2, r3
 8004c74:	4b3f      	ldr	r3, [pc, #252]	; (8004d74 <HAL_ADC_Init+0x344>)
 8004c76:	430a      	orrs	r2, r1
 8004c78:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6818      	ldr	r0, [r3, #0]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c82:	001a      	movs	r2, r3
 8004c84:	2100      	movs	r1, #0
 8004c86:	f7ff fd9c 	bl	80047c2 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6818      	ldr	r0, [r3, #0]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c92:	493a      	ldr	r1, [pc, #232]	; (8004d7c <HAL_ADC_Init+0x34c>)
 8004c94:	001a      	movs	r2, r3
 8004c96:	f7ff fd94 	bl	80047c2 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	691b      	ldr	r3, [r3, #16]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d109      	bne.n	8004cb6 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	2110      	movs	r1, #16
 8004cae:	4249      	negs	r1, r1
 8004cb0:	430a      	orrs	r2, r1
 8004cb2:	629a      	str	r2, [r3, #40]	; 0x28
 8004cb4:	e018      	b.n	8004ce8 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	691a      	ldr	r2, [r3, #16]
 8004cba:	2380      	movs	r3, #128	; 0x80
 8004cbc:	039b      	lsls	r3, r3, #14
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d112      	bne.n	8004ce8 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	69db      	ldr	r3, [r3, #28]
 8004ccc:	3b01      	subs	r3, #1
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	221c      	movs	r2, #28
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	2210      	movs	r2, #16
 8004cd6:	4252      	negs	r2, r2
 8004cd8:	409a      	lsls	r2, r3
 8004cda:	0011      	movs	r1, r2
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	430a      	orrs	r2, r1
 8004ce6:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2100      	movs	r1, #0
 8004cee:	0018      	movs	r0, r3
 8004cf0:	f7ff fd84 	bl	80047fc <LL_ADC_GetSamplingTimeCommonChannels>
 8004cf4:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d10b      	bne.n	8004d16 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d08:	2203      	movs	r2, #3
 8004d0a:	4393      	bics	r3, r2
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	431a      	orrs	r2, r3
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004d14:	e01c      	b.n	8004d50 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d1a:	2212      	movs	r2, #18
 8004d1c:	4393      	bics	r3, r2
 8004d1e:	2210      	movs	r2, #16
 8004d20:	431a      	orrs	r2, r3
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	431a      	orrs	r2, r3
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8004d32:	231f      	movs	r3, #31
 8004d34:	18fb      	adds	r3, r7, r3
 8004d36:	2201      	movs	r2, #1
 8004d38:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004d3a:	e009      	b.n	8004d50 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d40:	2210      	movs	r2, #16
 8004d42:	431a      	orrs	r2, r3
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004d48:	231f      	movs	r3, #31
 8004d4a:	18fb      	adds	r3, r7, r3
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8004d50:	231f      	movs	r3, #31
 8004d52:	18fb      	adds	r3, r7, r3
 8004d54:	781b      	ldrb	r3, [r3, #0]
}
 8004d56:	0018      	movs	r0, r3
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	b008      	add	sp, #32
 8004d5c:	bd80      	pop	{r7, pc}
 8004d5e:	46c0      	nop			; (mov r8, r8)
 8004d60:	20000008 	.word	0x20000008
 8004d64:	00030d40 	.word	0x00030d40
 8004d68:	fffffefd 	.word	0xfffffefd
 8004d6c:	fffe0201 	.word	0xfffe0201
 8004d70:	1ffffc02 	.word	0x1ffffc02
 8004d74:	40012708 	.word	0x40012708
 8004d78:	ffc3ffff 	.word	0xffc3ffff
 8004d7c:	07ffff04 	.word	0x07ffff04

08004d80 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004d80:	b5b0      	push	{r4, r5, r7, lr}
 8004d82:	b084      	sub	sp, #16
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	0018      	movs	r0, r3
 8004d8e:	f7ff fe3d 	bl	8004a0c <LL_ADC_REG_IsConversionOngoing>
 8004d92:	1e03      	subs	r3, r0, #0
 8004d94:	d135      	bne.n	8004e02 <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2254      	movs	r2, #84	; 0x54
 8004d9a:	5c9b      	ldrb	r3, [r3, r2]
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d101      	bne.n	8004da4 <HAL_ADC_Start+0x24>
 8004da0:	2302      	movs	r3, #2
 8004da2:	e035      	b.n	8004e10 <HAL_ADC_Start+0x90>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2254      	movs	r2, #84	; 0x54
 8004da8:	2101      	movs	r1, #1
 8004daa:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004dac:	250f      	movs	r5, #15
 8004dae:	197c      	adds	r4, r7, r5
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	0018      	movs	r0, r3
 8004db4:	f000 faaa 	bl	800530c <ADC_Enable>
 8004db8:	0003      	movs	r3, r0
 8004dba:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004dbc:	197b      	adds	r3, r7, r5
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d119      	bne.n	8004df8 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dc8:	4a13      	ldr	r2, [pc, #76]	; (8004e18 <HAL_ADC_Start+0x98>)
 8004dca:	4013      	ands	r3, r2
 8004dcc:	2280      	movs	r2, #128	; 0x80
 8004dce:	0052      	lsls	r2, r2, #1
 8004dd0:	431a      	orrs	r2, r3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	221c      	movs	r2, #28
 8004de2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2254      	movs	r2, #84	; 0x54
 8004de8:	2100      	movs	r1, #0
 8004dea:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	0018      	movs	r0, r3
 8004df2:	f7ff fdf9 	bl	80049e8 <LL_ADC_REG_StartConversion>
 8004df6:	e008      	b.n	8004e0a <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2254      	movs	r2, #84	; 0x54
 8004dfc:	2100      	movs	r1, #0
 8004dfe:	5499      	strb	r1, [r3, r2]
 8004e00:	e003      	b.n	8004e0a <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004e02:	230f      	movs	r3, #15
 8004e04:	18fb      	adds	r3, r7, r3
 8004e06:	2202      	movs	r2, #2
 8004e08:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8004e0a:	230f      	movs	r3, #15
 8004e0c:	18fb      	adds	r3, r7, r3
 8004e0e:	781b      	ldrb	r3, [r3, #0]
}
 8004e10:	0018      	movs	r0, r3
 8004e12:	46bd      	mov	sp, r7
 8004e14:	b004      	add	sp, #16
 8004e16:	bdb0      	pop	{r4, r5, r7, pc}
 8004e18:	fffff0fe 	.word	0xfffff0fe

08004e1c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	695b      	ldr	r3, [r3, #20]
 8004e2a:	2b08      	cmp	r3, #8
 8004e2c:	d102      	bne.n	8004e34 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8004e2e:	2308      	movs	r3, #8
 8004e30:	60fb      	str	r3, [r7, #12]
 8004e32:	e00f      	b.n	8004e54 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	d007      	beq.n	8004e50 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e44:	2220      	movs	r2, #32
 8004e46:	431a      	orrs	r2, r3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e072      	b.n	8004f36 <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8004e50:	2304      	movs	r3, #4
 8004e52:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8004e54:	f7ff fc8a 	bl	800476c <HAL_GetTick>
 8004e58:	0003      	movs	r3, r0
 8004e5a:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8004e5c:	e01f      	b.n	8004e9e <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	3301      	adds	r3, #1
 8004e62:	d01c      	beq.n	8004e9e <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8004e64:	f7ff fc82 	bl	800476c <HAL_GetTick>
 8004e68:	0002      	movs	r2, r0
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	1ad3      	subs	r3, r2, r3
 8004e6e:	683a      	ldr	r2, [r7, #0]
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d302      	bcc.n	8004e7a <HAL_ADC_PollForConversion+0x5e>
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d111      	bne.n	8004e9e <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	68fa      	ldr	r2, [r7, #12]
 8004e82:	4013      	ands	r3, r2
 8004e84:	d10b      	bne.n	8004e9e <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e8a:	2204      	movs	r2, #4
 8004e8c:	431a      	orrs	r2, r3
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2254      	movs	r2, #84	; 0x54
 8004e96:	2100      	movs	r1, #0
 8004e98:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	e04b      	b.n	8004f36 <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	68fa      	ldr	r2, [r7, #12]
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	d0d9      	beq.n	8004e5e <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eae:	2280      	movs	r2, #128	; 0x80
 8004eb0:	0092      	lsls	r2, r2, #2
 8004eb2:	431a      	orrs	r2, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	0018      	movs	r0, r3
 8004ebe:	f7ff fcb4 	bl	800482a <LL_ADC_REG_IsTriggerSourceSWStart>
 8004ec2:	1e03      	subs	r3, r0, #0
 8004ec4:	d02e      	beq.n	8004f24 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	7e9b      	ldrb	r3, [r3, #26]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d12a      	bne.n	8004f24 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2208      	movs	r2, #8
 8004ed6:	4013      	ands	r3, r2
 8004ed8:	2b08      	cmp	r3, #8
 8004eda:	d123      	bne.n	8004f24 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	0018      	movs	r0, r3
 8004ee2:	f7ff fd93 	bl	8004a0c <LL_ADC_REG_IsConversionOngoing>
 8004ee6:	1e03      	subs	r3, r0, #0
 8004ee8:	d110      	bne.n	8004f0c <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	685a      	ldr	r2, [r3, #4]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	210c      	movs	r1, #12
 8004ef6:	438a      	bics	r2, r1
 8004ef8:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004efe:	4a10      	ldr	r2, [pc, #64]	; (8004f40 <HAL_ADC_PollForConversion+0x124>)
 8004f00:	4013      	ands	r3, r2
 8004f02:	2201      	movs	r2, #1
 8004f04:	431a      	orrs	r2, r3
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	659a      	str	r2, [r3, #88]	; 0x58
 8004f0a:	e00b      	b.n	8004f24 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f10:	2220      	movs	r2, #32
 8004f12:	431a      	orrs	r2, r3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	431a      	orrs	r2, r3
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	7e1b      	ldrb	r3, [r3, #24]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d103      	bne.n	8004f34 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	220c      	movs	r2, #12
 8004f32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f34:	2300      	movs	r3, #0
}
 8004f36:	0018      	movs	r0, r3
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	b004      	add	sp, #16
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	46c0      	nop			; (mov r8, r8)
 8004f40:	fffffefe 	.word	0xfffffefe

08004f44 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b082      	sub	sp, #8
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004f52:	0018      	movs	r0, r3
 8004f54:	46bd      	mov	sp, r7
 8004f56:	b002      	add	sp, #8
 8004f58:	bd80      	pop	{r7, pc}
	...

08004f5c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b086      	sub	sp, #24
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004f66:	2317      	movs	r3, #23
 8004f68:	18fb      	adds	r3, r7, r3
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2254      	movs	r2, #84	; 0x54
 8004f76:	5c9b      	ldrb	r3, [r3, r2]
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d101      	bne.n	8004f80 <HAL_ADC_ConfigChannel+0x24>
 8004f7c:	2302      	movs	r3, #2
 8004f7e:	e1c0      	b.n	8005302 <HAL_ADC_ConfigChannel+0x3a6>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2254      	movs	r2, #84	; 0x54
 8004f84:	2101      	movs	r1, #1
 8004f86:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	0018      	movs	r0, r3
 8004f8e:	f7ff fd3d 	bl	8004a0c <LL_ADC_REG_IsConversionOngoing>
 8004f92:	1e03      	subs	r3, r0, #0
 8004f94:	d000      	beq.n	8004f98 <HAL_ADC_ConfigChannel+0x3c>
 8004f96:	e1a3      	b.n	80052e0 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	2b02      	cmp	r3, #2
 8004f9e:	d100      	bne.n	8004fa2 <HAL_ADC_ConfigChannel+0x46>
 8004fa0:	e143      	b.n	800522a <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	691a      	ldr	r2, [r3, #16]
 8004fa6:	2380      	movs	r3, #128	; 0x80
 8004fa8:	061b      	lsls	r3, r3, #24
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d004      	beq.n	8004fb8 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004fb2:	4ac1      	ldr	r2, [pc, #772]	; (80052b8 <HAL_ADC_ConfigChannel+0x35c>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d108      	bne.n	8004fca <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	0019      	movs	r1, r3
 8004fc2:	0010      	movs	r0, r2
 8004fc4:	f7ff fc62 	bl	800488c <LL_ADC_REG_SetSequencerChAdd>
 8004fc8:	e0c9      	b.n	800515e <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	211f      	movs	r1, #31
 8004fd4:	400b      	ands	r3, r1
 8004fd6:	210f      	movs	r1, #15
 8004fd8:	4099      	lsls	r1, r3
 8004fda:	000b      	movs	r3, r1
 8004fdc:	43db      	mvns	r3, r3
 8004fde:	4013      	ands	r3, r2
 8004fe0:	0019      	movs	r1, r3
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	035b      	lsls	r3, r3, #13
 8004fe8:	0b5b      	lsrs	r3, r3, #13
 8004fea:	d105      	bne.n	8004ff8 <HAL_ADC_ConfigChannel+0x9c>
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	0e9b      	lsrs	r3, r3, #26
 8004ff2:	221f      	movs	r2, #31
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	e098      	b.n	800512a <HAL_ADC_ConfigChannel+0x1ce>
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	4013      	ands	r3, r2
 8005000:	d000      	beq.n	8005004 <HAL_ADC_ConfigChannel+0xa8>
 8005002:	e091      	b.n	8005128 <HAL_ADC_ConfigChannel+0x1cc>
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	2202      	movs	r2, #2
 800500a:	4013      	ands	r3, r2
 800500c:	d000      	beq.n	8005010 <HAL_ADC_ConfigChannel+0xb4>
 800500e:	e089      	b.n	8005124 <HAL_ADC_ConfigChannel+0x1c8>
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	2204      	movs	r2, #4
 8005016:	4013      	ands	r3, r2
 8005018:	d000      	beq.n	800501c <HAL_ADC_ConfigChannel+0xc0>
 800501a:	e081      	b.n	8005120 <HAL_ADC_ConfigChannel+0x1c4>
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	2208      	movs	r2, #8
 8005022:	4013      	ands	r3, r2
 8005024:	d000      	beq.n	8005028 <HAL_ADC_ConfigChannel+0xcc>
 8005026:	e079      	b.n	800511c <HAL_ADC_ConfigChannel+0x1c0>
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	2210      	movs	r2, #16
 800502e:	4013      	ands	r3, r2
 8005030:	d000      	beq.n	8005034 <HAL_ADC_ConfigChannel+0xd8>
 8005032:	e071      	b.n	8005118 <HAL_ADC_ConfigChannel+0x1bc>
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	2220      	movs	r2, #32
 800503a:	4013      	ands	r3, r2
 800503c:	d000      	beq.n	8005040 <HAL_ADC_ConfigChannel+0xe4>
 800503e:	e069      	b.n	8005114 <HAL_ADC_ConfigChannel+0x1b8>
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	2240      	movs	r2, #64	; 0x40
 8005046:	4013      	ands	r3, r2
 8005048:	d000      	beq.n	800504c <HAL_ADC_ConfigChannel+0xf0>
 800504a:	e061      	b.n	8005110 <HAL_ADC_ConfigChannel+0x1b4>
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	2280      	movs	r2, #128	; 0x80
 8005052:	4013      	ands	r3, r2
 8005054:	d000      	beq.n	8005058 <HAL_ADC_ConfigChannel+0xfc>
 8005056:	e059      	b.n	800510c <HAL_ADC_ConfigChannel+0x1b0>
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	2380      	movs	r3, #128	; 0x80
 800505e:	005b      	lsls	r3, r3, #1
 8005060:	4013      	ands	r3, r2
 8005062:	d151      	bne.n	8005108 <HAL_ADC_ConfigChannel+0x1ac>
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	2380      	movs	r3, #128	; 0x80
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	4013      	ands	r3, r2
 800506e:	d149      	bne.n	8005104 <HAL_ADC_ConfigChannel+0x1a8>
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	2380      	movs	r3, #128	; 0x80
 8005076:	00db      	lsls	r3, r3, #3
 8005078:	4013      	ands	r3, r2
 800507a:	d141      	bne.n	8005100 <HAL_ADC_ConfigChannel+0x1a4>
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	2380      	movs	r3, #128	; 0x80
 8005082:	011b      	lsls	r3, r3, #4
 8005084:	4013      	ands	r3, r2
 8005086:	d139      	bne.n	80050fc <HAL_ADC_ConfigChannel+0x1a0>
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	2380      	movs	r3, #128	; 0x80
 800508e:	015b      	lsls	r3, r3, #5
 8005090:	4013      	ands	r3, r2
 8005092:	d131      	bne.n	80050f8 <HAL_ADC_ConfigChannel+0x19c>
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	2380      	movs	r3, #128	; 0x80
 800509a:	019b      	lsls	r3, r3, #6
 800509c:	4013      	ands	r3, r2
 800509e:	d129      	bne.n	80050f4 <HAL_ADC_ConfigChannel+0x198>
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	2380      	movs	r3, #128	; 0x80
 80050a6:	01db      	lsls	r3, r3, #7
 80050a8:	4013      	ands	r3, r2
 80050aa:	d121      	bne.n	80050f0 <HAL_ADC_ConfigChannel+0x194>
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	2380      	movs	r3, #128	; 0x80
 80050b2:	021b      	lsls	r3, r3, #8
 80050b4:	4013      	ands	r3, r2
 80050b6:	d119      	bne.n	80050ec <HAL_ADC_ConfigChannel+0x190>
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	2380      	movs	r3, #128	; 0x80
 80050be:	025b      	lsls	r3, r3, #9
 80050c0:	4013      	ands	r3, r2
 80050c2:	d111      	bne.n	80050e8 <HAL_ADC_ConfigChannel+0x18c>
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	2380      	movs	r3, #128	; 0x80
 80050ca:	029b      	lsls	r3, r3, #10
 80050cc:	4013      	ands	r3, r2
 80050ce:	d109      	bne.n	80050e4 <HAL_ADC_ConfigChannel+0x188>
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	2380      	movs	r3, #128	; 0x80
 80050d6:	02db      	lsls	r3, r3, #11
 80050d8:	4013      	ands	r3, r2
 80050da:	d001      	beq.n	80050e0 <HAL_ADC_ConfigChannel+0x184>
 80050dc:	2312      	movs	r3, #18
 80050de:	e024      	b.n	800512a <HAL_ADC_ConfigChannel+0x1ce>
 80050e0:	2300      	movs	r3, #0
 80050e2:	e022      	b.n	800512a <HAL_ADC_ConfigChannel+0x1ce>
 80050e4:	2311      	movs	r3, #17
 80050e6:	e020      	b.n	800512a <HAL_ADC_ConfigChannel+0x1ce>
 80050e8:	2310      	movs	r3, #16
 80050ea:	e01e      	b.n	800512a <HAL_ADC_ConfigChannel+0x1ce>
 80050ec:	230f      	movs	r3, #15
 80050ee:	e01c      	b.n	800512a <HAL_ADC_ConfigChannel+0x1ce>
 80050f0:	230e      	movs	r3, #14
 80050f2:	e01a      	b.n	800512a <HAL_ADC_ConfigChannel+0x1ce>
 80050f4:	230d      	movs	r3, #13
 80050f6:	e018      	b.n	800512a <HAL_ADC_ConfigChannel+0x1ce>
 80050f8:	230c      	movs	r3, #12
 80050fa:	e016      	b.n	800512a <HAL_ADC_ConfigChannel+0x1ce>
 80050fc:	230b      	movs	r3, #11
 80050fe:	e014      	b.n	800512a <HAL_ADC_ConfigChannel+0x1ce>
 8005100:	230a      	movs	r3, #10
 8005102:	e012      	b.n	800512a <HAL_ADC_ConfigChannel+0x1ce>
 8005104:	2309      	movs	r3, #9
 8005106:	e010      	b.n	800512a <HAL_ADC_ConfigChannel+0x1ce>
 8005108:	2308      	movs	r3, #8
 800510a:	e00e      	b.n	800512a <HAL_ADC_ConfigChannel+0x1ce>
 800510c:	2307      	movs	r3, #7
 800510e:	e00c      	b.n	800512a <HAL_ADC_ConfigChannel+0x1ce>
 8005110:	2306      	movs	r3, #6
 8005112:	e00a      	b.n	800512a <HAL_ADC_ConfigChannel+0x1ce>
 8005114:	2305      	movs	r3, #5
 8005116:	e008      	b.n	800512a <HAL_ADC_ConfigChannel+0x1ce>
 8005118:	2304      	movs	r3, #4
 800511a:	e006      	b.n	800512a <HAL_ADC_ConfigChannel+0x1ce>
 800511c:	2303      	movs	r3, #3
 800511e:	e004      	b.n	800512a <HAL_ADC_ConfigChannel+0x1ce>
 8005120:	2302      	movs	r3, #2
 8005122:	e002      	b.n	800512a <HAL_ADC_ConfigChannel+0x1ce>
 8005124:	2301      	movs	r3, #1
 8005126:	e000      	b.n	800512a <HAL_ADC_ConfigChannel+0x1ce>
 8005128:	2300      	movs	r3, #0
 800512a:	683a      	ldr	r2, [r7, #0]
 800512c:	6852      	ldr	r2, [r2, #4]
 800512e:	201f      	movs	r0, #31
 8005130:	4002      	ands	r2, r0
 8005132:	4093      	lsls	r3, r2
 8005134:	000a      	movs	r2, r1
 8005136:	431a      	orrs	r2, r3
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	089b      	lsrs	r3, r3, #2
 8005142:	1c5a      	adds	r2, r3, #1
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	69db      	ldr	r3, [r3, #28]
 8005148:	429a      	cmp	r2, r3
 800514a:	d808      	bhi.n	800515e <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6818      	ldr	r0, [r3, #0]
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	6859      	ldr	r1, [r3, #4]
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	001a      	movs	r2, r3
 800515a:	f7ff fb77 	bl	800484c <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6818      	ldr	r0, [r3, #0]
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	6819      	ldr	r1, [r3, #0]
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	001a      	movs	r2, r3
 800516c:	f7ff fbb2 	bl	80048d4 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	2b00      	cmp	r3, #0
 8005176:	db00      	blt.n	800517a <HAL_ADC_ConfigChannel+0x21e>
 8005178:	e0bc      	b.n	80052f4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800517a:	4b50      	ldr	r3, [pc, #320]	; (80052bc <HAL_ADC_ConfigChannel+0x360>)
 800517c:	0018      	movs	r0, r3
 800517e:	f7ff fb13 	bl	80047a8 <LL_ADC_GetCommonPathInternalCh>
 8005182:	0003      	movs	r3, r0
 8005184:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a4d      	ldr	r2, [pc, #308]	; (80052c0 <HAL_ADC_ConfigChannel+0x364>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d122      	bne.n	80051d6 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005190:	693a      	ldr	r2, [r7, #16]
 8005192:	2380      	movs	r3, #128	; 0x80
 8005194:	041b      	lsls	r3, r3, #16
 8005196:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005198:	d11d      	bne.n	80051d6 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	2280      	movs	r2, #128	; 0x80
 800519e:	0412      	lsls	r2, r2, #16
 80051a0:	4313      	orrs	r3, r2
 80051a2:	4a46      	ldr	r2, [pc, #280]	; (80052bc <HAL_ADC_ConfigChannel+0x360>)
 80051a4:	0019      	movs	r1, r3
 80051a6:	0010      	movs	r0, r2
 80051a8:	f7ff faea 	bl	8004780 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80051ac:	4b45      	ldr	r3, [pc, #276]	; (80052c4 <HAL_ADC_ConfigChannel+0x368>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4945      	ldr	r1, [pc, #276]	; (80052c8 <HAL_ADC_ConfigChannel+0x36c>)
 80051b2:	0018      	movs	r0, r3
 80051b4:	f7fa ffa4 	bl	8000100 <__udivsi3>
 80051b8:	0003      	movs	r3, r0
 80051ba:	1c5a      	adds	r2, r3, #1
 80051bc:	0013      	movs	r3, r2
 80051be:	005b      	lsls	r3, r3, #1
 80051c0:	189b      	adds	r3, r3, r2
 80051c2:	009b      	lsls	r3, r3, #2
 80051c4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80051c6:	e002      	b.n	80051ce <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	3b01      	subs	r3, #1
 80051cc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d1f9      	bne.n	80051c8 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80051d4:	e08e      	b.n	80052f4 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a3c      	ldr	r2, [pc, #240]	; (80052cc <HAL_ADC_ConfigChannel+0x370>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d10e      	bne.n	80051fe <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80051e0:	693a      	ldr	r2, [r7, #16]
 80051e2:	2380      	movs	r3, #128	; 0x80
 80051e4:	045b      	lsls	r3, r3, #17
 80051e6:	4013      	ands	r3, r2
 80051e8:	d109      	bne.n	80051fe <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	2280      	movs	r2, #128	; 0x80
 80051ee:	0452      	lsls	r2, r2, #17
 80051f0:	4313      	orrs	r3, r2
 80051f2:	4a32      	ldr	r2, [pc, #200]	; (80052bc <HAL_ADC_ConfigChannel+0x360>)
 80051f4:	0019      	movs	r1, r3
 80051f6:	0010      	movs	r0, r2
 80051f8:	f7ff fac2 	bl	8004780 <LL_ADC_SetCommonPathInternalCh>
 80051fc:	e07a      	b.n	80052f4 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a33      	ldr	r2, [pc, #204]	; (80052d0 <HAL_ADC_ConfigChannel+0x374>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d000      	beq.n	800520a <HAL_ADC_ConfigChannel+0x2ae>
 8005208:	e074      	b.n	80052f4 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800520a:	693a      	ldr	r2, [r7, #16]
 800520c:	2380      	movs	r3, #128	; 0x80
 800520e:	03db      	lsls	r3, r3, #15
 8005210:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8005212:	d000      	beq.n	8005216 <HAL_ADC_ConfigChannel+0x2ba>
 8005214:	e06e      	b.n	80052f4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	2280      	movs	r2, #128	; 0x80
 800521a:	03d2      	lsls	r2, r2, #15
 800521c:	4313      	orrs	r3, r2
 800521e:	4a27      	ldr	r2, [pc, #156]	; (80052bc <HAL_ADC_ConfigChannel+0x360>)
 8005220:	0019      	movs	r1, r3
 8005222:	0010      	movs	r0, r2
 8005224:	f7ff faac 	bl	8004780 <LL_ADC_SetCommonPathInternalCh>
 8005228:	e064      	b.n	80052f4 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	691a      	ldr	r2, [r3, #16]
 800522e:	2380      	movs	r3, #128	; 0x80
 8005230:	061b      	lsls	r3, r3, #24
 8005232:	429a      	cmp	r2, r3
 8005234:	d004      	beq.n	8005240 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800523a:	4a1f      	ldr	r2, [pc, #124]	; (80052b8 <HAL_ADC_ConfigChannel+0x35c>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d107      	bne.n	8005250 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	0019      	movs	r1, r3
 800524a:	0010      	movs	r0, r2
 800524c:	f7ff fb2f 	bl	80048ae <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	2b00      	cmp	r3, #0
 8005256:	da4d      	bge.n	80052f4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005258:	4b18      	ldr	r3, [pc, #96]	; (80052bc <HAL_ADC_ConfigChannel+0x360>)
 800525a:	0018      	movs	r0, r3
 800525c:	f7ff faa4 	bl	80047a8 <LL_ADC_GetCommonPathInternalCh>
 8005260:	0003      	movs	r3, r0
 8005262:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a15      	ldr	r2, [pc, #84]	; (80052c0 <HAL_ADC_ConfigChannel+0x364>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d108      	bne.n	8005280 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	4a18      	ldr	r2, [pc, #96]	; (80052d4 <HAL_ADC_ConfigChannel+0x378>)
 8005272:	4013      	ands	r3, r2
 8005274:	4a11      	ldr	r2, [pc, #68]	; (80052bc <HAL_ADC_ConfigChannel+0x360>)
 8005276:	0019      	movs	r1, r3
 8005278:	0010      	movs	r0, r2
 800527a:	f7ff fa81 	bl	8004780 <LL_ADC_SetCommonPathInternalCh>
 800527e:	e039      	b.n	80052f4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a11      	ldr	r2, [pc, #68]	; (80052cc <HAL_ADC_ConfigChannel+0x370>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d108      	bne.n	800529c <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	4a12      	ldr	r2, [pc, #72]	; (80052d8 <HAL_ADC_ConfigChannel+0x37c>)
 800528e:	4013      	ands	r3, r2
 8005290:	4a0a      	ldr	r2, [pc, #40]	; (80052bc <HAL_ADC_ConfigChannel+0x360>)
 8005292:	0019      	movs	r1, r3
 8005294:	0010      	movs	r0, r2
 8005296:	f7ff fa73 	bl	8004780 <LL_ADC_SetCommonPathInternalCh>
 800529a:	e02b      	b.n	80052f4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a0b      	ldr	r2, [pc, #44]	; (80052d0 <HAL_ADC_ConfigChannel+0x374>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d126      	bne.n	80052f4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	4a0c      	ldr	r2, [pc, #48]	; (80052dc <HAL_ADC_ConfigChannel+0x380>)
 80052aa:	4013      	ands	r3, r2
 80052ac:	4a03      	ldr	r2, [pc, #12]	; (80052bc <HAL_ADC_ConfigChannel+0x360>)
 80052ae:	0019      	movs	r1, r3
 80052b0:	0010      	movs	r0, r2
 80052b2:	f7ff fa65 	bl	8004780 <LL_ADC_SetCommonPathInternalCh>
 80052b6:	e01d      	b.n	80052f4 <HAL_ADC_ConfigChannel+0x398>
 80052b8:	80000004 	.word	0x80000004
 80052bc:	40012708 	.word	0x40012708
 80052c0:	b0001000 	.word	0xb0001000
 80052c4:	20000008 	.word	0x20000008
 80052c8:	00030d40 	.word	0x00030d40
 80052cc:	b8004000 	.word	0xb8004000
 80052d0:	b4002000 	.word	0xb4002000
 80052d4:	ff7fffff 	.word	0xff7fffff
 80052d8:	feffffff 	.word	0xfeffffff
 80052dc:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052e4:	2220      	movs	r2, #32
 80052e6:	431a      	orrs	r2, r3
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80052ec:	2317      	movs	r3, #23
 80052ee:	18fb      	adds	r3, r7, r3
 80052f0:	2201      	movs	r2, #1
 80052f2:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2254      	movs	r2, #84	; 0x54
 80052f8:	2100      	movs	r1, #0
 80052fa:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80052fc:	2317      	movs	r3, #23
 80052fe:	18fb      	adds	r3, r7, r3
 8005300:	781b      	ldrb	r3, [r3, #0]
}
 8005302:	0018      	movs	r0, r3
 8005304:	46bd      	mov	sp, r7
 8005306:	b006      	add	sp, #24
 8005308:	bd80      	pop	{r7, pc}
 800530a:	46c0      	nop			; (mov r8, r8)

0800530c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b084      	sub	sp, #16
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005314:	2300      	movs	r3, #0
 8005316:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	0018      	movs	r0, r3
 800531e:	f7ff fb41 	bl	80049a4 <LL_ADC_IsEnabled>
 8005322:	1e03      	subs	r3, r0, #0
 8005324:	d000      	beq.n	8005328 <ADC_Enable+0x1c>
 8005326:	e069      	b.n	80053fc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	4a36      	ldr	r2, [pc, #216]	; (8005408 <ADC_Enable+0xfc>)
 8005330:	4013      	ands	r3, r2
 8005332:	d00d      	beq.n	8005350 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005338:	2210      	movs	r2, #16
 800533a:	431a      	orrs	r2, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005344:	2201      	movs	r2, #1
 8005346:	431a      	orrs	r2, r3
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	e056      	b.n	80053fe <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	0018      	movs	r0, r3
 8005356:	f7ff fb01 	bl	800495c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 800535a:	4b2c      	ldr	r3, [pc, #176]	; (800540c <ADC_Enable+0x100>)
 800535c:	0018      	movs	r0, r3
 800535e:	f7ff fa23 	bl	80047a8 <LL_ADC_GetCommonPathInternalCh>
 8005362:	0002      	movs	r2, r0
 8005364:	2380      	movs	r3, #128	; 0x80
 8005366:	041b      	lsls	r3, r3, #16
 8005368:	4013      	ands	r3, r2
 800536a:	d00f      	beq.n	800538c <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800536c:	4b28      	ldr	r3, [pc, #160]	; (8005410 <ADC_Enable+0x104>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4928      	ldr	r1, [pc, #160]	; (8005414 <ADC_Enable+0x108>)
 8005372:	0018      	movs	r0, r3
 8005374:	f7fa fec4 	bl	8000100 <__udivsi3>
 8005378:	0003      	movs	r3, r0
 800537a:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 800537c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800537e:	e002      	b.n	8005386 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	3b01      	subs	r3, #1
 8005384:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d1f9      	bne.n	8005380 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	7e5b      	ldrb	r3, [r3, #25]
 8005390:	2b01      	cmp	r3, #1
 8005392:	d033      	beq.n	80053fc <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8005394:	f7ff f9ea 	bl	800476c <HAL_GetTick>
 8005398:	0003      	movs	r3, r0
 800539a:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800539c:	e027      	b.n	80053ee <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	0018      	movs	r0, r3
 80053a4:	f7ff fafe 	bl	80049a4 <LL_ADC_IsEnabled>
 80053a8:	1e03      	subs	r3, r0, #0
 80053aa:	d104      	bne.n	80053b6 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	0018      	movs	r0, r3
 80053b2:	f7ff fad3 	bl	800495c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80053b6:	f7ff f9d9 	bl	800476c <HAL_GetTick>
 80053ba:	0002      	movs	r2, r0
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	1ad3      	subs	r3, r2, r3
 80053c0:	2b02      	cmp	r3, #2
 80053c2:	d914      	bls.n	80053ee <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	2201      	movs	r2, #1
 80053cc:	4013      	ands	r3, r2
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d00d      	beq.n	80053ee <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053d6:	2210      	movs	r2, #16
 80053d8:	431a      	orrs	r2, r3
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053e2:	2201      	movs	r2, #1
 80053e4:	431a      	orrs	r2, r3
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	e007      	b.n	80053fe <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	2201      	movs	r2, #1
 80053f6:	4013      	ands	r3, r2
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d1d0      	bne.n	800539e <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80053fc:	2300      	movs	r3, #0
}
 80053fe:	0018      	movs	r0, r3
 8005400:	46bd      	mov	sp, r7
 8005402:	b004      	add	sp, #16
 8005404:	bd80      	pop	{r7, pc}
 8005406:	46c0      	nop			; (mov r8, r8)
 8005408:	80000017 	.word	0x80000017
 800540c:	40012708 	.word	0x40012708
 8005410:	20000008 	.word	0x20000008
 8005414:	00030d40 	.word	0x00030d40

08005418 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b084      	sub	sp, #16
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	0018      	movs	r0, r3
 8005426:	f7ff face 	bl	80049c6 <LL_ADC_IsDisableOngoing>
 800542a:	0003      	movs	r3, r0
 800542c:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	0018      	movs	r0, r3
 8005434:	f7ff fab6 	bl	80049a4 <LL_ADC_IsEnabled>
 8005438:	1e03      	subs	r3, r0, #0
 800543a:	d046      	beq.n	80054ca <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d143      	bne.n	80054ca <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	2205      	movs	r2, #5
 800544a:	4013      	ands	r3, r2
 800544c:	2b01      	cmp	r3, #1
 800544e:	d10d      	bne.n	800546c <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	0018      	movs	r0, r3
 8005456:	f7ff fa93 	bl	8004980 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	2203      	movs	r2, #3
 8005460:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005462:	f7ff f983 	bl	800476c <HAL_GetTick>
 8005466:	0003      	movs	r3, r0
 8005468:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800546a:	e028      	b.n	80054be <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005470:	2210      	movs	r2, #16
 8005472:	431a      	orrs	r2, r3
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800547c:	2201      	movs	r2, #1
 800547e:	431a      	orrs	r2, r3
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	e021      	b.n	80054cc <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005488:	f7ff f970 	bl	800476c <HAL_GetTick>
 800548c:	0002      	movs	r2, r0
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	1ad3      	subs	r3, r2, r3
 8005492:	2b02      	cmp	r3, #2
 8005494:	d913      	bls.n	80054be <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	2201      	movs	r2, #1
 800549e:	4013      	ands	r3, r2
 80054a0:	d00d      	beq.n	80054be <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054a6:	2210      	movs	r2, #16
 80054a8:	431a      	orrs	r2, r3
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054b2:	2201      	movs	r2, #1
 80054b4:	431a      	orrs	r2, r3
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	e006      	b.n	80054cc <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	2201      	movs	r2, #1
 80054c6:	4013      	ands	r3, r2
 80054c8:	d1de      	bne.n	8005488 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80054ca:	2300      	movs	r3, #0
}
 80054cc:	0018      	movs	r0, r3
 80054ce:	46bd      	mov	sp, r7
 80054d0:	b004      	add	sp, #16
 80054d2:	bd80      	pop	{r7, pc}

080054d4 <LL_ADC_SetCalibrationFactor>:
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b082      	sub	sp, #8
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	22b4      	movs	r2, #180	; 0xb4
 80054e2:	589b      	ldr	r3, [r3, r2]
 80054e4:	227f      	movs	r2, #127	; 0x7f
 80054e6:	4393      	bics	r3, r2
 80054e8:	001a      	movs	r2, r3
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	431a      	orrs	r2, r3
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	21b4      	movs	r1, #180	; 0xb4
 80054f2:	505a      	str	r2, [r3, r1]
}
 80054f4:	46c0      	nop			; (mov r8, r8)
 80054f6:	46bd      	mov	sp, r7
 80054f8:	b002      	add	sp, #8
 80054fa:	bd80      	pop	{r7, pc}

080054fc <LL_ADC_GetCalibrationFactor>:
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b082      	sub	sp, #8
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	22b4      	movs	r2, #180	; 0xb4
 8005508:	589b      	ldr	r3, [r3, r2]
 800550a:	227f      	movs	r2, #127	; 0x7f
 800550c:	4013      	ands	r3, r2
}
 800550e:	0018      	movs	r0, r3
 8005510:	46bd      	mov	sp, r7
 8005512:	b002      	add	sp, #8
 8005514:	bd80      	pop	{r7, pc}
	...

08005518 <LL_ADC_Enable>:
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b082      	sub	sp, #8
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	4a04      	ldr	r2, [pc, #16]	; (8005538 <LL_ADC_Enable+0x20>)
 8005526:	4013      	ands	r3, r2
 8005528:	2201      	movs	r2, #1
 800552a:	431a      	orrs	r2, r3
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	609a      	str	r2, [r3, #8]
}
 8005530:	46c0      	nop			; (mov r8, r8)
 8005532:	46bd      	mov	sp, r7
 8005534:	b002      	add	sp, #8
 8005536:	bd80      	pop	{r7, pc}
 8005538:	7fffffe8 	.word	0x7fffffe8

0800553c <LL_ADC_Disable>:
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b082      	sub	sp, #8
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	4a04      	ldr	r2, [pc, #16]	; (800555c <LL_ADC_Disable+0x20>)
 800554a:	4013      	ands	r3, r2
 800554c:	2202      	movs	r2, #2
 800554e:	431a      	orrs	r2, r3
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	609a      	str	r2, [r3, #8]
}
 8005554:	46c0      	nop			; (mov r8, r8)
 8005556:	46bd      	mov	sp, r7
 8005558:	b002      	add	sp, #8
 800555a:	bd80      	pop	{r7, pc}
 800555c:	7fffffe8 	.word	0x7fffffe8

08005560 <LL_ADC_IsEnabled>:
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b082      	sub	sp, #8
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	2201      	movs	r2, #1
 800556e:	4013      	ands	r3, r2
 8005570:	2b01      	cmp	r3, #1
 8005572:	d101      	bne.n	8005578 <LL_ADC_IsEnabled+0x18>
 8005574:	2301      	movs	r3, #1
 8005576:	e000      	b.n	800557a <LL_ADC_IsEnabled+0x1a>
 8005578:	2300      	movs	r3, #0
}
 800557a:	0018      	movs	r0, r3
 800557c:	46bd      	mov	sp, r7
 800557e:	b002      	add	sp, #8
 8005580:	bd80      	pop	{r7, pc}
	...

08005584 <LL_ADC_StartCalibration>:
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b082      	sub	sp, #8
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	4a05      	ldr	r2, [pc, #20]	; (80055a8 <LL_ADC_StartCalibration+0x24>)
 8005592:	4013      	ands	r3, r2
 8005594:	2280      	movs	r2, #128	; 0x80
 8005596:	0612      	lsls	r2, r2, #24
 8005598:	431a      	orrs	r2, r3
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	609a      	str	r2, [r3, #8]
}
 800559e:	46c0      	nop			; (mov r8, r8)
 80055a0:	46bd      	mov	sp, r7
 80055a2:	b002      	add	sp, #8
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	46c0      	nop			; (mov r8, r8)
 80055a8:	7fffffe8 	.word	0x7fffffe8

080055ac <LL_ADC_IsCalibrationOnGoing>:
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b082      	sub	sp, #8
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	0fdb      	lsrs	r3, r3, #31
 80055ba:	07da      	lsls	r2, r3, #31
 80055bc:	2380      	movs	r3, #128	; 0x80
 80055be:	061b      	lsls	r3, r3, #24
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d101      	bne.n	80055c8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80055c4:	2301      	movs	r3, #1
 80055c6:	e000      	b.n	80055ca <LL_ADC_IsCalibrationOnGoing+0x1e>
 80055c8:	2300      	movs	r3, #0
}
 80055ca:	0018      	movs	r0, r3
 80055cc:	46bd      	mov	sp, r7
 80055ce:	b002      	add	sp, #8
 80055d0:	bd80      	pop	{r7, pc}
	...

080055d4 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 80055d4:	b590      	push	{r4, r7, lr}
 80055d6:	b089      	sub	sp, #36	; 0x24
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80055dc:	2300      	movs	r3, #0
 80055de:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 80055e0:	2300      	movs	r3, #0
 80055e2:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2254      	movs	r2, #84	; 0x54
 80055e8:	5c9b      	ldrb	r3, [r3, r2]
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d101      	bne.n	80055f2 <HAL_ADCEx_Calibration_Start+0x1e>
 80055ee:	2302      	movs	r3, #2
 80055f0:	e0ba      	b.n	8005768 <HAL_ADCEx_Calibration_Start+0x194>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2254      	movs	r2, #84	; 0x54
 80055f6:	2101      	movs	r1, #1
 80055f8:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80055fa:	2317      	movs	r3, #23
 80055fc:	18fc      	adds	r4, r7, r3
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	0018      	movs	r0, r3
 8005602:	f7ff ff09 	bl	8005418 <ADC_Disable>
 8005606:	0003      	movs	r3, r0
 8005608:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	0018      	movs	r0, r3
 8005610:	f7ff ffa6 	bl	8005560 <LL_ADC_IsEnabled>
 8005614:	1e03      	subs	r3, r0, #0
 8005616:	d000      	beq.n	800561a <HAL_ADCEx_Calibration_Start+0x46>
 8005618:	e099      	b.n	800574e <HAL_ADCEx_Calibration_Start+0x17a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800561e:	4a54      	ldr	r2, [pc, #336]	; (8005770 <HAL_ADCEx_Calibration_Start+0x19c>)
 8005620:	4013      	ands	r3, r2
 8005622:	2202      	movs	r2, #2
 8005624:	431a      	orrs	r2, r3
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	4a50      	ldr	r2, [pc, #320]	; (8005774 <HAL_ADCEx_Calibration_Start+0x1a0>)
 8005632:	4013      	ands	r3, r2
 8005634:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	68da      	ldr	r2, [r3, #12]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	494d      	ldr	r1, [pc, #308]	; (8005778 <HAL_ADCEx_Calibration_Start+0x1a4>)
 8005642:	400a      	ands	r2, r1
 8005644:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8005646:	2300      	movs	r3, #0
 8005648:	61fb      	str	r3, [r7, #28]
 800564a:	e02d      	b.n	80056a8 <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	0018      	movs	r0, r3
 8005652:	f7ff ff97 	bl	8005584 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005656:	e014      	b.n	8005682 <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	3301      	adds	r3, #1
 800565c:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	4a46      	ldr	r2, [pc, #280]	; (800577c <HAL_ADCEx_Calibration_Start+0x1a8>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d90d      	bls.n	8005682 <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800566a:	2212      	movs	r2, #18
 800566c:	4393      	bics	r3, r2
 800566e:	2210      	movs	r2, #16
 8005670:	431a      	orrs	r2, r3
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2254      	movs	r2, #84	; 0x54
 800567a:	2100      	movs	r1, #0
 800567c:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e072      	b.n	8005768 <HAL_ADCEx_Calibration_Start+0x194>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	0018      	movs	r0, r3
 8005688:	f7ff ff90 	bl	80055ac <LL_ADC_IsCalibrationOnGoing>
 800568c:	1e03      	subs	r3, r0, #0
 800568e:	d1e3      	bne.n	8005658 <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	0018      	movs	r0, r3
 8005696:	f7ff ff31 	bl	80054fc <LL_ADC_GetCalibrationFactor>
 800569a:	0002      	movs	r2, r0
 800569c:	69bb      	ldr	r3, [r7, #24]
 800569e:	189b      	adds	r3, r3, r2
 80056a0:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80056a2:	69fb      	ldr	r3, [r7, #28]
 80056a4:	3301      	adds	r3, #1
 80056a6:	61fb      	str	r3, [r7, #28]
 80056a8:	69fb      	ldr	r3, [r7, #28]
 80056aa:	2b07      	cmp	r3, #7
 80056ac:	d9ce      	bls.n	800564c <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 80056ae:	69f9      	ldr	r1, [r7, #28]
 80056b0:	69b8      	ldr	r0, [r7, #24]
 80056b2:	f7fa fd25 	bl	8000100 <__udivsi3>
 80056b6:	0003      	movs	r3, r0
 80056b8:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	0018      	movs	r0, r3
 80056c0:	f7ff ff2a 	bl	8005518 <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	69ba      	ldr	r2, [r7, #24]
 80056ca:	0011      	movs	r1, r2
 80056cc:	0018      	movs	r0, r3
 80056ce:	f7ff ff01 	bl	80054d4 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	0018      	movs	r0, r3
 80056d8:	f7ff ff30 	bl	800553c <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80056dc:	f7ff f846 	bl	800476c <HAL_GetTick>
 80056e0:	0003      	movs	r3, r0
 80056e2:	60fb      	str	r3, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80056e4:	e01b      	b.n	800571e <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80056e6:	f7ff f841 	bl	800476c <HAL_GetTick>
 80056ea:	0002      	movs	r2, r0
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	1ad3      	subs	r3, r2, r3
 80056f0:	2b02      	cmp	r3, #2
 80056f2:	d914      	bls.n	800571e <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	0018      	movs	r0, r3
 80056fa:	f7ff ff31 	bl	8005560 <LL_ADC_IsEnabled>
 80056fe:	1e03      	subs	r3, r0, #0
 8005700:	d00d      	beq.n	800571e <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005706:	2210      	movs	r2, #16
 8005708:	431a      	orrs	r2, r3
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005712:	2201      	movs	r2, #1
 8005714:	431a      	orrs	r2, r3
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e024      	b.n	8005768 <HAL_ADCEx_Calibration_Start+0x194>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	0018      	movs	r0, r3
 8005724:	f7ff ff1c 	bl	8005560 <LL_ADC_IsEnabled>
 8005728:	1e03      	subs	r3, r0, #0
 800572a:	d1dc      	bne.n	80056e6 <HAL_ADCEx_Calibration_Start+0x112>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	68d9      	ldr	r1, [r3, #12]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	693a      	ldr	r2, [r7, #16]
 8005738:	430a      	orrs	r2, r1
 800573a:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005740:	2203      	movs	r2, #3
 8005742:	4393      	bics	r3, r2
 8005744:	2201      	movs	r2, #1
 8005746:	431a      	orrs	r2, r3
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	659a      	str	r2, [r3, #88]	; 0x58
 800574c:	e005      	b.n	800575a <HAL_ADCEx_Calibration_Start+0x186>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005752:	2210      	movs	r2, #16
 8005754:	431a      	orrs	r2, r3
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2254      	movs	r2, #84	; 0x54
 800575e:	2100      	movs	r1, #0
 8005760:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8005762:	2317      	movs	r3, #23
 8005764:	18fb      	adds	r3, r7, r3
 8005766:	781b      	ldrb	r3, [r3, #0]
}
 8005768:	0018      	movs	r0, r3
 800576a:	46bd      	mov	sp, r7
 800576c:	b009      	add	sp, #36	; 0x24
 800576e:	bd90      	pop	{r4, r7, pc}
 8005770:	fffffefd 	.word	0xfffffefd
 8005774:	00008003 	.word	0x00008003
 8005778:	ffff7ffc 	.word	0xffff7ffc
 800577c:	0002f1ff 	.word	0x0002f1ff

08005780 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b082      	sub	sp, #8
 8005784:	af00      	add	r7, sp, #0
 8005786:	0002      	movs	r2, r0
 8005788:	1dfb      	adds	r3, r7, #7
 800578a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800578c:	1dfb      	adds	r3, r7, #7
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	2b7f      	cmp	r3, #127	; 0x7f
 8005792:	d809      	bhi.n	80057a8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005794:	1dfb      	adds	r3, r7, #7
 8005796:	781b      	ldrb	r3, [r3, #0]
 8005798:	001a      	movs	r2, r3
 800579a:	231f      	movs	r3, #31
 800579c:	401a      	ands	r2, r3
 800579e:	4b04      	ldr	r3, [pc, #16]	; (80057b0 <__NVIC_EnableIRQ+0x30>)
 80057a0:	2101      	movs	r1, #1
 80057a2:	4091      	lsls	r1, r2
 80057a4:	000a      	movs	r2, r1
 80057a6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80057a8:	46c0      	nop			; (mov r8, r8)
 80057aa:	46bd      	mov	sp, r7
 80057ac:	b002      	add	sp, #8
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	e000e100 	.word	0xe000e100

080057b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80057b4:	b590      	push	{r4, r7, lr}
 80057b6:	b083      	sub	sp, #12
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	0002      	movs	r2, r0
 80057bc:	6039      	str	r1, [r7, #0]
 80057be:	1dfb      	adds	r3, r7, #7
 80057c0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80057c2:	1dfb      	adds	r3, r7, #7
 80057c4:	781b      	ldrb	r3, [r3, #0]
 80057c6:	2b7f      	cmp	r3, #127	; 0x7f
 80057c8:	d828      	bhi.n	800581c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80057ca:	4a2f      	ldr	r2, [pc, #188]	; (8005888 <__NVIC_SetPriority+0xd4>)
 80057cc:	1dfb      	adds	r3, r7, #7
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	b25b      	sxtb	r3, r3
 80057d2:	089b      	lsrs	r3, r3, #2
 80057d4:	33c0      	adds	r3, #192	; 0xc0
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	589b      	ldr	r3, [r3, r2]
 80057da:	1dfa      	adds	r2, r7, #7
 80057dc:	7812      	ldrb	r2, [r2, #0]
 80057de:	0011      	movs	r1, r2
 80057e0:	2203      	movs	r2, #3
 80057e2:	400a      	ands	r2, r1
 80057e4:	00d2      	lsls	r2, r2, #3
 80057e6:	21ff      	movs	r1, #255	; 0xff
 80057e8:	4091      	lsls	r1, r2
 80057ea:	000a      	movs	r2, r1
 80057ec:	43d2      	mvns	r2, r2
 80057ee:	401a      	ands	r2, r3
 80057f0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	019b      	lsls	r3, r3, #6
 80057f6:	22ff      	movs	r2, #255	; 0xff
 80057f8:	401a      	ands	r2, r3
 80057fa:	1dfb      	adds	r3, r7, #7
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	0018      	movs	r0, r3
 8005800:	2303      	movs	r3, #3
 8005802:	4003      	ands	r3, r0
 8005804:	00db      	lsls	r3, r3, #3
 8005806:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005808:	481f      	ldr	r0, [pc, #124]	; (8005888 <__NVIC_SetPriority+0xd4>)
 800580a:	1dfb      	adds	r3, r7, #7
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	b25b      	sxtb	r3, r3
 8005810:	089b      	lsrs	r3, r3, #2
 8005812:	430a      	orrs	r2, r1
 8005814:	33c0      	adds	r3, #192	; 0xc0
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800581a:	e031      	b.n	8005880 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800581c:	4a1b      	ldr	r2, [pc, #108]	; (800588c <__NVIC_SetPriority+0xd8>)
 800581e:	1dfb      	adds	r3, r7, #7
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	0019      	movs	r1, r3
 8005824:	230f      	movs	r3, #15
 8005826:	400b      	ands	r3, r1
 8005828:	3b08      	subs	r3, #8
 800582a:	089b      	lsrs	r3, r3, #2
 800582c:	3306      	adds	r3, #6
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	18d3      	adds	r3, r2, r3
 8005832:	3304      	adds	r3, #4
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	1dfa      	adds	r2, r7, #7
 8005838:	7812      	ldrb	r2, [r2, #0]
 800583a:	0011      	movs	r1, r2
 800583c:	2203      	movs	r2, #3
 800583e:	400a      	ands	r2, r1
 8005840:	00d2      	lsls	r2, r2, #3
 8005842:	21ff      	movs	r1, #255	; 0xff
 8005844:	4091      	lsls	r1, r2
 8005846:	000a      	movs	r2, r1
 8005848:	43d2      	mvns	r2, r2
 800584a:	401a      	ands	r2, r3
 800584c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	019b      	lsls	r3, r3, #6
 8005852:	22ff      	movs	r2, #255	; 0xff
 8005854:	401a      	ands	r2, r3
 8005856:	1dfb      	adds	r3, r7, #7
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	0018      	movs	r0, r3
 800585c:	2303      	movs	r3, #3
 800585e:	4003      	ands	r3, r0
 8005860:	00db      	lsls	r3, r3, #3
 8005862:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005864:	4809      	ldr	r0, [pc, #36]	; (800588c <__NVIC_SetPriority+0xd8>)
 8005866:	1dfb      	adds	r3, r7, #7
 8005868:	781b      	ldrb	r3, [r3, #0]
 800586a:	001c      	movs	r4, r3
 800586c:	230f      	movs	r3, #15
 800586e:	4023      	ands	r3, r4
 8005870:	3b08      	subs	r3, #8
 8005872:	089b      	lsrs	r3, r3, #2
 8005874:	430a      	orrs	r2, r1
 8005876:	3306      	adds	r3, #6
 8005878:	009b      	lsls	r3, r3, #2
 800587a:	18c3      	adds	r3, r0, r3
 800587c:	3304      	adds	r3, #4
 800587e:	601a      	str	r2, [r3, #0]
}
 8005880:	46c0      	nop			; (mov r8, r8)
 8005882:	46bd      	mov	sp, r7
 8005884:	b003      	add	sp, #12
 8005886:	bd90      	pop	{r4, r7, pc}
 8005888:	e000e100 	.word	0xe000e100
 800588c:	e000ed00 	.word	0xe000ed00

08005890 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b082      	sub	sp, #8
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	1e5a      	subs	r2, r3, #1
 800589c:	2380      	movs	r3, #128	; 0x80
 800589e:	045b      	lsls	r3, r3, #17
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d301      	bcc.n	80058a8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80058a4:	2301      	movs	r3, #1
 80058a6:	e010      	b.n	80058ca <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80058a8:	4b0a      	ldr	r3, [pc, #40]	; (80058d4 <SysTick_Config+0x44>)
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	3a01      	subs	r2, #1
 80058ae:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80058b0:	2301      	movs	r3, #1
 80058b2:	425b      	negs	r3, r3
 80058b4:	2103      	movs	r1, #3
 80058b6:	0018      	movs	r0, r3
 80058b8:	f7ff ff7c 	bl	80057b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80058bc:	4b05      	ldr	r3, [pc, #20]	; (80058d4 <SysTick_Config+0x44>)
 80058be:	2200      	movs	r2, #0
 80058c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80058c2:	4b04      	ldr	r3, [pc, #16]	; (80058d4 <SysTick_Config+0x44>)
 80058c4:	2207      	movs	r2, #7
 80058c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80058c8:	2300      	movs	r3, #0
}
 80058ca:	0018      	movs	r0, r3
 80058cc:	46bd      	mov	sp, r7
 80058ce:	b002      	add	sp, #8
 80058d0:	bd80      	pop	{r7, pc}
 80058d2:	46c0      	nop			; (mov r8, r8)
 80058d4:	e000e010 	.word	0xe000e010

080058d8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b084      	sub	sp, #16
 80058dc:	af00      	add	r7, sp, #0
 80058de:	60b9      	str	r1, [r7, #8]
 80058e0:	607a      	str	r2, [r7, #4]
 80058e2:	210f      	movs	r1, #15
 80058e4:	187b      	adds	r3, r7, r1
 80058e6:	1c02      	adds	r2, r0, #0
 80058e8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80058ea:	68ba      	ldr	r2, [r7, #8]
 80058ec:	187b      	adds	r3, r7, r1
 80058ee:	781b      	ldrb	r3, [r3, #0]
 80058f0:	b25b      	sxtb	r3, r3
 80058f2:	0011      	movs	r1, r2
 80058f4:	0018      	movs	r0, r3
 80058f6:	f7ff ff5d 	bl	80057b4 <__NVIC_SetPriority>
}
 80058fa:	46c0      	nop			; (mov r8, r8)
 80058fc:	46bd      	mov	sp, r7
 80058fe:	b004      	add	sp, #16
 8005900:	bd80      	pop	{r7, pc}

08005902 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005902:	b580      	push	{r7, lr}
 8005904:	b082      	sub	sp, #8
 8005906:	af00      	add	r7, sp, #0
 8005908:	0002      	movs	r2, r0
 800590a:	1dfb      	adds	r3, r7, #7
 800590c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800590e:	1dfb      	adds	r3, r7, #7
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	b25b      	sxtb	r3, r3
 8005914:	0018      	movs	r0, r3
 8005916:	f7ff ff33 	bl	8005780 <__NVIC_EnableIRQ>
}
 800591a:	46c0      	nop			; (mov r8, r8)
 800591c:	46bd      	mov	sp, r7
 800591e:	b002      	add	sp, #8
 8005920:	bd80      	pop	{r7, pc}

08005922 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005922:	b580      	push	{r7, lr}
 8005924:	b082      	sub	sp, #8
 8005926:	af00      	add	r7, sp, #0
 8005928:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	0018      	movs	r0, r3
 800592e:	f7ff ffaf 	bl	8005890 <SysTick_Config>
 8005932:	0003      	movs	r3, r0
}
 8005934:	0018      	movs	r0, r3
 8005936:	46bd      	mov	sp, r7
 8005938:	b002      	add	sp, #8
 800593a:	bd80      	pop	{r7, pc}

0800593c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b086      	sub	sp, #24
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005946:	2300      	movs	r3, #0
 8005948:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800594a:	e147      	b.n	8005bdc <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	2101      	movs	r1, #1
 8005952:	697a      	ldr	r2, [r7, #20]
 8005954:	4091      	lsls	r1, r2
 8005956:	000a      	movs	r2, r1
 8005958:	4013      	ands	r3, r2
 800595a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d100      	bne.n	8005964 <HAL_GPIO_Init+0x28>
 8005962:	e138      	b.n	8005bd6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	2203      	movs	r2, #3
 800596a:	4013      	ands	r3, r2
 800596c:	2b01      	cmp	r3, #1
 800596e:	d005      	beq.n	800597c <HAL_GPIO_Init+0x40>
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	2203      	movs	r2, #3
 8005976:	4013      	ands	r3, r2
 8005978:	2b02      	cmp	r3, #2
 800597a:	d130      	bne.n	80059de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	005b      	lsls	r3, r3, #1
 8005986:	2203      	movs	r2, #3
 8005988:	409a      	lsls	r2, r3
 800598a:	0013      	movs	r3, r2
 800598c:	43da      	mvns	r2, r3
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	4013      	ands	r3, r2
 8005992:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	68da      	ldr	r2, [r3, #12]
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	005b      	lsls	r3, r3, #1
 800599c:	409a      	lsls	r2, r3
 800599e:	0013      	movs	r3, r2
 80059a0:	693a      	ldr	r2, [r7, #16]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	693a      	ldr	r2, [r7, #16]
 80059aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80059b2:	2201      	movs	r2, #1
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	409a      	lsls	r2, r3
 80059b8:	0013      	movs	r3, r2
 80059ba:	43da      	mvns	r2, r3
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	4013      	ands	r3, r2
 80059c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	091b      	lsrs	r3, r3, #4
 80059c8:	2201      	movs	r2, #1
 80059ca:	401a      	ands	r2, r3
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	409a      	lsls	r2, r3
 80059d0:	0013      	movs	r3, r2
 80059d2:	693a      	ldr	r2, [r7, #16]
 80059d4:	4313      	orrs	r3, r2
 80059d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	693a      	ldr	r2, [r7, #16]
 80059dc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	2203      	movs	r2, #3
 80059e4:	4013      	ands	r3, r2
 80059e6:	2b03      	cmp	r3, #3
 80059e8:	d017      	beq.n	8005a1a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	68db      	ldr	r3, [r3, #12]
 80059ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	005b      	lsls	r3, r3, #1
 80059f4:	2203      	movs	r2, #3
 80059f6:	409a      	lsls	r2, r3
 80059f8:	0013      	movs	r3, r2
 80059fa:	43da      	mvns	r2, r3
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	4013      	ands	r3, r2
 8005a00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	689a      	ldr	r2, [r3, #8]
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	005b      	lsls	r3, r3, #1
 8005a0a:	409a      	lsls	r2, r3
 8005a0c:	0013      	movs	r3, r2
 8005a0e:	693a      	ldr	r2, [r7, #16]
 8005a10:	4313      	orrs	r3, r2
 8005a12:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	693a      	ldr	r2, [r7, #16]
 8005a18:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	2203      	movs	r2, #3
 8005a20:	4013      	ands	r3, r2
 8005a22:	2b02      	cmp	r3, #2
 8005a24:	d123      	bne.n	8005a6e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	08da      	lsrs	r2, r3, #3
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	3208      	adds	r2, #8
 8005a2e:	0092      	lsls	r2, r2, #2
 8005a30:	58d3      	ldr	r3, [r2, r3]
 8005a32:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	2207      	movs	r2, #7
 8005a38:	4013      	ands	r3, r2
 8005a3a:	009b      	lsls	r3, r3, #2
 8005a3c:	220f      	movs	r2, #15
 8005a3e:	409a      	lsls	r2, r3
 8005a40:	0013      	movs	r3, r2
 8005a42:	43da      	mvns	r2, r3
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	4013      	ands	r3, r2
 8005a48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	691a      	ldr	r2, [r3, #16]
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	2107      	movs	r1, #7
 8005a52:	400b      	ands	r3, r1
 8005a54:	009b      	lsls	r3, r3, #2
 8005a56:	409a      	lsls	r2, r3
 8005a58:	0013      	movs	r3, r2
 8005a5a:	693a      	ldr	r2, [r7, #16]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	08da      	lsrs	r2, r3, #3
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	3208      	adds	r2, #8
 8005a68:	0092      	lsls	r2, r2, #2
 8005a6a:	6939      	ldr	r1, [r7, #16]
 8005a6c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	005b      	lsls	r3, r3, #1
 8005a78:	2203      	movs	r2, #3
 8005a7a:	409a      	lsls	r2, r3
 8005a7c:	0013      	movs	r3, r2
 8005a7e:	43da      	mvns	r2, r3
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	4013      	ands	r3, r2
 8005a84:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	2203      	movs	r2, #3
 8005a8c:	401a      	ands	r2, r3
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	005b      	lsls	r3, r3, #1
 8005a92:	409a      	lsls	r2, r3
 8005a94:	0013      	movs	r3, r2
 8005a96:	693a      	ldr	r2, [r7, #16]
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	693a      	ldr	r2, [r7, #16]
 8005aa0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	685a      	ldr	r2, [r3, #4]
 8005aa6:	23c0      	movs	r3, #192	; 0xc0
 8005aa8:	029b      	lsls	r3, r3, #10
 8005aaa:	4013      	ands	r3, r2
 8005aac:	d100      	bne.n	8005ab0 <HAL_GPIO_Init+0x174>
 8005aae:	e092      	b.n	8005bd6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8005ab0:	4a50      	ldr	r2, [pc, #320]	; (8005bf4 <HAL_GPIO_Init+0x2b8>)
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	089b      	lsrs	r3, r3, #2
 8005ab6:	3318      	adds	r3, #24
 8005ab8:	009b      	lsls	r3, r3, #2
 8005aba:	589b      	ldr	r3, [r3, r2]
 8005abc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	2203      	movs	r2, #3
 8005ac2:	4013      	ands	r3, r2
 8005ac4:	00db      	lsls	r3, r3, #3
 8005ac6:	220f      	movs	r2, #15
 8005ac8:	409a      	lsls	r2, r3
 8005aca:	0013      	movs	r3, r2
 8005acc:	43da      	mvns	r2, r3
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	4013      	ands	r3, r2
 8005ad2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8005ad4:	687a      	ldr	r2, [r7, #4]
 8005ad6:	23a0      	movs	r3, #160	; 0xa0
 8005ad8:	05db      	lsls	r3, r3, #23
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d013      	beq.n	8005b06 <HAL_GPIO_Init+0x1ca>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4a45      	ldr	r2, [pc, #276]	; (8005bf8 <HAL_GPIO_Init+0x2bc>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d00d      	beq.n	8005b02 <HAL_GPIO_Init+0x1c6>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4a44      	ldr	r2, [pc, #272]	; (8005bfc <HAL_GPIO_Init+0x2c0>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d007      	beq.n	8005afe <HAL_GPIO_Init+0x1c2>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	4a43      	ldr	r2, [pc, #268]	; (8005c00 <HAL_GPIO_Init+0x2c4>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d101      	bne.n	8005afa <HAL_GPIO_Init+0x1be>
 8005af6:	2303      	movs	r3, #3
 8005af8:	e006      	b.n	8005b08 <HAL_GPIO_Init+0x1cc>
 8005afa:	2305      	movs	r3, #5
 8005afc:	e004      	b.n	8005b08 <HAL_GPIO_Init+0x1cc>
 8005afe:	2302      	movs	r3, #2
 8005b00:	e002      	b.n	8005b08 <HAL_GPIO_Init+0x1cc>
 8005b02:	2301      	movs	r3, #1
 8005b04:	e000      	b.n	8005b08 <HAL_GPIO_Init+0x1cc>
 8005b06:	2300      	movs	r3, #0
 8005b08:	697a      	ldr	r2, [r7, #20]
 8005b0a:	2103      	movs	r1, #3
 8005b0c:	400a      	ands	r2, r1
 8005b0e:	00d2      	lsls	r2, r2, #3
 8005b10:	4093      	lsls	r3, r2
 8005b12:	693a      	ldr	r2, [r7, #16]
 8005b14:	4313      	orrs	r3, r2
 8005b16:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8005b18:	4936      	ldr	r1, [pc, #216]	; (8005bf4 <HAL_GPIO_Init+0x2b8>)
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	089b      	lsrs	r3, r3, #2
 8005b1e:	3318      	adds	r3, #24
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	693a      	ldr	r2, [r7, #16]
 8005b24:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005b26:	4b33      	ldr	r3, [pc, #204]	; (8005bf4 <HAL_GPIO_Init+0x2b8>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	43da      	mvns	r2, r3
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	4013      	ands	r3, r2
 8005b34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	685a      	ldr	r2, [r3, #4]
 8005b3a:	2380      	movs	r3, #128	; 0x80
 8005b3c:	035b      	lsls	r3, r3, #13
 8005b3e:	4013      	ands	r3, r2
 8005b40:	d003      	beq.n	8005b4a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8005b42:	693a      	ldr	r2, [r7, #16]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	4313      	orrs	r3, r2
 8005b48:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005b4a:	4b2a      	ldr	r3, [pc, #168]	; (8005bf4 <HAL_GPIO_Init+0x2b8>)
 8005b4c:	693a      	ldr	r2, [r7, #16]
 8005b4e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8005b50:	4b28      	ldr	r3, [pc, #160]	; (8005bf4 <HAL_GPIO_Init+0x2b8>)
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	43da      	mvns	r2, r3
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	685a      	ldr	r2, [r3, #4]
 8005b64:	2380      	movs	r3, #128	; 0x80
 8005b66:	039b      	lsls	r3, r3, #14
 8005b68:	4013      	ands	r3, r2
 8005b6a:	d003      	beq.n	8005b74 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8005b6c:	693a      	ldr	r2, [r7, #16]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	4313      	orrs	r3, r2
 8005b72:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005b74:	4b1f      	ldr	r3, [pc, #124]	; (8005bf4 <HAL_GPIO_Init+0x2b8>)
 8005b76:	693a      	ldr	r2, [r7, #16]
 8005b78:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005b7a:	4a1e      	ldr	r2, [pc, #120]	; (8005bf4 <HAL_GPIO_Init+0x2b8>)
 8005b7c:	2384      	movs	r3, #132	; 0x84
 8005b7e:	58d3      	ldr	r3, [r2, r3]
 8005b80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	43da      	mvns	r2, r3
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	4013      	ands	r3, r2
 8005b8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	685a      	ldr	r2, [r3, #4]
 8005b90:	2380      	movs	r3, #128	; 0x80
 8005b92:	029b      	lsls	r3, r3, #10
 8005b94:	4013      	ands	r3, r2
 8005b96:	d003      	beq.n	8005ba0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8005b98:	693a      	ldr	r2, [r7, #16]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005ba0:	4914      	ldr	r1, [pc, #80]	; (8005bf4 <HAL_GPIO_Init+0x2b8>)
 8005ba2:	2284      	movs	r2, #132	; 0x84
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8005ba8:	4a12      	ldr	r2, [pc, #72]	; (8005bf4 <HAL_GPIO_Init+0x2b8>)
 8005baa:	2380      	movs	r3, #128	; 0x80
 8005bac:	58d3      	ldr	r3, [r2, r3]
 8005bae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	43da      	mvns	r2, r3
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	4013      	ands	r3, r2
 8005bb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	685a      	ldr	r2, [r3, #4]
 8005bbe:	2380      	movs	r3, #128	; 0x80
 8005bc0:	025b      	lsls	r3, r3, #9
 8005bc2:	4013      	ands	r3, r2
 8005bc4:	d003      	beq.n	8005bce <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8005bc6:	693a      	ldr	r2, [r7, #16]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005bce:	4909      	ldr	r1, [pc, #36]	; (8005bf4 <HAL_GPIO_Init+0x2b8>)
 8005bd0:	2280      	movs	r2, #128	; 0x80
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	3301      	adds	r3, #1
 8005bda:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	40da      	lsrs	r2, r3
 8005be4:	1e13      	subs	r3, r2, #0
 8005be6:	d000      	beq.n	8005bea <HAL_GPIO_Init+0x2ae>
 8005be8:	e6b0      	b.n	800594c <HAL_GPIO_Init+0x10>
  }
}
 8005bea:	46c0      	nop			; (mov r8, r8)
 8005bec:	46c0      	nop			; (mov r8, r8)
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	b006      	add	sp, #24
 8005bf2:	bd80      	pop	{r7, pc}
 8005bf4:	40021800 	.word	0x40021800
 8005bf8:	50000400 	.word	0x50000400
 8005bfc:	50000800 	.word	0x50000800
 8005c00:	50000c00 	.word	0x50000c00

08005c04 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b084      	sub	sp, #16
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	000a      	movs	r2, r1
 8005c0e:	1cbb      	adds	r3, r7, #2
 8005c10:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	691b      	ldr	r3, [r3, #16]
 8005c16:	1cba      	adds	r2, r7, #2
 8005c18:	8812      	ldrh	r2, [r2, #0]
 8005c1a:	4013      	ands	r3, r2
 8005c1c:	d004      	beq.n	8005c28 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8005c1e:	230f      	movs	r3, #15
 8005c20:	18fb      	adds	r3, r7, r3
 8005c22:	2201      	movs	r2, #1
 8005c24:	701a      	strb	r2, [r3, #0]
 8005c26:	e003      	b.n	8005c30 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005c28:	230f      	movs	r3, #15
 8005c2a:	18fb      	adds	r3, r7, r3
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8005c30:	230f      	movs	r3, #15
 8005c32:	18fb      	adds	r3, r7, r3
 8005c34:	781b      	ldrb	r3, [r3, #0]
}
 8005c36:	0018      	movs	r0, r3
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	b004      	add	sp, #16
 8005c3c:	bd80      	pop	{r7, pc}

08005c3e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005c3e:	b580      	push	{r7, lr}
 8005c40:	b082      	sub	sp, #8
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	6078      	str	r0, [r7, #4]
 8005c46:	0008      	movs	r0, r1
 8005c48:	0011      	movs	r1, r2
 8005c4a:	1cbb      	adds	r3, r7, #2
 8005c4c:	1c02      	adds	r2, r0, #0
 8005c4e:	801a      	strh	r2, [r3, #0]
 8005c50:	1c7b      	adds	r3, r7, #1
 8005c52:	1c0a      	adds	r2, r1, #0
 8005c54:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005c56:	1c7b      	adds	r3, r7, #1
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d004      	beq.n	8005c68 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005c5e:	1cbb      	adds	r3, r7, #2
 8005c60:	881a      	ldrh	r2, [r3, #0]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005c66:	e003      	b.n	8005c70 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005c68:	1cbb      	adds	r3, r7, #2
 8005c6a:	881a      	ldrh	r2, [r3, #0]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005c70:	46c0      	nop			; (mov r8, r8)
 8005c72:	46bd      	mov	sp, r7
 8005c74:	b002      	add	sp, #8
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b082      	sub	sp, #8
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	0002      	movs	r2, r0
 8005c80:	1dbb      	adds	r3, r7, #6
 8005c82:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8005c84:	4b10      	ldr	r3, [pc, #64]	; (8005cc8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8005c86:	68db      	ldr	r3, [r3, #12]
 8005c88:	1dba      	adds	r2, r7, #6
 8005c8a:	8812      	ldrh	r2, [r2, #0]
 8005c8c:	4013      	ands	r3, r2
 8005c8e:	d008      	beq.n	8005ca2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8005c90:	4b0d      	ldr	r3, [pc, #52]	; (8005cc8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8005c92:	1dba      	adds	r2, r7, #6
 8005c94:	8812      	ldrh	r2, [r2, #0]
 8005c96:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8005c98:	1dbb      	adds	r3, r7, #6
 8005c9a:	881b      	ldrh	r3, [r3, #0]
 8005c9c:	0018      	movs	r0, r3
 8005c9e:	f7fc fd3a 	bl	8002716 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8005ca2:	4b09      	ldr	r3, [pc, #36]	; (8005cc8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8005ca4:	691b      	ldr	r3, [r3, #16]
 8005ca6:	1dba      	adds	r2, r7, #6
 8005ca8:	8812      	ldrh	r2, [r2, #0]
 8005caa:	4013      	ands	r3, r2
 8005cac:	d008      	beq.n	8005cc0 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8005cae:	4b06      	ldr	r3, [pc, #24]	; (8005cc8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8005cb0:	1dba      	adds	r2, r7, #6
 8005cb2:	8812      	ldrh	r2, [r2, #0]
 8005cb4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8005cb6:	1dbb      	adds	r3, r7, #6
 8005cb8:	881b      	ldrh	r3, [r3, #0]
 8005cba:	0018      	movs	r0, r3
 8005cbc:	f7fc fd1c 	bl	80026f8 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8005cc0:	46c0      	nop			; (mov r8, r8)
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	b002      	add	sp, #8
 8005cc6:	bd80      	pop	{r7, pc}
 8005cc8:	40021800 	.word	0x40021800

08005ccc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b082      	sub	sp, #8
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d101      	bne.n	8005cde <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e082      	b.n	8005de4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2241      	movs	r2, #65	; 0x41
 8005ce2:	5c9b      	ldrb	r3, [r3, r2]
 8005ce4:	b2db      	uxtb	r3, r3
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d107      	bne.n	8005cfa <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2240      	movs	r2, #64	; 0x40
 8005cee:	2100      	movs	r1, #0
 8005cf0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	0018      	movs	r0, r3
 8005cf6:	f7fe fb2f 	bl	8004358 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2241      	movs	r2, #65	; 0x41
 8005cfe:	2124      	movs	r1, #36	; 0x24
 8005d00:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	2101      	movs	r1, #1
 8005d0e:	438a      	bics	r2, r1
 8005d10:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	685a      	ldr	r2, [r3, #4]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4934      	ldr	r1, [pc, #208]	; (8005dec <HAL_I2C_Init+0x120>)
 8005d1c:	400a      	ands	r2, r1
 8005d1e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	689a      	ldr	r2, [r3, #8]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4931      	ldr	r1, [pc, #196]	; (8005df0 <HAL_I2C_Init+0x124>)
 8005d2c:	400a      	ands	r2, r1
 8005d2e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	68db      	ldr	r3, [r3, #12]
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d108      	bne.n	8005d4a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	689a      	ldr	r2, [r3, #8]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	2180      	movs	r1, #128	; 0x80
 8005d42:	0209      	lsls	r1, r1, #8
 8005d44:	430a      	orrs	r2, r1
 8005d46:	609a      	str	r2, [r3, #8]
 8005d48:	e007      	b.n	8005d5a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	689a      	ldr	r2, [r3, #8]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	2184      	movs	r1, #132	; 0x84
 8005d54:	0209      	lsls	r1, r1, #8
 8005d56:	430a      	orrs	r2, r1
 8005d58:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	68db      	ldr	r3, [r3, #12]
 8005d5e:	2b02      	cmp	r3, #2
 8005d60:	d104      	bne.n	8005d6c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	2280      	movs	r2, #128	; 0x80
 8005d68:	0112      	lsls	r2, r2, #4
 8005d6a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	685a      	ldr	r2, [r3, #4]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	491f      	ldr	r1, [pc, #124]	; (8005df4 <HAL_I2C_Init+0x128>)
 8005d78:	430a      	orrs	r2, r1
 8005d7a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	68da      	ldr	r2, [r3, #12]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	491a      	ldr	r1, [pc, #104]	; (8005df0 <HAL_I2C_Init+0x124>)
 8005d88:	400a      	ands	r2, r1
 8005d8a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	691a      	ldr	r2, [r3, #16]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	695b      	ldr	r3, [r3, #20]
 8005d94:	431a      	orrs	r2, r3
 8005d96:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	699b      	ldr	r3, [r3, #24]
 8005d9c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	430a      	orrs	r2, r1
 8005da4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	69d9      	ldr	r1, [r3, #28]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6a1a      	ldr	r2, [r3, #32]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	430a      	orrs	r2, r1
 8005db4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	2101      	movs	r1, #1
 8005dc2:	430a      	orrs	r2, r1
 8005dc4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2241      	movs	r2, #65	; 0x41
 8005dd0:	2120      	movs	r1, #32
 8005dd2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2242      	movs	r2, #66	; 0x42
 8005dde:	2100      	movs	r1, #0
 8005de0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005de2:	2300      	movs	r3, #0
}
 8005de4:	0018      	movs	r0, r3
 8005de6:	46bd      	mov	sp, r7
 8005de8:	b002      	add	sp, #8
 8005dea:	bd80      	pop	{r7, pc}
 8005dec:	f0ffffff 	.word	0xf0ffffff
 8005df0:	ffff7fff 	.word	0xffff7fff
 8005df4:	02008000 	.word	0x02008000

08005df8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005df8:	b590      	push	{r4, r7, lr}
 8005dfa:	b089      	sub	sp, #36	; 0x24
 8005dfc:	af02      	add	r7, sp, #8
 8005dfe:	60f8      	str	r0, [r7, #12]
 8005e00:	000c      	movs	r4, r1
 8005e02:	0010      	movs	r0, r2
 8005e04:	0019      	movs	r1, r3
 8005e06:	230a      	movs	r3, #10
 8005e08:	18fb      	adds	r3, r7, r3
 8005e0a:	1c22      	adds	r2, r4, #0
 8005e0c:	801a      	strh	r2, [r3, #0]
 8005e0e:	2308      	movs	r3, #8
 8005e10:	18fb      	adds	r3, r7, r3
 8005e12:	1c02      	adds	r2, r0, #0
 8005e14:	801a      	strh	r2, [r3, #0]
 8005e16:	1dbb      	adds	r3, r7, #6
 8005e18:	1c0a      	adds	r2, r1, #0
 8005e1a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2241      	movs	r2, #65	; 0x41
 8005e20:	5c9b      	ldrb	r3, [r3, r2]
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	2b20      	cmp	r3, #32
 8005e26:	d000      	beq.n	8005e2a <HAL_I2C_Mem_Write+0x32>
 8005e28:	e10c      	b.n	8006044 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d004      	beq.n	8005e3a <HAL_I2C_Mem_Write+0x42>
 8005e30:	232c      	movs	r3, #44	; 0x2c
 8005e32:	18fb      	adds	r3, r7, r3
 8005e34:	881b      	ldrh	r3, [r3, #0]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d105      	bne.n	8005e46 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2280      	movs	r2, #128	; 0x80
 8005e3e:	0092      	lsls	r2, r2, #2
 8005e40:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	e0ff      	b.n	8006046 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2240      	movs	r2, #64	; 0x40
 8005e4a:	5c9b      	ldrb	r3, [r3, r2]
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d101      	bne.n	8005e54 <HAL_I2C_Mem_Write+0x5c>
 8005e50:	2302      	movs	r3, #2
 8005e52:	e0f8      	b.n	8006046 <HAL_I2C_Mem_Write+0x24e>
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2240      	movs	r2, #64	; 0x40
 8005e58:	2101      	movs	r1, #1
 8005e5a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005e5c:	f7fe fc86 	bl	800476c <HAL_GetTick>
 8005e60:	0003      	movs	r3, r0
 8005e62:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005e64:	2380      	movs	r3, #128	; 0x80
 8005e66:	0219      	lsls	r1, r3, #8
 8005e68:	68f8      	ldr	r0, [r7, #12]
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	9300      	str	r3, [sp, #0]
 8005e6e:	2319      	movs	r3, #25
 8005e70:	2201      	movs	r2, #1
 8005e72:	f000 fc25 	bl	80066c0 <I2C_WaitOnFlagUntilTimeout>
 8005e76:	1e03      	subs	r3, r0, #0
 8005e78:	d001      	beq.n	8005e7e <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e0e3      	b.n	8006046 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2241      	movs	r2, #65	; 0x41
 8005e82:	2121      	movs	r1, #33	; 0x21
 8005e84:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2242      	movs	r2, #66	; 0x42
 8005e8a:	2140      	movs	r1, #64	; 0x40
 8005e8c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2200      	movs	r2, #0
 8005e92:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e98:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	222c      	movs	r2, #44	; 0x2c
 8005e9e:	18ba      	adds	r2, r7, r2
 8005ea0:	8812      	ldrh	r2, [r2, #0]
 8005ea2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005eaa:	1dbb      	adds	r3, r7, #6
 8005eac:	881c      	ldrh	r4, [r3, #0]
 8005eae:	2308      	movs	r3, #8
 8005eb0:	18fb      	adds	r3, r7, r3
 8005eb2:	881a      	ldrh	r2, [r3, #0]
 8005eb4:	230a      	movs	r3, #10
 8005eb6:	18fb      	adds	r3, r7, r3
 8005eb8:	8819      	ldrh	r1, [r3, #0]
 8005eba:	68f8      	ldr	r0, [r7, #12]
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	9301      	str	r3, [sp, #4]
 8005ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ec2:	9300      	str	r3, [sp, #0]
 8005ec4:	0023      	movs	r3, r4
 8005ec6:	f000 fb13 	bl	80064f0 <I2C_RequestMemoryWrite>
 8005eca:	1e03      	subs	r3, r0, #0
 8005ecc:	d005      	beq.n	8005eda <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2240      	movs	r2, #64	; 0x40
 8005ed2:	2100      	movs	r1, #0
 8005ed4:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e0b5      	b.n	8006046 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	2bff      	cmp	r3, #255	; 0xff
 8005ee2:	d911      	bls.n	8005f08 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	22ff      	movs	r2, #255	; 0xff
 8005ee8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005eee:	b2da      	uxtb	r2, r3
 8005ef0:	2380      	movs	r3, #128	; 0x80
 8005ef2:	045c      	lsls	r4, r3, #17
 8005ef4:	230a      	movs	r3, #10
 8005ef6:	18fb      	adds	r3, r7, r3
 8005ef8:	8819      	ldrh	r1, [r3, #0]
 8005efa:	68f8      	ldr	r0, [r7, #12]
 8005efc:	2300      	movs	r3, #0
 8005efe:	9300      	str	r3, [sp, #0]
 8005f00:	0023      	movs	r3, r4
 8005f02:	f000 fd97 	bl	8006a34 <I2C_TransferConfig>
 8005f06:	e012      	b.n	8005f2e <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f0c:	b29a      	uxth	r2, r3
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f16:	b2da      	uxtb	r2, r3
 8005f18:	2380      	movs	r3, #128	; 0x80
 8005f1a:	049c      	lsls	r4, r3, #18
 8005f1c:	230a      	movs	r3, #10
 8005f1e:	18fb      	adds	r3, r7, r3
 8005f20:	8819      	ldrh	r1, [r3, #0]
 8005f22:	68f8      	ldr	r0, [r7, #12]
 8005f24:	2300      	movs	r3, #0
 8005f26:	9300      	str	r3, [sp, #0]
 8005f28:	0023      	movs	r3, r4
 8005f2a:	f000 fd83 	bl	8006a34 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f2e:	697a      	ldr	r2, [r7, #20]
 8005f30:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	0018      	movs	r0, r3
 8005f36:	f000 fc02 	bl	800673e <I2C_WaitOnTXISFlagUntilTimeout>
 8005f3a:	1e03      	subs	r3, r0, #0
 8005f3c:	d001      	beq.n	8005f42 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e081      	b.n	8006046 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f46:	781a      	ldrb	r2, [r3, #0]
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f52:	1c5a      	adds	r2, r3, #1
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	3b01      	subs	r3, #1
 8005f60:	b29a      	uxth	r2, r3
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f6a:	3b01      	subs	r3, #1
 8005f6c:	b29a      	uxth	r2, r3
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f76:	b29b      	uxth	r3, r3
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d03a      	beq.n	8005ff2 <HAL_I2C_Mem_Write+0x1fa>
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d136      	bne.n	8005ff2 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005f84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f86:	68f8      	ldr	r0, [r7, #12]
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	9300      	str	r3, [sp, #0]
 8005f8c:	0013      	movs	r3, r2
 8005f8e:	2200      	movs	r2, #0
 8005f90:	2180      	movs	r1, #128	; 0x80
 8005f92:	f000 fb95 	bl	80066c0 <I2C_WaitOnFlagUntilTimeout>
 8005f96:	1e03      	subs	r3, r0, #0
 8005f98:	d001      	beq.n	8005f9e <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	e053      	b.n	8006046 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	2bff      	cmp	r3, #255	; 0xff
 8005fa6:	d911      	bls.n	8005fcc <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	22ff      	movs	r2, #255	; 0xff
 8005fac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fb2:	b2da      	uxtb	r2, r3
 8005fb4:	2380      	movs	r3, #128	; 0x80
 8005fb6:	045c      	lsls	r4, r3, #17
 8005fb8:	230a      	movs	r3, #10
 8005fba:	18fb      	adds	r3, r7, r3
 8005fbc:	8819      	ldrh	r1, [r3, #0]
 8005fbe:	68f8      	ldr	r0, [r7, #12]
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	9300      	str	r3, [sp, #0]
 8005fc4:	0023      	movs	r3, r4
 8005fc6:	f000 fd35 	bl	8006a34 <I2C_TransferConfig>
 8005fca:	e012      	b.n	8005ff2 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fd0:	b29a      	uxth	r2, r3
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fda:	b2da      	uxtb	r2, r3
 8005fdc:	2380      	movs	r3, #128	; 0x80
 8005fde:	049c      	lsls	r4, r3, #18
 8005fe0:	230a      	movs	r3, #10
 8005fe2:	18fb      	adds	r3, r7, r3
 8005fe4:	8819      	ldrh	r1, [r3, #0]
 8005fe6:	68f8      	ldr	r0, [r7, #12]
 8005fe8:	2300      	movs	r3, #0
 8005fea:	9300      	str	r3, [sp, #0]
 8005fec:	0023      	movs	r3, r4
 8005fee:	f000 fd21 	bl	8006a34 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d198      	bne.n	8005f2e <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ffc:	697a      	ldr	r2, [r7, #20]
 8005ffe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	0018      	movs	r0, r3
 8006004:	f000 fbda 	bl	80067bc <I2C_WaitOnSTOPFlagUntilTimeout>
 8006008:	1e03      	subs	r3, r0, #0
 800600a:	d001      	beq.n	8006010 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	e01a      	b.n	8006046 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	2220      	movs	r2, #32
 8006016:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	685a      	ldr	r2, [r3, #4]
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	490b      	ldr	r1, [pc, #44]	; (8006050 <HAL_I2C_Mem_Write+0x258>)
 8006024:	400a      	ands	r2, r1
 8006026:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2241      	movs	r2, #65	; 0x41
 800602c:	2120      	movs	r1, #32
 800602e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2242      	movs	r2, #66	; 0x42
 8006034:	2100      	movs	r1, #0
 8006036:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2240      	movs	r2, #64	; 0x40
 800603c:	2100      	movs	r1, #0
 800603e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006040:	2300      	movs	r3, #0
 8006042:	e000      	b.n	8006046 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8006044:	2302      	movs	r3, #2
  }
}
 8006046:	0018      	movs	r0, r3
 8006048:	46bd      	mov	sp, r7
 800604a:	b007      	add	sp, #28
 800604c:	bd90      	pop	{r4, r7, pc}
 800604e:	46c0      	nop			; (mov r8, r8)
 8006050:	fe00e800 	.word	0xfe00e800

08006054 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006054:	b590      	push	{r4, r7, lr}
 8006056:	b089      	sub	sp, #36	; 0x24
 8006058:	af02      	add	r7, sp, #8
 800605a:	60f8      	str	r0, [r7, #12]
 800605c:	000c      	movs	r4, r1
 800605e:	0010      	movs	r0, r2
 8006060:	0019      	movs	r1, r3
 8006062:	230a      	movs	r3, #10
 8006064:	18fb      	adds	r3, r7, r3
 8006066:	1c22      	adds	r2, r4, #0
 8006068:	801a      	strh	r2, [r3, #0]
 800606a:	2308      	movs	r3, #8
 800606c:	18fb      	adds	r3, r7, r3
 800606e:	1c02      	adds	r2, r0, #0
 8006070:	801a      	strh	r2, [r3, #0]
 8006072:	1dbb      	adds	r3, r7, #6
 8006074:	1c0a      	adds	r2, r1, #0
 8006076:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2241      	movs	r2, #65	; 0x41
 800607c:	5c9b      	ldrb	r3, [r3, r2]
 800607e:	b2db      	uxtb	r3, r3
 8006080:	2b20      	cmp	r3, #32
 8006082:	d000      	beq.n	8006086 <HAL_I2C_Mem_Read+0x32>
 8006084:	e110      	b.n	80062a8 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8006086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006088:	2b00      	cmp	r3, #0
 800608a:	d004      	beq.n	8006096 <HAL_I2C_Mem_Read+0x42>
 800608c:	232c      	movs	r3, #44	; 0x2c
 800608e:	18fb      	adds	r3, r7, r3
 8006090:	881b      	ldrh	r3, [r3, #0]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d105      	bne.n	80060a2 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2280      	movs	r2, #128	; 0x80
 800609a:	0092      	lsls	r2, r2, #2
 800609c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	e103      	b.n	80062aa <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2240      	movs	r2, #64	; 0x40
 80060a6:	5c9b      	ldrb	r3, [r3, r2]
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d101      	bne.n	80060b0 <HAL_I2C_Mem_Read+0x5c>
 80060ac:	2302      	movs	r3, #2
 80060ae:	e0fc      	b.n	80062aa <HAL_I2C_Mem_Read+0x256>
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2240      	movs	r2, #64	; 0x40
 80060b4:	2101      	movs	r1, #1
 80060b6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80060b8:	f7fe fb58 	bl	800476c <HAL_GetTick>
 80060bc:	0003      	movs	r3, r0
 80060be:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80060c0:	2380      	movs	r3, #128	; 0x80
 80060c2:	0219      	lsls	r1, r3, #8
 80060c4:	68f8      	ldr	r0, [r7, #12]
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	9300      	str	r3, [sp, #0]
 80060ca:	2319      	movs	r3, #25
 80060cc:	2201      	movs	r2, #1
 80060ce:	f000 faf7 	bl	80066c0 <I2C_WaitOnFlagUntilTimeout>
 80060d2:	1e03      	subs	r3, r0, #0
 80060d4:	d001      	beq.n	80060da <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	e0e7      	b.n	80062aa <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2241      	movs	r2, #65	; 0x41
 80060de:	2122      	movs	r1, #34	; 0x22
 80060e0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2242      	movs	r2, #66	; 0x42
 80060e6:	2140      	movs	r1, #64	; 0x40
 80060e8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2200      	movs	r2, #0
 80060ee:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	222c      	movs	r2, #44	; 0x2c
 80060fa:	18ba      	adds	r2, r7, r2
 80060fc:	8812      	ldrh	r2, [r2, #0]
 80060fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2200      	movs	r2, #0
 8006104:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006106:	1dbb      	adds	r3, r7, #6
 8006108:	881c      	ldrh	r4, [r3, #0]
 800610a:	2308      	movs	r3, #8
 800610c:	18fb      	adds	r3, r7, r3
 800610e:	881a      	ldrh	r2, [r3, #0]
 8006110:	230a      	movs	r3, #10
 8006112:	18fb      	adds	r3, r7, r3
 8006114:	8819      	ldrh	r1, [r3, #0]
 8006116:	68f8      	ldr	r0, [r7, #12]
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	9301      	str	r3, [sp, #4]
 800611c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800611e:	9300      	str	r3, [sp, #0]
 8006120:	0023      	movs	r3, r4
 8006122:	f000 fa49 	bl	80065b8 <I2C_RequestMemoryRead>
 8006126:	1e03      	subs	r3, r0, #0
 8006128:	d005      	beq.n	8006136 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2240      	movs	r2, #64	; 0x40
 800612e:	2100      	movs	r1, #0
 8006130:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	e0b9      	b.n	80062aa <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800613a:	b29b      	uxth	r3, r3
 800613c:	2bff      	cmp	r3, #255	; 0xff
 800613e:	d911      	bls.n	8006164 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	22ff      	movs	r2, #255	; 0xff
 8006144:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800614a:	b2da      	uxtb	r2, r3
 800614c:	2380      	movs	r3, #128	; 0x80
 800614e:	045c      	lsls	r4, r3, #17
 8006150:	230a      	movs	r3, #10
 8006152:	18fb      	adds	r3, r7, r3
 8006154:	8819      	ldrh	r1, [r3, #0]
 8006156:	68f8      	ldr	r0, [r7, #12]
 8006158:	4b56      	ldr	r3, [pc, #344]	; (80062b4 <HAL_I2C_Mem_Read+0x260>)
 800615a:	9300      	str	r3, [sp, #0]
 800615c:	0023      	movs	r3, r4
 800615e:	f000 fc69 	bl	8006a34 <I2C_TransferConfig>
 8006162:	e012      	b.n	800618a <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006168:	b29a      	uxth	r2, r3
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006172:	b2da      	uxtb	r2, r3
 8006174:	2380      	movs	r3, #128	; 0x80
 8006176:	049c      	lsls	r4, r3, #18
 8006178:	230a      	movs	r3, #10
 800617a:	18fb      	adds	r3, r7, r3
 800617c:	8819      	ldrh	r1, [r3, #0]
 800617e:	68f8      	ldr	r0, [r7, #12]
 8006180:	4b4c      	ldr	r3, [pc, #304]	; (80062b4 <HAL_I2C_Mem_Read+0x260>)
 8006182:	9300      	str	r3, [sp, #0]
 8006184:	0023      	movs	r3, r4
 8006186:	f000 fc55 	bl	8006a34 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800618a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800618c:	68f8      	ldr	r0, [r7, #12]
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	9300      	str	r3, [sp, #0]
 8006192:	0013      	movs	r3, r2
 8006194:	2200      	movs	r2, #0
 8006196:	2104      	movs	r1, #4
 8006198:	f000 fa92 	bl	80066c0 <I2C_WaitOnFlagUntilTimeout>
 800619c:	1e03      	subs	r3, r0, #0
 800619e:	d001      	beq.n	80061a4 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80061a0:	2301      	movs	r3, #1
 80061a2:	e082      	b.n	80062aa <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ae:	b2d2      	uxtb	r2, r2
 80061b0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b6:	1c5a      	adds	r2, r3, #1
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061c0:	3b01      	subs	r3, #1
 80061c2:	b29a      	uxth	r2, r3
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	3b01      	subs	r3, #1
 80061d0:	b29a      	uxth	r2, r3
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061da:	b29b      	uxth	r3, r3
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d03a      	beq.n	8006256 <HAL_I2C_Mem_Read+0x202>
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d136      	bne.n	8006256 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80061e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061ea:	68f8      	ldr	r0, [r7, #12]
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	9300      	str	r3, [sp, #0]
 80061f0:	0013      	movs	r3, r2
 80061f2:	2200      	movs	r2, #0
 80061f4:	2180      	movs	r1, #128	; 0x80
 80061f6:	f000 fa63 	bl	80066c0 <I2C_WaitOnFlagUntilTimeout>
 80061fa:	1e03      	subs	r3, r0, #0
 80061fc:	d001      	beq.n	8006202 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
 8006200:	e053      	b.n	80062aa <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006206:	b29b      	uxth	r3, r3
 8006208:	2bff      	cmp	r3, #255	; 0xff
 800620a:	d911      	bls.n	8006230 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	22ff      	movs	r2, #255	; 0xff
 8006210:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006216:	b2da      	uxtb	r2, r3
 8006218:	2380      	movs	r3, #128	; 0x80
 800621a:	045c      	lsls	r4, r3, #17
 800621c:	230a      	movs	r3, #10
 800621e:	18fb      	adds	r3, r7, r3
 8006220:	8819      	ldrh	r1, [r3, #0]
 8006222:	68f8      	ldr	r0, [r7, #12]
 8006224:	2300      	movs	r3, #0
 8006226:	9300      	str	r3, [sp, #0]
 8006228:	0023      	movs	r3, r4
 800622a:	f000 fc03 	bl	8006a34 <I2C_TransferConfig>
 800622e:	e012      	b.n	8006256 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006234:	b29a      	uxth	r2, r3
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800623e:	b2da      	uxtb	r2, r3
 8006240:	2380      	movs	r3, #128	; 0x80
 8006242:	049c      	lsls	r4, r3, #18
 8006244:	230a      	movs	r3, #10
 8006246:	18fb      	adds	r3, r7, r3
 8006248:	8819      	ldrh	r1, [r3, #0]
 800624a:	68f8      	ldr	r0, [r7, #12]
 800624c:	2300      	movs	r3, #0
 800624e:	9300      	str	r3, [sp, #0]
 8006250:	0023      	movs	r3, r4
 8006252:	f000 fbef 	bl	8006a34 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800625a:	b29b      	uxth	r3, r3
 800625c:	2b00      	cmp	r3, #0
 800625e:	d194      	bne.n	800618a <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006260:	697a      	ldr	r2, [r7, #20]
 8006262:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	0018      	movs	r0, r3
 8006268:	f000 faa8 	bl	80067bc <I2C_WaitOnSTOPFlagUntilTimeout>
 800626c:	1e03      	subs	r3, r0, #0
 800626e:	d001      	beq.n	8006274 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8006270:	2301      	movs	r3, #1
 8006272:	e01a      	b.n	80062aa <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	2220      	movs	r2, #32
 800627a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	685a      	ldr	r2, [r3, #4]
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	490c      	ldr	r1, [pc, #48]	; (80062b8 <HAL_I2C_Mem_Read+0x264>)
 8006288:	400a      	ands	r2, r1
 800628a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2241      	movs	r2, #65	; 0x41
 8006290:	2120      	movs	r1, #32
 8006292:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2242      	movs	r2, #66	; 0x42
 8006298:	2100      	movs	r1, #0
 800629a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2240      	movs	r2, #64	; 0x40
 80062a0:	2100      	movs	r1, #0
 80062a2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80062a4:	2300      	movs	r3, #0
 80062a6:	e000      	b.n	80062aa <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80062a8:	2302      	movs	r3, #2
  }
}
 80062aa:	0018      	movs	r0, r3
 80062ac:	46bd      	mov	sp, r7
 80062ae:	b007      	add	sp, #28
 80062b0:	bd90      	pop	{r4, r7, pc}
 80062b2:	46c0      	nop			; (mov r8, r8)
 80062b4:	80002400 	.word	0x80002400
 80062b8:	fe00e800 	.word	0xfe00e800

080062bc <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b08a      	sub	sp, #40	; 0x28
 80062c0:	af02      	add	r7, sp, #8
 80062c2:	60f8      	str	r0, [r7, #12]
 80062c4:	607a      	str	r2, [r7, #4]
 80062c6:	603b      	str	r3, [r7, #0]
 80062c8:	230a      	movs	r3, #10
 80062ca:	18fb      	adds	r3, r7, r3
 80062cc:	1c0a      	adds	r2, r1, #0
 80062ce:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80062d0:	2300      	movs	r3, #0
 80062d2:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2241      	movs	r2, #65	; 0x41
 80062d8:	5c9b      	ldrb	r3, [r3, r2]
 80062da:	b2db      	uxtb	r3, r3
 80062dc:	2b20      	cmp	r3, #32
 80062de:	d000      	beq.n	80062e2 <HAL_I2C_IsDeviceReady+0x26>
 80062e0:	e0fe      	b.n	80064e0 <HAL_I2C_IsDeviceReady+0x224>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	699a      	ldr	r2, [r3, #24]
 80062e8:	2380      	movs	r3, #128	; 0x80
 80062ea:	021b      	lsls	r3, r3, #8
 80062ec:	401a      	ands	r2, r3
 80062ee:	2380      	movs	r3, #128	; 0x80
 80062f0:	021b      	lsls	r3, r3, #8
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d101      	bne.n	80062fa <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 80062f6:	2302      	movs	r3, #2
 80062f8:	e0f3      	b.n	80064e2 <HAL_I2C_IsDeviceReady+0x226>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2240      	movs	r2, #64	; 0x40
 80062fe:	5c9b      	ldrb	r3, [r3, r2]
 8006300:	2b01      	cmp	r3, #1
 8006302:	d101      	bne.n	8006308 <HAL_I2C_IsDeviceReady+0x4c>
 8006304:	2302      	movs	r3, #2
 8006306:	e0ec      	b.n	80064e2 <HAL_I2C_IsDeviceReady+0x226>
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2240      	movs	r2, #64	; 0x40
 800630c:	2101      	movs	r1, #1
 800630e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2241      	movs	r2, #65	; 0x41
 8006314:	2124      	movs	r1, #36	; 0x24
 8006316:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2200      	movs	r2, #0
 800631c:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	68db      	ldr	r3, [r3, #12]
 8006322:	2b01      	cmp	r3, #1
 8006324:	d107      	bne.n	8006336 <HAL_I2C_IsDeviceReady+0x7a>
 8006326:	230a      	movs	r3, #10
 8006328:	18fb      	adds	r3, r7, r3
 800632a:	881b      	ldrh	r3, [r3, #0]
 800632c:	059b      	lsls	r3, r3, #22
 800632e:	0d9b      	lsrs	r3, r3, #22
 8006330:	4a6e      	ldr	r2, [pc, #440]	; (80064ec <HAL_I2C_IsDeviceReady+0x230>)
 8006332:	431a      	orrs	r2, r3
 8006334:	e007      	b.n	8006346 <HAL_I2C_IsDeviceReady+0x8a>
 8006336:	230a      	movs	r3, #10
 8006338:	18fb      	adds	r3, r7, r3
 800633a:	881b      	ldrh	r3, [r3, #0]
 800633c:	059b      	lsls	r3, r3, #22
 800633e:	0d9b      	lsrs	r3, r3, #22
 8006340:	22a0      	movs	r2, #160	; 0xa0
 8006342:	0192      	lsls	r2, r2, #6
 8006344:	431a      	orrs	r2, r3
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800634c:	f7fe fa0e 	bl	800476c <HAL_GetTick>
 8006350:	0003      	movs	r3, r0
 8006352:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	699b      	ldr	r3, [r3, #24]
 800635a:	2220      	movs	r2, #32
 800635c:	4013      	ands	r3, r2
 800635e:	3b20      	subs	r3, #32
 8006360:	425a      	negs	r2, r3
 8006362:	4153      	adcs	r3, r2
 8006364:	b2da      	uxtb	r2, r3
 8006366:	231f      	movs	r3, #31
 8006368:	18fb      	adds	r3, r7, r3
 800636a:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	699b      	ldr	r3, [r3, #24]
 8006372:	2210      	movs	r2, #16
 8006374:	4013      	ands	r3, r2
 8006376:	3b10      	subs	r3, #16
 8006378:	425a      	negs	r2, r3
 800637a:	4153      	adcs	r3, r2
 800637c:	b2da      	uxtb	r2, r3
 800637e:	231e      	movs	r3, #30
 8006380:	18fb      	adds	r3, r7, r3
 8006382:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8006384:	e035      	b.n	80063f2 <HAL_I2C_IsDeviceReady+0x136>
      {
        if (Timeout != HAL_MAX_DELAY)
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	3301      	adds	r3, #1
 800638a:	d01a      	beq.n	80063c2 <HAL_I2C_IsDeviceReady+0x106>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800638c:	f7fe f9ee 	bl	800476c <HAL_GetTick>
 8006390:	0002      	movs	r2, r0
 8006392:	69bb      	ldr	r3, [r7, #24]
 8006394:	1ad3      	subs	r3, r2, r3
 8006396:	683a      	ldr	r2, [r7, #0]
 8006398:	429a      	cmp	r2, r3
 800639a:	d302      	bcc.n	80063a2 <HAL_I2C_IsDeviceReady+0xe6>
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d10f      	bne.n	80063c2 <HAL_I2C_IsDeviceReady+0x106>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2241      	movs	r2, #65	; 0x41
 80063a6:	2120      	movs	r1, #32
 80063a8:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063ae:	2220      	movs	r2, #32
 80063b0:	431a      	orrs	r2, r3
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2240      	movs	r2, #64	; 0x40
 80063ba:	2100      	movs	r1, #0
 80063bc:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 80063be:	2301      	movs	r3, #1
 80063c0:	e08f      	b.n	80064e2 <HAL_I2C_IsDeviceReady+0x226>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	699b      	ldr	r3, [r3, #24]
 80063c8:	2220      	movs	r2, #32
 80063ca:	4013      	ands	r3, r2
 80063cc:	3b20      	subs	r3, #32
 80063ce:	425a      	negs	r2, r3
 80063d0:	4153      	adcs	r3, r2
 80063d2:	b2da      	uxtb	r2, r3
 80063d4:	231f      	movs	r3, #31
 80063d6:	18fb      	adds	r3, r7, r3
 80063d8:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	699b      	ldr	r3, [r3, #24]
 80063e0:	2210      	movs	r2, #16
 80063e2:	4013      	ands	r3, r2
 80063e4:	3b10      	subs	r3, #16
 80063e6:	425a      	negs	r2, r3
 80063e8:	4153      	adcs	r3, r2
 80063ea:	b2da      	uxtb	r2, r3
 80063ec:	231e      	movs	r3, #30
 80063ee:	18fb      	adds	r3, r7, r3
 80063f0:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80063f2:	231f      	movs	r3, #31
 80063f4:	18fb      	adds	r3, r7, r3
 80063f6:	781b      	ldrb	r3, [r3, #0]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d104      	bne.n	8006406 <HAL_I2C_IsDeviceReady+0x14a>
 80063fc:	231e      	movs	r3, #30
 80063fe:	18fb      	adds	r3, r7, r3
 8006400:	781b      	ldrb	r3, [r3, #0]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d0bf      	beq.n	8006386 <HAL_I2C_IsDeviceReady+0xca>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	699b      	ldr	r3, [r3, #24]
 800640c:	2210      	movs	r2, #16
 800640e:	4013      	ands	r3, r2
 8006410:	2b10      	cmp	r3, #16
 8006412:	d01a      	beq.n	800644a <HAL_I2C_IsDeviceReady+0x18e>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8006414:	683a      	ldr	r2, [r7, #0]
 8006416:	68f8      	ldr	r0, [r7, #12]
 8006418:	69bb      	ldr	r3, [r7, #24]
 800641a:	9300      	str	r3, [sp, #0]
 800641c:	0013      	movs	r3, r2
 800641e:	2200      	movs	r2, #0
 8006420:	2120      	movs	r1, #32
 8006422:	f000 f94d 	bl	80066c0 <I2C_WaitOnFlagUntilTimeout>
 8006426:	1e03      	subs	r3, r0, #0
 8006428:	d001      	beq.n	800642e <HAL_I2C_IsDeviceReady+0x172>
        {
          return HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	e059      	b.n	80064e2 <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	2220      	movs	r2, #32
 8006434:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2241      	movs	r2, #65	; 0x41
 800643a:	2120      	movs	r1, #32
 800643c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2240      	movs	r2, #64	; 0x40
 8006442:	2100      	movs	r1, #0
 8006444:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8006446:	2300      	movs	r3, #0
 8006448:	e04b      	b.n	80064e2 <HAL_I2C_IsDeviceReady+0x226>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800644a:	683a      	ldr	r2, [r7, #0]
 800644c:	68f8      	ldr	r0, [r7, #12]
 800644e:	69bb      	ldr	r3, [r7, #24]
 8006450:	9300      	str	r3, [sp, #0]
 8006452:	0013      	movs	r3, r2
 8006454:	2200      	movs	r2, #0
 8006456:	2120      	movs	r1, #32
 8006458:	f000 f932 	bl	80066c0 <I2C_WaitOnFlagUntilTimeout>
 800645c:	1e03      	subs	r3, r0, #0
 800645e:	d001      	beq.n	8006464 <HAL_I2C_IsDeviceReady+0x1a8>
        {
          return HAL_ERROR;
 8006460:	2301      	movs	r3, #1
 8006462:	e03e      	b.n	80064e2 <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	2210      	movs	r2, #16
 800646a:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	2220      	movs	r2, #32
 8006472:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	687a      	ldr	r2, [r7, #4]
 8006478:	429a      	cmp	r2, r3
 800647a:	d119      	bne.n	80064b0 <HAL_I2C_IsDeviceReady+0x1f4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	685a      	ldr	r2, [r3, #4]
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	2180      	movs	r1, #128	; 0x80
 8006488:	01c9      	lsls	r1, r1, #7
 800648a:	430a      	orrs	r2, r1
 800648c:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800648e:	683a      	ldr	r2, [r7, #0]
 8006490:	68f8      	ldr	r0, [r7, #12]
 8006492:	69bb      	ldr	r3, [r7, #24]
 8006494:	9300      	str	r3, [sp, #0]
 8006496:	0013      	movs	r3, r2
 8006498:	2200      	movs	r2, #0
 800649a:	2120      	movs	r1, #32
 800649c:	f000 f910 	bl	80066c0 <I2C_WaitOnFlagUntilTimeout>
 80064a0:	1e03      	subs	r3, r0, #0
 80064a2:	d001      	beq.n	80064a8 <HAL_I2C_IsDeviceReady+0x1ec>
        {
          return HAL_ERROR;
 80064a4:	2301      	movs	r3, #1
 80064a6:	e01c      	b.n	80064e2 <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	2220      	movs	r2, #32
 80064ae:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	3301      	adds	r3, #1
 80064b4:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	687a      	ldr	r2, [r7, #4]
 80064ba:	429a      	cmp	r2, r3
 80064bc:	d900      	bls.n	80064c0 <HAL_I2C_IsDeviceReady+0x204>
 80064be:	e72e      	b.n	800631e <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2241      	movs	r2, #65	; 0x41
 80064c4:	2120      	movs	r1, #32
 80064c6:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064cc:	2220      	movs	r2, #32
 80064ce:	431a      	orrs	r2, r3
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2240      	movs	r2, #64	; 0x40
 80064d8:	2100      	movs	r1, #0
 80064da:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80064dc:	2301      	movs	r3, #1
 80064de:	e000      	b.n	80064e2 <HAL_I2C_IsDeviceReady+0x226>
  }
  else
  {
    return HAL_BUSY;
 80064e0:	2302      	movs	r3, #2
  }
}
 80064e2:	0018      	movs	r0, r3
 80064e4:	46bd      	mov	sp, r7
 80064e6:	b008      	add	sp, #32
 80064e8:	bd80      	pop	{r7, pc}
 80064ea:	46c0      	nop			; (mov r8, r8)
 80064ec:	02002000 	.word	0x02002000

080064f0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80064f0:	b5b0      	push	{r4, r5, r7, lr}
 80064f2:	b086      	sub	sp, #24
 80064f4:	af02      	add	r7, sp, #8
 80064f6:	60f8      	str	r0, [r7, #12]
 80064f8:	000c      	movs	r4, r1
 80064fa:	0010      	movs	r0, r2
 80064fc:	0019      	movs	r1, r3
 80064fe:	250a      	movs	r5, #10
 8006500:	197b      	adds	r3, r7, r5
 8006502:	1c22      	adds	r2, r4, #0
 8006504:	801a      	strh	r2, [r3, #0]
 8006506:	2308      	movs	r3, #8
 8006508:	18fb      	adds	r3, r7, r3
 800650a:	1c02      	adds	r2, r0, #0
 800650c:	801a      	strh	r2, [r3, #0]
 800650e:	1dbb      	adds	r3, r7, #6
 8006510:	1c0a      	adds	r2, r1, #0
 8006512:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006514:	1dbb      	adds	r3, r7, #6
 8006516:	881b      	ldrh	r3, [r3, #0]
 8006518:	b2da      	uxtb	r2, r3
 800651a:	2380      	movs	r3, #128	; 0x80
 800651c:	045c      	lsls	r4, r3, #17
 800651e:	197b      	adds	r3, r7, r5
 8006520:	8819      	ldrh	r1, [r3, #0]
 8006522:	68f8      	ldr	r0, [r7, #12]
 8006524:	4b23      	ldr	r3, [pc, #140]	; (80065b4 <I2C_RequestMemoryWrite+0xc4>)
 8006526:	9300      	str	r3, [sp, #0]
 8006528:	0023      	movs	r3, r4
 800652a:	f000 fa83 	bl	8006a34 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800652e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006530:	6a39      	ldr	r1, [r7, #32]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	0018      	movs	r0, r3
 8006536:	f000 f902 	bl	800673e <I2C_WaitOnTXISFlagUntilTimeout>
 800653a:	1e03      	subs	r3, r0, #0
 800653c:	d001      	beq.n	8006542 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800653e:	2301      	movs	r3, #1
 8006540:	e033      	b.n	80065aa <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006542:	1dbb      	adds	r3, r7, #6
 8006544:	881b      	ldrh	r3, [r3, #0]
 8006546:	2b01      	cmp	r3, #1
 8006548:	d107      	bne.n	800655a <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800654a:	2308      	movs	r3, #8
 800654c:	18fb      	adds	r3, r7, r3
 800654e:	881b      	ldrh	r3, [r3, #0]
 8006550:	b2da      	uxtb	r2, r3
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	629a      	str	r2, [r3, #40]	; 0x28
 8006558:	e019      	b.n	800658e <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800655a:	2308      	movs	r3, #8
 800655c:	18fb      	adds	r3, r7, r3
 800655e:	881b      	ldrh	r3, [r3, #0]
 8006560:	0a1b      	lsrs	r3, r3, #8
 8006562:	b29b      	uxth	r3, r3
 8006564:	b2da      	uxtb	r2, r3
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800656c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800656e:	6a39      	ldr	r1, [r7, #32]
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	0018      	movs	r0, r3
 8006574:	f000 f8e3 	bl	800673e <I2C_WaitOnTXISFlagUntilTimeout>
 8006578:	1e03      	subs	r3, r0, #0
 800657a:	d001      	beq.n	8006580 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 800657c:	2301      	movs	r3, #1
 800657e:	e014      	b.n	80065aa <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006580:	2308      	movs	r3, #8
 8006582:	18fb      	adds	r3, r7, r3
 8006584:	881b      	ldrh	r3, [r3, #0]
 8006586:	b2da      	uxtb	r2, r3
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800658e:	6a3a      	ldr	r2, [r7, #32]
 8006590:	68f8      	ldr	r0, [r7, #12]
 8006592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006594:	9300      	str	r3, [sp, #0]
 8006596:	0013      	movs	r3, r2
 8006598:	2200      	movs	r2, #0
 800659a:	2180      	movs	r1, #128	; 0x80
 800659c:	f000 f890 	bl	80066c0 <I2C_WaitOnFlagUntilTimeout>
 80065a0:	1e03      	subs	r3, r0, #0
 80065a2:	d001      	beq.n	80065a8 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80065a4:	2301      	movs	r3, #1
 80065a6:	e000      	b.n	80065aa <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80065a8:	2300      	movs	r3, #0
}
 80065aa:	0018      	movs	r0, r3
 80065ac:	46bd      	mov	sp, r7
 80065ae:	b004      	add	sp, #16
 80065b0:	bdb0      	pop	{r4, r5, r7, pc}
 80065b2:	46c0      	nop			; (mov r8, r8)
 80065b4:	80002000 	.word	0x80002000

080065b8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80065b8:	b5b0      	push	{r4, r5, r7, lr}
 80065ba:	b086      	sub	sp, #24
 80065bc:	af02      	add	r7, sp, #8
 80065be:	60f8      	str	r0, [r7, #12]
 80065c0:	000c      	movs	r4, r1
 80065c2:	0010      	movs	r0, r2
 80065c4:	0019      	movs	r1, r3
 80065c6:	250a      	movs	r5, #10
 80065c8:	197b      	adds	r3, r7, r5
 80065ca:	1c22      	adds	r2, r4, #0
 80065cc:	801a      	strh	r2, [r3, #0]
 80065ce:	2308      	movs	r3, #8
 80065d0:	18fb      	adds	r3, r7, r3
 80065d2:	1c02      	adds	r2, r0, #0
 80065d4:	801a      	strh	r2, [r3, #0]
 80065d6:	1dbb      	adds	r3, r7, #6
 80065d8:	1c0a      	adds	r2, r1, #0
 80065da:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80065dc:	1dbb      	adds	r3, r7, #6
 80065de:	881b      	ldrh	r3, [r3, #0]
 80065e0:	b2da      	uxtb	r2, r3
 80065e2:	197b      	adds	r3, r7, r5
 80065e4:	8819      	ldrh	r1, [r3, #0]
 80065e6:	68f8      	ldr	r0, [r7, #12]
 80065e8:	4b23      	ldr	r3, [pc, #140]	; (8006678 <I2C_RequestMemoryRead+0xc0>)
 80065ea:	9300      	str	r3, [sp, #0]
 80065ec:	2300      	movs	r3, #0
 80065ee:	f000 fa21 	bl	8006a34 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80065f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065f4:	6a39      	ldr	r1, [r7, #32]
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	0018      	movs	r0, r3
 80065fa:	f000 f8a0 	bl	800673e <I2C_WaitOnTXISFlagUntilTimeout>
 80065fe:	1e03      	subs	r3, r0, #0
 8006600:	d001      	beq.n	8006606 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8006602:	2301      	movs	r3, #1
 8006604:	e033      	b.n	800666e <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006606:	1dbb      	adds	r3, r7, #6
 8006608:	881b      	ldrh	r3, [r3, #0]
 800660a:	2b01      	cmp	r3, #1
 800660c:	d107      	bne.n	800661e <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800660e:	2308      	movs	r3, #8
 8006610:	18fb      	adds	r3, r7, r3
 8006612:	881b      	ldrh	r3, [r3, #0]
 8006614:	b2da      	uxtb	r2, r3
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	629a      	str	r2, [r3, #40]	; 0x28
 800661c:	e019      	b.n	8006652 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800661e:	2308      	movs	r3, #8
 8006620:	18fb      	adds	r3, r7, r3
 8006622:	881b      	ldrh	r3, [r3, #0]
 8006624:	0a1b      	lsrs	r3, r3, #8
 8006626:	b29b      	uxth	r3, r3
 8006628:	b2da      	uxtb	r2, r3
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006632:	6a39      	ldr	r1, [r7, #32]
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	0018      	movs	r0, r3
 8006638:	f000 f881 	bl	800673e <I2C_WaitOnTXISFlagUntilTimeout>
 800663c:	1e03      	subs	r3, r0, #0
 800663e:	d001      	beq.n	8006644 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8006640:	2301      	movs	r3, #1
 8006642:	e014      	b.n	800666e <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006644:	2308      	movs	r3, #8
 8006646:	18fb      	adds	r3, r7, r3
 8006648:	881b      	ldrh	r3, [r3, #0]
 800664a:	b2da      	uxtb	r2, r3
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006652:	6a3a      	ldr	r2, [r7, #32]
 8006654:	68f8      	ldr	r0, [r7, #12]
 8006656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006658:	9300      	str	r3, [sp, #0]
 800665a:	0013      	movs	r3, r2
 800665c:	2200      	movs	r2, #0
 800665e:	2140      	movs	r1, #64	; 0x40
 8006660:	f000 f82e 	bl	80066c0 <I2C_WaitOnFlagUntilTimeout>
 8006664:	1e03      	subs	r3, r0, #0
 8006666:	d001      	beq.n	800666c <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8006668:	2301      	movs	r3, #1
 800666a:	e000      	b.n	800666e <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 800666c:	2300      	movs	r3, #0
}
 800666e:	0018      	movs	r0, r3
 8006670:	46bd      	mov	sp, r7
 8006672:	b004      	add	sp, #16
 8006674:	bdb0      	pop	{r4, r5, r7, pc}
 8006676:	46c0      	nop			; (mov r8, r8)
 8006678:	80002000 	.word	0x80002000

0800667c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b082      	sub	sp, #8
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	699b      	ldr	r3, [r3, #24]
 800668a:	2202      	movs	r2, #2
 800668c:	4013      	ands	r3, r2
 800668e:	2b02      	cmp	r3, #2
 8006690:	d103      	bne.n	800669a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	2200      	movs	r2, #0
 8006698:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	699b      	ldr	r3, [r3, #24]
 80066a0:	2201      	movs	r2, #1
 80066a2:	4013      	ands	r3, r2
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d007      	beq.n	80066b8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	699a      	ldr	r2, [r3, #24]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	2101      	movs	r1, #1
 80066b4:	430a      	orrs	r2, r1
 80066b6:	619a      	str	r2, [r3, #24]
  }
}
 80066b8:	46c0      	nop			; (mov r8, r8)
 80066ba:	46bd      	mov	sp, r7
 80066bc:	b002      	add	sp, #8
 80066be:	bd80      	pop	{r7, pc}

080066c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b084      	sub	sp, #16
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	60f8      	str	r0, [r7, #12]
 80066c8:	60b9      	str	r1, [r7, #8]
 80066ca:	603b      	str	r3, [r7, #0]
 80066cc:	1dfb      	adds	r3, r7, #7
 80066ce:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80066d0:	e021      	b.n	8006716 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	3301      	adds	r3, #1
 80066d6:	d01e      	beq.n	8006716 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066d8:	f7fe f848 	bl	800476c <HAL_GetTick>
 80066dc:	0002      	movs	r2, r0
 80066de:	69bb      	ldr	r3, [r7, #24]
 80066e0:	1ad3      	subs	r3, r2, r3
 80066e2:	683a      	ldr	r2, [r7, #0]
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d302      	bcc.n	80066ee <I2C_WaitOnFlagUntilTimeout+0x2e>
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d113      	bne.n	8006716 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066f2:	2220      	movs	r2, #32
 80066f4:	431a      	orrs	r2, r3
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2241      	movs	r2, #65	; 0x41
 80066fe:	2120      	movs	r1, #32
 8006700:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2242      	movs	r2, #66	; 0x42
 8006706:	2100      	movs	r1, #0
 8006708:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2240      	movs	r2, #64	; 0x40
 800670e:	2100      	movs	r1, #0
 8006710:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8006712:	2301      	movs	r3, #1
 8006714:	e00f      	b.n	8006736 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	699b      	ldr	r3, [r3, #24]
 800671c:	68ba      	ldr	r2, [r7, #8]
 800671e:	4013      	ands	r3, r2
 8006720:	68ba      	ldr	r2, [r7, #8]
 8006722:	1ad3      	subs	r3, r2, r3
 8006724:	425a      	negs	r2, r3
 8006726:	4153      	adcs	r3, r2
 8006728:	b2db      	uxtb	r3, r3
 800672a:	001a      	movs	r2, r3
 800672c:	1dfb      	adds	r3, r7, #7
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	429a      	cmp	r2, r3
 8006732:	d0ce      	beq.n	80066d2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006734:	2300      	movs	r3, #0
}
 8006736:	0018      	movs	r0, r3
 8006738:	46bd      	mov	sp, r7
 800673a:	b004      	add	sp, #16
 800673c:	bd80      	pop	{r7, pc}

0800673e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800673e:	b580      	push	{r7, lr}
 8006740:	b084      	sub	sp, #16
 8006742:	af00      	add	r7, sp, #0
 8006744:	60f8      	str	r0, [r7, #12]
 8006746:	60b9      	str	r1, [r7, #8]
 8006748:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800674a:	e02b      	b.n	80067a4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	68b9      	ldr	r1, [r7, #8]
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	0018      	movs	r0, r3
 8006754:	f000 f86e 	bl	8006834 <I2C_IsErrorOccurred>
 8006758:	1e03      	subs	r3, r0, #0
 800675a:	d001      	beq.n	8006760 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800675c:	2301      	movs	r3, #1
 800675e:	e029      	b.n	80067b4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	3301      	adds	r3, #1
 8006764:	d01e      	beq.n	80067a4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006766:	f7fe f801 	bl	800476c <HAL_GetTick>
 800676a:	0002      	movs	r2, r0
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	1ad3      	subs	r3, r2, r3
 8006770:	68ba      	ldr	r2, [r7, #8]
 8006772:	429a      	cmp	r2, r3
 8006774:	d302      	bcc.n	800677c <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d113      	bne.n	80067a4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006780:	2220      	movs	r2, #32
 8006782:	431a      	orrs	r2, r3
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2241      	movs	r2, #65	; 0x41
 800678c:	2120      	movs	r1, #32
 800678e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2242      	movs	r2, #66	; 0x42
 8006794:	2100      	movs	r1, #0
 8006796:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2240      	movs	r2, #64	; 0x40
 800679c:	2100      	movs	r1, #0
 800679e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80067a0:	2301      	movs	r3, #1
 80067a2:	e007      	b.n	80067b4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	699b      	ldr	r3, [r3, #24]
 80067aa:	2202      	movs	r2, #2
 80067ac:	4013      	ands	r3, r2
 80067ae:	2b02      	cmp	r3, #2
 80067b0:	d1cc      	bne.n	800674c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80067b2:	2300      	movs	r3, #0
}
 80067b4:	0018      	movs	r0, r3
 80067b6:	46bd      	mov	sp, r7
 80067b8:	b004      	add	sp, #16
 80067ba:	bd80      	pop	{r7, pc}

080067bc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b084      	sub	sp, #16
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	60f8      	str	r0, [r7, #12]
 80067c4:	60b9      	str	r1, [r7, #8]
 80067c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80067c8:	e028      	b.n	800681c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80067ca:	687a      	ldr	r2, [r7, #4]
 80067cc:	68b9      	ldr	r1, [r7, #8]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	0018      	movs	r0, r3
 80067d2:	f000 f82f 	bl	8006834 <I2C_IsErrorOccurred>
 80067d6:	1e03      	subs	r3, r0, #0
 80067d8:	d001      	beq.n	80067de <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80067da:	2301      	movs	r3, #1
 80067dc:	e026      	b.n	800682c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067de:	f7fd ffc5 	bl	800476c <HAL_GetTick>
 80067e2:	0002      	movs	r2, r0
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	1ad3      	subs	r3, r2, r3
 80067e8:	68ba      	ldr	r2, [r7, #8]
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d302      	bcc.n	80067f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d113      	bne.n	800681c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067f8:	2220      	movs	r2, #32
 80067fa:	431a      	orrs	r2, r3
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2241      	movs	r2, #65	; 0x41
 8006804:	2120      	movs	r1, #32
 8006806:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2242      	movs	r2, #66	; 0x42
 800680c:	2100      	movs	r1, #0
 800680e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2240      	movs	r2, #64	; 0x40
 8006814:	2100      	movs	r1, #0
 8006816:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8006818:	2301      	movs	r3, #1
 800681a:	e007      	b.n	800682c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	699b      	ldr	r3, [r3, #24]
 8006822:	2220      	movs	r2, #32
 8006824:	4013      	ands	r3, r2
 8006826:	2b20      	cmp	r3, #32
 8006828:	d1cf      	bne.n	80067ca <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800682a:	2300      	movs	r3, #0
}
 800682c:	0018      	movs	r0, r3
 800682e:	46bd      	mov	sp, r7
 8006830:	b004      	add	sp, #16
 8006832:	bd80      	pop	{r7, pc}

08006834 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006834:	b590      	push	{r4, r7, lr}
 8006836:	b08b      	sub	sp, #44	; 0x2c
 8006838:	af00      	add	r7, sp, #0
 800683a:	60f8      	str	r0, [r7, #12]
 800683c:	60b9      	str	r1, [r7, #8]
 800683e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006840:	2327      	movs	r3, #39	; 0x27
 8006842:	18fb      	adds	r3, r7, r3
 8006844:	2200      	movs	r2, #0
 8006846:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	699b      	ldr	r3, [r3, #24]
 800684e:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006850:	2300      	movs	r3, #0
 8006852:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006858:	69bb      	ldr	r3, [r7, #24]
 800685a:	2210      	movs	r2, #16
 800685c:	4013      	ands	r3, r2
 800685e:	d100      	bne.n	8006862 <I2C_IsErrorOccurred+0x2e>
 8006860:	e082      	b.n	8006968 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	2210      	movs	r2, #16
 8006868:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800686a:	e060      	b.n	800692e <I2C_IsErrorOccurred+0xfa>
 800686c:	2427      	movs	r4, #39	; 0x27
 800686e:	193b      	adds	r3, r7, r4
 8006870:	193a      	adds	r2, r7, r4
 8006872:	7812      	ldrb	r2, [r2, #0]
 8006874:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	3301      	adds	r3, #1
 800687a:	d058      	beq.n	800692e <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800687c:	f7fd ff76 	bl	800476c <HAL_GetTick>
 8006880:	0002      	movs	r2, r0
 8006882:	69fb      	ldr	r3, [r7, #28]
 8006884:	1ad3      	subs	r3, r2, r3
 8006886:	68ba      	ldr	r2, [r7, #8]
 8006888:	429a      	cmp	r2, r3
 800688a:	d306      	bcc.n	800689a <I2C_IsErrorOccurred+0x66>
 800688c:	193b      	adds	r3, r7, r4
 800688e:	193a      	adds	r2, r7, r4
 8006890:	7812      	ldrb	r2, [r2, #0]
 8006892:	701a      	strb	r2, [r3, #0]
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d149      	bne.n	800692e <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	685a      	ldr	r2, [r3, #4]
 80068a0:	2380      	movs	r3, #128	; 0x80
 80068a2:	01db      	lsls	r3, r3, #7
 80068a4:	4013      	ands	r3, r2
 80068a6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80068a8:	2013      	movs	r0, #19
 80068aa:	183b      	adds	r3, r7, r0
 80068ac:	68fa      	ldr	r2, [r7, #12]
 80068ae:	2142      	movs	r1, #66	; 0x42
 80068b0:	5c52      	ldrb	r2, [r2, r1]
 80068b2:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	699a      	ldr	r2, [r3, #24]
 80068ba:	2380      	movs	r3, #128	; 0x80
 80068bc:	021b      	lsls	r3, r3, #8
 80068be:	401a      	ands	r2, r3
 80068c0:	2380      	movs	r3, #128	; 0x80
 80068c2:	021b      	lsls	r3, r3, #8
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d126      	bne.n	8006916 <I2C_IsErrorOccurred+0xe2>
 80068c8:	697a      	ldr	r2, [r7, #20]
 80068ca:	2380      	movs	r3, #128	; 0x80
 80068cc:	01db      	lsls	r3, r3, #7
 80068ce:	429a      	cmp	r2, r3
 80068d0:	d021      	beq.n	8006916 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 80068d2:	183b      	adds	r3, r7, r0
 80068d4:	781b      	ldrb	r3, [r3, #0]
 80068d6:	2b20      	cmp	r3, #32
 80068d8:	d01d      	beq.n	8006916 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	685a      	ldr	r2, [r3, #4]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	2180      	movs	r1, #128	; 0x80
 80068e6:	01c9      	lsls	r1, r1, #7
 80068e8:	430a      	orrs	r2, r1
 80068ea:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80068ec:	f7fd ff3e 	bl	800476c <HAL_GetTick>
 80068f0:	0003      	movs	r3, r0
 80068f2:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80068f4:	e00f      	b.n	8006916 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80068f6:	f7fd ff39 	bl	800476c <HAL_GetTick>
 80068fa:	0002      	movs	r2, r0
 80068fc:	69fb      	ldr	r3, [r7, #28]
 80068fe:	1ad3      	subs	r3, r2, r3
 8006900:	2b19      	cmp	r3, #25
 8006902:	d908      	bls.n	8006916 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8006904:	6a3b      	ldr	r3, [r7, #32]
 8006906:	2220      	movs	r2, #32
 8006908:	4313      	orrs	r3, r2
 800690a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800690c:	2327      	movs	r3, #39	; 0x27
 800690e:	18fb      	adds	r3, r7, r3
 8006910:	2201      	movs	r2, #1
 8006912:	701a      	strb	r2, [r3, #0]

              break;
 8006914:	e00b      	b.n	800692e <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	699b      	ldr	r3, [r3, #24]
 800691c:	2220      	movs	r2, #32
 800691e:	4013      	ands	r3, r2
 8006920:	2127      	movs	r1, #39	; 0x27
 8006922:	187a      	adds	r2, r7, r1
 8006924:	1879      	adds	r1, r7, r1
 8006926:	7809      	ldrb	r1, [r1, #0]
 8006928:	7011      	strb	r1, [r2, #0]
 800692a:	2b20      	cmp	r3, #32
 800692c:	d1e3      	bne.n	80068f6 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	699b      	ldr	r3, [r3, #24]
 8006934:	2220      	movs	r2, #32
 8006936:	4013      	ands	r3, r2
 8006938:	2b20      	cmp	r3, #32
 800693a:	d004      	beq.n	8006946 <I2C_IsErrorOccurred+0x112>
 800693c:	2327      	movs	r3, #39	; 0x27
 800693e:	18fb      	adds	r3, r7, r3
 8006940:	781b      	ldrb	r3, [r3, #0]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d092      	beq.n	800686c <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006946:	2327      	movs	r3, #39	; 0x27
 8006948:	18fb      	adds	r3, r7, r3
 800694a:	781b      	ldrb	r3, [r3, #0]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d103      	bne.n	8006958 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	2220      	movs	r2, #32
 8006956:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006958:	6a3b      	ldr	r3, [r7, #32]
 800695a:	2204      	movs	r2, #4
 800695c:	4313      	orrs	r3, r2
 800695e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006960:	2327      	movs	r3, #39	; 0x27
 8006962:	18fb      	adds	r3, r7, r3
 8006964:	2201      	movs	r2, #1
 8006966:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	699b      	ldr	r3, [r3, #24]
 800696e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006970:	69ba      	ldr	r2, [r7, #24]
 8006972:	2380      	movs	r3, #128	; 0x80
 8006974:	005b      	lsls	r3, r3, #1
 8006976:	4013      	ands	r3, r2
 8006978:	d00c      	beq.n	8006994 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800697a:	6a3b      	ldr	r3, [r7, #32]
 800697c:	2201      	movs	r2, #1
 800697e:	4313      	orrs	r3, r2
 8006980:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	2280      	movs	r2, #128	; 0x80
 8006988:	0052      	lsls	r2, r2, #1
 800698a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800698c:	2327      	movs	r3, #39	; 0x27
 800698e:	18fb      	adds	r3, r7, r3
 8006990:	2201      	movs	r2, #1
 8006992:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006994:	69ba      	ldr	r2, [r7, #24]
 8006996:	2380      	movs	r3, #128	; 0x80
 8006998:	00db      	lsls	r3, r3, #3
 800699a:	4013      	ands	r3, r2
 800699c:	d00c      	beq.n	80069b8 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800699e:	6a3b      	ldr	r3, [r7, #32]
 80069a0:	2208      	movs	r2, #8
 80069a2:	4313      	orrs	r3, r2
 80069a4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	2280      	movs	r2, #128	; 0x80
 80069ac:	00d2      	lsls	r2, r2, #3
 80069ae:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80069b0:	2327      	movs	r3, #39	; 0x27
 80069b2:	18fb      	adds	r3, r7, r3
 80069b4:	2201      	movs	r2, #1
 80069b6:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80069b8:	69ba      	ldr	r2, [r7, #24]
 80069ba:	2380      	movs	r3, #128	; 0x80
 80069bc:	009b      	lsls	r3, r3, #2
 80069be:	4013      	ands	r3, r2
 80069c0:	d00c      	beq.n	80069dc <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80069c2:	6a3b      	ldr	r3, [r7, #32]
 80069c4:	2202      	movs	r2, #2
 80069c6:	4313      	orrs	r3, r2
 80069c8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	2280      	movs	r2, #128	; 0x80
 80069d0:	0092      	lsls	r2, r2, #2
 80069d2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80069d4:	2327      	movs	r3, #39	; 0x27
 80069d6:	18fb      	adds	r3, r7, r3
 80069d8:	2201      	movs	r2, #1
 80069da:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80069dc:	2327      	movs	r3, #39	; 0x27
 80069de:	18fb      	adds	r3, r7, r3
 80069e0:	781b      	ldrb	r3, [r3, #0]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d01d      	beq.n	8006a22 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	0018      	movs	r0, r3
 80069ea:	f7ff fe47 	bl	800667c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	685a      	ldr	r2, [r3, #4]
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	490d      	ldr	r1, [pc, #52]	; (8006a30 <I2C_IsErrorOccurred+0x1fc>)
 80069fa:	400a      	ands	r2, r1
 80069fc:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a02:	6a3b      	ldr	r3, [r7, #32]
 8006a04:	431a      	orrs	r2, r3
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2241      	movs	r2, #65	; 0x41
 8006a0e:	2120      	movs	r1, #32
 8006a10:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2242      	movs	r2, #66	; 0x42
 8006a16:	2100      	movs	r1, #0
 8006a18:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	2240      	movs	r2, #64	; 0x40
 8006a1e:	2100      	movs	r1, #0
 8006a20:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8006a22:	2327      	movs	r3, #39	; 0x27
 8006a24:	18fb      	adds	r3, r7, r3
 8006a26:	781b      	ldrb	r3, [r3, #0]
}
 8006a28:	0018      	movs	r0, r3
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	b00b      	add	sp, #44	; 0x2c
 8006a2e:	bd90      	pop	{r4, r7, pc}
 8006a30:	fe00e800 	.word	0xfe00e800

08006a34 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006a34:	b590      	push	{r4, r7, lr}
 8006a36:	b087      	sub	sp, #28
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	60f8      	str	r0, [r7, #12]
 8006a3c:	0008      	movs	r0, r1
 8006a3e:	0011      	movs	r1, r2
 8006a40:	607b      	str	r3, [r7, #4]
 8006a42:	240a      	movs	r4, #10
 8006a44:	193b      	adds	r3, r7, r4
 8006a46:	1c02      	adds	r2, r0, #0
 8006a48:	801a      	strh	r2, [r3, #0]
 8006a4a:	2009      	movs	r0, #9
 8006a4c:	183b      	adds	r3, r7, r0
 8006a4e:	1c0a      	adds	r2, r1, #0
 8006a50:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006a52:	193b      	adds	r3, r7, r4
 8006a54:	881b      	ldrh	r3, [r3, #0]
 8006a56:	059b      	lsls	r3, r3, #22
 8006a58:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006a5a:	183b      	adds	r3, r7, r0
 8006a5c:	781b      	ldrb	r3, [r3, #0]
 8006a5e:	0419      	lsls	r1, r3, #16
 8006a60:	23ff      	movs	r3, #255	; 0xff
 8006a62:	041b      	lsls	r3, r3, #16
 8006a64:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006a66:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	005b      	lsls	r3, r3, #1
 8006a72:	085b      	lsrs	r3, r3, #1
 8006a74:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a7e:	0d51      	lsrs	r1, r2, #21
 8006a80:	2280      	movs	r2, #128	; 0x80
 8006a82:	00d2      	lsls	r2, r2, #3
 8006a84:	400a      	ands	r2, r1
 8006a86:	4907      	ldr	r1, [pc, #28]	; (8006aa4 <I2C_TransferConfig+0x70>)
 8006a88:	430a      	orrs	r2, r1
 8006a8a:	43d2      	mvns	r2, r2
 8006a8c:	401a      	ands	r2, r3
 8006a8e:	0011      	movs	r1, r2
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	697a      	ldr	r2, [r7, #20]
 8006a96:	430a      	orrs	r2, r1
 8006a98:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006a9a:	46c0      	nop			; (mov r8, r8)
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	b007      	add	sp, #28
 8006aa0:	bd90      	pop	{r4, r7, pc}
 8006aa2:	46c0      	nop			; (mov r8, r8)
 8006aa4:	03ff63ff 	.word	0x03ff63ff

08006aa8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b082      	sub	sp, #8
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
 8006ab0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2241      	movs	r2, #65	; 0x41
 8006ab6:	5c9b      	ldrb	r3, [r3, r2]
 8006ab8:	b2db      	uxtb	r3, r3
 8006aba:	2b20      	cmp	r3, #32
 8006abc:	d138      	bne.n	8006b30 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2240      	movs	r2, #64	; 0x40
 8006ac2:	5c9b      	ldrb	r3, [r3, r2]
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d101      	bne.n	8006acc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006ac8:	2302      	movs	r3, #2
 8006aca:	e032      	b.n	8006b32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2240      	movs	r2, #64	; 0x40
 8006ad0:	2101      	movs	r1, #1
 8006ad2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2241      	movs	r2, #65	; 0x41
 8006ad8:	2124      	movs	r1, #36	; 0x24
 8006ada:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	681a      	ldr	r2, [r3, #0]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	2101      	movs	r1, #1
 8006ae8:	438a      	bics	r2, r1
 8006aea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	681a      	ldr	r2, [r3, #0]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4911      	ldr	r1, [pc, #68]	; (8006b3c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8006af8:	400a      	ands	r2, r1
 8006afa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	6819      	ldr	r1, [r3, #0]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	683a      	ldr	r2, [r7, #0]
 8006b08:	430a      	orrs	r2, r1
 8006b0a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	2101      	movs	r1, #1
 8006b18:	430a      	orrs	r2, r1
 8006b1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2241      	movs	r2, #65	; 0x41
 8006b20:	2120      	movs	r1, #32
 8006b22:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2240      	movs	r2, #64	; 0x40
 8006b28:	2100      	movs	r1, #0
 8006b2a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	e000      	b.n	8006b32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006b30:	2302      	movs	r3, #2
  }
}
 8006b32:	0018      	movs	r0, r3
 8006b34:	46bd      	mov	sp, r7
 8006b36:	b002      	add	sp, #8
 8006b38:	bd80      	pop	{r7, pc}
 8006b3a:	46c0      	nop			; (mov r8, r8)
 8006b3c:	ffffefff 	.word	0xffffefff

08006b40 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b084      	sub	sp, #16
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
 8006b48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2241      	movs	r2, #65	; 0x41
 8006b4e:	5c9b      	ldrb	r3, [r3, r2]
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	2b20      	cmp	r3, #32
 8006b54:	d139      	bne.n	8006bca <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2240      	movs	r2, #64	; 0x40
 8006b5a:	5c9b      	ldrb	r3, [r3, r2]
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d101      	bne.n	8006b64 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006b60:	2302      	movs	r3, #2
 8006b62:	e033      	b.n	8006bcc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2240      	movs	r2, #64	; 0x40
 8006b68:	2101      	movs	r1, #1
 8006b6a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2241      	movs	r2, #65	; 0x41
 8006b70:	2124      	movs	r1, #36	; 0x24
 8006b72:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	2101      	movs	r1, #1
 8006b80:	438a      	bics	r2, r1
 8006b82:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	4a11      	ldr	r2, [pc, #68]	; (8006bd4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8006b90:	4013      	ands	r3, r2
 8006b92:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	021b      	lsls	r3, r3, #8
 8006b98:	68fa      	ldr	r2, [r7, #12]
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	68fa      	ldr	r2, [r7, #12]
 8006ba4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	681a      	ldr	r2, [r3, #0]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	2101      	movs	r1, #1
 8006bb2:	430a      	orrs	r2, r1
 8006bb4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2241      	movs	r2, #65	; 0x41
 8006bba:	2120      	movs	r1, #32
 8006bbc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2240      	movs	r2, #64	; 0x40
 8006bc2:	2100      	movs	r1, #0
 8006bc4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	e000      	b.n	8006bcc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006bca:	2302      	movs	r3, #2
  }
}
 8006bcc:	0018      	movs	r0, r3
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	b004      	add	sp, #16
 8006bd2:	bd80      	pop	{r7, pc}
 8006bd4:	fffff0ff 	.word	0xfffff0ff

08006bd8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b084      	sub	sp, #16
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8006be0:	4b19      	ldr	r3, [pc, #100]	; (8006c48 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a19      	ldr	r2, [pc, #100]	; (8006c4c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8006be6:	4013      	ands	r3, r2
 8006be8:	0019      	movs	r1, r3
 8006bea:	4b17      	ldr	r3, [pc, #92]	; (8006c48 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006bec:	687a      	ldr	r2, [r7, #4]
 8006bee:	430a      	orrs	r2, r1
 8006bf0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006bf2:	687a      	ldr	r2, [r7, #4]
 8006bf4:	2380      	movs	r3, #128	; 0x80
 8006bf6:	009b      	lsls	r3, r3, #2
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	d11f      	bne.n	8006c3c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8006bfc:	4b14      	ldr	r3, [pc, #80]	; (8006c50 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8006bfe:	681a      	ldr	r2, [r3, #0]
 8006c00:	0013      	movs	r3, r2
 8006c02:	005b      	lsls	r3, r3, #1
 8006c04:	189b      	adds	r3, r3, r2
 8006c06:	005b      	lsls	r3, r3, #1
 8006c08:	4912      	ldr	r1, [pc, #72]	; (8006c54 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8006c0a:	0018      	movs	r0, r3
 8006c0c:	f7f9 fa78 	bl	8000100 <__udivsi3>
 8006c10:	0003      	movs	r3, r0
 8006c12:	3301      	adds	r3, #1
 8006c14:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006c16:	e008      	b.n	8006c2a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d003      	beq.n	8006c26 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	3b01      	subs	r3, #1
 8006c22:	60fb      	str	r3, [r7, #12]
 8006c24:	e001      	b.n	8006c2a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8006c26:	2303      	movs	r3, #3
 8006c28:	e009      	b.n	8006c3e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006c2a:	4b07      	ldr	r3, [pc, #28]	; (8006c48 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006c2c:	695a      	ldr	r2, [r3, #20]
 8006c2e:	2380      	movs	r3, #128	; 0x80
 8006c30:	00db      	lsls	r3, r3, #3
 8006c32:	401a      	ands	r2, r3
 8006c34:	2380      	movs	r3, #128	; 0x80
 8006c36:	00db      	lsls	r3, r3, #3
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	d0ed      	beq.n	8006c18 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8006c3c:	2300      	movs	r3, #0
}
 8006c3e:	0018      	movs	r0, r3
 8006c40:	46bd      	mov	sp, r7
 8006c42:	b004      	add	sp, #16
 8006c44:	bd80      	pop	{r7, pc}
 8006c46:	46c0      	nop			; (mov r8, r8)
 8006c48:	40007000 	.word	0x40007000
 8006c4c:	fffff9ff 	.word	0xfffff9ff
 8006c50:	20000008 	.word	0x20000008
 8006c54:	000f4240 	.word	0x000f4240

08006c58 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b088      	sub	sp, #32
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d101      	bne.n	8006c6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006c66:	2301      	movs	r3, #1
 8006c68:	e2f3      	b.n	8007252 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	2201      	movs	r2, #1
 8006c70:	4013      	ands	r3, r2
 8006c72:	d100      	bne.n	8006c76 <HAL_RCC_OscConfig+0x1e>
 8006c74:	e07c      	b.n	8006d70 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c76:	4bc3      	ldr	r3, [pc, #780]	; (8006f84 <HAL_RCC_OscConfig+0x32c>)
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	2238      	movs	r2, #56	; 0x38
 8006c7c:	4013      	ands	r3, r2
 8006c7e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006c80:	4bc0      	ldr	r3, [pc, #768]	; (8006f84 <HAL_RCC_OscConfig+0x32c>)
 8006c82:	68db      	ldr	r3, [r3, #12]
 8006c84:	2203      	movs	r2, #3
 8006c86:	4013      	ands	r3, r2
 8006c88:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8006c8a:	69bb      	ldr	r3, [r7, #24]
 8006c8c:	2b10      	cmp	r3, #16
 8006c8e:	d102      	bne.n	8006c96 <HAL_RCC_OscConfig+0x3e>
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	2b03      	cmp	r3, #3
 8006c94:	d002      	beq.n	8006c9c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8006c96:	69bb      	ldr	r3, [r7, #24]
 8006c98:	2b08      	cmp	r3, #8
 8006c9a:	d10b      	bne.n	8006cb4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c9c:	4bb9      	ldr	r3, [pc, #740]	; (8006f84 <HAL_RCC_OscConfig+0x32c>)
 8006c9e:	681a      	ldr	r2, [r3, #0]
 8006ca0:	2380      	movs	r3, #128	; 0x80
 8006ca2:	029b      	lsls	r3, r3, #10
 8006ca4:	4013      	ands	r3, r2
 8006ca6:	d062      	beq.n	8006d6e <HAL_RCC_OscConfig+0x116>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d15e      	bne.n	8006d6e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	e2ce      	b.n	8007252 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	685a      	ldr	r2, [r3, #4]
 8006cb8:	2380      	movs	r3, #128	; 0x80
 8006cba:	025b      	lsls	r3, r3, #9
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d107      	bne.n	8006cd0 <HAL_RCC_OscConfig+0x78>
 8006cc0:	4bb0      	ldr	r3, [pc, #704]	; (8006f84 <HAL_RCC_OscConfig+0x32c>)
 8006cc2:	681a      	ldr	r2, [r3, #0]
 8006cc4:	4baf      	ldr	r3, [pc, #700]	; (8006f84 <HAL_RCC_OscConfig+0x32c>)
 8006cc6:	2180      	movs	r1, #128	; 0x80
 8006cc8:	0249      	lsls	r1, r1, #9
 8006cca:	430a      	orrs	r2, r1
 8006ccc:	601a      	str	r2, [r3, #0]
 8006cce:	e020      	b.n	8006d12 <HAL_RCC_OscConfig+0xba>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	685a      	ldr	r2, [r3, #4]
 8006cd4:	23a0      	movs	r3, #160	; 0xa0
 8006cd6:	02db      	lsls	r3, r3, #11
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d10e      	bne.n	8006cfa <HAL_RCC_OscConfig+0xa2>
 8006cdc:	4ba9      	ldr	r3, [pc, #676]	; (8006f84 <HAL_RCC_OscConfig+0x32c>)
 8006cde:	681a      	ldr	r2, [r3, #0]
 8006ce0:	4ba8      	ldr	r3, [pc, #672]	; (8006f84 <HAL_RCC_OscConfig+0x32c>)
 8006ce2:	2180      	movs	r1, #128	; 0x80
 8006ce4:	02c9      	lsls	r1, r1, #11
 8006ce6:	430a      	orrs	r2, r1
 8006ce8:	601a      	str	r2, [r3, #0]
 8006cea:	4ba6      	ldr	r3, [pc, #664]	; (8006f84 <HAL_RCC_OscConfig+0x32c>)
 8006cec:	681a      	ldr	r2, [r3, #0]
 8006cee:	4ba5      	ldr	r3, [pc, #660]	; (8006f84 <HAL_RCC_OscConfig+0x32c>)
 8006cf0:	2180      	movs	r1, #128	; 0x80
 8006cf2:	0249      	lsls	r1, r1, #9
 8006cf4:	430a      	orrs	r2, r1
 8006cf6:	601a      	str	r2, [r3, #0]
 8006cf8:	e00b      	b.n	8006d12 <HAL_RCC_OscConfig+0xba>
 8006cfa:	4ba2      	ldr	r3, [pc, #648]	; (8006f84 <HAL_RCC_OscConfig+0x32c>)
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	4ba1      	ldr	r3, [pc, #644]	; (8006f84 <HAL_RCC_OscConfig+0x32c>)
 8006d00:	49a1      	ldr	r1, [pc, #644]	; (8006f88 <HAL_RCC_OscConfig+0x330>)
 8006d02:	400a      	ands	r2, r1
 8006d04:	601a      	str	r2, [r3, #0]
 8006d06:	4b9f      	ldr	r3, [pc, #636]	; (8006f84 <HAL_RCC_OscConfig+0x32c>)
 8006d08:	681a      	ldr	r2, [r3, #0]
 8006d0a:	4b9e      	ldr	r3, [pc, #632]	; (8006f84 <HAL_RCC_OscConfig+0x32c>)
 8006d0c:	499f      	ldr	r1, [pc, #636]	; (8006f8c <HAL_RCC_OscConfig+0x334>)
 8006d0e:	400a      	ands	r2, r1
 8006d10:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d014      	beq.n	8006d44 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d1a:	f7fd fd27 	bl	800476c <HAL_GetTick>
 8006d1e:	0003      	movs	r3, r0
 8006d20:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006d22:	e008      	b.n	8006d36 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d24:	f7fd fd22 	bl	800476c <HAL_GetTick>
 8006d28:	0002      	movs	r2, r0
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	1ad3      	subs	r3, r2, r3
 8006d2e:	2b64      	cmp	r3, #100	; 0x64
 8006d30:	d901      	bls.n	8006d36 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8006d32:	2303      	movs	r3, #3
 8006d34:	e28d      	b.n	8007252 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006d36:	4b93      	ldr	r3, [pc, #588]	; (8006f84 <HAL_RCC_OscConfig+0x32c>)
 8006d38:	681a      	ldr	r2, [r3, #0]
 8006d3a:	2380      	movs	r3, #128	; 0x80
 8006d3c:	029b      	lsls	r3, r3, #10
 8006d3e:	4013      	ands	r3, r2
 8006d40:	d0f0      	beq.n	8006d24 <HAL_RCC_OscConfig+0xcc>
 8006d42:	e015      	b.n	8006d70 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d44:	f7fd fd12 	bl	800476c <HAL_GetTick>
 8006d48:	0003      	movs	r3, r0
 8006d4a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006d4c:	e008      	b.n	8006d60 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d4e:	f7fd fd0d 	bl	800476c <HAL_GetTick>
 8006d52:	0002      	movs	r2, r0
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	1ad3      	subs	r3, r2, r3
 8006d58:	2b64      	cmp	r3, #100	; 0x64
 8006d5a:	d901      	bls.n	8006d60 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8006d5c:	2303      	movs	r3, #3
 8006d5e:	e278      	b.n	8007252 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006d60:	4b88      	ldr	r3, [pc, #544]	; (8006f84 <HAL_RCC_OscConfig+0x32c>)
 8006d62:	681a      	ldr	r2, [r3, #0]
 8006d64:	2380      	movs	r3, #128	; 0x80
 8006d66:	029b      	lsls	r3, r3, #10
 8006d68:	4013      	ands	r3, r2
 8006d6a:	d1f0      	bne.n	8006d4e <HAL_RCC_OscConfig+0xf6>
 8006d6c:	e000      	b.n	8006d70 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d6e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	2202      	movs	r2, #2
 8006d76:	4013      	ands	r3, r2
 8006d78:	d100      	bne.n	8006d7c <HAL_RCC_OscConfig+0x124>
 8006d7a:	e099      	b.n	8006eb0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006d7c:	4b81      	ldr	r3, [pc, #516]	; (8006f84 <HAL_RCC_OscConfig+0x32c>)
 8006d7e:	689b      	ldr	r3, [r3, #8]
 8006d80:	2238      	movs	r2, #56	; 0x38
 8006d82:	4013      	ands	r3, r2
 8006d84:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006d86:	4b7f      	ldr	r3, [pc, #508]	; (8006f84 <HAL_RCC_OscConfig+0x32c>)
 8006d88:	68db      	ldr	r3, [r3, #12]
 8006d8a:	2203      	movs	r2, #3
 8006d8c:	4013      	ands	r3, r2
 8006d8e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8006d90:	69bb      	ldr	r3, [r7, #24]
 8006d92:	2b10      	cmp	r3, #16
 8006d94:	d102      	bne.n	8006d9c <HAL_RCC_OscConfig+0x144>
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	2b02      	cmp	r3, #2
 8006d9a:	d002      	beq.n	8006da2 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8006d9c:	69bb      	ldr	r3, [r7, #24]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d135      	bne.n	8006e0e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006da2:	4b78      	ldr	r3, [pc, #480]	; (8006f84 <HAL_RCC_OscConfig+0x32c>)
 8006da4:	681a      	ldr	r2, [r3, #0]
 8006da6:	2380      	movs	r3, #128	; 0x80
 8006da8:	00db      	lsls	r3, r3, #3
 8006daa:	4013      	ands	r3, r2
 8006dac:	d005      	beq.n	8006dba <HAL_RCC_OscConfig+0x162>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	68db      	ldr	r3, [r3, #12]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d101      	bne.n	8006dba <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8006db6:	2301      	movs	r3, #1
 8006db8:	e24b      	b.n	8007252 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006dba:	4b72      	ldr	r3, [pc, #456]	; (8006f84 <HAL_RCC_OscConfig+0x32c>)
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	4a74      	ldr	r2, [pc, #464]	; (8006f90 <HAL_RCC_OscConfig+0x338>)
 8006dc0:	4013      	ands	r3, r2
 8006dc2:	0019      	movs	r1, r3
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	695b      	ldr	r3, [r3, #20]
 8006dc8:	021a      	lsls	r2, r3, #8
 8006dca:	4b6e      	ldr	r3, [pc, #440]	; (8006f84 <HAL_RCC_OscConfig+0x32c>)
 8006dcc:	430a      	orrs	r2, r1
 8006dce:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006dd0:	69bb      	ldr	r3, [r7, #24]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d112      	bne.n	8006dfc <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8006dd6:	4b6b      	ldr	r3, [pc, #428]	; (8006f84 <HAL_RCC_OscConfig+0x32c>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a6e      	ldr	r2, [pc, #440]	; (8006f94 <HAL_RCC_OscConfig+0x33c>)
 8006ddc:	4013      	ands	r3, r2
 8006dde:	0019      	movs	r1, r3
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	691a      	ldr	r2, [r3, #16]
 8006de4:	4b67      	ldr	r3, [pc, #412]	; (8006f84 <HAL_RCC_OscConfig+0x32c>)
 8006de6:	430a      	orrs	r2, r1
 8006de8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8006dea:	4b66      	ldr	r3, [pc, #408]	; (8006f84 <HAL_RCC_OscConfig+0x32c>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	0adb      	lsrs	r3, r3, #11
 8006df0:	2207      	movs	r2, #7
 8006df2:	4013      	ands	r3, r2
 8006df4:	4a68      	ldr	r2, [pc, #416]	; (8006f98 <HAL_RCC_OscConfig+0x340>)
 8006df6:	40da      	lsrs	r2, r3
 8006df8:	4b68      	ldr	r3, [pc, #416]	; (8006f9c <HAL_RCC_OscConfig+0x344>)
 8006dfa:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006dfc:	4b68      	ldr	r3, [pc, #416]	; (8006fa0 <HAL_RCC_OscConfig+0x348>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	0018      	movs	r0, r3
 8006e02:	f7fd fc57 	bl	80046b4 <HAL_InitTick>
 8006e06:	1e03      	subs	r3, r0, #0
 8006e08:	d051      	beq.n	8006eae <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	e221      	b.n	8007252 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	68db      	ldr	r3, [r3, #12]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d030      	beq.n	8006e78 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8006e16:	4b5b      	ldr	r3, [pc, #364]	; (8006f84 <HAL_RCC_OscConfig+0x32c>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a5e      	ldr	r2, [pc, #376]	; (8006f94 <HAL_RCC_OscConfig+0x33c>)
 8006e1c:	4013      	ands	r3, r2
 8006e1e:	0019      	movs	r1, r3
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	691a      	ldr	r2, [r3, #16]
 8006e24:	4b57      	ldr	r3, [pc, #348]	; (8006f84 <HAL_RCC_OscConfig+0x32c>)
 8006e26:	430a      	orrs	r2, r1
 8006e28:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8006e2a:	4b56      	ldr	r3, [pc, #344]	; (8006f84 <HAL_RCC_OscConfig+0x32c>)
 8006e2c:	681a      	ldr	r2, [r3, #0]
 8006e2e:	4b55      	ldr	r3, [pc, #340]	; (8006f84 <HAL_RCC_OscConfig+0x32c>)
 8006e30:	2180      	movs	r1, #128	; 0x80
 8006e32:	0049      	lsls	r1, r1, #1
 8006e34:	430a      	orrs	r2, r1
 8006e36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e38:	f7fd fc98 	bl	800476c <HAL_GetTick>
 8006e3c:	0003      	movs	r3, r0
 8006e3e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006e40:	e008      	b.n	8006e54 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e42:	f7fd fc93 	bl	800476c <HAL_GetTick>
 8006e46:	0002      	movs	r2, r0
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	1ad3      	subs	r3, r2, r3
 8006e4c:	2b02      	cmp	r3, #2
 8006e4e:	d901      	bls.n	8006e54 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8006e50:	2303      	movs	r3, #3
 8006e52:	e1fe      	b.n	8007252 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006e54:	4b4b      	ldr	r3, [pc, #300]	; (8006f84 <HAL_RCC_OscConfig+0x32c>)
 8006e56:	681a      	ldr	r2, [r3, #0]
 8006e58:	2380      	movs	r3, #128	; 0x80
 8006e5a:	00db      	lsls	r3, r3, #3
 8006e5c:	4013      	ands	r3, r2
 8006e5e:	d0f0      	beq.n	8006e42 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e60:	4b48      	ldr	r3, [pc, #288]	; (8006f84 <HAL_RCC_OscConfig+0x32c>)
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	4a4a      	ldr	r2, [pc, #296]	; (8006f90 <HAL_RCC_OscConfig+0x338>)
 8006e66:	4013      	ands	r3, r2
 8006e68:	0019      	movs	r1, r3
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	695b      	ldr	r3, [r3, #20]
 8006e6e:	021a      	lsls	r2, r3, #8
 8006e70:	4b44      	ldr	r3, [pc, #272]	; (8006f84 <HAL_RCC_OscConfig+0x32c>)
 8006e72:	430a      	orrs	r2, r1
 8006e74:	605a      	str	r2, [r3, #4]
 8006e76:	e01b      	b.n	8006eb0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8006e78:	4b42      	ldr	r3, [pc, #264]	; (8006f84 <HAL_RCC_OscConfig+0x32c>)
 8006e7a:	681a      	ldr	r2, [r3, #0]
 8006e7c:	4b41      	ldr	r3, [pc, #260]	; (8006f84 <HAL_RCC_OscConfig+0x32c>)
 8006e7e:	4949      	ldr	r1, [pc, #292]	; (8006fa4 <HAL_RCC_OscConfig+0x34c>)
 8006e80:	400a      	ands	r2, r1
 8006e82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e84:	f7fd fc72 	bl	800476c <HAL_GetTick>
 8006e88:	0003      	movs	r3, r0
 8006e8a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006e8c:	e008      	b.n	8006ea0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e8e:	f7fd fc6d 	bl	800476c <HAL_GetTick>
 8006e92:	0002      	movs	r2, r0
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	1ad3      	subs	r3, r2, r3
 8006e98:	2b02      	cmp	r3, #2
 8006e9a:	d901      	bls.n	8006ea0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8006e9c:	2303      	movs	r3, #3
 8006e9e:	e1d8      	b.n	8007252 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006ea0:	4b38      	ldr	r3, [pc, #224]	; (8006f84 <HAL_RCC_OscConfig+0x32c>)
 8006ea2:	681a      	ldr	r2, [r3, #0]
 8006ea4:	2380      	movs	r3, #128	; 0x80
 8006ea6:	00db      	lsls	r3, r3, #3
 8006ea8:	4013      	ands	r3, r2
 8006eaa:	d1f0      	bne.n	8006e8e <HAL_RCC_OscConfig+0x236>
 8006eac:	e000      	b.n	8006eb0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006eae:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	2208      	movs	r2, #8
 8006eb6:	4013      	ands	r3, r2
 8006eb8:	d047      	beq.n	8006f4a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8006eba:	4b32      	ldr	r3, [pc, #200]	; (8006f84 <HAL_RCC_OscConfig+0x32c>)
 8006ebc:	689b      	ldr	r3, [r3, #8]
 8006ebe:	2238      	movs	r2, #56	; 0x38
 8006ec0:	4013      	ands	r3, r2
 8006ec2:	2b18      	cmp	r3, #24
 8006ec4:	d10a      	bne.n	8006edc <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8006ec6:	4b2f      	ldr	r3, [pc, #188]	; (8006f84 <HAL_RCC_OscConfig+0x32c>)
 8006ec8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006eca:	2202      	movs	r2, #2
 8006ecc:	4013      	ands	r3, r2
 8006ece:	d03c      	beq.n	8006f4a <HAL_RCC_OscConfig+0x2f2>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	699b      	ldr	r3, [r3, #24]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d138      	bne.n	8006f4a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	e1ba      	b.n	8007252 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	699b      	ldr	r3, [r3, #24]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d019      	beq.n	8006f18 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8006ee4:	4b27      	ldr	r3, [pc, #156]	; (8006f84 <HAL_RCC_OscConfig+0x32c>)
 8006ee6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006ee8:	4b26      	ldr	r3, [pc, #152]	; (8006f84 <HAL_RCC_OscConfig+0x32c>)
 8006eea:	2101      	movs	r1, #1
 8006eec:	430a      	orrs	r2, r1
 8006eee:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ef0:	f7fd fc3c 	bl	800476c <HAL_GetTick>
 8006ef4:	0003      	movs	r3, r0
 8006ef6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006ef8:	e008      	b.n	8006f0c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006efa:	f7fd fc37 	bl	800476c <HAL_GetTick>
 8006efe:	0002      	movs	r2, r0
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	1ad3      	subs	r3, r2, r3
 8006f04:	2b02      	cmp	r3, #2
 8006f06:	d901      	bls.n	8006f0c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8006f08:	2303      	movs	r3, #3
 8006f0a:	e1a2      	b.n	8007252 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006f0c:	4b1d      	ldr	r3, [pc, #116]	; (8006f84 <HAL_RCC_OscConfig+0x32c>)
 8006f0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f10:	2202      	movs	r2, #2
 8006f12:	4013      	ands	r3, r2
 8006f14:	d0f1      	beq.n	8006efa <HAL_RCC_OscConfig+0x2a2>
 8006f16:	e018      	b.n	8006f4a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8006f18:	4b1a      	ldr	r3, [pc, #104]	; (8006f84 <HAL_RCC_OscConfig+0x32c>)
 8006f1a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006f1c:	4b19      	ldr	r3, [pc, #100]	; (8006f84 <HAL_RCC_OscConfig+0x32c>)
 8006f1e:	2101      	movs	r1, #1
 8006f20:	438a      	bics	r2, r1
 8006f22:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f24:	f7fd fc22 	bl	800476c <HAL_GetTick>
 8006f28:	0003      	movs	r3, r0
 8006f2a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006f2c:	e008      	b.n	8006f40 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f2e:	f7fd fc1d 	bl	800476c <HAL_GetTick>
 8006f32:	0002      	movs	r2, r0
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	1ad3      	subs	r3, r2, r3
 8006f38:	2b02      	cmp	r3, #2
 8006f3a:	d901      	bls.n	8006f40 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8006f3c:	2303      	movs	r3, #3
 8006f3e:	e188      	b.n	8007252 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006f40:	4b10      	ldr	r3, [pc, #64]	; (8006f84 <HAL_RCC_OscConfig+0x32c>)
 8006f42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f44:	2202      	movs	r2, #2
 8006f46:	4013      	ands	r3, r2
 8006f48:	d1f1      	bne.n	8006f2e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	2204      	movs	r2, #4
 8006f50:	4013      	ands	r3, r2
 8006f52:	d100      	bne.n	8006f56 <HAL_RCC_OscConfig+0x2fe>
 8006f54:	e0c6      	b.n	80070e4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f56:	231f      	movs	r3, #31
 8006f58:	18fb      	adds	r3, r7, r3
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8006f5e:	4b09      	ldr	r3, [pc, #36]	; (8006f84 <HAL_RCC_OscConfig+0x32c>)
 8006f60:	689b      	ldr	r3, [r3, #8]
 8006f62:	2238      	movs	r2, #56	; 0x38
 8006f64:	4013      	ands	r3, r2
 8006f66:	2b20      	cmp	r3, #32
 8006f68:	d11e      	bne.n	8006fa8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8006f6a:	4b06      	ldr	r3, [pc, #24]	; (8006f84 <HAL_RCC_OscConfig+0x32c>)
 8006f6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f6e:	2202      	movs	r2, #2
 8006f70:	4013      	ands	r3, r2
 8006f72:	d100      	bne.n	8006f76 <HAL_RCC_OscConfig+0x31e>
 8006f74:	e0b6      	b.n	80070e4 <HAL_RCC_OscConfig+0x48c>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	689b      	ldr	r3, [r3, #8]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d000      	beq.n	8006f80 <HAL_RCC_OscConfig+0x328>
 8006f7e:	e0b1      	b.n	80070e4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8006f80:	2301      	movs	r3, #1
 8006f82:	e166      	b.n	8007252 <HAL_RCC_OscConfig+0x5fa>
 8006f84:	40021000 	.word	0x40021000
 8006f88:	fffeffff 	.word	0xfffeffff
 8006f8c:	fffbffff 	.word	0xfffbffff
 8006f90:	ffff80ff 	.word	0xffff80ff
 8006f94:	ffffc7ff 	.word	0xffffc7ff
 8006f98:	00f42400 	.word	0x00f42400
 8006f9c:	20000008 	.word	0x20000008
 8006fa0:	2000000c 	.word	0x2000000c
 8006fa4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006fa8:	4bac      	ldr	r3, [pc, #688]	; (800725c <HAL_RCC_OscConfig+0x604>)
 8006faa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006fac:	2380      	movs	r3, #128	; 0x80
 8006fae:	055b      	lsls	r3, r3, #21
 8006fb0:	4013      	ands	r3, r2
 8006fb2:	d101      	bne.n	8006fb8 <HAL_RCC_OscConfig+0x360>
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	e000      	b.n	8006fba <HAL_RCC_OscConfig+0x362>
 8006fb8:	2300      	movs	r3, #0
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d011      	beq.n	8006fe2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8006fbe:	4ba7      	ldr	r3, [pc, #668]	; (800725c <HAL_RCC_OscConfig+0x604>)
 8006fc0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006fc2:	4ba6      	ldr	r3, [pc, #664]	; (800725c <HAL_RCC_OscConfig+0x604>)
 8006fc4:	2180      	movs	r1, #128	; 0x80
 8006fc6:	0549      	lsls	r1, r1, #21
 8006fc8:	430a      	orrs	r2, r1
 8006fca:	63da      	str	r2, [r3, #60]	; 0x3c
 8006fcc:	4ba3      	ldr	r3, [pc, #652]	; (800725c <HAL_RCC_OscConfig+0x604>)
 8006fce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006fd0:	2380      	movs	r3, #128	; 0x80
 8006fd2:	055b      	lsls	r3, r3, #21
 8006fd4:	4013      	ands	r3, r2
 8006fd6:	60fb      	str	r3, [r7, #12]
 8006fd8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8006fda:	231f      	movs	r3, #31
 8006fdc:	18fb      	adds	r3, r7, r3
 8006fde:	2201      	movs	r2, #1
 8006fe0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006fe2:	4b9f      	ldr	r3, [pc, #636]	; (8007260 <HAL_RCC_OscConfig+0x608>)
 8006fe4:	681a      	ldr	r2, [r3, #0]
 8006fe6:	2380      	movs	r3, #128	; 0x80
 8006fe8:	005b      	lsls	r3, r3, #1
 8006fea:	4013      	ands	r3, r2
 8006fec:	d11a      	bne.n	8007024 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006fee:	4b9c      	ldr	r3, [pc, #624]	; (8007260 <HAL_RCC_OscConfig+0x608>)
 8006ff0:	681a      	ldr	r2, [r3, #0]
 8006ff2:	4b9b      	ldr	r3, [pc, #620]	; (8007260 <HAL_RCC_OscConfig+0x608>)
 8006ff4:	2180      	movs	r1, #128	; 0x80
 8006ff6:	0049      	lsls	r1, r1, #1
 8006ff8:	430a      	orrs	r2, r1
 8006ffa:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8006ffc:	f7fd fbb6 	bl	800476c <HAL_GetTick>
 8007000:	0003      	movs	r3, r0
 8007002:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007004:	e008      	b.n	8007018 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007006:	f7fd fbb1 	bl	800476c <HAL_GetTick>
 800700a:	0002      	movs	r2, r0
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	1ad3      	subs	r3, r2, r3
 8007010:	2b02      	cmp	r3, #2
 8007012:	d901      	bls.n	8007018 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8007014:	2303      	movs	r3, #3
 8007016:	e11c      	b.n	8007252 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007018:	4b91      	ldr	r3, [pc, #580]	; (8007260 <HAL_RCC_OscConfig+0x608>)
 800701a:	681a      	ldr	r2, [r3, #0]
 800701c:	2380      	movs	r3, #128	; 0x80
 800701e:	005b      	lsls	r3, r3, #1
 8007020:	4013      	ands	r3, r2
 8007022:	d0f0      	beq.n	8007006 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	689b      	ldr	r3, [r3, #8]
 8007028:	2b01      	cmp	r3, #1
 800702a:	d106      	bne.n	800703a <HAL_RCC_OscConfig+0x3e2>
 800702c:	4b8b      	ldr	r3, [pc, #556]	; (800725c <HAL_RCC_OscConfig+0x604>)
 800702e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007030:	4b8a      	ldr	r3, [pc, #552]	; (800725c <HAL_RCC_OscConfig+0x604>)
 8007032:	2101      	movs	r1, #1
 8007034:	430a      	orrs	r2, r1
 8007036:	65da      	str	r2, [r3, #92]	; 0x5c
 8007038:	e01c      	b.n	8007074 <HAL_RCC_OscConfig+0x41c>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	689b      	ldr	r3, [r3, #8]
 800703e:	2b05      	cmp	r3, #5
 8007040:	d10c      	bne.n	800705c <HAL_RCC_OscConfig+0x404>
 8007042:	4b86      	ldr	r3, [pc, #536]	; (800725c <HAL_RCC_OscConfig+0x604>)
 8007044:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007046:	4b85      	ldr	r3, [pc, #532]	; (800725c <HAL_RCC_OscConfig+0x604>)
 8007048:	2104      	movs	r1, #4
 800704a:	430a      	orrs	r2, r1
 800704c:	65da      	str	r2, [r3, #92]	; 0x5c
 800704e:	4b83      	ldr	r3, [pc, #524]	; (800725c <HAL_RCC_OscConfig+0x604>)
 8007050:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007052:	4b82      	ldr	r3, [pc, #520]	; (800725c <HAL_RCC_OscConfig+0x604>)
 8007054:	2101      	movs	r1, #1
 8007056:	430a      	orrs	r2, r1
 8007058:	65da      	str	r2, [r3, #92]	; 0x5c
 800705a:	e00b      	b.n	8007074 <HAL_RCC_OscConfig+0x41c>
 800705c:	4b7f      	ldr	r3, [pc, #508]	; (800725c <HAL_RCC_OscConfig+0x604>)
 800705e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007060:	4b7e      	ldr	r3, [pc, #504]	; (800725c <HAL_RCC_OscConfig+0x604>)
 8007062:	2101      	movs	r1, #1
 8007064:	438a      	bics	r2, r1
 8007066:	65da      	str	r2, [r3, #92]	; 0x5c
 8007068:	4b7c      	ldr	r3, [pc, #496]	; (800725c <HAL_RCC_OscConfig+0x604>)
 800706a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800706c:	4b7b      	ldr	r3, [pc, #492]	; (800725c <HAL_RCC_OscConfig+0x604>)
 800706e:	2104      	movs	r1, #4
 8007070:	438a      	bics	r2, r1
 8007072:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	689b      	ldr	r3, [r3, #8]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d014      	beq.n	80070a6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800707c:	f7fd fb76 	bl	800476c <HAL_GetTick>
 8007080:	0003      	movs	r3, r0
 8007082:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007084:	e009      	b.n	800709a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007086:	f7fd fb71 	bl	800476c <HAL_GetTick>
 800708a:	0002      	movs	r2, r0
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	1ad3      	subs	r3, r2, r3
 8007090:	4a74      	ldr	r2, [pc, #464]	; (8007264 <HAL_RCC_OscConfig+0x60c>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d901      	bls.n	800709a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8007096:	2303      	movs	r3, #3
 8007098:	e0db      	b.n	8007252 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800709a:	4b70      	ldr	r3, [pc, #448]	; (800725c <HAL_RCC_OscConfig+0x604>)
 800709c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800709e:	2202      	movs	r2, #2
 80070a0:	4013      	ands	r3, r2
 80070a2:	d0f0      	beq.n	8007086 <HAL_RCC_OscConfig+0x42e>
 80070a4:	e013      	b.n	80070ce <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070a6:	f7fd fb61 	bl	800476c <HAL_GetTick>
 80070aa:	0003      	movs	r3, r0
 80070ac:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80070ae:	e009      	b.n	80070c4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80070b0:	f7fd fb5c 	bl	800476c <HAL_GetTick>
 80070b4:	0002      	movs	r2, r0
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	1ad3      	subs	r3, r2, r3
 80070ba:	4a6a      	ldr	r2, [pc, #424]	; (8007264 <HAL_RCC_OscConfig+0x60c>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d901      	bls.n	80070c4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80070c0:	2303      	movs	r3, #3
 80070c2:	e0c6      	b.n	8007252 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80070c4:	4b65      	ldr	r3, [pc, #404]	; (800725c <HAL_RCC_OscConfig+0x604>)
 80070c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070c8:	2202      	movs	r2, #2
 80070ca:	4013      	ands	r3, r2
 80070cc:	d1f0      	bne.n	80070b0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80070ce:	231f      	movs	r3, #31
 80070d0:	18fb      	adds	r3, r7, r3
 80070d2:	781b      	ldrb	r3, [r3, #0]
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	d105      	bne.n	80070e4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80070d8:	4b60      	ldr	r3, [pc, #384]	; (800725c <HAL_RCC_OscConfig+0x604>)
 80070da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80070dc:	4b5f      	ldr	r3, [pc, #380]	; (800725c <HAL_RCC_OscConfig+0x604>)
 80070de:	4962      	ldr	r1, [pc, #392]	; (8007268 <HAL_RCC_OscConfig+0x610>)
 80070e0:	400a      	ands	r2, r1
 80070e2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	69db      	ldr	r3, [r3, #28]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d100      	bne.n	80070ee <HAL_RCC_OscConfig+0x496>
 80070ec:	e0b0      	b.n	8007250 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80070ee:	4b5b      	ldr	r3, [pc, #364]	; (800725c <HAL_RCC_OscConfig+0x604>)
 80070f0:	689b      	ldr	r3, [r3, #8]
 80070f2:	2238      	movs	r2, #56	; 0x38
 80070f4:	4013      	ands	r3, r2
 80070f6:	2b10      	cmp	r3, #16
 80070f8:	d100      	bne.n	80070fc <HAL_RCC_OscConfig+0x4a4>
 80070fa:	e078      	b.n	80071ee <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	69db      	ldr	r3, [r3, #28]
 8007100:	2b02      	cmp	r3, #2
 8007102:	d153      	bne.n	80071ac <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007104:	4b55      	ldr	r3, [pc, #340]	; (800725c <HAL_RCC_OscConfig+0x604>)
 8007106:	681a      	ldr	r2, [r3, #0]
 8007108:	4b54      	ldr	r3, [pc, #336]	; (800725c <HAL_RCC_OscConfig+0x604>)
 800710a:	4958      	ldr	r1, [pc, #352]	; (800726c <HAL_RCC_OscConfig+0x614>)
 800710c:	400a      	ands	r2, r1
 800710e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007110:	f7fd fb2c 	bl	800476c <HAL_GetTick>
 8007114:	0003      	movs	r3, r0
 8007116:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007118:	e008      	b.n	800712c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800711a:	f7fd fb27 	bl	800476c <HAL_GetTick>
 800711e:	0002      	movs	r2, r0
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	1ad3      	subs	r3, r2, r3
 8007124:	2b02      	cmp	r3, #2
 8007126:	d901      	bls.n	800712c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8007128:	2303      	movs	r3, #3
 800712a:	e092      	b.n	8007252 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800712c:	4b4b      	ldr	r3, [pc, #300]	; (800725c <HAL_RCC_OscConfig+0x604>)
 800712e:	681a      	ldr	r2, [r3, #0]
 8007130:	2380      	movs	r3, #128	; 0x80
 8007132:	049b      	lsls	r3, r3, #18
 8007134:	4013      	ands	r3, r2
 8007136:	d1f0      	bne.n	800711a <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007138:	4b48      	ldr	r3, [pc, #288]	; (800725c <HAL_RCC_OscConfig+0x604>)
 800713a:	68db      	ldr	r3, [r3, #12]
 800713c:	4a4c      	ldr	r2, [pc, #304]	; (8007270 <HAL_RCC_OscConfig+0x618>)
 800713e:	4013      	ands	r3, r2
 8007140:	0019      	movs	r1, r3
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6a1a      	ldr	r2, [r3, #32]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800714a:	431a      	orrs	r2, r3
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007150:	021b      	lsls	r3, r3, #8
 8007152:	431a      	orrs	r2, r3
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007158:	431a      	orrs	r2, r3
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800715e:	431a      	orrs	r2, r3
 8007160:	4b3e      	ldr	r3, [pc, #248]	; (800725c <HAL_RCC_OscConfig+0x604>)
 8007162:	430a      	orrs	r2, r1
 8007164:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007166:	4b3d      	ldr	r3, [pc, #244]	; (800725c <HAL_RCC_OscConfig+0x604>)
 8007168:	681a      	ldr	r2, [r3, #0]
 800716a:	4b3c      	ldr	r3, [pc, #240]	; (800725c <HAL_RCC_OscConfig+0x604>)
 800716c:	2180      	movs	r1, #128	; 0x80
 800716e:	0449      	lsls	r1, r1, #17
 8007170:	430a      	orrs	r2, r1
 8007172:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8007174:	4b39      	ldr	r3, [pc, #228]	; (800725c <HAL_RCC_OscConfig+0x604>)
 8007176:	68da      	ldr	r2, [r3, #12]
 8007178:	4b38      	ldr	r3, [pc, #224]	; (800725c <HAL_RCC_OscConfig+0x604>)
 800717a:	2180      	movs	r1, #128	; 0x80
 800717c:	0549      	lsls	r1, r1, #21
 800717e:	430a      	orrs	r2, r1
 8007180:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007182:	f7fd faf3 	bl	800476c <HAL_GetTick>
 8007186:	0003      	movs	r3, r0
 8007188:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800718a:	e008      	b.n	800719e <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800718c:	f7fd faee 	bl	800476c <HAL_GetTick>
 8007190:	0002      	movs	r2, r0
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	1ad3      	subs	r3, r2, r3
 8007196:	2b02      	cmp	r3, #2
 8007198:	d901      	bls.n	800719e <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800719a:	2303      	movs	r3, #3
 800719c:	e059      	b.n	8007252 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800719e:	4b2f      	ldr	r3, [pc, #188]	; (800725c <HAL_RCC_OscConfig+0x604>)
 80071a0:	681a      	ldr	r2, [r3, #0]
 80071a2:	2380      	movs	r3, #128	; 0x80
 80071a4:	049b      	lsls	r3, r3, #18
 80071a6:	4013      	ands	r3, r2
 80071a8:	d0f0      	beq.n	800718c <HAL_RCC_OscConfig+0x534>
 80071aa:	e051      	b.n	8007250 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071ac:	4b2b      	ldr	r3, [pc, #172]	; (800725c <HAL_RCC_OscConfig+0x604>)
 80071ae:	681a      	ldr	r2, [r3, #0]
 80071b0:	4b2a      	ldr	r3, [pc, #168]	; (800725c <HAL_RCC_OscConfig+0x604>)
 80071b2:	492e      	ldr	r1, [pc, #184]	; (800726c <HAL_RCC_OscConfig+0x614>)
 80071b4:	400a      	ands	r2, r1
 80071b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071b8:	f7fd fad8 	bl	800476c <HAL_GetTick>
 80071bc:	0003      	movs	r3, r0
 80071be:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80071c0:	e008      	b.n	80071d4 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071c2:	f7fd fad3 	bl	800476c <HAL_GetTick>
 80071c6:	0002      	movs	r2, r0
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	1ad3      	subs	r3, r2, r3
 80071cc:	2b02      	cmp	r3, #2
 80071ce:	d901      	bls.n	80071d4 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80071d0:	2303      	movs	r3, #3
 80071d2:	e03e      	b.n	8007252 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80071d4:	4b21      	ldr	r3, [pc, #132]	; (800725c <HAL_RCC_OscConfig+0x604>)
 80071d6:	681a      	ldr	r2, [r3, #0]
 80071d8:	2380      	movs	r3, #128	; 0x80
 80071da:	049b      	lsls	r3, r3, #18
 80071dc:	4013      	ands	r3, r2
 80071de:	d1f0      	bne.n	80071c2 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80071e0:	4b1e      	ldr	r3, [pc, #120]	; (800725c <HAL_RCC_OscConfig+0x604>)
 80071e2:	68da      	ldr	r2, [r3, #12]
 80071e4:	4b1d      	ldr	r3, [pc, #116]	; (800725c <HAL_RCC_OscConfig+0x604>)
 80071e6:	4923      	ldr	r1, [pc, #140]	; (8007274 <HAL_RCC_OscConfig+0x61c>)
 80071e8:	400a      	ands	r2, r1
 80071ea:	60da      	str	r2, [r3, #12]
 80071ec:	e030      	b.n	8007250 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	69db      	ldr	r3, [r3, #28]
 80071f2:	2b01      	cmp	r3, #1
 80071f4:	d101      	bne.n	80071fa <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80071f6:	2301      	movs	r3, #1
 80071f8:	e02b      	b.n	8007252 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80071fa:	4b18      	ldr	r3, [pc, #96]	; (800725c <HAL_RCC_OscConfig+0x604>)
 80071fc:	68db      	ldr	r3, [r3, #12]
 80071fe:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	2203      	movs	r2, #3
 8007204:	401a      	ands	r2, r3
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6a1b      	ldr	r3, [r3, #32]
 800720a:	429a      	cmp	r2, r3
 800720c:	d11e      	bne.n	800724c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	2270      	movs	r2, #112	; 0x70
 8007212:	401a      	ands	r2, r3
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007218:	429a      	cmp	r2, r3
 800721a:	d117      	bne.n	800724c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800721c:	697a      	ldr	r2, [r7, #20]
 800721e:	23fe      	movs	r3, #254	; 0xfe
 8007220:	01db      	lsls	r3, r3, #7
 8007222:	401a      	ands	r2, r3
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007228:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800722a:	429a      	cmp	r2, r3
 800722c:	d10e      	bne.n	800724c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800722e:	697a      	ldr	r2, [r7, #20]
 8007230:	23f8      	movs	r3, #248	; 0xf8
 8007232:	039b      	lsls	r3, r3, #14
 8007234:	401a      	ands	r2, r3
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800723a:	429a      	cmp	r2, r3
 800723c:	d106      	bne.n	800724c <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	0f5b      	lsrs	r3, r3, #29
 8007242:	075a      	lsls	r2, r3, #29
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007248:	429a      	cmp	r2, r3
 800724a:	d001      	beq.n	8007250 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 800724c:	2301      	movs	r3, #1
 800724e:	e000      	b.n	8007252 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8007250:	2300      	movs	r3, #0
}
 8007252:	0018      	movs	r0, r3
 8007254:	46bd      	mov	sp, r7
 8007256:	b008      	add	sp, #32
 8007258:	bd80      	pop	{r7, pc}
 800725a:	46c0      	nop			; (mov r8, r8)
 800725c:	40021000 	.word	0x40021000
 8007260:	40007000 	.word	0x40007000
 8007264:	00001388 	.word	0x00001388
 8007268:	efffffff 	.word	0xefffffff
 800726c:	feffffff 	.word	0xfeffffff
 8007270:	1fc1808c 	.word	0x1fc1808c
 8007274:	effefffc 	.word	0xeffefffc

08007278 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b084      	sub	sp, #16
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
 8007280:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d101      	bne.n	800728c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007288:	2301      	movs	r3, #1
 800728a:	e0e9      	b.n	8007460 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800728c:	4b76      	ldr	r3, [pc, #472]	; (8007468 <HAL_RCC_ClockConfig+0x1f0>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	2207      	movs	r2, #7
 8007292:	4013      	ands	r3, r2
 8007294:	683a      	ldr	r2, [r7, #0]
 8007296:	429a      	cmp	r2, r3
 8007298:	d91e      	bls.n	80072d8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800729a:	4b73      	ldr	r3, [pc, #460]	; (8007468 <HAL_RCC_ClockConfig+0x1f0>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	2207      	movs	r2, #7
 80072a0:	4393      	bics	r3, r2
 80072a2:	0019      	movs	r1, r3
 80072a4:	4b70      	ldr	r3, [pc, #448]	; (8007468 <HAL_RCC_ClockConfig+0x1f0>)
 80072a6:	683a      	ldr	r2, [r7, #0]
 80072a8:	430a      	orrs	r2, r1
 80072aa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80072ac:	f7fd fa5e 	bl	800476c <HAL_GetTick>
 80072b0:	0003      	movs	r3, r0
 80072b2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80072b4:	e009      	b.n	80072ca <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80072b6:	f7fd fa59 	bl	800476c <HAL_GetTick>
 80072ba:	0002      	movs	r2, r0
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	1ad3      	subs	r3, r2, r3
 80072c0:	4a6a      	ldr	r2, [pc, #424]	; (800746c <HAL_RCC_ClockConfig+0x1f4>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d901      	bls.n	80072ca <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80072c6:	2303      	movs	r3, #3
 80072c8:	e0ca      	b.n	8007460 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80072ca:	4b67      	ldr	r3, [pc, #412]	; (8007468 <HAL_RCC_ClockConfig+0x1f0>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	2207      	movs	r2, #7
 80072d0:	4013      	ands	r3, r2
 80072d2:	683a      	ldr	r2, [r7, #0]
 80072d4:	429a      	cmp	r2, r3
 80072d6:	d1ee      	bne.n	80072b6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	2202      	movs	r2, #2
 80072de:	4013      	ands	r3, r2
 80072e0:	d015      	beq.n	800730e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	2204      	movs	r2, #4
 80072e8:	4013      	ands	r3, r2
 80072ea:	d006      	beq.n	80072fa <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80072ec:	4b60      	ldr	r3, [pc, #384]	; (8007470 <HAL_RCC_ClockConfig+0x1f8>)
 80072ee:	689a      	ldr	r2, [r3, #8]
 80072f0:	4b5f      	ldr	r3, [pc, #380]	; (8007470 <HAL_RCC_ClockConfig+0x1f8>)
 80072f2:	21e0      	movs	r1, #224	; 0xe0
 80072f4:	01c9      	lsls	r1, r1, #7
 80072f6:	430a      	orrs	r2, r1
 80072f8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80072fa:	4b5d      	ldr	r3, [pc, #372]	; (8007470 <HAL_RCC_ClockConfig+0x1f8>)
 80072fc:	689b      	ldr	r3, [r3, #8]
 80072fe:	4a5d      	ldr	r2, [pc, #372]	; (8007474 <HAL_RCC_ClockConfig+0x1fc>)
 8007300:	4013      	ands	r3, r2
 8007302:	0019      	movs	r1, r3
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	689a      	ldr	r2, [r3, #8]
 8007308:	4b59      	ldr	r3, [pc, #356]	; (8007470 <HAL_RCC_ClockConfig+0x1f8>)
 800730a:	430a      	orrs	r2, r1
 800730c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	2201      	movs	r2, #1
 8007314:	4013      	ands	r3, r2
 8007316:	d057      	beq.n	80073c8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	2b01      	cmp	r3, #1
 800731e:	d107      	bne.n	8007330 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007320:	4b53      	ldr	r3, [pc, #332]	; (8007470 <HAL_RCC_ClockConfig+0x1f8>)
 8007322:	681a      	ldr	r2, [r3, #0]
 8007324:	2380      	movs	r3, #128	; 0x80
 8007326:	029b      	lsls	r3, r3, #10
 8007328:	4013      	ands	r3, r2
 800732a:	d12b      	bne.n	8007384 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800732c:	2301      	movs	r3, #1
 800732e:	e097      	b.n	8007460 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	2b02      	cmp	r3, #2
 8007336:	d107      	bne.n	8007348 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007338:	4b4d      	ldr	r3, [pc, #308]	; (8007470 <HAL_RCC_ClockConfig+0x1f8>)
 800733a:	681a      	ldr	r2, [r3, #0]
 800733c:	2380      	movs	r3, #128	; 0x80
 800733e:	049b      	lsls	r3, r3, #18
 8007340:	4013      	ands	r3, r2
 8007342:	d11f      	bne.n	8007384 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007344:	2301      	movs	r3, #1
 8007346:	e08b      	b.n	8007460 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	685b      	ldr	r3, [r3, #4]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d107      	bne.n	8007360 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007350:	4b47      	ldr	r3, [pc, #284]	; (8007470 <HAL_RCC_ClockConfig+0x1f8>)
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	2380      	movs	r3, #128	; 0x80
 8007356:	00db      	lsls	r3, r3, #3
 8007358:	4013      	ands	r3, r2
 800735a:	d113      	bne.n	8007384 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800735c:	2301      	movs	r3, #1
 800735e:	e07f      	b.n	8007460 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	2b03      	cmp	r3, #3
 8007366:	d106      	bne.n	8007376 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007368:	4b41      	ldr	r3, [pc, #260]	; (8007470 <HAL_RCC_ClockConfig+0x1f8>)
 800736a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800736c:	2202      	movs	r2, #2
 800736e:	4013      	ands	r3, r2
 8007370:	d108      	bne.n	8007384 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007372:	2301      	movs	r3, #1
 8007374:	e074      	b.n	8007460 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007376:	4b3e      	ldr	r3, [pc, #248]	; (8007470 <HAL_RCC_ClockConfig+0x1f8>)
 8007378:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800737a:	2202      	movs	r2, #2
 800737c:	4013      	ands	r3, r2
 800737e:	d101      	bne.n	8007384 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007380:	2301      	movs	r3, #1
 8007382:	e06d      	b.n	8007460 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007384:	4b3a      	ldr	r3, [pc, #232]	; (8007470 <HAL_RCC_ClockConfig+0x1f8>)
 8007386:	689b      	ldr	r3, [r3, #8]
 8007388:	2207      	movs	r2, #7
 800738a:	4393      	bics	r3, r2
 800738c:	0019      	movs	r1, r3
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	685a      	ldr	r2, [r3, #4]
 8007392:	4b37      	ldr	r3, [pc, #220]	; (8007470 <HAL_RCC_ClockConfig+0x1f8>)
 8007394:	430a      	orrs	r2, r1
 8007396:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007398:	f7fd f9e8 	bl	800476c <HAL_GetTick>
 800739c:	0003      	movs	r3, r0
 800739e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80073a0:	e009      	b.n	80073b6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80073a2:	f7fd f9e3 	bl	800476c <HAL_GetTick>
 80073a6:	0002      	movs	r2, r0
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	1ad3      	subs	r3, r2, r3
 80073ac:	4a2f      	ldr	r2, [pc, #188]	; (800746c <HAL_RCC_ClockConfig+0x1f4>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d901      	bls.n	80073b6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80073b2:	2303      	movs	r3, #3
 80073b4:	e054      	b.n	8007460 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80073b6:	4b2e      	ldr	r3, [pc, #184]	; (8007470 <HAL_RCC_ClockConfig+0x1f8>)
 80073b8:	689b      	ldr	r3, [r3, #8]
 80073ba:	2238      	movs	r2, #56	; 0x38
 80073bc:	401a      	ands	r2, r3
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	685b      	ldr	r3, [r3, #4]
 80073c2:	00db      	lsls	r3, r3, #3
 80073c4:	429a      	cmp	r2, r3
 80073c6:	d1ec      	bne.n	80073a2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80073c8:	4b27      	ldr	r3, [pc, #156]	; (8007468 <HAL_RCC_ClockConfig+0x1f0>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	2207      	movs	r2, #7
 80073ce:	4013      	ands	r3, r2
 80073d0:	683a      	ldr	r2, [r7, #0]
 80073d2:	429a      	cmp	r2, r3
 80073d4:	d21e      	bcs.n	8007414 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80073d6:	4b24      	ldr	r3, [pc, #144]	; (8007468 <HAL_RCC_ClockConfig+0x1f0>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	2207      	movs	r2, #7
 80073dc:	4393      	bics	r3, r2
 80073de:	0019      	movs	r1, r3
 80073e0:	4b21      	ldr	r3, [pc, #132]	; (8007468 <HAL_RCC_ClockConfig+0x1f0>)
 80073e2:	683a      	ldr	r2, [r7, #0]
 80073e4:	430a      	orrs	r2, r1
 80073e6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80073e8:	f7fd f9c0 	bl	800476c <HAL_GetTick>
 80073ec:	0003      	movs	r3, r0
 80073ee:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80073f0:	e009      	b.n	8007406 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80073f2:	f7fd f9bb 	bl	800476c <HAL_GetTick>
 80073f6:	0002      	movs	r2, r0
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	1ad3      	subs	r3, r2, r3
 80073fc:	4a1b      	ldr	r2, [pc, #108]	; (800746c <HAL_RCC_ClockConfig+0x1f4>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d901      	bls.n	8007406 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8007402:	2303      	movs	r3, #3
 8007404:	e02c      	b.n	8007460 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007406:	4b18      	ldr	r3, [pc, #96]	; (8007468 <HAL_RCC_ClockConfig+0x1f0>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	2207      	movs	r2, #7
 800740c:	4013      	ands	r3, r2
 800740e:	683a      	ldr	r2, [r7, #0]
 8007410:	429a      	cmp	r2, r3
 8007412:	d1ee      	bne.n	80073f2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	2204      	movs	r2, #4
 800741a:	4013      	ands	r3, r2
 800741c:	d009      	beq.n	8007432 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800741e:	4b14      	ldr	r3, [pc, #80]	; (8007470 <HAL_RCC_ClockConfig+0x1f8>)
 8007420:	689b      	ldr	r3, [r3, #8]
 8007422:	4a15      	ldr	r2, [pc, #84]	; (8007478 <HAL_RCC_ClockConfig+0x200>)
 8007424:	4013      	ands	r3, r2
 8007426:	0019      	movs	r1, r3
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	68da      	ldr	r2, [r3, #12]
 800742c:	4b10      	ldr	r3, [pc, #64]	; (8007470 <HAL_RCC_ClockConfig+0x1f8>)
 800742e:	430a      	orrs	r2, r1
 8007430:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8007432:	f000 f829 	bl	8007488 <HAL_RCC_GetSysClockFreq>
 8007436:	0001      	movs	r1, r0
 8007438:	4b0d      	ldr	r3, [pc, #52]	; (8007470 <HAL_RCC_ClockConfig+0x1f8>)
 800743a:	689b      	ldr	r3, [r3, #8]
 800743c:	0a1b      	lsrs	r3, r3, #8
 800743e:	220f      	movs	r2, #15
 8007440:	401a      	ands	r2, r3
 8007442:	4b0e      	ldr	r3, [pc, #56]	; (800747c <HAL_RCC_ClockConfig+0x204>)
 8007444:	0092      	lsls	r2, r2, #2
 8007446:	58d3      	ldr	r3, [r2, r3]
 8007448:	221f      	movs	r2, #31
 800744a:	4013      	ands	r3, r2
 800744c:	000a      	movs	r2, r1
 800744e:	40da      	lsrs	r2, r3
 8007450:	4b0b      	ldr	r3, [pc, #44]	; (8007480 <HAL_RCC_ClockConfig+0x208>)
 8007452:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007454:	4b0b      	ldr	r3, [pc, #44]	; (8007484 <HAL_RCC_ClockConfig+0x20c>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	0018      	movs	r0, r3
 800745a:	f7fd f92b 	bl	80046b4 <HAL_InitTick>
 800745e:	0003      	movs	r3, r0
}
 8007460:	0018      	movs	r0, r3
 8007462:	46bd      	mov	sp, r7
 8007464:	b004      	add	sp, #16
 8007466:	bd80      	pop	{r7, pc}
 8007468:	40022000 	.word	0x40022000
 800746c:	00001388 	.word	0x00001388
 8007470:	40021000 	.word	0x40021000
 8007474:	fffff0ff 	.word	0xfffff0ff
 8007478:	ffff8fff 	.word	0xffff8fff
 800747c:	080099cc 	.word	0x080099cc
 8007480:	20000008 	.word	0x20000008
 8007484:	2000000c 	.word	0x2000000c

08007488 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b086      	sub	sp, #24
 800748c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800748e:	4b3c      	ldr	r3, [pc, #240]	; (8007580 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007490:	689b      	ldr	r3, [r3, #8]
 8007492:	2238      	movs	r2, #56	; 0x38
 8007494:	4013      	ands	r3, r2
 8007496:	d10f      	bne.n	80074b8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8007498:	4b39      	ldr	r3, [pc, #228]	; (8007580 <HAL_RCC_GetSysClockFreq+0xf8>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	0adb      	lsrs	r3, r3, #11
 800749e:	2207      	movs	r2, #7
 80074a0:	4013      	ands	r3, r2
 80074a2:	2201      	movs	r2, #1
 80074a4:	409a      	lsls	r2, r3
 80074a6:	0013      	movs	r3, r2
 80074a8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80074aa:	6839      	ldr	r1, [r7, #0]
 80074ac:	4835      	ldr	r0, [pc, #212]	; (8007584 <HAL_RCC_GetSysClockFreq+0xfc>)
 80074ae:	f7f8 fe27 	bl	8000100 <__udivsi3>
 80074b2:	0003      	movs	r3, r0
 80074b4:	613b      	str	r3, [r7, #16]
 80074b6:	e05d      	b.n	8007574 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80074b8:	4b31      	ldr	r3, [pc, #196]	; (8007580 <HAL_RCC_GetSysClockFreq+0xf8>)
 80074ba:	689b      	ldr	r3, [r3, #8]
 80074bc:	2238      	movs	r2, #56	; 0x38
 80074be:	4013      	ands	r3, r2
 80074c0:	2b08      	cmp	r3, #8
 80074c2:	d102      	bne.n	80074ca <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80074c4:	4b30      	ldr	r3, [pc, #192]	; (8007588 <HAL_RCC_GetSysClockFreq+0x100>)
 80074c6:	613b      	str	r3, [r7, #16]
 80074c8:	e054      	b.n	8007574 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80074ca:	4b2d      	ldr	r3, [pc, #180]	; (8007580 <HAL_RCC_GetSysClockFreq+0xf8>)
 80074cc:	689b      	ldr	r3, [r3, #8]
 80074ce:	2238      	movs	r2, #56	; 0x38
 80074d0:	4013      	ands	r3, r2
 80074d2:	2b10      	cmp	r3, #16
 80074d4:	d138      	bne.n	8007548 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80074d6:	4b2a      	ldr	r3, [pc, #168]	; (8007580 <HAL_RCC_GetSysClockFreq+0xf8>)
 80074d8:	68db      	ldr	r3, [r3, #12]
 80074da:	2203      	movs	r2, #3
 80074dc:	4013      	ands	r3, r2
 80074de:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80074e0:	4b27      	ldr	r3, [pc, #156]	; (8007580 <HAL_RCC_GetSysClockFreq+0xf8>)
 80074e2:	68db      	ldr	r3, [r3, #12]
 80074e4:	091b      	lsrs	r3, r3, #4
 80074e6:	2207      	movs	r2, #7
 80074e8:	4013      	ands	r3, r2
 80074ea:	3301      	adds	r3, #1
 80074ec:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2b03      	cmp	r3, #3
 80074f2:	d10d      	bne.n	8007510 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80074f4:	68b9      	ldr	r1, [r7, #8]
 80074f6:	4824      	ldr	r0, [pc, #144]	; (8007588 <HAL_RCC_GetSysClockFreq+0x100>)
 80074f8:	f7f8 fe02 	bl	8000100 <__udivsi3>
 80074fc:	0003      	movs	r3, r0
 80074fe:	0019      	movs	r1, r3
 8007500:	4b1f      	ldr	r3, [pc, #124]	; (8007580 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007502:	68db      	ldr	r3, [r3, #12]
 8007504:	0a1b      	lsrs	r3, r3, #8
 8007506:	227f      	movs	r2, #127	; 0x7f
 8007508:	4013      	ands	r3, r2
 800750a:	434b      	muls	r3, r1
 800750c:	617b      	str	r3, [r7, #20]
        break;
 800750e:	e00d      	b.n	800752c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8007510:	68b9      	ldr	r1, [r7, #8]
 8007512:	481c      	ldr	r0, [pc, #112]	; (8007584 <HAL_RCC_GetSysClockFreq+0xfc>)
 8007514:	f7f8 fdf4 	bl	8000100 <__udivsi3>
 8007518:	0003      	movs	r3, r0
 800751a:	0019      	movs	r1, r3
 800751c:	4b18      	ldr	r3, [pc, #96]	; (8007580 <HAL_RCC_GetSysClockFreq+0xf8>)
 800751e:	68db      	ldr	r3, [r3, #12]
 8007520:	0a1b      	lsrs	r3, r3, #8
 8007522:	227f      	movs	r2, #127	; 0x7f
 8007524:	4013      	ands	r3, r2
 8007526:	434b      	muls	r3, r1
 8007528:	617b      	str	r3, [r7, #20]
        break;
 800752a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800752c:	4b14      	ldr	r3, [pc, #80]	; (8007580 <HAL_RCC_GetSysClockFreq+0xf8>)
 800752e:	68db      	ldr	r3, [r3, #12]
 8007530:	0f5b      	lsrs	r3, r3, #29
 8007532:	2207      	movs	r2, #7
 8007534:	4013      	ands	r3, r2
 8007536:	3301      	adds	r3, #1
 8007538:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800753a:	6879      	ldr	r1, [r7, #4]
 800753c:	6978      	ldr	r0, [r7, #20]
 800753e:	f7f8 fddf 	bl	8000100 <__udivsi3>
 8007542:	0003      	movs	r3, r0
 8007544:	613b      	str	r3, [r7, #16]
 8007546:	e015      	b.n	8007574 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8007548:	4b0d      	ldr	r3, [pc, #52]	; (8007580 <HAL_RCC_GetSysClockFreq+0xf8>)
 800754a:	689b      	ldr	r3, [r3, #8]
 800754c:	2238      	movs	r2, #56	; 0x38
 800754e:	4013      	ands	r3, r2
 8007550:	2b20      	cmp	r3, #32
 8007552:	d103      	bne.n	800755c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8007554:	2380      	movs	r3, #128	; 0x80
 8007556:	021b      	lsls	r3, r3, #8
 8007558:	613b      	str	r3, [r7, #16]
 800755a:	e00b      	b.n	8007574 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800755c:	4b08      	ldr	r3, [pc, #32]	; (8007580 <HAL_RCC_GetSysClockFreq+0xf8>)
 800755e:	689b      	ldr	r3, [r3, #8]
 8007560:	2238      	movs	r2, #56	; 0x38
 8007562:	4013      	ands	r3, r2
 8007564:	2b18      	cmp	r3, #24
 8007566:	d103      	bne.n	8007570 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8007568:	23fa      	movs	r3, #250	; 0xfa
 800756a:	01db      	lsls	r3, r3, #7
 800756c:	613b      	str	r3, [r7, #16]
 800756e:	e001      	b.n	8007574 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8007570:	2300      	movs	r3, #0
 8007572:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007574:	693b      	ldr	r3, [r7, #16]
}
 8007576:	0018      	movs	r0, r3
 8007578:	46bd      	mov	sp, r7
 800757a:	b006      	add	sp, #24
 800757c:	bd80      	pop	{r7, pc}
 800757e:	46c0      	nop			; (mov r8, r8)
 8007580:	40021000 	.word	0x40021000
 8007584:	00f42400 	.word	0x00f42400
 8007588:	007a1200 	.word	0x007a1200

0800758c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b086      	sub	sp, #24
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8007594:	2313      	movs	r3, #19
 8007596:	18fb      	adds	r3, r7, r3
 8007598:	2200      	movs	r2, #0
 800759a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800759c:	2312      	movs	r3, #18
 800759e:	18fb      	adds	r3, r7, r3
 80075a0:	2200      	movs	r2, #0
 80075a2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681a      	ldr	r2, [r3, #0]
 80075a8:	2380      	movs	r3, #128	; 0x80
 80075aa:	029b      	lsls	r3, r3, #10
 80075ac:	4013      	ands	r3, r2
 80075ae:	d100      	bne.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80075b0:	e0a3      	b.n	80076fa <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80075b2:	2011      	movs	r0, #17
 80075b4:	183b      	adds	r3, r7, r0
 80075b6:	2200      	movs	r2, #0
 80075b8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80075ba:	4b7f      	ldr	r3, [pc, #508]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80075bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80075be:	2380      	movs	r3, #128	; 0x80
 80075c0:	055b      	lsls	r3, r3, #21
 80075c2:	4013      	ands	r3, r2
 80075c4:	d110      	bne.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80075c6:	4b7c      	ldr	r3, [pc, #496]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80075c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80075ca:	4b7b      	ldr	r3, [pc, #492]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80075cc:	2180      	movs	r1, #128	; 0x80
 80075ce:	0549      	lsls	r1, r1, #21
 80075d0:	430a      	orrs	r2, r1
 80075d2:	63da      	str	r2, [r3, #60]	; 0x3c
 80075d4:	4b78      	ldr	r3, [pc, #480]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80075d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80075d8:	2380      	movs	r3, #128	; 0x80
 80075da:	055b      	lsls	r3, r3, #21
 80075dc:	4013      	ands	r3, r2
 80075de:	60bb      	str	r3, [r7, #8]
 80075e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80075e2:	183b      	adds	r3, r7, r0
 80075e4:	2201      	movs	r2, #1
 80075e6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80075e8:	4b74      	ldr	r3, [pc, #464]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80075ea:	681a      	ldr	r2, [r3, #0]
 80075ec:	4b73      	ldr	r3, [pc, #460]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80075ee:	2180      	movs	r1, #128	; 0x80
 80075f0:	0049      	lsls	r1, r1, #1
 80075f2:	430a      	orrs	r2, r1
 80075f4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80075f6:	f7fd f8b9 	bl	800476c <HAL_GetTick>
 80075fa:	0003      	movs	r3, r0
 80075fc:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80075fe:	e00b      	b.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007600:	f7fd f8b4 	bl	800476c <HAL_GetTick>
 8007604:	0002      	movs	r2, r0
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	1ad3      	subs	r3, r2, r3
 800760a:	2b02      	cmp	r3, #2
 800760c:	d904      	bls.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800760e:	2313      	movs	r3, #19
 8007610:	18fb      	adds	r3, r7, r3
 8007612:	2203      	movs	r2, #3
 8007614:	701a      	strb	r2, [r3, #0]
        break;
 8007616:	e005      	b.n	8007624 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007618:	4b68      	ldr	r3, [pc, #416]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800761a:	681a      	ldr	r2, [r3, #0]
 800761c:	2380      	movs	r3, #128	; 0x80
 800761e:	005b      	lsls	r3, r3, #1
 8007620:	4013      	ands	r3, r2
 8007622:	d0ed      	beq.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8007624:	2313      	movs	r3, #19
 8007626:	18fb      	adds	r3, r7, r3
 8007628:	781b      	ldrb	r3, [r3, #0]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d154      	bne.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800762e:	4b62      	ldr	r3, [pc, #392]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007630:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007632:	23c0      	movs	r3, #192	; 0xc0
 8007634:	009b      	lsls	r3, r3, #2
 8007636:	4013      	ands	r3, r2
 8007638:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d019      	beq.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	695b      	ldr	r3, [r3, #20]
 8007644:	697a      	ldr	r2, [r7, #20]
 8007646:	429a      	cmp	r2, r3
 8007648:	d014      	beq.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800764a:	4b5b      	ldr	r3, [pc, #364]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800764c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800764e:	4a5c      	ldr	r2, [pc, #368]	; (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8007650:	4013      	ands	r3, r2
 8007652:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007654:	4b58      	ldr	r3, [pc, #352]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007656:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007658:	4b57      	ldr	r3, [pc, #348]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800765a:	2180      	movs	r1, #128	; 0x80
 800765c:	0249      	lsls	r1, r1, #9
 800765e:	430a      	orrs	r2, r1
 8007660:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007662:	4b55      	ldr	r3, [pc, #340]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007664:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007666:	4b54      	ldr	r3, [pc, #336]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007668:	4956      	ldr	r1, [pc, #344]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 800766a:	400a      	ands	r2, r1
 800766c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800766e:	4b52      	ldr	r3, [pc, #328]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007670:	697a      	ldr	r2, [r7, #20]
 8007672:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	2201      	movs	r2, #1
 8007678:	4013      	ands	r3, r2
 800767a:	d016      	beq.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800767c:	f7fd f876 	bl	800476c <HAL_GetTick>
 8007680:	0003      	movs	r3, r0
 8007682:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007684:	e00c      	b.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007686:	f7fd f871 	bl	800476c <HAL_GetTick>
 800768a:	0002      	movs	r2, r0
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	1ad3      	subs	r3, r2, r3
 8007690:	4a4d      	ldr	r2, [pc, #308]	; (80077c8 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d904      	bls.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8007696:	2313      	movs	r3, #19
 8007698:	18fb      	adds	r3, r7, r3
 800769a:	2203      	movs	r2, #3
 800769c:	701a      	strb	r2, [r3, #0]
            break;
 800769e:	e004      	b.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80076a0:	4b45      	ldr	r3, [pc, #276]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80076a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076a4:	2202      	movs	r2, #2
 80076a6:	4013      	ands	r3, r2
 80076a8:	d0ed      	beq.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80076aa:	2313      	movs	r3, #19
 80076ac:	18fb      	adds	r3, r7, r3
 80076ae:	781b      	ldrb	r3, [r3, #0]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d10a      	bne.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80076b4:	4b40      	ldr	r3, [pc, #256]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80076b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076b8:	4a41      	ldr	r2, [pc, #260]	; (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80076ba:	4013      	ands	r3, r2
 80076bc:	0019      	movs	r1, r3
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	695a      	ldr	r2, [r3, #20]
 80076c2:	4b3d      	ldr	r3, [pc, #244]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80076c4:	430a      	orrs	r2, r1
 80076c6:	65da      	str	r2, [r3, #92]	; 0x5c
 80076c8:	e00c      	b.n	80076e4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80076ca:	2312      	movs	r3, #18
 80076cc:	18fb      	adds	r3, r7, r3
 80076ce:	2213      	movs	r2, #19
 80076d0:	18ba      	adds	r2, r7, r2
 80076d2:	7812      	ldrb	r2, [r2, #0]
 80076d4:	701a      	strb	r2, [r3, #0]
 80076d6:	e005      	b.n	80076e4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076d8:	2312      	movs	r3, #18
 80076da:	18fb      	adds	r3, r7, r3
 80076dc:	2213      	movs	r2, #19
 80076de:	18ba      	adds	r2, r7, r2
 80076e0:	7812      	ldrb	r2, [r2, #0]
 80076e2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80076e4:	2311      	movs	r3, #17
 80076e6:	18fb      	adds	r3, r7, r3
 80076e8:	781b      	ldrb	r3, [r3, #0]
 80076ea:	2b01      	cmp	r3, #1
 80076ec:	d105      	bne.n	80076fa <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80076ee:	4b32      	ldr	r3, [pc, #200]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80076f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80076f2:	4b31      	ldr	r3, [pc, #196]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80076f4:	4935      	ldr	r1, [pc, #212]	; (80077cc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80076f6:	400a      	ands	r2, r1
 80076f8:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	2201      	movs	r2, #1
 8007700:	4013      	ands	r3, r2
 8007702:	d009      	beq.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007704:	4b2c      	ldr	r3, [pc, #176]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007708:	2203      	movs	r2, #3
 800770a:	4393      	bics	r3, r2
 800770c:	0019      	movs	r1, r3
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	685a      	ldr	r2, [r3, #4]
 8007712:	4b29      	ldr	r3, [pc, #164]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007714:	430a      	orrs	r2, r1
 8007716:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	2220      	movs	r2, #32
 800771e:	4013      	ands	r3, r2
 8007720:	d009      	beq.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007722:	4b25      	ldr	r3, [pc, #148]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007726:	4a2a      	ldr	r2, [pc, #168]	; (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8007728:	4013      	ands	r3, r2
 800772a:	0019      	movs	r1, r3
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	689a      	ldr	r2, [r3, #8]
 8007730:	4b21      	ldr	r3, [pc, #132]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007732:	430a      	orrs	r2, r1
 8007734:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681a      	ldr	r2, [r3, #0]
 800773a:	2380      	movs	r3, #128	; 0x80
 800773c:	01db      	lsls	r3, r3, #7
 800773e:	4013      	ands	r3, r2
 8007740:	d015      	beq.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007742:	4b1d      	ldr	r3, [pc, #116]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007746:	009b      	lsls	r3, r3, #2
 8007748:	0899      	lsrs	r1, r3, #2
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	691a      	ldr	r2, [r3, #16]
 800774e:	4b1a      	ldr	r3, [pc, #104]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007750:	430a      	orrs	r2, r1
 8007752:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	691a      	ldr	r2, [r3, #16]
 8007758:	2380      	movs	r3, #128	; 0x80
 800775a:	05db      	lsls	r3, r3, #23
 800775c:	429a      	cmp	r2, r3
 800775e:	d106      	bne.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8007760:	4b15      	ldr	r3, [pc, #84]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007762:	68da      	ldr	r2, [r3, #12]
 8007764:	4b14      	ldr	r3, [pc, #80]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007766:	2180      	movs	r1, #128	; 0x80
 8007768:	0249      	lsls	r1, r1, #9
 800776a:	430a      	orrs	r2, r1
 800776c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681a      	ldr	r2, [r3, #0]
 8007772:	2380      	movs	r3, #128	; 0x80
 8007774:	011b      	lsls	r3, r3, #4
 8007776:	4013      	ands	r3, r2
 8007778:	d016      	beq.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800777a:	4b0f      	ldr	r3, [pc, #60]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800777c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800777e:	4a15      	ldr	r2, [pc, #84]	; (80077d4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007780:	4013      	ands	r3, r2
 8007782:	0019      	movs	r1, r3
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	68da      	ldr	r2, [r3, #12]
 8007788:	4b0b      	ldr	r3, [pc, #44]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800778a:	430a      	orrs	r2, r1
 800778c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	68da      	ldr	r2, [r3, #12]
 8007792:	2380      	movs	r3, #128	; 0x80
 8007794:	01db      	lsls	r3, r3, #7
 8007796:	429a      	cmp	r2, r3
 8007798:	d106      	bne.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800779a:	4b07      	ldr	r3, [pc, #28]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800779c:	68da      	ldr	r2, [r3, #12]
 800779e:	4b06      	ldr	r3, [pc, #24]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80077a0:	2180      	movs	r1, #128	; 0x80
 80077a2:	0249      	lsls	r1, r1, #9
 80077a4:	430a      	orrs	r2, r1
 80077a6:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80077a8:	2312      	movs	r3, #18
 80077aa:	18fb      	adds	r3, r7, r3
 80077ac:	781b      	ldrb	r3, [r3, #0]
}
 80077ae:	0018      	movs	r0, r3
 80077b0:	46bd      	mov	sp, r7
 80077b2:	b006      	add	sp, #24
 80077b4:	bd80      	pop	{r7, pc}
 80077b6:	46c0      	nop			; (mov r8, r8)
 80077b8:	40021000 	.word	0x40021000
 80077bc:	40007000 	.word	0x40007000
 80077c0:	fffffcff 	.word	0xfffffcff
 80077c4:	fffeffff 	.word	0xfffeffff
 80077c8:	00001388 	.word	0x00001388
 80077cc:	efffffff 	.word	0xefffffff
 80077d0:	ffffcfff 	.word	0xffffcfff
 80077d4:	ffff3fff 	.word	0xffff3fff

080077d8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80077d8:	b5b0      	push	{r4, r5, r7, lr}
 80077da:	b084      	sub	sp, #16
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80077e0:	230f      	movs	r3, #15
 80077e2:	18fb      	adds	r3, r7, r3
 80077e4:	2201      	movs	r2, #1
 80077e6:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d100      	bne.n	80077f0 <HAL_RTC_Init+0x18>
 80077ee:	e08c      	b.n	800790a <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2229      	movs	r2, #41	; 0x29
 80077f4:	5c9b      	ldrb	r3, [r3, r2]
 80077f6:	b2db      	uxtb	r3, r3
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d10b      	bne.n	8007814 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2228      	movs	r2, #40	; 0x28
 8007800:	2100      	movs	r1, #0
 8007802:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2288      	movs	r2, #136	; 0x88
 8007808:	0212      	lsls	r2, r2, #8
 800780a:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	0018      	movs	r0, r3
 8007810:	f7fc fe04 	bl	800441c <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2229      	movs	r2, #41	; 0x29
 8007818:	2102      	movs	r1, #2
 800781a:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	68db      	ldr	r3, [r3, #12]
 8007822:	2210      	movs	r2, #16
 8007824:	4013      	ands	r3, r2
 8007826:	2b10      	cmp	r3, #16
 8007828:	d062      	beq.n	80078f0 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	22ca      	movs	r2, #202	; 0xca
 8007830:	625a      	str	r2, [r3, #36]	; 0x24
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	2253      	movs	r2, #83	; 0x53
 8007838:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800783a:	250f      	movs	r5, #15
 800783c:	197c      	adds	r4, r7, r5
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	0018      	movs	r0, r3
 8007842:	f000 f892 	bl	800796a <RTC_EnterInitMode>
 8007846:	0003      	movs	r3, r0
 8007848:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 800784a:	0028      	movs	r0, r5
 800784c:	183b      	adds	r3, r7, r0
 800784e:	781b      	ldrb	r3, [r3, #0]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d12c      	bne.n	80078ae <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	699a      	ldr	r2, [r3, #24]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	492e      	ldr	r1, [pc, #184]	; (8007918 <HAL_RTC_Init+0x140>)
 8007860:	400a      	ands	r2, r1
 8007862:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	6999      	ldr	r1, [r3, #24]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	689a      	ldr	r2, [r3, #8]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	695b      	ldr	r3, [r3, #20]
 8007872:	431a      	orrs	r2, r3
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	69db      	ldr	r3, [r3, #28]
 8007878:	431a      	orrs	r2, r3
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	430a      	orrs	r2, r1
 8007880:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	687a      	ldr	r2, [r7, #4]
 8007888:	6912      	ldr	r2, [r2, #16]
 800788a:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	6919      	ldr	r1, [r3, #16]
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	68db      	ldr	r3, [r3, #12]
 8007896:	041a      	lsls	r2, r3, #16
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	430a      	orrs	r2, r1
 800789e:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80078a0:	183c      	adds	r4, r7, r0
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	0018      	movs	r0, r3
 80078a6:	f000 f8a3 	bl	80079f0 <RTC_ExitInitMode>
 80078aa:	0003      	movs	r3, r0
 80078ac:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 80078ae:	230f      	movs	r3, #15
 80078b0:	18fb      	adds	r3, r7, r3
 80078b2:	781b      	ldrb	r3, [r3, #0]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d116      	bne.n	80078e6 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	699a      	ldr	r2, [r3, #24]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	00d2      	lsls	r2, r2, #3
 80078c4:	08d2      	lsrs	r2, r2, #3
 80078c6:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	6999      	ldr	r1, [r3, #24]
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6a1b      	ldr	r3, [r3, #32]
 80078d6:	431a      	orrs	r2, r3
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	699b      	ldr	r3, [r3, #24]
 80078dc:	431a      	orrs	r2, r3
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	430a      	orrs	r2, r1
 80078e4:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	22ff      	movs	r2, #255	; 0xff
 80078ec:	625a      	str	r2, [r3, #36]	; 0x24
 80078ee:	e003      	b.n	80078f8 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80078f0:	230f      	movs	r3, #15
 80078f2:	18fb      	adds	r3, r7, r3
 80078f4:	2200      	movs	r2, #0
 80078f6:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 80078f8:	230f      	movs	r3, #15
 80078fa:	18fb      	adds	r3, r7, r3
 80078fc:	781b      	ldrb	r3, [r3, #0]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d103      	bne.n	800790a <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2229      	movs	r2, #41	; 0x29
 8007906:	2101      	movs	r1, #1
 8007908:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 800790a:	230f      	movs	r3, #15
 800790c:	18fb      	adds	r3, r7, r3
 800790e:	781b      	ldrb	r3, [r3, #0]
}
 8007910:	0018      	movs	r0, r3
 8007912:	46bd      	mov	sp, r7
 8007914:	b004      	add	sp, #16
 8007916:	bdb0      	pop	{r4, r5, r7, pc}
 8007918:	fb8fffbf 	.word	0xfb8fffbf

0800791c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b084      	sub	sp, #16
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	68da      	ldr	r2, [r3, #12]
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	21a0      	movs	r1, #160	; 0xa0
 8007930:	438a      	bics	r2, r1
 8007932:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8007934:	f7fc ff1a 	bl	800476c <HAL_GetTick>
 8007938:	0003      	movs	r3, r0
 800793a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800793c:	e00a      	b.n	8007954 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800793e:	f7fc ff15 	bl	800476c <HAL_GetTick>
 8007942:	0002      	movs	r2, r0
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	1ad2      	subs	r2, r2, r3
 8007948:	23fa      	movs	r3, #250	; 0xfa
 800794a:	009b      	lsls	r3, r3, #2
 800794c:	429a      	cmp	r2, r3
 800794e:	d901      	bls.n	8007954 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007950:	2303      	movs	r3, #3
 8007952:	e006      	b.n	8007962 <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	68db      	ldr	r3, [r3, #12]
 800795a:	2220      	movs	r2, #32
 800795c:	4013      	ands	r3, r2
 800795e:	d0ee      	beq.n	800793e <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8007960:	2300      	movs	r3, #0
}
 8007962:	0018      	movs	r0, r3
 8007964:	46bd      	mov	sp, r7
 8007966:	b004      	add	sp, #16
 8007968:	bd80      	pop	{r7, pc}

0800796a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800796a:	b580      	push	{r7, lr}
 800796c:	b084      	sub	sp, #16
 800796e:	af00      	add	r7, sp, #0
 8007970:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8007972:	230f      	movs	r3, #15
 8007974:	18fb      	adds	r3, r7, r3
 8007976:	2200      	movs	r2, #0
 8007978:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	68db      	ldr	r3, [r3, #12]
 8007980:	2240      	movs	r2, #64	; 0x40
 8007982:	4013      	ands	r3, r2
 8007984:	d12c      	bne.n	80079e0 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	68da      	ldr	r2, [r3, #12]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	2180      	movs	r1, #128	; 0x80
 8007992:	430a      	orrs	r2, r1
 8007994:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007996:	f7fc fee9 	bl	800476c <HAL_GetTick>
 800799a:	0003      	movs	r3, r0
 800799c:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800799e:	e014      	b.n	80079ca <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 80079a0:	f7fc fee4 	bl	800476c <HAL_GetTick>
 80079a4:	0002      	movs	r2, r0
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	1ad2      	subs	r2, r2, r3
 80079aa:	200f      	movs	r0, #15
 80079ac:	183b      	adds	r3, r7, r0
 80079ae:	1839      	adds	r1, r7, r0
 80079b0:	7809      	ldrb	r1, [r1, #0]
 80079b2:	7019      	strb	r1, [r3, #0]
 80079b4:	23fa      	movs	r3, #250	; 0xfa
 80079b6:	009b      	lsls	r3, r3, #2
 80079b8:	429a      	cmp	r2, r3
 80079ba:	d906      	bls.n	80079ca <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 80079bc:	183b      	adds	r3, r7, r0
 80079be:	2203      	movs	r2, #3
 80079c0:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2229      	movs	r2, #41	; 0x29
 80079c6:	2103      	movs	r1, #3
 80079c8:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	68db      	ldr	r3, [r3, #12]
 80079d0:	2240      	movs	r2, #64	; 0x40
 80079d2:	4013      	ands	r3, r2
 80079d4:	d104      	bne.n	80079e0 <RTC_EnterInitMode+0x76>
 80079d6:	230f      	movs	r3, #15
 80079d8:	18fb      	adds	r3, r7, r3
 80079da:	781b      	ldrb	r3, [r3, #0]
 80079dc:	2b03      	cmp	r3, #3
 80079de:	d1df      	bne.n	80079a0 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80079e0:	230f      	movs	r3, #15
 80079e2:	18fb      	adds	r3, r7, r3
 80079e4:	781b      	ldrb	r3, [r3, #0]
}
 80079e6:	0018      	movs	r0, r3
 80079e8:	46bd      	mov	sp, r7
 80079ea:	b004      	add	sp, #16
 80079ec:	bd80      	pop	{r7, pc}
	...

080079f0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80079f0:	b590      	push	{r4, r7, lr}
 80079f2:	b085      	sub	sp, #20
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80079f8:	240f      	movs	r4, #15
 80079fa:	193b      	adds	r3, r7, r4
 80079fc:	2200      	movs	r2, #0
 80079fe:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8007a00:	4b1c      	ldr	r3, [pc, #112]	; (8007a74 <RTC_ExitInitMode+0x84>)
 8007a02:	68da      	ldr	r2, [r3, #12]
 8007a04:	4b1b      	ldr	r3, [pc, #108]	; (8007a74 <RTC_ExitInitMode+0x84>)
 8007a06:	2180      	movs	r1, #128	; 0x80
 8007a08:	438a      	bics	r2, r1
 8007a0a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007a0c:	4b19      	ldr	r3, [pc, #100]	; (8007a74 <RTC_ExitInitMode+0x84>)
 8007a0e:	699b      	ldr	r3, [r3, #24]
 8007a10:	2220      	movs	r2, #32
 8007a12:	4013      	ands	r3, r2
 8007a14:	d10d      	bne.n	8007a32 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	0018      	movs	r0, r3
 8007a1a:	f7ff ff7f 	bl	800791c <HAL_RTC_WaitForSynchro>
 8007a1e:	1e03      	subs	r3, r0, #0
 8007a20:	d021      	beq.n	8007a66 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2229      	movs	r2, #41	; 0x29
 8007a26:	2103      	movs	r1, #3
 8007a28:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8007a2a:	193b      	adds	r3, r7, r4
 8007a2c:	2203      	movs	r2, #3
 8007a2e:	701a      	strb	r2, [r3, #0]
 8007a30:	e019      	b.n	8007a66 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007a32:	4b10      	ldr	r3, [pc, #64]	; (8007a74 <RTC_ExitInitMode+0x84>)
 8007a34:	699a      	ldr	r2, [r3, #24]
 8007a36:	4b0f      	ldr	r3, [pc, #60]	; (8007a74 <RTC_ExitInitMode+0x84>)
 8007a38:	2120      	movs	r1, #32
 8007a3a:	438a      	bics	r2, r1
 8007a3c:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	0018      	movs	r0, r3
 8007a42:	f7ff ff6b 	bl	800791c <HAL_RTC_WaitForSynchro>
 8007a46:	1e03      	subs	r3, r0, #0
 8007a48:	d007      	beq.n	8007a5a <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2229      	movs	r2, #41	; 0x29
 8007a4e:	2103      	movs	r1, #3
 8007a50:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8007a52:	230f      	movs	r3, #15
 8007a54:	18fb      	adds	r3, r7, r3
 8007a56:	2203      	movs	r2, #3
 8007a58:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007a5a:	4b06      	ldr	r3, [pc, #24]	; (8007a74 <RTC_ExitInitMode+0x84>)
 8007a5c:	699a      	ldr	r2, [r3, #24]
 8007a5e:	4b05      	ldr	r3, [pc, #20]	; (8007a74 <RTC_ExitInitMode+0x84>)
 8007a60:	2120      	movs	r1, #32
 8007a62:	430a      	orrs	r2, r1
 8007a64:	619a      	str	r2, [r3, #24]
  }

  return status;
 8007a66:	230f      	movs	r3, #15
 8007a68:	18fb      	adds	r3, r7, r3
 8007a6a:	781b      	ldrb	r3, [r3, #0]
}
 8007a6c:	0018      	movs	r0, r3
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	b005      	add	sp, #20
 8007a72:	bd90      	pop	{r4, r7, pc}
 8007a74:	40002800 	.word	0x40002800

08007a78 <HAL_RTCEx_BKUPWrite>:
  *          specify the register.
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b086      	sub	sp, #24
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	60f8      	str	r0, [r7, #12]
 8007a80:	60b9      	str	r1, [r7, #8]
 8007a82:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  /* Process TAMP instance pointer */
  TAMP_TypeDef *tamp = (TAMP_TypeDef *)((uint32_t)hrtc->Instance + hrtc->TampOffset);
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	001a      	movs	r2, r3
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	18d3      	adds	r3, r2, r3
 8007a90:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(tamp->BKP0R);
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	3301      	adds	r3, #1
 8007a96:	33ff      	adds	r3, #255	; 0xff
 8007a98:	613b      	str	r3, [r7, #16]
  tmp += (BackupRegister * 4U);
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	009b      	lsls	r3, r3, #2
 8007a9e:	693a      	ldr	r2, [r7, #16]
 8007aa0:	18d3      	adds	r3, r2, r3
 8007aa2:	613b      	str	r3, [r7, #16]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	687a      	ldr	r2, [r7, #4]
 8007aa8:	601a      	str	r2, [r3, #0]
}
 8007aaa:	46c0      	nop			; (mov r8, r8)
 8007aac:	46bd      	mov	sp, r7
 8007aae:	b006      	add	sp, #24
 8007ab0:	bd80      	pop	{r7, pc}

08007ab2 <HAL_RTCEx_BKUPRead>:
  *         This parameter can be: RTC_BKP_DRx where x can be from 0 to 4
  *         specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8007ab2:	b580      	push	{r7, lr}
 8007ab4:	b084      	sub	sp, #16
 8007ab6:	af00      	add	r7, sp, #0
 8007ab8:	6078      	str	r0, [r7, #4]
 8007aba:	6039      	str	r1, [r7, #0]
  uint32_t tmp ;
  /* Process TAMP instance pointer */
  TAMP_TypeDef *tamp = (TAMP_TypeDef *)((uint32_t)hrtc->Instance + hrtc->TampOffset);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	001a      	movs	r2, r3
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	685b      	ldr	r3, [r3, #4]
 8007ac6:	18d3      	adds	r3, r2, r3
 8007ac8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(tamp->BKP0R);
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	3301      	adds	r3, #1
 8007ace:	33ff      	adds	r3, #255	; 0xff
 8007ad0:	60bb      	str	r3, [r7, #8]
  tmp += (BackupRegister * 4U);
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	009b      	lsls	r3, r3, #2
 8007ad6:	68ba      	ldr	r2, [r7, #8]
 8007ad8:	18d3      	adds	r3, r2, r3
 8007ada:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	681b      	ldr	r3, [r3, #0]
}
 8007ae0:	0018      	movs	r0, r3
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	b004      	add	sp, #16
 8007ae6:	bd80      	pop	{r7, pc}

08007ae8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b082      	sub	sp, #8
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d101      	bne.n	8007afa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007af6:	2301      	movs	r3, #1
 8007af8:	e04a      	b.n	8007b90 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	223d      	movs	r2, #61	; 0x3d
 8007afe:	5c9b      	ldrb	r3, [r3, r2]
 8007b00:	b2db      	uxtb	r3, r3
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d107      	bne.n	8007b16 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	223c      	movs	r2, #60	; 0x3c
 8007b0a:	2100      	movs	r1, #0
 8007b0c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	0018      	movs	r0, r3
 8007b12:	f7fc fcdf 	bl	80044d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	223d      	movs	r2, #61	; 0x3d
 8007b1a:	2102      	movs	r1, #2
 8007b1c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681a      	ldr	r2, [r3, #0]
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	3304      	adds	r3, #4
 8007b26:	0019      	movs	r1, r3
 8007b28:	0010      	movs	r0, r2
 8007b2a:	f000 fc0d 	bl	8008348 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2248      	movs	r2, #72	; 0x48
 8007b32:	2101      	movs	r1, #1
 8007b34:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	223e      	movs	r2, #62	; 0x3e
 8007b3a:	2101      	movs	r1, #1
 8007b3c:	5499      	strb	r1, [r3, r2]
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	223f      	movs	r2, #63	; 0x3f
 8007b42:	2101      	movs	r1, #1
 8007b44:	5499      	strb	r1, [r3, r2]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2240      	movs	r2, #64	; 0x40
 8007b4a:	2101      	movs	r1, #1
 8007b4c:	5499      	strb	r1, [r3, r2]
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2241      	movs	r2, #65	; 0x41
 8007b52:	2101      	movs	r1, #1
 8007b54:	5499      	strb	r1, [r3, r2]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2242      	movs	r2, #66	; 0x42
 8007b5a:	2101      	movs	r1, #1
 8007b5c:	5499      	strb	r1, [r3, r2]
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2243      	movs	r2, #67	; 0x43
 8007b62:	2101      	movs	r1, #1
 8007b64:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2244      	movs	r2, #68	; 0x44
 8007b6a:	2101      	movs	r1, #1
 8007b6c:	5499      	strb	r1, [r3, r2]
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2245      	movs	r2, #69	; 0x45
 8007b72:	2101      	movs	r1, #1
 8007b74:	5499      	strb	r1, [r3, r2]
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2246      	movs	r2, #70	; 0x46
 8007b7a:	2101      	movs	r1, #1
 8007b7c:	5499      	strb	r1, [r3, r2]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2247      	movs	r2, #71	; 0x47
 8007b82:	2101      	movs	r1, #1
 8007b84:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	223d      	movs	r2, #61	; 0x3d
 8007b8a:	2101      	movs	r1, #1
 8007b8c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007b8e:	2300      	movs	r3, #0
}
 8007b90:	0018      	movs	r0, r3
 8007b92:	46bd      	mov	sp, r7
 8007b94:	b002      	add	sp, #8
 8007b96:	bd80      	pop	{r7, pc}

08007b98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b084      	sub	sp, #16
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	223d      	movs	r2, #61	; 0x3d
 8007ba4:	5c9b      	ldrb	r3, [r3, r2]
 8007ba6:	b2db      	uxtb	r3, r3
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	d001      	beq.n	8007bb0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007bac:	2301      	movs	r3, #1
 8007bae:	e037      	b.n	8007c20 <HAL_TIM_Base_Start_IT+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	223d      	movs	r2, #61	; 0x3d
 8007bb4:	2102      	movs	r1, #2
 8007bb6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	68da      	ldr	r2, [r3, #12]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	2101      	movs	r1, #1
 8007bc4:	430a      	orrs	r2, r1
 8007bc6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4a16      	ldr	r2, [pc, #88]	; (8007c28 <HAL_TIM_Base_Start_IT+0x90>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d004      	beq.n	8007bdc <HAL_TIM_Base_Start_IT+0x44>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4a15      	ldr	r2, [pc, #84]	; (8007c2c <HAL_TIM_Base_Start_IT+0x94>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d116      	bne.n	8007c0a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	689b      	ldr	r3, [r3, #8]
 8007be2:	4a13      	ldr	r2, [pc, #76]	; (8007c30 <HAL_TIM_Base_Start_IT+0x98>)
 8007be4:	4013      	ands	r3, r2
 8007be6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2b06      	cmp	r3, #6
 8007bec:	d016      	beq.n	8007c1c <HAL_TIM_Base_Start_IT+0x84>
 8007bee:	68fa      	ldr	r2, [r7, #12]
 8007bf0:	2380      	movs	r3, #128	; 0x80
 8007bf2:	025b      	lsls	r3, r3, #9
 8007bf4:	429a      	cmp	r2, r3
 8007bf6:	d011      	beq.n	8007c1c <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	681a      	ldr	r2, [r3, #0]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	2101      	movs	r1, #1
 8007c04:	430a      	orrs	r2, r1
 8007c06:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c08:	e008      	b.n	8007c1c <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	681a      	ldr	r2, [r3, #0]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	2101      	movs	r1, #1
 8007c16:	430a      	orrs	r2, r1
 8007c18:	601a      	str	r2, [r3, #0]
 8007c1a:	e000      	b.n	8007c1e <HAL_TIM_Base_Start_IT+0x86>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c1c:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8007c1e:	2300      	movs	r3, #0
}
 8007c20:	0018      	movs	r0, r3
 8007c22:	46bd      	mov	sp, r7
 8007c24:	b004      	add	sp, #16
 8007c26:	bd80      	pop	{r7, pc}
 8007c28:	40012c00 	.word	0x40012c00
 8007c2c:	40000400 	.word	0x40000400
 8007c30:	00010007 	.word	0x00010007

08007c34 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b082      	sub	sp, #8
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d101      	bne.n	8007c46 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007c42:	2301      	movs	r3, #1
 8007c44:	e04a      	b.n	8007cdc <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	223d      	movs	r2, #61	; 0x3d
 8007c4a:	5c9b      	ldrb	r3, [r3, r2]
 8007c4c:	b2db      	uxtb	r3, r3
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d107      	bne.n	8007c62 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	223c      	movs	r2, #60	; 0x3c
 8007c56:	2100      	movs	r1, #0
 8007c58:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	0018      	movs	r0, r3
 8007c5e:	f7fc fc1b 	bl	8004498 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	223d      	movs	r2, #61	; 0x3d
 8007c66:	2102      	movs	r1, #2
 8007c68:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681a      	ldr	r2, [r3, #0]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	3304      	adds	r3, #4
 8007c72:	0019      	movs	r1, r3
 8007c74:	0010      	movs	r0, r2
 8007c76:	f000 fb67 	bl	8008348 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2248      	movs	r2, #72	; 0x48
 8007c7e:	2101      	movs	r1, #1
 8007c80:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	223e      	movs	r2, #62	; 0x3e
 8007c86:	2101      	movs	r1, #1
 8007c88:	5499      	strb	r1, [r3, r2]
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	223f      	movs	r2, #63	; 0x3f
 8007c8e:	2101      	movs	r1, #1
 8007c90:	5499      	strb	r1, [r3, r2]
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2240      	movs	r2, #64	; 0x40
 8007c96:	2101      	movs	r1, #1
 8007c98:	5499      	strb	r1, [r3, r2]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2241      	movs	r2, #65	; 0x41
 8007c9e:	2101      	movs	r1, #1
 8007ca0:	5499      	strb	r1, [r3, r2]
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2242      	movs	r2, #66	; 0x42
 8007ca6:	2101      	movs	r1, #1
 8007ca8:	5499      	strb	r1, [r3, r2]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2243      	movs	r2, #67	; 0x43
 8007cae:	2101      	movs	r1, #1
 8007cb0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2244      	movs	r2, #68	; 0x44
 8007cb6:	2101      	movs	r1, #1
 8007cb8:	5499      	strb	r1, [r3, r2]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2245      	movs	r2, #69	; 0x45
 8007cbe:	2101      	movs	r1, #1
 8007cc0:	5499      	strb	r1, [r3, r2]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2246      	movs	r2, #70	; 0x46
 8007cc6:	2101      	movs	r1, #1
 8007cc8:	5499      	strb	r1, [r3, r2]
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2247      	movs	r2, #71	; 0x47
 8007cce:	2101      	movs	r1, #1
 8007cd0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	223d      	movs	r2, #61	; 0x3d
 8007cd6:	2101      	movs	r1, #1
 8007cd8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007cda:	2300      	movs	r3, #0
}
 8007cdc:	0018      	movs	r0, r3
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	b002      	add	sp, #8
 8007ce2:	bd80      	pop	{r7, pc}

08007ce4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b084      	sub	sp, #16
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d108      	bne.n	8007d06 <HAL_TIM_PWM_Start+0x22>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	223e      	movs	r2, #62	; 0x3e
 8007cf8:	5c9b      	ldrb	r3, [r3, r2]
 8007cfa:	b2db      	uxtb	r3, r3
 8007cfc:	3b01      	subs	r3, #1
 8007cfe:	1e5a      	subs	r2, r3, #1
 8007d00:	4193      	sbcs	r3, r2
 8007d02:	b2db      	uxtb	r3, r3
 8007d04:	e037      	b.n	8007d76 <HAL_TIM_PWM_Start+0x92>
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	2b04      	cmp	r3, #4
 8007d0a:	d108      	bne.n	8007d1e <HAL_TIM_PWM_Start+0x3a>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	223f      	movs	r2, #63	; 0x3f
 8007d10:	5c9b      	ldrb	r3, [r3, r2]
 8007d12:	b2db      	uxtb	r3, r3
 8007d14:	3b01      	subs	r3, #1
 8007d16:	1e5a      	subs	r2, r3, #1
 8007d18:	4193      	sbcs	r3, r2
 8007d1a:	b2db      	uxtb	r3, r3
 8007d1c:	e02b      	b.n	8007d76 <HAL_TIM_PWM_Start+0x92>
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	2b08      	cmp	r3, #8
 8007d22:	d108      	bne.n	8007d36 <HAL_TIM_PWM_Start+0x52>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2240      	movs	r2, #64	; 0x40
 8007d28:	5c9b      	ldrb	r3, [r3, r2]
 8007d2a:	b2db      	uxtb	r3, r3
 8007d2c:	3b01      	subs	r3, #1
 8007d2e:	1e5a      	subs	r2, r3, #1
 8007d30:	4193      	sbcs	r3, r2
 8007d32:	b2db      	uxtb	r3, r3
 8007d34:	e01f      	b.n	8007d76 <HAL_TIM_PWM_Start+0x92>
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	2b0c      	cmp	r3, #12
 8007d3a:	d108      	bne.n	8007d4e <HAL_TIM_PWM_Start+0x6a>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2241      	movs	r2, #65	; 0x41
 8007d40:	5c9b      	ldrb	r3, [r3, r2]
 8007d42:	b2db      	uxtb	r3, r3
 8007d44:	3b01      	subs	r3, #1
 8007d46:	1e5a      	subs	r2, r3, #1
 8007d48:	4193      	sbcs	r3, r2
 8007d4a:	b2db      	uxtb	r3, r3
 8007d4c:	e013      	b.n	8007d76 <HAL_TIM_PWM_Start+0x92>
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	2b10      	cmp	r3, #16
 8007d52:	d108      	bne.n	8007d66 <HAL_TIM_PWM_Start+0x82>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2242      	movs	r2, #66	; 0x42
 8007d58:	5c9b      	ldrb	r3, [r3, r2]
 8007d5a:	b2db      	uxtb	r3, r3
 8007d5c:	3b01      	subs	r3, #1
 8007d5e:	1e5a      	subs	r2, r3, #1
 8007d60:	4193      	sbcs	r3, r2
 8007d62:	b2db      	uxtb	r3, r3
 8007d64:	e007      	b.n	8007d76 <HAL_TIM_PWM_Start+0x92>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2243      	movs	r2, #67	; 0x43
 8007d6a:	5c9b      	ldrb	r3, [r3, r2]
 8007d6c:	b2db      	uxtb	r3, r3
 8007d6e:	3b01      	subs	r3, #1
 8007d70:	1e5a      	subs	r2, r3, #1
 8007d72:	4193      	sbcs	r3, r2
 8007d74:	b2db      	uxtb	r3, r3
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d001      	beq.n	8007d7e <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	e07b      	b.n	8007e76 <HAL_TIM_PWM_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d104      	bne.n	8007d8e <HAL_TIM_PWM_Start+0xaa>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	223e      	movs	r2, #62	; 0x3e
 8007d88:	2102      	movs	r1, #2
 8007d8a:	5499      	strb	r1, [r3, r2]
 8007d8c:	e023      	b.n	8007dd6 <HAL_TIM_PWM_Start+0xf2>
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	2b04      	cmp	r3, #4
 8007d92:	d104      	bne.n	8007d9e <HAL_TIM_PWM_Start+0xba>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	223f      	movs	r2, #63	; 0x3f
 8007d98:	2102      	movs	r1, #2
 8007d9a:	5499      	strb	r1, [r3, r2]
 8007d9c:	e01b      	b.n	8007dd6 <HAL_TIM_PWM_Start+0xf2>
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	2b08      	cmp	r3, #8
 8007da2:	d104      	bne.n	8007dae <HAL_TIM_PWM_Start+0xca>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2240      	movs	r2, #64	; 0x40
 8007da8:	2102      	movs	r1, #2
 8007daa:	5499      	strb	r1, [r3, r2]
 8007dac:	e013      	b.n	8007dd6 <HAL_TIM_PWM_Start+0xf2>
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	2b0c      	cmp	r3, #12
 8007db2:	d104      	bne.n	8007dbe <HAL_TIM_PWM_Start+0xda>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2241      	movs	r2, #65	; 0x41
 8007db8:	2102      	movs	r1, #2
 8007dba:	5499      	strb	r1, [r3, r2]
 8007dbc:	e00b      	b.n	8007dd6 <HAL_TIM_PWM_Start+0xf2>
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	2b10      	cmp	r3, #16
 8007dc2:	d104      	bne.n	8007dce <HAL_TIM_PWM_Start+0xea>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2242      	movs	r2, #66	; 0x42
 8007dc8:	2102      	movs	r1, #2
 8007dca:	5499      	strb	r1, [r3, r2]
 8007dcc:	e003      	b.n	8007dd6 <HAL_TIM_PWM_Start+0xf2>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2243      	movs	r2, #67	; 0x43
 8007dd2:	2102      	movs	r1, #2
 8007dd4:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	6839      	ldr	r1, [r7, #0]
 8007ddc:	2201      	movs	r2, #1
 8007dde:	0018      	movs	r0, r3
 8007de0:	f000 fdba 	bl	8008958 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4a25      	ldr	r2, [pc, #148]	; (8007e80 <HAL_TIM_PWM_Start+0x19c>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d009      	beq.n	8007e02 <HAL_TIM_PWM_Start+0x11e>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	4a24      	ldr	r2, [pc, #144]	; (8007e84 <HAL_TIM_PWM_Start+0x1a0>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d004      	beq.n	8007e02 <HAL_TIM_PWM_Start+0x11e>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4a22      	ldr	r2, [pc, #136]	; (8007e88 <HAL_TIM_PWM_Start+0x1a4>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d101      	bne.n	8007e06 <HAL_TIM_PWM_Start+0x122>
 8007e02:	2301      	movs	r3, #1
 8007e04:	e000      	b.n	8007e08 <HAL_TIM_PWM_Start+0x124>
 8007e06:	2300      	movs	r3, #0
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d008      	beq.n	8007e1e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	2180      	movs	r1, #128	; 0x80
 8007e18:	0209      	lsls	r1, r1, #8
 8007e1a:	430a      	orrs	r2, r1
 8007e1c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4a17      	ldr	r2, [pc, #92]	; (8007e80 <HAL_TIM_PWM_Start+0x19c>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d004      	beq.n	8007e32 <HAL_TIM_PWM_Start+0x14e>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a17      	ldr	r2, [pc, #92]	; (8007e8c <HAL_TIM_PWM_Start+0x1a8>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d116      	bne.n	8007e60 <HAL_TIM_PWM_Start+0x17c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	689b      	ldr	r3, [r3, #8]
 8007e38:	4a15      	ldr	r2, [pc, #84]	; (8007e90 <HAL_TIM_PWM_Start+0x1ac>)
 8007e3a:	4013      	ands	r3, r2
 8007e3c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	2b06      	cmp	r3, #6
 8007e42:	d016      	beq.n	8007e72 <HAL_TIM_PWM_Start+0x18e>
 8007e44:	68fa      	ldr	r2, [r7, #12]
 8007e46:	2380      	movs	r3, #128	; 0x80
 8007e48:	025b      	lsls	r3, r3, #9
 8007e4a:	429a      	cmp	r2, r3
 8007e4c:	d011      	beq.n	8007e72 <HAL_TIM_PWM_Start+0x18e>
    {
      __HAL_TIM_ENABLE(htim);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	681a      	ldr	r2, [r3, #0]
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	2101      	movs	r1, #1
 8007e5a:	430a      	orrs	r2, r1
 8007e5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e5e:	e008      	b.n	8007e72 <HAL_TIM_PWM_Start+0x18e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	681a      	ldr	r2, [r3, #0]
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	2101      	movs	r1, #1
 8007e6c:	430a      	orrs	r2, r1
 8007e6e:	601a      	str	r2, [r3, #0]
 8007e70:	e000      	b.n	8007e74 <HAL_TIM_PWM_Start+0x190>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e72:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8007e74:	2300      	movs	r3, #0
}
 8007e76:	0018      	movs	r0, r3
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	b004      	add	sp, #16
 8007e7c:	bd80      	pop	{r7, pc}
 8007e7e:	46c0      	nop			; (mov r8, r8)
 8007e80:	40012c00 	.word	0x40012c00
 8007e84:	40014400 	.word	0x40014400
 8007e88:	40014800 	.word	0x40014800
 8007e8c:	40000400 	.word	0x40000400
 8007e90:	00010007 	.word	0x00010007

08007e94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b082      	sub	sp, #8
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	691b      	ldr	r3, [r3, #16]
 8007ea2:	2202      	movs	r2, #2
 8007ea4:	4013      	ands	r3, r2
 8007ea6:	2b02      	cmp	r3, #2
 8007ea8:	d124      	bne.n	8007ef4 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	68db      	ldr	r3, [r3, #12]
 8007eb0:	2202      	movs	r2, #2
 8007eb2:	4013      	ands	r3, r2
 8007eb4:	2b02      	cmp	r3, #2
 8007eb6:	d11d      	bne.n	8007ef4 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	2203      	movs	r2, #3
 8007ebe:	4252      	negs	r2, r2
 8007ec0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2201      	movs	r2, #1
 8007ec6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	699b      	ldr	r3, [r3, #24]
 8007ece:	2203      	movs	r2, #3
 8007ed0:	4013      	ands	r3, r2
 8007ed2:	d004      	beq.n	8007ede <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	0018      	movs	r0, r3
 8007ed8:	f000 fa1e 	bl	8008318 <HAL_TIM_IC_CaptureCallback>
 8007edc:	e007      	b.n	8007eee <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	0018      	movs	r0, r3
 8007ee2:	f000 fa11 	bl	8008308 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	0018      	movs	r0, r3
 8007eea:	f000 fa1d 	bl	8008328 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	691b      	ldr	r3, [r3, #16]
 8007efa:	2204      	movs	r2, #4
 8007efc:	4013      	ands	r3, r2
 8007efe:	2b04      	cmp	r3, #4
 8007f00:	d125      	bne.n	8007f4e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	68db      	ldr	r3, [r3, #12]
 8007f08:	2204      	movs	r2, #4
 8007f0a:	4013      	ands	r3, r2
 8007f0c:	2b04      	cmp	r3, #4
 8007f0e:	d11e      	bne.n	8007f4e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	2205      	movs	r2, #5
 8007f16:	4252      	negs	r2, r2
 8007f18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2202      	movs	r2, #2
 8007f1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	699a      	ldr	r2, [r3, #24]
 8007f26:	23c0      	movs	r3, #192	; 0xc0
 8007f28:	009b      	lsls	r3, r3, #2
 8007f2a:	4013      	ands	r3, r2
 8007f2c:	d004      	beq.n	8007f38 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	0018      	movs	r0, r3
 8007f32:	f000 f9f1 	bl	8008318 <HAL_TIM_IC_CaptureCallback>
 8007f36:	e007      	b.n	8007f48 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	0018      	movs	r0, r3
 8007f3c:	f000 f9e4 	bl	8008308 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	0018      	movs	r0, r3
 8007f44:	f000 f9f0 	bl	8008328 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	691b      	ldr	r3, [r3, #16]
 8007f54:	2208      	movs	r2, #8
 8007f56:	4013      	ands	r3, r2
 8007f58:	2b08      	cmp	r3, #8
 8007f5a:	d124      	bne.n	8007fa6 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	68db      	ldr	r3, [r3, #12]
 8007f62:	2208      	movs	r2, #8
 8007f64:	4013      	ands	r3, r2
 8007f66:	2b08      	cmp	r3, #8
 8007f68:	d11d      	bne.n	8007fa6 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	2209      	movs	r2, #9
 8007f70:	4252      	negs	r2, r2
 8007f72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2204      	movs	r2, #4
 8007f78:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	69db      	ldr	r3, [r3, #28]
 8007f80:	2203      	movs	r2, #3
 8007f82:	4013      	ands	r3, r2
 8007f84:	d004      	beq.n	8007f90 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	0018      	movs	r0, r3
 8007f8a:	f000 f9c5 	bl	8008318 <HAL_TIM_IC_CaptureCallback>
 8007f8e:	e007      	b.n	8007fa0 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	0018      	movs	r0, r3
 8007f94:	f000 f9b8 	bl	8008308 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	0018      	movs	r0, r3
 8007f9c:	f000 f9c4 	bl	8008328 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	691b      	ldr	r3, [r3, #16]
 8007fac:	2210      	movs	r2, #16
 8007fae:	4013      	ands	r3, r2
 8007fb0:	2b10      	cmp	r3, #16
 8007fb2:	d125      	bne.n	8008000 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	68db      	ldr	r3, [r3, #12]
 8007fba:	2210      	movs	r2, #16
 8007fbc:	4013      	ands	r3, r2
 8007fbe:	2b10      	cmp	r3, #16
 8007fc0:	d11e      	bne.n	8008000 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	2211      	movs	r2, #17
 8007fc8:	4252      	negs	r2, r2
 8007fca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2208      	movs	r2, #8
 8007fd0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	69da      	ldr	r2, [r3, #28]
 8007fd8:	23c0      	movs	r3, #192	; 0xc0
 8007fda:	009b      	lsls	r3, r3, #2
 8007fdc:	4013      	ands	r3, r2
 8007fde:	d004      	beq.n	8007fea <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	0018      	movs	r0, r3
 8007fe4:	f000 f998 	bl	8008318 <HAL_TIM_IC_CaptureCallback>
 8007fe8:	e007      	b.n	8007ffa <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	0018      	movs	r0, r3
 8007fee:	f000 f98b 	bl	8008308 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	0018      	movs	r0, r3
 8007ff6:	f000 f997 	bl	8008328 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	691b      	ldr	r3, [r3, #16]
 8008006:	2201      	movs	r2, #1
 8008008:	4013      	ands	r3, r2
 800800a:	2b01      	cmp	r3, #1
 800800c:	d10f      	bne.n	800802e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	68db      	ldr	r3, [r3, #12]
 8008014:	2201      	movs	r2, #1
 8008016:	4013      	ands	r3, r2
 8008018:	2b01      	cmp	r3, #1
 800801a:	d108      	bne.n	800802e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	2202      	movs	r2, #2
 8008022:	4252      	negs	r2, r2
 8008024:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	0018      	movs	r0, r3
 800802a:	f000 f965 	bl	80082f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	691b      	ldr	r3, [r3, #16]
 8008034:	2280      	movs	r2, #128	; 0x80
 8008036:	4013      	ands	r3, r2
 8008038:	2b80      	cmp	r3, #128	; 0x80
 800803a:	d10f      	bne.n	800805c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	68db      	ldr	r3, [r3, #12]
 8008042:	2280      	movs	r2, #128	; 0x80
 8008044:	4013      	ands	r3, r2
 8008046:	2b80      	cmp	r3, #128	; 0x80
 8008048:	d108      	bne.n	800805c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	2281      	movs	r2, #129	; 0x81
 8008050:	4252      	negs	r2, r2
 8008052:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	0018      	movs	r0, r3
 8008058:	f000 fd0c 	bl	8008a74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	691a      	ldr	r2, [r3, #16]
 8008062:	2380      	movs	r3, #128	; 0x80
 8008064:	005b      	lsls	r3, r3, #1
 8008066:	401a      	ands	r2, r3
 8008068:	2380      	movs	r3, #128	; 0x80
 800806a:	005b      	lsls	r3, r3, #1
 800806c:	429a      	cmp	r2, r3
 800806e:	d10e      	bne.n	800808e <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	68db      	ldr	r3, [r3, #12]
 8008076:	2280      	movs	r2, #128	; 0x80
 8008078:	4013      	ands	r3, r2
 800807a:	2b80      	cmp	r3, #128	; 0x80
 800807c:	d107      	bne.n	800808e <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4a1c      	ldr	r2, [pc, #112]	; (80080f4 <HAL_TIM_IRQHandler+0x260>)
 8008084:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	0018      	movs	r0, r3
 800808a:	f000 fcfb 	bl	8008a84 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	691b      	ldr	r3, [r3, #16]
 8008094:	2240      	movs	r2, #64	; 0x40
 8008096:	4013      	ands	r3, r2
 8008098:	2b40      	cmp	r3, #64	; 0x40
 800809a:	d10f      	bne.n	80080bc <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	68db      	ldr	r3, [r3, #12]
 80080a2:	2240      	movs	r2, #64	; 0x40
 80080a4:	4013      	ands	r3, r2
 80080a6:	2b40      	cmp	r3, #64	; 0x40
 80080a8:	d108      	bne.n	80080bc <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	2241      	movs	r2, #65	; 0x41
 80080b0:	4252      	negs	r2, r2
 80080b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	0018      	movs	r0, r3
 80080b8:	f000 f93e 	bl	8008338 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	691b      	ldr	r3, [r3, #16]
 80080c2:	2220      	movs	r2, #32
 80080c4:	4013      	ands	r3, r2
 80080c6:	2b20      	cmp	r3, #32
 80080c8:	d10f      	bne.n	80080ea <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	68db      	ldr	r3, [r3, #12]
 80080d0:	2220      	movs	r2, #32
 80080d2:	4013      	ands	r3, r2
 80080d4:	2b20      	cmp	r3, #32
 80080d6:	d108      	bne.n	80080ea <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	2221      	movs	r2, #33	; 0x21
 80080de:	4252      	negs	r2, r2
 80080e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	0018      	movs	r0, r3
 80080e6:	f000 fcbd 	bl	8008a64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80080ea:	46c0      	nop			; (mov r8, r8)
 80080ec:	46bd      	mov	sp, r7
 80080ee:	b002      	add	sp, #8
 80080f0:	bd80      	pop	{r7, pc}
 80080f2:	46c0      	nop			; (mov r8, r8)
 80080f4:	fffffeff 	.word	0xfffffeff

080080f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b086      	sub	sp, #24
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	60f8      	str	r0, [r7, #12]
 8008100:	60b9      	str	r1, [r7, #8]
 8008102:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008104:	2317      	movs	r3, #23
 8008106:	18fb      	adds	r3, r7, r3
 8008108:	2200      	movs	r2, #0
 800810a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	223c      	movs	r2, #60	; 0x3c
 8008110:	5c9b      	ldrb	r3, [r3, r2]
 8008112:	2b01      	cmp	r3, #1
 8008114:	d101      	bne.n	800811a <HAL_TIM_PWM_ConfigChannel+0x22>
 8008116:	2302      	movs	r3, #2
 8008118:	e0e5      	b.n	80082e6 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	223c      	movs	r2, #60	; 0x3c
 800811e:	2101      	movs	r1, #1
 8008120:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2b14      	cmp	r3, #20
 8008126:	d900      	bls.n	800812a <HAL_TIM_PWM_ConfigChannel+0x32>
 8008128:	e0d1      	b.n	80082ce <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	009a      	lsls	r2, r3, #2
 800812e:	4b70      	ldr	r3, [pc, #448]	; (80082f0 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8008130:	18d3      	adds	r3, r2, r3
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	68ba      	ldr	r2, [r7, #8]
 800813c:	0011      	movs	r1, r2
 800813e:	0018      	movs	r0, r3
 8008140:	f000 f96e 	bl	8008420 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	699a      	ldr	r2, [r3, #24]
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	2108      	movs	r1, #8
 8008150:	430a      	orrs	r2, r1
 8008152:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	699a      	ldr	r2, [r3, #24]
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	2104      	movs	r1, #4
 8008160:	438a      	bics	r2, r1
 8008162:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	6999      	ldr	r1, [r3, #24]
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	691a      	ldr	r2, [r3, #16]
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	430a      	orrs	r2, r1
 8008174:	619a      	str	r2, [r3, #24]
      break;
 8008176:	e0af      	b.n	80082d8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	68ba      	ldr	r2, [r7, #8]
 800817e:	0011      	movs	r1, r2
 8008180:	0018      	movs	r0, r3
 8008182:	f000 f9cd 	bl	8008520 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	699a      	ldr	r2, [r3, #24]
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	2180      	movs	r1, #128	; 0x80
 8008192:	0109      	lsls	r1, r1, #4
 8008194:	430a      	orrs	r2, r1
 8008196:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	699a      	ldr	r2, [r3, #24]
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	4954      	ldr	r1, [pc, #336]	; (80082f4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80081a4:	400a      	ands	r2, r1
 80081a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	6999      	ldr	r1, [r3, #24]
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	691b      	ldr	r3, [r3, #16]
 80081b2:	021a      	lsls	r2, r3, #8
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	430a      	orrs	r2, r1
 80081ba:	619a      	str	r2, [r3, #24]
      break;
 80081bc:	e08c      	b.n	80082d8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	68ba      	ldr	r2, [r7, #8]
 80081c4:	0011      	movs	r1, r2
 80081c6:	0018      	movs	r0, r3
 80081c8:	f000 fa28 	bl	800861c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	69da      	ldr	r2, [r3, #28]
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	2108      	movs	r1, #8
 80081d8:	430a      	orrs	r2, r1
 80081da:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	69da      	ldr	r2, [r3, #28]
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	2104      	movs	r1, #4
 80081e8:	438a      	bics	r2, r1
 80081ea:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	69d9      	ldr	r1, [r3, #28]
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	691a      	ldr	r2, [r3, #16]
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	430a      	orrs	r2, r1
 80081fc:	61da      	str	r2, [r3, #28]
      break;
 80081fe:	e06b      	b.n	80082d8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	68ba      	ldr	r2, [r7, #8]
 8008206:	0011      	movs	r1, r2
 8008208:	0018      	movs	r0, r3
 800820a:	f000 fa89 	bl	8008720 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	69da      	ldr	r2, [r3, #28]
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	2180      	movs	r1, #128	; 0x80
 800821a:	0109      	lsls	r1, r1, #4
 800821c:	430a      	orrs	r2, r1
 800821e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	69da      	ldr	r2, [r3, #28]
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4932      	ldr	r1, [pc, #200]	; (80082f4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800822c:	400a      	ands	r2, r1
 800822e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	69d9      	ldr	r1, [r3, #28]
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	691b      	ldr	r3, [r3, #16]
 800823a:	021a      	lsls	r2, r3, #8
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	430a      	orrs	r2, r1
 8008242:	61da      	str	r2, [r3, #28]
      break;
 8008244:	e048      	b.n	80082d8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	68ba      	ldr	r2, [r7, #8]
 800824c:	0011      	movs	r1, r2
 800824e:	0018      	movs	r0, r3
 8008250:	f000 faca 	bl	80087e8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	2108      	movs	r1, #8
 8008260:	430a      	orrs	r2, r1
 8008262:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	2104      	movs	r1, #4
 8008270:	438a      	bics	r2, r1
 8008272:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	691a      	ldr	r2, [r3, #16]
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	430a      	orrs	r2, r1
 8008284:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008286:	e027      	b.n	80082d8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	68ba      	ldr	r2, [r7, #8]
 800828e:	0011      	movs	r1, r2
 8008290:	0018      	movs	r0, r3
 8008292:	f000 fb03 	bl	800889c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	2180      	movs	r1, #128	; 0x80
 80082a2:	0109      	lsls	r1, r1, #4
 80082a4:	430a      	orrs	r2, r1
 80082a6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	4910      	ldr	r1, [pc, #64]	; (80082f4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80082b4:	400a      	ands	r2, r1
 80082b6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	691b      	ldr	r3, [r3, #16]
 80082c2:	021a      	lsls	r2, r3, #8
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	430a      	orrs	r2, r1
 80082ca:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80082cc:	e004      	b.n	80082d8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80082ce:	2317      	movs	r3, #23
 80082d0:	18fb      	adds	r3, r7, r3
 80082d2:	2201      	movs	r2, #1
 80082d4:	701a      	strb	r2, [r3, #0]
      break;
 80082d6:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	223c      	movs	r2, #60	; 0x3c
 80082dc:	2100      	movs	r1, #0
 80082de:	5499      	strb	r1, [r3, r2]

  return status;
 80082e0:	2317      	movs	r3, #23
 80082e2:	18fb      	adds	r3, r7, r3
 80082e4:	781b      	ldrb	r3, [r3, #0]
}
 80082e6:	0018      	movs	r0, r3
 80082e8:	46bd      	mov	sp, r7
 80082ea:	b006      	add	sp, #24
 80082ec:	bd80      	pop	{r7, pc}
 80082ee:	46c0      	nop			; (mov r8, r8)
 80082f0:	08009a0c 	.word	0x08009a0c
 80082f4:	fffffbff 	.word	0xfffffbff

080082f8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b082      	sub	sp, #8
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008300:	46c0      	nop			; (mov r8, r8)
 8008302:	46bd      	mov	sp, r7
 8008304:	b002      	add	sp, #8
 8008306:	bd80      	pop	{r7, pc}

08008308 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b082      	sub	sp, #8
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008310:	46c0      	nop			; (mov r8, r8)
 8008312:	46bd      	mov	sp, r7
 8008314:	b002      	add	sp, #8
 8008316:	bd80      	pop	{r7, pc}

08008318 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b082      	sub	sp, #8
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008320:	46c0      	nop			; (mov r8, r8)
 8008322:	46bd      	mov	sp, r7
 8008324:	b002      	add	sp, #8
 8008326:	bd80      	pop	{r7, pc}

08008328 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b082      	sub	sp, #8
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008330:	46c0      	nop			; (mov r8, r8)
 8008332:	46bd      	mov	sp, r7
 8008334:	b002      	add	sp, #8
 8008336:	bd80      	pop	{r7, pc}

08008338 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b082      	sub	sp, #8
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008340:	46c0      	nop			; (mov r8, r8)
 8008342:	46bd      	mov	sp, r7
 8008344:	b002      	add	sp, #8
 8008346:	bd80      	pop	{r7, pc}

08008348 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b084      	sub	sp, #16
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
 8008350:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	4a2b      	ldr	r2, [pc, #172]	; (8008408 <TIM_Base_SetConfig+0xc0>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d003      	beq.n	8008368 <TIM_Base_SetConfig+0x20>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	4a2a      	ldr	r2, [pc, #168]	; (800840c <TIM_Base_SetConfig+0xc4>)
 8008364:	4293      	cmp	r3, r2
 8008366:	d108      	bne.n	800837a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	2270      	movs	r2, #112	; 0x70
 800836c:	4393      	bics	r3, r2
 800836e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	685b      	ldr	r3, [r3, #4]
 8008374:	68fa      	ldr	r2, [r7, #12]
 8008376:	4313      	orrs	r3, r2
 8008378:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	4a22      	ldr	r2, [pc, #136]	; (8008408 <TIM_Base_SetConfig+0xc0>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d00f      	beq.n	80083a2 <TIM_Base_SetConfig+0x5a>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	4a21      	ldr	r2, [pc, #132]	; (800840c <TIM_Base_SetConfig+0xc4>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d00b      	beq.n	80083a2 <TIM_Base_SetConfig+0x5a>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	4a20      	ldr	r2, [pc, #128]	; (8008410 <TIM_Base_SetConfig+0xc8>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d007      	beq.n	80083a2 <TIM_Base_SetConfig+0x5a>
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	4a1f      	ldr	r2, [pc, #124]	; (8008414 <TIM_Base_SetConfig+0xcc>)
 8008396:	4293      	cmp	r3, r2
 8008398:	d003      	beq.n	80083a2 <TIM_Base_SetConfig+0x5a>
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	4a1e      	ldr	r2, [pc, #120]	; (8008418 <TIM_Base_SetConfig+0xd0>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d108      	bne.n	80083b4 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	4a1d      	ldr	r2, [pc, #116]	; (800841c <TIM_Base_SetConfig+0xd4>)
 80083a6:	4013      	ands	r3, r2
 80083a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	68db      	ldr	r3, [r3, #12]
 80083ae:	68fa      	ldr	r2, [r7, #12]
 80083b0:	4313      	orrs	r3, r2
 80083b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	2280      	movs	r2, #128	; 0x80
 80083b8:	4393      	bics	r3, r2
 80083ba:	001a      	movs	r2, r3
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	695b      	ldr	r3, [r3, #20]
 80083c0:	4313      	orrs	r3, r2
 80083c2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	68fa      	ldr	r2, [r7, #12]
 80083c8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	689a      	ldr	r2, [r3, #8]
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	681a      	ldr	r2, [r3, #0]
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	4a0a      	ldr	r2, [pc, #40]	; (8008408 <TIM_Base_SetConfig+0xc0>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d007      	beq.n	80083f2 <TIM_Base_SetConfig+0xaa>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	4a0b      	ldr	r2, [pc, #44]	; (8008414 <TIM_Base_SetConfig+0xcc>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d003      	beq.n	80083f2 <TIM_Base_SetConfig+0xaa>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	4a0a      	ldr	r2, [pc, #40]	; (8008418 <TIM_Base_SetConfig+0xd0>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d103      	bne.n	80083fa <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	691a      	ldr	r2, [r3, #16]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2201      	movs	r2, #1
 80083fe:	615a      	str	r2, [r3, #20]
}
 8008400:	46c0      	nop			; (mov r8, r8)
 8008402:	46bd      	mov	sp, r7
 8008404:	b004      	add	sp, #16
 8008406:	bd80      	pop	{r7, pc}
 8008408:	40012c00 	.word	0x40012c00
 800840c:	40000400 	.word	0x40000400
 8008410:	40002000 	.word	0x40002000
 8008414:	40014400 	.word	0x40014400
 8008418:	40014800 	.word	0x40014800
 800841c:	fffffcff 	.word	0xfffffcff

08008420 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b086      	sub	sp, #24
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
 8008428:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6a1b      	ldr	r3, [r3, #32]
 800842e:	2201      	movs	r2, #1
 8008430:	4393      	bics	r3, r2
 8008432:	001a      	movs	r2, r3
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6a1b      	ldr	r3, [r3, #32]
 800843c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	685b      	ldr	r3, [r3, #4]
 8008442:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	699b      	ldr	r3, [r3, #24]
 8008448:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	4a2e      	ldr	r2, [pc, #184]	; (8008508 <TIM_OC1_SetConfig+0xe8>)
 800844e:	4013      	ands	r3, r2
 8008450:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	2203      	movs	r2, #3
 8008456:	4393      	bics	r3, r2
 8008458:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	68fa      	ldr	r2, [r7, #12]
 8008460:	4313      	orrs	r3, r2
 8008462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008464:	697b      	ldr	r3, [r7, #20]
 8008466:	2202      	movs	r2, #2
 8008468:	4393      	bics	r3, r2
 800846a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	689b      	ldr	r3, [r3, #8]
 8008470:	697a      	ldr	r2, [r7, #20]
 8008472:	4313      	orrs	r3, r2
 8008474:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	4a24      	ldr	r2, [pc, #144]	; (800850c <TIM_OC1_SetConfig+0xec>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d007      	beq.n	800848e <TIM_OC1_SetConfig+0x6e>
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	4a23      	ldr	r2, [pc, #140]	; (8008510 <TIM_OC1_SetConfig+0xf0>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d003      	beq.n	800848e <TIM_OC1_SetConfig+0x6e>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	4a22      	ldr	r2, [pc, #136]	; (8008514 <TIM_OC1_SetConfig+0xf4>)
 800848a:	4293      	cmp	r3, r2
 800848c:	d10c      	bne.n	80084a8 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	2208      	movs	r2, #8
 8008492:	4393      	bics	r3, r2
 8008494:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	68db      	ldr	r3, [r3, #12]
 800849a:	697a      	ldr	r2, [r7, #20]
 800849c:	4313      	orrs	r3, r2
 800849e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80084a0:	697b      	ldr	r3, [r7, #20]
 80084a2:	2204      	movs	r2, #4
 80084a4:	4393      	bics	r3, r2
 80084a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	4a18      	ldr	r2, [pc, #96]	; (800850c <TIM_OC1_SetConfig+0xec>)
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d007      	beq.n	80084c0 <TIM_OC1_SetConfig+0xa0>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	4a17      	ldr	r2, [pc, #92]	; (8008510 <TIM_OC1_SetConfig+0xf0>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d003      	beq.n	80084c0 <TIM_OC1_SetConfig+0xa0>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	4a16      	ldr	r2, [pc, #88]	; (8008514 <TIM_OC1_SetConfig+0xf4>)
 80084bc:	4293      	cmp	r3, r2
 80084be:	d111      	bne.n	80084e4 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80084c0:	693b      	ldr	r3, [r7, #16]
 80084c2:	4a15      	ldr	r2, [pc, #84]	; (8008518 <TIM_OC1_SetConfig+0xf8>)
 80084c4:	4013      	ands	r3, r2
 80084c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80084c8:	693b      	ldr	r3, [r7, #16]
 80084ca:	4a14      	ldr	r2, [pc, #80]	; (800851c <TIM_OC1_SetConfig+0xfc>)
 80084cc:	4013      	ands	r3, r2
 80084ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	695b      	ldr	r3, [r3, #20]
 80084d4:	693a      	ldr	r2, [r7, #16]
 80084d6:	4313      	orrs	r3, r2
 80084d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	699b      	ldr	r3, [r3, #24]
 80084de:	693a      	ldr	r2, [r7, #16]
 80084e0:	4313      	orrs	r3, r2
 80084e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	693a      	ldr	r2, [r7, #16]
 80084e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	68fa      	ldr	r2, [r7, #12]
 80084ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	685a      	ldr	r2, [r3, #4]
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	697a      	ldr	r2, [r7, #20]
 80084fc:	621a      	str	r2, [r3, #32]
}
 80084fe:	46c0      	nop			; (mov r8, r8)
 8008500:	46bd      	mov	sp, r7
 8008502:	b006      	add	sp, #24
 8008504:	bd80      	pop	{r7, pc}
 8008506:	46c0      	nop			; (mov r8, r8)
 8008508:	fffeff8f 	.word	0xfffeff8f
 800850c:	40012c00 	.word	0x40012c00
 8008510:	40014400 	.word	0x40014400
 8008514:	40014800 	.word	0x40014800
 8008518:	fffffeff 	.word	0xfffffeff
 800851c:	fffffdff 	.word	0xfffffdff

08008520 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b086      	sub	sp, #24
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
 8008528:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6a1b      	ldr	r3, [r3, #32]
 800852e:	2210      	movs	r2, #16
 8008530:	4393      	bics	r3, r2
 8008532:	001a      	movs	r2, r3
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6a1b      	ldr	r3, [r3, #32]
 800853c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	685b      	ldr	r3, [r3, #4]
 8008542:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	699b      	ldr	r3, [r3, #24]
 8008548:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	4a2c      	ldr	r2, [pc, #176]	; (8008600 <TIM_OC2_SetConfig+0xe0>)
 800854e:	4013      	ands	r3, r2
 8008550:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	4a2b      	ldr	r2, [pc, #172]	; (8008604 <TIM_OC2_SetConfig+0xe4>)
 8008556:	4013      	ands	r3, r2
 8008558:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	021b      	lsls	r3, r3, #8
 8008560:	68fa      	ldr	r2, [r7, #12]
 8008562:	4313      	orrs	r3, r2
 8008564:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	2220      	movs	r2, #32
 800856a:	4393      	bics	r3, r2
 800856c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	689b      	ldr	r3, [r3, #8]
 8008572:	011b      	lsls	r3, r3, #4
 8008574:	697a      	ldr	r2, [r7, #20]
 8008576:	4313      	orrs	r3, r2
 8008578:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	4a22      	ldr	r2, [pc, #136]	; (8008608 <TIM_OC2_SetConfig+0xe8>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d10d      	bne.n	800859e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	2280      	movs	r2, #128	; 0x80
 8008586:	4393      	bics	r3, r2
 8008588:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	68db      	ldr	r3, [r3, #12]
 800858e:	011b      	lsls	r3, r3, #4
 8008590:	697a      	ldr	r2, [r7, #20]
 8008592:	4313      	orrs	r3, r2
 8008594:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008596:	697b      	ldr	r3, [r7, #20]
 8008598:	2240      	movs	r2, #64	; 0x40
 800859a:	4393      	bics	r3, r2
 800859c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	4a19      	ldr	r2, [pc, #100]	; (8008608 <TIM_OC2_SetConfig+0xe8>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d007      	beq.n	80085b6 <TIM_OC2_SetConfig+0x96>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	4a18      	ldr	r2, [pc, #96]	; (800860c <TIM_OC2_SetConfig+0xec>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d003      	beq.n	80085b6 <TIM_OC2_SetConfig+0x96>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	4a17      	ldr	r2, [pc, #92]	; (8008610 <TIM_OC2_SetConfig+0xf0>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d113      	bne.n	80085de <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80085b6:	693b      	ldr	r3, [r7, #16]
 80085b8:	4a16      	ldr	r2, [pc, #88]	; (8008614 <TIM_OC2_SetConfig+0xf4>)
 80085ba:	4013      	ands	r3, r2
 80085bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80085be:	693b      	ldr	r3, [r7, #16]
 80085c0:	4a15      	ldr	r2, [pc, #84]	; (8008618 <TIM_OC2_SetConfig+0xf8>)
 80085c2:	4013      	ands	r3, r2
 80085c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	695b      	ldr	r3, [r3, #20]
 80085ca:	009b      	lsls	r3, r3, #2
 80085cc:	693a      	ldr	r2, [r7, #16]
 80085ce:	4313      	orrs	r3, r2
 80085d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	699b      	ldr	r3, [r3, #24]
 80085d6:	009b      	lsls	r3, r3, #2
 80085d8:	693a      	ldr	r2, [r7, #16]
 80085da:	4313      	orrs	r3, r2
 80085dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	693a      	ldr	r2, [r7, #16]
 80085e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	68fa      	ldr	r2, [r7, #12]
 80085e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	685a      	ldr	r2, [r3, #4]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	697a      	ldr	r2, [r7, #20]
 80085f6:	621a      	str	r2, [r3, #32]
}
 80085f8:	46c0      	nop			; (mov r8, r8)
 80085fa:	46bd      	mov	sp, r7
 80085fc:	b006      	add	sp, #24
 80085fe:	bd80      	pop	{r7, pc}
 8008600:	feff8fff 	.word	0xfeff8fff
 8008604:	fffffcff 	.word	0xfffffcff
 8008608:	40012c00 	.word	0x40012c00
 800860c:	40014400 	.word	0x40014400
 8008610:	40014800 	.word	0x40014800
 8008614:	fffffbff 	.word	0xfffffbff
 8008618:	fffff7ff 	.word	0xfffff7ff

0800861c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b086      	sub	sp, #24
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
 8008624:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6a1b      	ldr	r3, [r3, #32]
 800862a:	4a33      	ldr	r2, [pc, #204]	; (80086f8 <TIM_OC3_SetConfig+0xdc>)
 800862c:	401a      	ands	r2, r3
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6a1b      	ldr	r3, [r3, #32]
 8008636:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	685b      	ldr	r3, [r3, #4]
 800863c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	69db      	ldr	r3, [r3, #28]
 8008642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	4a2d      	ldr	r2, [pc, #180]	; (80086fc <TIM_OC3_SetConfig+0xe0>)
 8008648:	4013      	ands	r3, r2
 800864a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	2203      	movs	r2, #3
 8008650:	4393      	bics	r3, r2
 8008652:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	68fa      	ldr	r2, [r7, #12]
 800865a:	4313      	orrs	r3, r2
 800865c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	4a27      	ldr	r2, [pc, #156]	; (8008700 <TIM_OC3_SetConfig+0xe4>)
 8008662:	4013      	ands	r3, r2
 8008664:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	689b      	ldr	r3, [r3, #8]
 800866a:	021b      	lsls	r3, r3, #8
 800866c:	697a      	ldr	r2, [r7, #20]
 800866e:	4313      	orrs	r3, r2
 8008670:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	4a23      	ldr	r2, [pc, #140]	; (8008704 <TIM_OC3_SetConfig+0xe8>)
 8008676:	4293      	cmp	r3, r2
 8008678:	d10d      	bne.n	8008696 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	4a22      	ldr	r2, [pc, #136]	; (8008708 <TIM_OC3_SetConfig+0xec>)
 800867e:	4013      	ands	r3, r2
 8008680:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	68db      	ldr	r3, [r3, #12]
 8008686:	021b      	lsls	r3, r3, #8
 8008688:	697a      	ldr	r2, [r7, #20]
 800868a:	4313      	orrs	r3, r2
 800868c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800868e:	697b      	ldr	r3, [r7, #20]
 8008690:	4a1e      	ldr	r2, [pc, #120]	; (800870c <TIM_OC3_SetConfig+0xf0>)
 8008692:	4013      	ands	r3, r2
 8008694:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	4a1a      	ldr	r2, [pc, #104]	; (8008704 <TIM_OC3_SetConfig+0xe8>)
 800869a:	4293      	cmp	r3, r2
 800869c:	d007      	beq.n	80086ae <TIM_OC3_SetConfig+0x92>
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	4a1b      	ldr	r2, [pc, #108]	; (8008710 <TIM_OC3_SetConfig+0xf4>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d003      	beq.n	80086ae <TIM_OC3_SetConfig+0x92>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	4a1a      	ldr	r2, [pc, #104]	; (8008714 <TIM_OC3_SetConfig+0xf8>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d113      	bne.n	80086d6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80086ae:	693b      	ldr	r3, [r7, #16]
 80086b0:	4a19      	ldr	r2, [pc, #100]	; (8008718 <TIM_OC3_SetConfig+0xfc>)
 80086b2:	4013      	ands	r3, r2
 80086b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80086b6:	693b      	ldr	r3, [r7, #16]
 80086b8:	4a18      	ldr	r2, [pc, #96]	; (800871c <TIM_OC3_SetConfig+0x100>)
 80086ba:	4013      	ands	r3, r2
 80086bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	695b      	ldr	r3, [r3, #20]
 80086c2:	011b      	lsls	r3, r3, #4
 80086c4:	693a      	ldr	r2, [r7, #16]
 80086c6:	4313      	orrs	r3, r2
 80086c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	699b      	ldr	r3, [r3, #24]
 80086ce:	011b      	lsls	r3, r3, #4
 80086d0:	693a      	ldr	r2, [r7, #16]
 80086d2:	4313      	orrs	r3, r2
 80086d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	693a      	ldr	r2, [r7, #16]
 80086da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	68fa      	ldr	r2, [r7, #12]
 80086e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	685a      	ldr	r2, [r3, #4]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	697a      	ldr	r2, [r7, #20]
 80086ee:	621a      	str	r2, [r3, #32]
}
 80086f0:	46c0      	nop			; (mov r8, r8)
 80086f2:	46bd      	mov	sp, r7
 80086f4:	b006      	add	sp, #24
 80086f6:	bd80      	pop	{r7, pc}
 80086f8:	fffffeff 	.word	0xfffffeff
 80086fc:	fffeff8f 	.word	0xfffeff8f
 8008700:	fffffdff 	.word	0xfffffdff
 8008704:	40012c00 	.word	0x40012c00
 8008708:	fffff7ff 	.word	0xfffff7ff
 800870c:	fffffbff 	.word	0xfffffbff
 8008710:	40014400 	.word	0x40014400
 8008714:	40014800 	.word	0x40014800
 8008718:	ffffefff 	.word	0xffffefff
 800871c:	ffffdfff 	.word	0xffffdfff

08008720 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b086      	sub	sp, #24
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
 8008728:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6a1b      	ldr	r3, [r3, #32]
 800872e:	4a26      	ldr	r2, [pc, #152]	; (80087c8 <TIM_OC4_SetConfig+0xa8>)
 8008730:	401a      	ands	r2, r3
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6a1b      	ldr	r3, [r3, #32]
 800873a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	685b      	ldr	r3, [r3, #4]
 8008740:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	69db      	ldr	r3, [r3, #28]
 8008746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	4a20      	ldr	r2, [pc, #128]	; (80087cc <TIM_OC4_SetConfig+0xac>)
 800874c:	4013      	ands	r3, r2
 800874e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	4a1f      	ldr	r2, [pc, #124]	; (80087d0 <TIM_OC4_SetConfig+0xb0>)
 8008754:	4013      	ands	r3, r2
 8008756:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	021b      	lsls	r3, r3, #8
 800875e:	68fa      	ldr	r2, [r7, #12]
 8008760:	4313      	orrs	r3, r2
 8008762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008764:	693b      	ldr	r3, [r7, #16]
 8008766:	4a1b      	ldr	r2, [pc, #108]	; (80087d4 <TIM_OC4_SetConfig+0xb4>)
 8008768:	4013      	ands	r3, r2
 800876a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	689b      	ldr	r3, [r3, #8]
 8008770:	031b      	lsls	r3, r3, #12
 8008772:	693a      	ldr	r2, [r7, #16]
 8008774:	4313      	orrs	r3, r2
 8008776:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	4a17      	ldr	r2, [pc, #92]	; (80087d8 <TIM_OC4_SetConfig+0xb8>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d007      	beq.n	8008790 <TIM_OC4_SetConfig+0x70>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	4a16      	ldr	r2, [pc, #88]	; (80087dc <TIM_OC4_SetConfig+0xbc>)
 8008784:	4293      	cmp	r3, r2
 8008786:	d003      	beq.n	8008790 <TIM_OC4_SetConfig+0x70>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	4a15      	ldr	r2, [pc, #84]	; (80087e0 <TIM_OC4_SetConfig+0xc0>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d109      	bne.n	80087a4 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	4a14      	ldr	r2, [pc, #80]	; (80087e4 <TIM_OC4_SetConfig+0xc4>)
 8008794:	4013      	ands	r3, r2
 8008796:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	695b      	ldr	r3, [r3, #20]
 800879c:	019b      	lsls	r3, r3, #6
 800879e:	697a      	ldr	r2, [r7, #20]
 80087a0:	4313      	orrs	r3, r2
 80087a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	697a      	ldr	r2, [r7, #20]
 80087a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	68fa      	ldr	r2, [r7, #12]
 80087ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	685a      	ldr	r2, [r3, #4]
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	693a      	ldr	r2, [r7, #16]
 80087bc:	621a      	str	r2, [r3, #32]
}
 80087be:	46c0      	nop			; (mov r8, r8)
 80087c0:	46bd      	mov	sp, r7
 80087c2:	b006      	add	sp, #24
 80087c4:	bd80      	pop	{r7, pc}
 80087c6:	46c0      	nop			; (mov r8, r8)
 80087c8:	ffffefff 	.word	0xffffefff
 80087cc:	feff8fff 	.word	0xfeff8fff
 80087d0:	fffffcff 	.word	0xfffffcff
 80087d4:	ffffdfff 	.word	0xffffdfff
 80087d8:	40012c00 	.word	0x40012c00
 80087dc:	40014400 	.word	0x40014400
 80087e0:	40014800 	.word	0x40014800
 80087e4:	ffffbfff 	.word	0xffffbfff

080087e8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b086      	sub	sp, #24
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
 80087f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6a1b      	ldr	r3, [r3, #32]
 80087f6:	4a23      	ldr	r2, [pc, #140]	; (8008884 <TIM_OC5_SetConfig+0x9c>)
 80087f8:	401a      	ands	r2, r3
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6a1b      	ldr	r3, [r3, #32]
 8008802:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	685b      	ldr	r3, [r3, #4]
 8008808:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800880e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	4a1d      	ldr	r2, [pc, #116]	; (8008888 <TIM_OC5_SetConfig+0xa0>)
 8008814:	4013      	ands	r3, r2
 8008816:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	68fa      	ldr	r2, [r7, #12]
 800881e:	4313      	orrs	r3, r2
 8008820:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008822:	693b      	ldr	r3, [r7, #16]
 8008824:	4a19      	ldr	r2, [pc, #100]	; (800888c <TIM_OC5_SetConfig+0xa4>)
 8008826:	4013      	ands	r3, r2
 8008828:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	689b      	ldr	r3, [r3, #8]
 800882e:	041b      	lsls	r3, r3, #16
 8008830:	693a      	ldr	r2, [r7, #16]
 8008832:	4313      	orrs	r3, r2
 8008834:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	4a15      	ldr	r2, [pc, #84]	; (8008890 <TIM_OC5_SetConfig+0xa8>)
 800883a:	4293      	cmp	r3, r2
 800883c:	d007      	beq.n	800884e <TIM_OC5_SetConfig+0x66>
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	4a14      	ldr	r2, [pc, #80]	; (8008894 <TIM_OC5_SetConfig+0xac>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d003      	beq.n	800884e <TIM_OC5_SetConfig+0x66>
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	4a13      	ldr	r2, [pc, #76]	; (8008898 <TIM_OC5_SetConfig+0xb0>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d109      	bne.n	8008862 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800884e:	697b      	ldr	r3, [r7, #20]
 8008850:	4a0c      	ldr	r2, [pc, #48]	; (8008884 <TIM_OC5_SetConfig+0x9c>)
 8008852:	4013      	ands	r3, r2
 8008854:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	695b      	ldr	r3, [r3, #20]
 800885a:	021b      	lsls	r3, r3, #8
 800885c:	697a      	ldr	r2, [r7, #20]
 800885e:	4313      	orrs	r3, r2
 8008860:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	697a      	ldr	r2, [r7, #20]
 8008866:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	68fa      	ldr	r2, [r7, #12]
 800886c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	685a      	ldr	r2, [r3, #4]
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	693a      	ldr	r2, [r7, #16]
 800887a:	621a      	str	r2, [r3, #32]
}
 800887c:	46c0      	nop			; (mov r8, r8)
 800887e:	46bd      	mov	sp, r7
 8008880:	b006      	add	sp, #24
 8008882:	bd80      	pop	{r7, pc}
 8008884:	fffeffff 	.word	0xfffeffff
 8008888:	fffeff8f 	.word	0xfffeff8f
 800888c:	fffdffff 	.word	0xfffdffff
 8008890:	40012c00 	.word	0x40012c00
 8008894:	40014400 	.word	0x40014400
 8008898:	40014800 	.word	0x40014800

0800889c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b086      	sub	sp, #24
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
 80088a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6a1b      	ldr	r3, [r3, #32]
 80088aa:	4a24      	ldr	r2, [pc, #144]	; (800893c <TIM_OC6_SetConfig+0xa0>)
 80088ac:	401a      	ands	r2, r3
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6a1b      	ldr	r3, [r3, #32]
 80088b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	685b      	ldr	r3, [r3, #4]
 80088bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	4a1e      	ldr	r2, [pc, #120]	; (8008940 <TIM_OC6_SetConfig+0xa4>)
 80088c8:	4013      	ands	r3, r2
 80088ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	021b      	lsls	r3, r3, #8
 80088d2:	68fa      	ldr	r2, [r7, #12]
 80088d4:	4313      	orrs	r3, r2
 80088d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80088d8:	693b      	ldr	r3, [r7, #16]
 80088da:	4a1a      	ldr	r2, [pc, #104]	; (8008944 <TIM_OC6_SetConfig+0xa8>)
 80088dc:	4013      	ands	r3, r2
 80088de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	689b      	ldr	r3, [r3, #8]
 80088e4:	051b      	lsls	r3, r3, #20
 80088e6:	693a      	ldr	r2, [r7, #16]
 80088e8:	4313      	orrs	r3, r2
 80088ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	4a16      	ldr	r2, [pc, #88]	; (8008948 <TIM_OC6_SetConfig+0xac>)
 80088f0:	4293      	cmp	r3, r2
 80088f2:	d007      	beq.n	8008904 <TIM_OC6_SetConfig+0x68>
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	4a15      	ldr	r2, [pc, #84]	; (800894c <TIM_OC6_SetConfig+0xb0>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d003      	beq.n	8008904 <TIM_OC6_SetConfig+0x68>
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	4a14      	ldr	r2, [pc, #80]	; (8008950 <TIM_OC6_SetConfig+0xb4>)
 8008900:	4293      	cmp	r3, r2
 8008902:	d109      	bne.n	8008918 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008904:	697b      	ldr	r3, [r7, #20]
 8008906:	4a13      	ldr	r2, [pc, #76]	; (8008954 <TIM_OC6_SetConfig+0xb8>)
 8008908:	4013      	ands	r3, r2
 800890a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	695b      	ldr	r3, [r3, #20]
 8008910:	029b      	lsls	r3, r3, #10
 8008912:	697a      	ldr	r2, [r7, #20]
 8008914:	4313      	orrs	r3, r2
 8008916:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	697a      	ldr	r2, [r7, #20]
 800891c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	68fa      	ldr	r2, [r7, #12]
 8008922:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	685a      	ldr	r2, [r3, #4]
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	693a      	ldr	r2, [r7, #16]
 8008930:	621a      	str	r2, [r3, #32]
}
 8008932:	46c0      	nop			; (mov r8, r8)
 8008934:	46bd      	mov	sp, r7
 8008936:	b006      	add	sp, #24
 8008938:	bd80      	pop	{r7, pc}
 800893a:	46c0      	nop			; (mov r8, r8)
 800893c:	ffefffff 	.word	0xffefffff
 8008940:	feff8fff 	.word	0xfeff8fff
 8008944:	ffdfffff 	.word	0xffdfffff
 8008948:	40012c00 	.word	0x40012c00
 800894c:	40014400 	.word	0x40014400
 8008950:	40014800 	.word	0x40014800
 8008954:	fffbffff 	.word	0xfffbffff

08008958 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b086      	sub	sp, #24
 800895c:	af00      	add	r7, sp, #0
 800895e:	60f8      	str	r0, [r7, #12]
 8008960:	60b9      	str	r1, [r7, #8]
 8008962:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	221f      	movs	r2, #31
 8008968:	4013      	ands	r3, r2
 800896a:	2201      	movs	r2, #1
 800896c:	409a      	lsls	r2, r3
 800896e:	0013      	movs	r3, r2
 8008970:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	6a1b      	ldr	r3, [r3, #32]
 8008976:	697a      	ldr	r2, [r7, #20]
 8008978:	43d2      	mvns	r2, r2
 800897a:	401a      	ands	r2, r3
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	6a1a      	ldr	r2, [r3, #32]
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	211f      	movs	r1, #31
 8008988:	400b      	ands	r3, r1
 800898a:	6879      	ldr	r1, [r7, #4]
 800898c:	4099      	lsls	r1, r3
 800898e:	000b      	movs	r3, r1
 8008990:	431a      	orrs	r2, r3
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	621a      	str	r2, [r3, #32]
}
 8008996:	46c0      	nop			; (mov r8, r8)
 8008998:	46bd      	mov	sp, r7
 800899a:	b006      	add	sp, #24
 800899c:	bd80      	pop	{r7, pc}
	...

080089a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b084      	sub	sp, #16
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
 80089a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	223c      	movs	r2, #60	; 0x3c
 80089ae:	5c9b      	ldrb	r3, [r3, r2]
 80089b0:	2b01      	cmp	r3, #1
 80089b2:	d101      	bne.n	80089b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80089b4:	2302      	movs	r3, #2
 80089b6:	e04a      	b.n	8008a4e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	223c      	movs	r2, #60	; 0x3c
 80089bc:	2101      	movs	r1, #1
 80089be:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	223d      	movs	r2, #61	; 0x3d
 80089c4:	2102      	movs	r1, #2
 80089c6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	685b      	ldr	r3, [r3, #4]
 80089ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	689b      	ldr	r3, [r3, #8]
 80089d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	4a1e      	ldr	r2, [pc, #120]	; (8008a58 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80089de:	4293      	cmp	r3, r2
 80089e0:	d108      	bne.n	80089f4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	4a1d      	ldr	r2, [pc, #116]	; (8008a5c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80089e6:	4013      	ands	r3, r2
 80089e8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	685b      	ldr	r3, [r3, #4]
 80089ee:	68fa      	ldr	r2, [r7, #12]
 80089f0:	4313      	orrs	r3, r2
 80089f2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	2270      	movs	r2, #112	; 0x70
 80089f8:	4393      	bics	r3, r2
 80089fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	68fa      	ldr	r2, [r7, #12]
 8008a02:	4313      	orrs	r3, r2
 8008a04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	68fa      	ldr	r2, [r7, #12]
 8008a0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	4a11      	ldr	r2, [pc, #68]	; (8008a58 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d004      	beq.n	8008a22 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	4a10      	ldr	r2, [pc, #64]	; (8008a60 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d10c      	bne.n	8008a3c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	2280      	movs	r2, #128	; 0x80
 8008a26:	4393      	bics	r3, r2
 8008a28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	689b      	ldr	r3, [r3, #8]
 8008a2e:	68ba      	ldr	r2, [r7, #8]
 8008a30:	4313      	orrs	r3, r2
 8008a32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	68ba      	ldr	r2, [r7, #8]
 8008a3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	223d      	movs	r2, #61	; 0x3d
 8008a40:	2101      	movs	r1, #1
 8008a42:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	223c      	movs	r2, #60	; 0x3c
 8008a48:	2100      	movs	r1, #0
 8008a4a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008a4c:	2300      	movs	r3, #0
}
 8008a4e:	0018      	movs	r0, r3
 8008a50:	46bd      	mov	sp, r7
 8008a52:	b004      	add	sp, #16
 8008a54:	bd80      	pop	{r7, pc}
 8008a56:	46c0      	nop			; (mov r8, r8)
 8008a58:	40012c00 	.word	0x40012c00
 8008a5c:	ff0fffff 	.word	0xff0fffff
 8008a60:	40000400 	.word	0x40000400

08008a64 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b082      	sub	sp, #8
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008a6c:	46c0      	nop			; (mov r8, r8)
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	b002      	add	sp, #8
 8008a72:	bd80      	pop	{r7, pc}

08008a74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b082      	sub	sp, #8
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008a7c:	46c0      	nop			; (mov r8, r8)
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	b002      	add	sp, #8
 8008a82:	bd80      	pop	{r7, pc}

08008a84 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b082      	sub	sp, #8
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008a8c:	46c0      	nop			; (mov r8, r8)
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	b002      	add	sp, #8
 8008a92:	bd80      	pop	{r7, pc}

08008a94 <memset>:
 8008a94:	0003      	movs	r3, r0
 8008a96:	1882      	adds	r2, r0, r2
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d100      	bne.n	8008a9e <memset+0xa>
 8008a9c:	4770      	bx	lr
 8008a9e:	7019      	strb	r1, [r3, #0]
 8008aa0:	3301      	adds	r3, #1
 8008aa2:	e7f9      	b.n	8008a98 <memset+0x4>

08008aa4 <__errno>:
 8008aa4:	4b01      	ldr	r3, [pc, #4]	; (8008aac <__errno+0x8>)
 8008aa6:	6818      	ldr	r0, [r3, #0]
 8008aa8:	4770      	bx	lr
 8008aaa:	46c0      	nop			; (mov r8, r8)
 8008aac:	20000060 	.word	0x20000060

08008ab0 <__libc_init_array>:
 8008ab0:	b570      	push	{r4, r5, r6, lr}
 8008ab2:	2600      	movs	r6, #0
 8008ab4:	4c0c      	ldr	r4, [pc, #48]	; (8008ae8 <__libc_init_array+0x38>)
 8008ab6:	4d0d      	ldr	r5, [pc, #52]	; (8008aec <__libc_init_array+0x3c>)
 8008ab8:	1b64      	subs	r4, r4, r5
 8008aba:	10a4      	asrs	r4, r4, #2
 8008abc:	42a6      	cmp	r6, r4
 8008abe:	d109      	bne.n	8008ad4 <__libc_init_array+0x24>
 8008ac0:	2600      	movs	r6, #0
 8008ac2:	f000 ff25 	bl	8009910 <_init>
 8008ac6:	4c0a      	ldr	r4, [pc, #40]	; (8008af0 <__libc_init_array+0x40>)
 8008ac8:	4d0a      	ldr	r5, [pc, #40]	; (8008af4 <__libc_init_array+0x44>)
 8008aca:	1b64      	subs	r4, r4, r5
 8008acc:	10a4      	asrs	r4, r4, #2
 8008ace:	42a6      	cmp	r6, r4
 8008ad0:	d105      	bne.n	8008ade <__libc_init_array+0x2e>
 8008ad2:	bd70      	pop	{r4, r5, r6, pc}
 8008ad4:	00b3      	lsls	r3, r6, #2
 8008ad6:	58eb      	ldr	r3, [r5, r3]
 8008ad8:	4798      	blx	r3
 8008ada:	3601      	adds	r6, #1
 8008adc:	e7ee      	b.n	8008abc <__libc_init_array+0xc>
 8008ade:	00b3      	lsls	r3, r6, #2
 8008ae0:	58eb      	ldr	r3, [r5, r3]
 8008ae2:	4798      	blx	r3
 8008ae4:	3601      	adds	r6, #1
 8008ae6:	e7f2      	b.n	8008ace <__libc_init_array+0x1e>
 8008ae8:	08009a90 	.word	0x08009a90
 8008aec:	08009a90 	.word	0x08009a90
 8008af0:	08009a94 	.word	0x08009a94
 8008af4:	08009a90 	.word	0x08009a90

08008af8 <pow>:
 8008af8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008afa:	0014      	movs	r4, r2
 8008afc:	001d      	movs	r5, r3
 8008afe:	9000      	str	r0, [sp, #0]
 8008b00:	9101      	str	r1, [sp, #4]
 8008b02:	f000 f86f 	bl	8008be4 <__ieee754_pow>
 8008b06:	0022      	movs	r2, r4
 8008b08:	0006      	movs	r6, r0
 8008b0a:	000f      	movs	r7, r1
 8008b0c:	002b      	movs	r3, r5
 8008b0e:	0020      	movs	r0, r4
 8008b10:	0029      	movs	r1, r5
 8008b12:	f7f9 fb4f 	bl	80021b4 <__aeabi_dcmpun>
 8008b16:	2800      	cmp	r0, #0
 8008b18:	d13f      	bne.n	8008b9a <pow+0xa2>
 8008b1a:	9800      	ldr	r0, [sp, #0]
 8008b1c:	9901      	ldr	r1, [sp, #4]
 8008b1e:	2200      	movs	r2, #0
 8008b20:	2300      	movs	r3, #0
 8008b22:	f7f7 fc73 	bl	800040c <__aeabi_dcmpeq>
 8008b26:	2800      	cmp	r0, #0
 8008b28:	d019      	beq.n	8008b5e <pow+0x66>
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	0020      	movs	r0, r4
 8008b30:	0029      	movs	r1, r5
 8008b32:	f7f7 fc6b 	bl	800040c <__aeabi_dcmpeq>
 8008b36:	2800      	cmp	r0, #0
 8008b38:	d146      	bne.n	8008bc8 <pow+0xd0>
 8008b3a:	0020      	movs	r0, r4
 8008b3c:	0029      	movs	r1, r5
 8008b3e:	f000 f849 	bl	8008bd4 <finite>
 8008b42:	2800      	cmp	r0, #0
 8008b44:	d029      	beq.n	8008b9a <pow+0xa2>
 8008b46:	2200      	movs	r2, #0
 8008b48:	2300      	movs	r3, #0
 8008b4a:	0020      	movs	r0, r4
 8008b4c:	0029      	movs	r1, r5
 8008b4e:	f7f7 fc63 	bl	8000418 <__aeabi_dcmplt>
 8008b52:	2800      	cmp	r0, #0
 8008b54:	d021      	beq.n	8008b9a <pow+0xa2>
 8008b56:	f7ff ffa5 	bl	8008aa4 <__errno>
 8008b5a:	2322      	movs	r3, #34	; 0x22
 8008b5c:	e01c      	b.n	8008b98 <pow+0xa0>
 8008b5e:	0030      	movs	r0, r6
 8008b60:	0039      	movs	r1, r7
 8008b62:	f000 f837 	bl	8008bd4 <finite>
 8008b66:	2800      	cmp	r0, #0
 8008b68:	d11b      	bne.n	8008ba2 <pow+0xaa>
 8008b6a:	9800      	ldr	r0, [sp, #0]
 8008b6c:	9901      	ldr	r1, [sp, #4]
 8008b6e:	f000 f831 	bl	8008bd4 <finite>
 8008b72:	2800      	cmp	r0, #0
 8008b74:	d015      	beq.n	8008ba2 <pow+0xaa>
 8008b76:	0020      	movs	r0, r4
 8008b78:	0029      	movs	r1, r5
 8008b7a:	f000 f82b 	bl	8008bd4 <finite>
 8008b7e:	2800      	cmp	r0, #0
 8008b80:	d00f      	beq.n	8008ba2 <pow+0xaa>
 8008b82:	0032      	movs	r2, r6
 8008b84:	003b      	movs	r3, r7
 8008b86:	0030      	movs	r0, r6
 8008b88:	0039      	movs	r1, r7
 8008b8a:	f7f9 fb13 	bl	80021b4 <__aeabi_dcmpun>
 8008b8e:	2800      	cmp	r0, #0
 8008b90:	d0e1      	beq.n	8008b56 <pow+0x5e>
 8008b92:	f7ff ff87 	bl	8008aa4 <__errno>
 8008b96:	2321      	movs	r3, #33	; 0x21
 8008b98:	6003      	str	r3, [r0, #0]
 8008b9a:	0030      	movs	r0, r6
 8008b9c:	0039      	movs	r1, r7
 8008b9e:	b003      	add	sp, #12
 8008ba0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	0030      	movs	r0, r6
 8008ba8:	0039      	movs	r1, r7
 8008baa:	f7f7 fc2f 	bl	800040c <__aeabi_dcmpeq>
 8008bae:	2800      	cmp	r0, #0
 8008bb0:	d0f3      	beq.n	8008b9a <pow+0xa2>
 8008bb2:	9800      	ldr	r0, [sp, #0]
 8008bb4:	9901      	ldr	r1, [sp, #4]
 8008bb6:	f000 f80d 	bl	8008bd4 <finite>
 8008bba:	2800      	cmp	r0, #0
 8008bbc:	d0ed      	beq.n	8008b9a <pow+0xa2>
 8008bbe:	0020      	movs	r0, r4
 8008bc0:	0029      	movs	r1, r5
 8008bc2:	f000 f807 	bl	8008bd4 <finite>
 8008bc6:	e7c4      	b.n	8008b52 <pow+0x5a>
 8008bc8:	2600      	movs	r6, #0
 8008bca:	4f01      	ldr	r7, [pc, #4]	; (8008bd0 <pow+0xd8>)
 8008bcc:	e7e5      	b.n	8008b9a <pow+0xa2>
 8008bce:	46c0      	nop			; (mov r8, r8)
 8008bd0:	3ff00000 	.word	0x3ff00000

08008bd4 <finite>:
 8008bd4:	4b02      	ldr	r3, [pc, #8]	; (8008be0 <finite+0xc>)
 8008bd6:	0048      	lsls	r0, r1, #1
 8008bd8:	0840      	lsrs	r0, r0, #1
 8008bda:	18c0      	adds	r0, r0, r3
 8008bdc:	0fc0      	lsrs	r0, r0, #31
 8008bde:	4770      	bx	lr
 8008be0:	80100000 	.word	0x80100000

08008be4 <__ieee754_pow>:
 8008be4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008be6:	b095      	sub	sp, #84	; 0x54
 8008be8:	9202      	str	r2, [sp, #8]
 8008bea:	9303      	str	r3, [sp, #12]
 8008bec:	9b03      	ldr	r3, [sp, #12]
 8008bee:	9a03      	ldr	r2, [sp, #12]
 8008bf0:	9304      	str	r3, [sp, #16]
 8008bf2:	9b02      	ldr	r3, [sp, #8]
 8008bf4:	0056      	lsls	r6, r2, #1
 8008bf6:	001a      	movs	r2, r3
 8008bf8:	0876      	lsrs	r6, r6, #1
 8008bfa:	0007      	movs	r7, r0
 8008bfc:	000d      	movs	r5, r1
 8008bfe:	4332      	orrs	r2, r6
 8008c00:	d119      	bne.n	8008c36 <__ieee754_pow+0x52>
 8008c02:	2180      	movs	r1, #128	; 0x80
 8008c04:	0309      	lsls	r1, r1, #12
 8008c06:	4069      	eors	r1, r5
 8008c08:	0002      	movs	r2, r0
 8008c0a:	000b      	movs	r3, r1
 8008c0c:	1892      	adds	r2, r2, r2
 8008c0e:	415b      	adcs	r3, r3
 8008c10:	4989      	ldr	r1, [pc, #548]	; (8008e38 <__ieee754_pow+0x254>)
 8008c12:	428b      	cmp	r3, r1
 8008c14:	d806      	bhi.n	8008c24 <__ieee754_pow+0x40>
 8008c16:	d001      	beq.n	8008c1c <__ieee754_pow+0x38>
 8008c18:	f000 fcb6 	bl	8009588 <__ieee754_pow+0x9a4>
 8008c1c:	2a00      	cmp	r2, #0
 8008c1e:	d101      	bne.n	8008c24 <__ieee754_pow+0x40>
 8008c20:	f000 fcb2 	bl	8009588 <__ieee754_pow+0x9a4>
 8008c24:	9a02      	ldr	r2, [sp, #8]
 8008c26:	9b03      	ldr	r3, [sp, #12]
 8008c28:	0038      	movs	r0, r7
 8008c2a:	0029      	movs	r1, r5
 8008c2c:	f7f7 fd24 	bl	8000678 <__aeabi_dadd>
 8008c30:	9000      	str	r0, [sp, #0]
 8008c32:	9101      	str	r1, [sp, #4]
 8008c34:	e0ad      	b.n	8008d92 <__ieee754_pow+0x1ae>
 8008c36:	4a81      	ldr	r2, [pc, #516]	; (8008e3c <__ieee754_pow+0x258>)
 8008c38:	004c      	lsls	r4, r1, #1
 8008c3a:	9108      	str	r1, [sp, #32]
 8008c3c:	9000      	str	r0, [sp, #0]
 8008c3e:	0864      	lsrs	r4, r4, #1
 8008c40:	4294      	cmp	r4, r2
 8008c42:	dc08      	bgt.n	8008c56 <__ieee754_pow+0x72>
 8008c44:	d101      	bne.n	8008c4a <__ieee754_pow+0x66>
 8008c46:	2800      	cmp	r0, #0
 8008c48:	d1ec      	bne.n	8008c24 <__ieee754_pow+0x40>
 8008c4a:	4a7c      	ldr	r2, [pc, #496]	; (8008e3c <__ieee754_pow+0x258>)
 8008c4c:	4296      	cmp	r6, r2
 8008c4e:	dc02      	bgt.n	8008c56 <__ieee754_pow+0x72>
 8008c50:	d10c      	bne.n	8008c6c <__ieee754_pow+0x88>
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d00a      	beq.n	8008c6c <__ieee754_pow+0x88>
 8008c56:	4b7a      	ldr	r3, [pc, #488]	; (8008e40 <__ieee754_pow+0x25c>)
 8008c58:	18eb      	adds	r3, r5, r3
 8008c5a:	433b      	orrs	r3, r7
 8008c5c:	d1e2      	bne.n	8008c24 <__ieee754_pow+0x40>
 8008c5e:	2180      	movs	r1, #128	; 0x80
 8008c60:	9803      	ldr	r0, [sp, #12]
 8008c62:	0309      	lsls	r1, r1, #12
 8008c64:	4048      	eors	r0, r1
 8008c66:	0003      	movs	r3, r0
 8008c68:	9a02      	ldr	r2, [sp, #8]
 8008c6a:	e7cf      	b.n	8008c0c <__ieee754_pow+0x28>
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	9206      	str	r2, [sp, #24]
 8008c70:	2d00      	cmp	r5, #0
 8008c72:	da69      	bge.n	8008d48 <__ieee754_pow+0x164>
 8008c74:	4a73      	ldr	r2, [pc, #460]	; (8008e44 <__ieee754_pow+0x260>)
 8008c76:	4296      	cmp	r6, r2
 8008c78:	dc64      	bgt.n	8008d44 <__ieee754_pow+0x160>
 8008c7a:	4a73      	ldr	r2, [pc, #460]	; (8008e48 <__ieee754_pow+0x264>)
 8008c7c:	4296      	cmp	r6, r2
 8008c7e:	dd11      	ble.n	8008ca4 <__ieee754_pow+0xc0>
 8008c80:	4972      	ldr	r1, [pc, #456]	; (8008e4c <__ieee754_pow+0x268>)
 8008c82:	1532      	asrs	r2, r6, #20
 8008c84:	1852      	adds	r2, r2, r1
 8008c86:	2a14      	cmp	r2, #20
 8008c88:	dd3c      	ble.n	8008d04 <__ieee754_pow+0x120>
 8008c8a:	2134      	movs	r1, #52	; 0x34
 8008c8c:	1a89      	subs	r1, r1, r2
 8008c8e:	9a02      	ldr	r2, [sp, #8]
 8008c90:	40ca      	lsrs	r2, r1
 8008c92:	0010      	movs	r0, r2
 8008c94:	4088      	lsls	r0, r1
 8008c96:	4298      	cmp	r0, r3
 8008c98:	d104      	bne.n	8008ca4 <__ieee754_pow+0xc0>
 8008c9a:	2101      	movs	r1, #1
 8008c9c:	400a      	ands	r2, r1
 8008c9e:	1849      	adds	r1, r1, r1
 8008ca0:	1a8a      	subs	r2, r1, r2
 8008ca2:	9206      	str	r2, [sp, #24]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d03c      	beq.n	8008d22 <__ieee754_pow+0x13e>
 8008ca8:	0038      	movs	r0, r7
 8008caa:	0029      	movs	r1, r5
 8008cac:	f000 fca4 	bl	80095f8 <fabs>
 8008cb0:	9000      	str	r0, [sp, #0]
 8008cb2:	9101      	str	r1, [sp, #4]
 8008cb4:	2f00      	cmp	r7, #0
 8008cb6:	d000      	beq.n	8008cba <__ieee754_pow+0xd6>
 8008cb8:	e094      	b.n	8008de4 <__ieee754_pow+0x200>
 8008cba:	2c00      	cmp	r4, #0
 8008cbc:	d005      	beq.n	8008cca <__ieee754_pow+0xe6>
 8008cbe:	4a64      	ldr	r2, [pc, #400]	; (8008e50 <__ieee754_pow+0x26c>)
 8008cc0:	00ab      	lsls	r3, r5, #2
 8008cc2:	089b      	lsrs	r3, r3, #2
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	d000      	beq.n	8008cca <__ieee754_pow+0xe6>
 8008cc8:	e08c      	b.n	8008de4 <__ieee754_pow+0x200>
 8008cca:	9b04      	ldr	r3, [sp, #16]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	da07      	bge.n	8008ce0 <__ieee754_pow+0xfc>
 8008cd0:	9a00      	ldr	r2, [sp, #0]
 8008cd2:	9b01      	ldr	r3, [sp, #4]
 8008cd4:	2000      	movs	r0, #0
 8008cd6:	495e      	ldr	r1, [pc, #376]	; (8008e50 <__ieee754_pow+0x26c>)
 8008cd8:	f7f8 f82e 	bl	8000d38 <__aeabi_ddiv>
 8008cdc:	9000      	str	r0, [sp, #0]
 8008cde:	9101      	str	r1, [sp, #4]
 8008ce0:	9b08      	ldr	r3, [sp, #32]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	da55      	bge.n	8008d92 <__ieee754_pow+0x1ae>
 8008ce6:	4b56      	ldr	r3, [pc, #344]	; (8008e40 <__ieee754_pow+0x25c>)
 8008ce8:	18e4      	adds	r4, r4, r3
 8008cea:	9b06      	ldr	r3, [sp, #24]
 8008cec:	431c      	orrs	r4, r3
 8008cee:	d000      	beq.n	8008cf2 <__ieee754_pow+0x10e>
 8008cf0:	e06c      	b.n	8008dcc <__ieee754_pow+0x1e8>
 8008cf2:	9a00      	ldr	r2, [sp, #0]
 8008cf4:	9b01      	ldr	r3, [sp, #4]
 8008cf6:	0010      	movs	r0, r2
 8008cf8:	0019      	movs	r1, r3
 8008cfa:	f7f8 fed9 	bl	8001ab0 <__aeabi_dsub>
 8008cfe:	0002      	movs	r2, r0
 8008d00:	000b      	movs	r3, r1
 8008d02:	e01c      	b.n	8008d3e <__ieee754_pow+0x15a>
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d1cf      	bne.n	8008ca8 <__ieee754_pow+0xc4>
 8008d08:	3314      	adds	r3, #20
 8008d0a:	1a9a      	subs	r2, r3, r2
 8008d0c:	0033      	movs	r3, r6
 8008d0e:	4113      	asrs	r3, r2
 8008d10:	0019      	movs	r1, r3
 8008d12:	4091      	lsls	r1, r2
 8008d14:	42b1      	cmp	r1, r6
 8008d16:	d104      	bne.n	8008d22 <__ieee754_pow+0x13e>
 8008d18:	2201      	movs	r2, #1
 8008d1a:	4013      	ands	r3, r2
 8008d1c:	1892      	adds	r2, r2, r2
 8008d1e:	1ad3      	subs	r3, r2, r3
 8008d20:	9306      	str	r3, [sp, #24]
 8008d22:	4b4b      	ldr	r3, [pc, #300]	; (8008e50 <__ieee754_pow+0x26c>)
 8008d24:	429e      	cmp	r6, r3
 8008d26:	d138      	bne.n	8008d9a <__ieee754_pow+0x1b6>
 8008d28:	0038      	movs	r0, r7
 8008d2a:	0029      	movs	r1, r5
 8008d2c:	9b04      	ldr	r3, [sp, #16]
 8008d2e:	9000      	str	r0, [sp, #0]
 8008d30:	9101      	str	r1, [sp, #4]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	da2d      	bge.n	8008d92 <__ieee754_pow+0x1ae>
 8008d36:	003a      	movs	r2, r7
 8008d38:	002b      	movs	r3, r5
 8008d3a:	2000      	movs	r0, #0
 8008d3c:	4944      	ldr	r1, [pc, #272]	; (8008e50 <__ieee754_pow+0x26c>)
 8008d3e:	f7f7 fffb 	bl	8000d38 <__aeabi_ddiv>
 8008d42:	e775      	b.n	8008c30 <__ieee754_pow+0x4c>
 8008d44:	2202      	movs	r2, #2
 8008d46:	9206      	str	r2, [sp, #24]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d1ad      	bne.n	8008ca8 <__ieee754_pow+0xc4>
 8008d4c:	4b3b      	ldr	r3, [pc, #236]	; (8008e3c <__ieee754_pow+0x258>)
 8008d4e:	429e      	cmp	r6, r3
 8008d50:	d1e7      	bne.n	8008d22 <__ieee754_pow+0x13e>
 8008d52:	4b3b      	ldr	r3, [pc, #236]	; (8008e40 <__ieee754_pow+0x25c>)
 8008d54:	18e3      	adds	r3, r4, r3
 8008d56:	433b      	orrs	r3, r7
 8008d58:	d101      	bne.n	8008d5e <__ieee754_pow+0x17a>
 8008d5a:	f000 fc15 	bl	8009588 <__ieee754_pow+0x9a4>
 8008d5e:	4b3a      	ldr	r3, [pc, #232]	; (8008e48 <__ieee754_pow+0x264>)
 8008d60:	429c      	cmp	r4, r3
 8008d62:	dd09      	ble.n	8008d78 <__ieee754_pow+0x194>
 8008d64:	9b04      	ldr	r3, [sp, #16]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	da01      	bge.n	8008d6e <__ieee754_pow+0x18a>
 8008d6a:	f000 fc11 	bl	8009590 <__ieee754_pow+0x9ac>
 8008d6e:	9b02      	ldr	r3, [sp, #8]
 8008d70:	9c03      	ldr	r4, [sp, #12]
 8008d72:	9300      	str	r3, [sp, #0]
 8008d74:	9401      	str	r4, [sp, #4]
 8008d76:	e00c      	b.n	8008d92 <__ieee754_pow+0x1ae>
 8008d78:	9b04      	ldr	r3, [sp, #16]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	db01      	blt.n	8008d82 <__ieee754_pow+0x19e>
 8008d7e:	f000 fc07 	bl	8009590 <__ieee754_pow+0x9ac>
 8008d82:	2280      	movs	r2, #128	; 0x80
 8008d84:	0612      	lsls	r2, r2, #24
 8008d86:	4694      	mov	ip, r2
 8008d88:	9b02      	ldr	r3, [sp, #8]
 8008d8a:	9300      	str	r3, [sp, #0]
 8008d8c:	9b03      	ldr	r3, [sp, #12]
 8008d8e:	4463      	add	r3, ip
 8008d90:	9301      	str	r3, [sp, #4]
 8008d92:	9800      	ldr	r0, [sp, #0]
 8008d94:	9901      	ldr	r1, [sp, #4]
 8008d96:	b015      	add	sp, #84	; 0x54
 8008d98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d9a:	2380      	movs	r3, #128	; 0x80
 8008d9c:	9a04      	ldr	r2, [sp, #16]
 8008d9e:	05db      	lsls	r3, r3, #23
 8008da0:	429a      	cmp	r2, r3
 8008da2:	d106      	bne.n	8008db2 <__ieee754_pow+0x1ce>
 8008da4:	003a      	movs	r2, r7
 8008da6:	002b      	movs	r3, r5
 8008da8:	0038      	movs	r0, r7
 8008daa:	0029      	movs	r1, r5
 8008dac:	f7f8 fbbe 	bl	800152c <__aeabi_dmul>
 8008db0:	e73e      	b.n	8008c30 <__ieee754_pow+0x4c>
 8008db2:	4b28      	ldr	r3, [pc, #160]	; (8008e54 <__ieee754_pow+0x270>)
 8008db4:	9a04      	ldr	r2, [sp, #16]
 8008db6:	429a      	cmp	r2, r3
 8008db8:	d000      	beq.n	8008dbc <__ieee754_pow+0x1d8>
 8008dba:	e775      	b.n	8008ca8 <__ieee754_pow+0xc4>
 8008dbc:	2d00      	cmp	r5, #0
 8008dbe:	da00      	bge.n	8008dc2 <__ieee754_pow+0x1de>
 8008dc0:	e772      	b.n	8008ca8 <__ieee754_pow+0xc4>
 8008dc2:	0038      	movs	r0, r7
 8008dc4:	0029      	movs	r1, r5
 8008dc6:	f000 fcb7 	bl	8009738 <__ieee754_sqrt>
 8008dca:	e731      	b.n	8008c30 <__ieee754_pow+0x4c>
 8008dcc:	9b06      	ldr	r3, [sp, #24]
 8008dce:	2b01      	cmp	r3, #1
 8008dd0:	d1df      	bne.n	8008d92 <__ieee754_pow+0x1ae>
 8008dd2:	9800      	ldr	r0, [sp, #0]
 8008dd4:	2180      	movs	r1, #128	; 0x80
 8008dd6:	0002      	movs	r2, r0
 8008dd8:	9801      	ldr	r0, [sp, #4]
 8008dda:	0609      	lsls	r1, r1, #24
 8008ddc:	1843      	adds	r3, r0, r1
 8008dde:	9200      	str	r2, [sp, #0]
 8008de0:	9301      	str	r3, [sp, #4]
 8008de2:	e7d6      	b.n	8008d92 <__ieee754_pow+0x1ae>
 8008de4:	0feb      	lsrs	r3, r5, #31
 8008de6:	3b01      	subs	r3, #1
 8008de8:	930e      	str	r3, [sp, #56]	; 0x38
 8008dea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008dec:	9b06      	ldr	r3, [sp, #24]
 8008dee:	4313      	orrs	r3, r2
 8008df0:	d104      	bne.n	8008dfc <__ieee754_pow+0x218>
 8008df2:	003a      	movs	r2, r7
 8008df4:	002b      	movs	r3, r5
 8008df6:	0038      	movs	r0, r7
 8008df8:	0029      	movs	r1, r5
 8008dfa:	e77e      	b.n	8008cfa <__ieee754_pow+0x116>
 8008dfc:	4b16      	ldr	r3, [pc, #88]	; (8008e58 <__ieee754_pow+0x274>)
 8008dfe:	429e      	cmp	r6, r3
 8008e00:	dc00      	bgt.n	8008e04 <__ieee754_pow+0x220>
 8008e02:	e0f1      	b.n	8008fe8 <__ieee754_pow+0x404>
 8008e04:	4b15      	ldr	r3, [pc, #84]	; (8008e5c <__ieee754_pow+0x278>)
 8008e06:	429e      	cmp	r6, r3
 8008e08:	dd09      	ble.n	8008e1e <__ieee754_pow+0x23a>
 8008e0a:	4b0f      	ldr	r3, [pc, #60]	; (8008e48 <__ieee754_pow+0x264>)
 8008e0c:	429c      	cmp	r4, r3
 8008e0e:	dc0c      	bgt.n	8008e2a <__ieee754_pow+0x246>
 8008e10:	9b04      	ldr	r3, [sp, #16]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	da0c      	bge.n	8008e30 <__ieee754_pow+0x24c>
 8008e16:	2000      	movs	r0, #0
 8008e18:	f000 fc86 	bl	8009728 <__math_oflow>
 8008e1c:	e708      	b.n	8008c30 <__ieee754_pow+0x4c>
 8008e1e:	4b10      	ldr	r3, [pc, #64]	; (8008e60 <__ieee754_pow+0x27c>)
 8008e20:	429c      	cmp	r4, r3
 8008e22:	ddf5      	ble.n	8008e10 <__ieee754_pow+0x22c>
 8008e24:	4b0a      	ldr	r3, [pc, #40]	; (8008e50 <__ieee754_pow+0x26c>)
 8008e26:	429c      	cmp	r4, r3
 8008e28:	dd1c      	ble.n	8008e64 <__ieee754_pow+0x280>
 8008e2a:	9b04      	ldr	r3, [sp, #16]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	dcf2      	bgt.n	8008e16 <__ieee754_pow+0x232>
 8008e30:	2000      	movs	r0, #0
 8008e32:	f000 fc72 	bl	800971a <__math_uflow>
 8008e36:	e6fb      	b.n	8008c30 <__ieee754_pow+0x4c>
 8008e38:	fff00000 	.word	0xfff00000
 8008e3c:	7ff00000 	.word	0x7ff00000
 8008e40:	c0100000 	.word	0xc0100000
 8008e44:	433fffff 	.word	0x433fffff
 8008e48:	3fefffff 	.word	0x3fefffff
 8008e4c:	fffffc01 	.word	0xfffffc01
 8008e50:	3ff00000 	.word	0x3ff00000
 8008e54:	3fe00000 	.word	0x3fe00000
 8008e58:	41e00000 	.word	0x41e00000
 8008e5c:	43f00000 	.word	0x43f00000
 8008e60:	3feffffe 	.word	0x3feffffe
 8008e64:	2200      	movs	r2, #0
 8008e66:	9800      	ldr	r0, [sp, #0]
 8008e68:	9901      	ldr	r1, [sp, #4]
 8008e6a:	4b53      	ldr	r3, [pc, #332]	; (8008fb8 <__ieee754_pow+0x3d4>)
 8008e6c:	f7f8 fe20 	bl	8001ab0 <__aeabi_dsub>
 8008e70:	22c0      	movs	r2, #192	; 0xc0
 8008e72:	4b52      	ldr	r3, [pc, #328]	; (8008fbc <__ieee754_pow+0x3d8>)
 8008e74:	05d2      	lsls	r2, r2, #23
 8008e76:	0004      	movs	r4, r0
 8008e78:	000d      	movs	r5, r1
 8008e7a:	f7f8 fb57 	bl	800152c <__aeabi_dmul>
 8008e7e:	4a50      	ldr	r2, [pc, #320]	; (8008fc0 <__ieee754_pow+0x3dc>)
 8008e80:	0006      	movs	r6, r0
 8008e82:	000f      	movs	r7, r1
 8008e84:	0020      	movs	r0, r4
 8008e86:	0029      	movs	r1, r5
 8008e88:	4b4e      	ldr	r3, [pc, #312]	; (8008fc4 <__ieee754_pow+0x3e0>)
 8008e8a:	f7f8 fb4f 	bl	800152c <__aeabi_dmul>
 8008e8e:	2200      	movs	r2, #0
 8008e90:	9000      	str	r0, [sp, #0]
 8008e92:	9101      	str	r1, [sp, #4]
 8008e94:	4b4c      	ldr	r3, [pc, #304]	; (8008fc8 <__ieee754_pow+0x3e4>)
 8008e96:	0020      	movs	r0, r4
 8008e98:	0029      	movs	r1, r5
 8008e9a:	f7f8 fb47 	bl	800152c <__aeabi_dmul>
 8008e9e:	0002      	movs	r2, r0
 8008ea0:	000b      	movs	r3, r1
 8008ea2:	484a      	ldr	r0, [pc, #296]	; (8008fcc <__ieee754_pow+0x3e8>)
 8008ea4:	494a      	ldr	r1, [pc, #296]	; (8008fd0 <__ieee754_pow+0x3ec>)
 8008ea6:	f7f8 fe03 	bl	8001ab0 <__aeabi_dsub>
 8008eaa:	0022      	movs	r2, r4
 8008eac:	002b      	movs	r3, r5
 8008eae:	f7f8 fb3d 	bl	800152c <__aeabi_dmul>
 8008eb2:	0002      	movs	r2, r0
 8008eb4:	000b      	movs	r3, r1
 8008eb6:	2000      	movs	r0, #0
 8008eb8:	4946      	ldr	r1, [pc, #280]	; (8008fd4 <__ieee754_pow+0x3f0>)
 8008eba:	f7f8 fdf9 	bl	8001ab0 <__aeabi_dsub>
 8008ebe:	0022      	movs	r2, r4
 8008ec0:	002b      	movs	r3, r5
 8008ec2:	9004      	str	r0, [sp, #16]
 8008ec4:	9105      	str	r1, [sp, #20]
 8008ec6:	0020      	movs	r0, r4
 8008ec8:	0029      	movs	r1, r5
 8008eca:	f7f8 fb2f 	bl	800152c <__aeabi_dmul>
 8008ece:	0002      	movs	r2, r0
 8008ed0:	000b      	movs	r3, r1
 8008ed2:	9804      	ldr	r0, [sp, #16]
 8008ed4:	9905      	ldr	r1, [sp, #20]
 8008ed6:	f7f8 fb29 	bl	800152c <__aeabi_dmul>
 8008eda:	4a3f      	ldr	r2, [pc, #252]	; (8008fd8 <__ieee754_pow+0x3f4>)
 8008edc:	4b37      	ldr	r3, [pc, #220]	; (8008fbc <__ieee754_pow+0x3d8>)
 8008ede:	f7f8 fb25 	bl	800152c <__aeabi_dmul>
 8008ee2:	0002      	movs	r2, r0
 8008ee4:	000b      	movs	r3, r1
 8008ee6:	9800      	ldr	r0, [sp, #0]
 8008ee8:	9901      	ldr	r1, [sp, #4]
 8008eea:	f7f8 fde1 	bl	8001ab0 <__aeabi_dsub>
 8008eee:	0002      	movs	r2, r0
 8008ef0:	000b      	movs	r3, r1
 8008ef2:	0004      	movs	r4, r0
 8008ef4:	000d      	movs	r5, r1
 8008ef6:	0030      	movs	r0, r6
 8008ef8:	0039      	movs	r1, r7
 8008efa:	f7f7 fbbd 	bl	8000678 <__aeabi_dadd>
 8008efe:	2000      	movs	r0, #0
 8008f00:	0032      	movs	r2, r6
 8008f02:	003b      	movs	r3, r7
 8008f04:	9004      	str	r0, [sp, #16]
 8008f06:	9105      	str	r1, [sp, #20]
 8008f08:	f7f8 fdd2 	bl	8001ab0 <__aeabi_dsub>
 8008f0c:	0002      	movs	r2, r0
 8008f0e:	000b      	movs	r3, r1
 8008f10:	0020      	movs	r0, r4
 8008f12:	0029      	movs	r1, r5
 8008f14:	f7f8 fdcc 	bl	8001ab0 <__aeabi_dsub>
 8008f18:	9b06      	ldr	r3, [sp, #24]
 8008f1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008f1c:	3b01      	subs	r3, #1
 8008f1e:	0006      	movs	r6, r0
 8008f20:	000f      	movs	r7, r1
 8008f22:	4313      	orrs	r3, r2
 8008f24:	d000      	beq.n	8008f28 <__ieee754_pow+0x344>
 8008f26:	e1dc      	b.n	80092e2 <__ieee754_pow+0x6fe>
 8008f28:	2300      	movs	r3, #0
 8008f2a:	4c2c      	ldr	r4, [pc, #176]	; (8008fdc <__ieee754_pow+0x3f8>)
 8008f2c:	9300      	str	r3, [sp, #0]
 8008f2e:	9401      	str	r4, [sp, #4]
 8008f30:	9c02      	ldr	r4, [sp, #8]
 8008f32:	9d03      	ldr	r5, [sp, #12]
 8008f34:	9802      	ldr	r0, [sp, #8]
 8008f36:	9903      	ldr	r1, [sp, #12]
 8008f38:	2400      	movs	r4, #0
 8008f3a:	002b      	movs	r3, r5
 8008f3c:	0022      	movs	r2, r4
 8008f3e:	f7f8 fdb7 	bl	8001ab0 <__aeabi_dsub>
 8008f42:	9a04      	ldr	r2, [sp, #16]
 8008f44:	9b05      	ldr	r3, [sp, #20]
 8008f46:	f7f8 faf1 	bl	800152c <__aeabi_dmul>
 8008f4a:	9a02      	ldr	r2, [sp, #8]
 8008f4c:	9b03      	ldr	r3, [sp, #12]
 8008f4e:	9006      	str	r0, [sp, #24]
 8008f50:	9107      	str	r1, [sp, #28]
 8008f52:	0030      	movs	r0, r6
 8008f54:	0039      	movs	r1, r7
 8008f56:	f7f8 fae9 	bl	800152c <__aeabi_dmul>
 8008f5a:	0002      	movs	r2, r0
 8008f5c:	000b      	movs	r3, r1
 8008f5e:	9806      	ldr	r0, [sp, #24]
 8008f60:	9907      	ldr	r1, [sp, #28]
 8008f62:	f7f7 fb89 	bl	8000678 <__aeabi_dadd>
 8008f66:	0022      	movs	r2, r4
 8008f68:	002b      	movs	r3, r5
 8008f6a:	0006      	movs	r6, r0
 8008f6c:	000f      	movs	r7, r1
 8008f6e:	9804      	ldr	r0, [sp, #16]
 8008f70:	9905      	ldr	r1, [sp, #20]
 8008f72:	f7f8 fadb 	bl	800152c <__aeabi_dmul>
 8008f76:	0003      	movs	r3, r0
 8008f78:	000c      	movs	r4, r1
 8008f7a:	9004      	str	r0, [sp, #16]
 8008f7c:	9105      	str	r1, [sp, #20]
 8008f7e:	9306      	str	r3, [sp, #24]
 8008f80:	9407      	str	r4, [sp, #28]
 8008f82:	0002      	movs	r2, r0
 8008f84:	000b      	movs	r3, r1
 8008f86:	0030      	movs	r0, r6
 8008f88:	0039      	movs	r1, r7
 8008f8a:	f7f7 fb75 	bl	8000678 <__aeabi_dadd>
 8008f8e:	4b14      	ldr	r3, [pc, #80]	; (8008fe0 <__ieee754_pow+0x3fc>)
 8008f90:	0005      	movs	r5, r0
 8008f92:	000c      	movs	r4, r1
 8008f94:	9108      	str	r1, [sp, #32]
 8008f96:	4299      	cmp	r1, r3
 8008f98:	dc00      	bgt.n	8008f9c <__ieee754_pow+0x3b8>
 8008f9a:	e2d4      	b.n	8009546 <__ieee754_pow+0x962>
 8008f9c:	4b11      	ldr	r3, [pc, #68]	; (8008fe4 <__ieee754_pow+0x400>)
 8008f9e:	18cb      	adds	r3, r1, r3
 8008fa0:	4303      	orrs	r3, r0
 8008fa2:	d100      	bne.n	8008fa6 <__ieee754_pow+0x3c2>
 8008fa4:	e1d6      	b.n	8009354 <__ieee754_pow+0x770>
 8008fa6:	9800      	ldr	r0, [sp, #0]
 8008fa8:	9901      	ldr	r1, [sp, #4]
 8008faa:	2300      	movs	r3, #0
 8008fac:	2200      	movs	r2, #0
 8008fae:	f7f7 fa33 	bl	8000418 <__aeabi_dcmplt>
 8008fb2:	1e43      	subs	r3, r0, #1
 8008fb4:	4198      	sbcs	r0, r3
 8008fb6:	e72f      	b.n	8008e18 <__ieee754_pow+0x234>
 8008fb8:	3ff00000 	.word	0x3ff00000
 8008fbc:	3ff71547 	.word	0x3ff71547
 8008fc0:	f85ddf44 	.word	0xf85ddf44
 8008fc4:	3e54ae0b 	.word	0x3e54ae0b
 8008fc8:	3fd00000 	.word	0x3fd00000
 8008fcc:	55555555 	.word	0x55555555
 8008fd0:	3fd55555 	.word	0x3fd55555
 8008fd4:	3fe00000 	.word	0x3fe00000
 8008fd8:	652b82fe 	.word	0x652b82fe
 8008fdc:	bff00000 	.word	0xbff00000
 8008fe0:	408fffff 	.word	0x408fffff
 8008fe4:	bf700000 	.word	0xbf700000
 8008fe8:	4bbf      	ldr	r3, [pc, #764]	; (80092e8 <__ieee754_pow+0x704>)
 8008fea:	2200      	movs	r2, #0
 8008fec:	422b      	tst	r3, r5
 8008fee:	d10a      	bne.n	8009006 <__ieee754_pow+0x422>
 8008ff0:	9800      	ldr	r0, [sp, #0]
 8008ff2:	9901      	ldr	r1, [sp, #4]
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	4bbd      	ldr	r3, [pc, #756]	; (80092ec <__ieee754_pow+0x708>)
 8008ff8:	f7f8 fa98 	bl	800152c <__aeabi_dmul>
 8008ffc:	2235      	movs	r2, #53	; 0x35
 8008ffe:	9000      	str	r0, [sp, #0]
 8009000:	9101      	str	r1, [sp, #4]
 8009002:	9c01      	ldr	r4, [sp, #4]
 8009004:	4252      	negs	r2, r2
 8009006:	49ba      	ldr	r1, [pc, #744]	; (80092f0 <__ieee754_pow+0x70c>)
 8009008:	1523      	asrs	r3, r4, #20
 800900a:	185b      	adds	r3, r3, r1
 800900c:	189b      	adds	r3, r3, r2
 800900e:	0324      	lsls	r4, r4, #12
 8009010:	4db8      	ldr	r5, [pc, #736]	; (80092f4 <__ieee754_pow+0x710>)
 8009012:	930d      	str	r3, [sp, #52]	; 0x34
 8009014:	4bb8      	ldr	r3, [pc, #736]	; (80092f8 <__ieee754_pow+0x714>)
 8009016:	0b22      	lsrs	r2, r4, #12
 8009018:	4315      	orrs	r5, r2
 800901a:	2400      	movs	r4, #0
 800901c:	429a      	cmp	r2, r3
 800901e:	dd09      	ble.n	8009034 <__ieee754_pow+0x450>
 8009020:	4bb6      	ldr	r3, [pc, #728]	; (80092fc <__ieee754_pow+0x718>)
 8009022:	3401      	adds	r4, #1
 8009024:	429a      	cmp	r2, r3
 8009026:	dd05      	ble.n	8009034 <__ieee754_pow+0x450>
 8009028:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800902a:	191b      	adds	r3, r3, r4
 800902c:	2400      	movs	r4, #0
 800902e:	930d      	str	r3, [sp, #52]	; 0x34
 8009030:	4bb3      	ldr	r3, [pc, #716]	; (8009300 <__ieee754_pow+0x71c>)
 8009032:	18ed      	adds	r5, r5, r3
 8009034:	4bb3      	ldr	r3, [pc, #716]	; (8009304 <__ieee754_pow+0x720>)
 8009036:	00e2      	lsls	r2, r4, #3
 8009038:	189b      	adds	r3, r3, r2
 800903a:	9800      	ldr	r0, [sp, #0]
 800903c:	9901      	ldr	r1, [sp, #4]
 800903e:	920f      	str	r2, [sp, #60]	; 0x3c
 8009040:	0029      	movs	r1, r5
 8009042:	681a      	ldr	r2, [r3, #0]
 8009044:	685b      	ldr	r3, [r3, #4]
 8009046:	0006      	movs	r6, r0
 8009048:	920a      	str	r2, [sp, #40]	; 0x28
 800904a:	930b      	str	r3, [sp, #44]	; 0x2c
 800904c:	f7f8 fd30 	bl	8001ab0 <__aeabi_dsub>
 8009050:	0032      	movs	r2, r6
 8009052:	002b      	movs	r3, r5
 8009054:	9010      	str	r0, [sp, #64]	; 0x40
 8009056:	9111      	str	r1, [sp, #68]	; 0x44
 8009058:	980a      	ldr	r0, [sp, #40]	; 0x28
 800905a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800905c:	f7f7 fb0c 	bl	8000678 <__aeabi_dadd>
 8009060:	0002      	movs	r2, r0
 8009062:	000b      	movs	r3, r1
 8009064:	2000      	movs	r0, #0
 8009066:	49a3      	ldr	r1, [pc, #652]	; (80092f4 <__ieee754_pow+0x710>)
 8009068:	f7f7 fe66 	bl	8000d38 <__aeabi_ddiv>
 800906c:	0002      	movs	r2, r0
 800906e:	000b      	movs	r3, r1
 8009070:	9012      	str	r0, [sp, #72]	; 0x48
 8009072:	9113      	str	r1, [sp, #76]	; 0x4c
 8009074:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009076:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009078:	f7f8 fa58 	bl	800152c <__aeabi_dmul>
 800907c:	9008      	str	r0, [sp, #32]
 800907e:	9109      	str	r1, [sp, #36]	; 0x24
 8009080:	9a08      	ldr	r2, [sp, #32]
 8009082:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009084:	9204      	str	r2, [sp, #16]
 8009086:	9305      	str	r3, [sp, #20]
 8009088:	2300      	movs	r3, #0
 800908a:	2180      	movs	r1, #128	; 0x80
 800908c:	2080      	movs	r0, #128	; 0x80
 800908e:	9304      	str	r3, [sp, #16]
 8009090:	9a04      	ldr	r2, [sp, #16]
 8009092:	9b05      	ldr	r3, [sp, #20]
 8009094:	9200      	str	r2, [sp, #0]
 8009096:	9301      	str	r3, [sp, #4]
 8009098:	2200      	movs	r2, #0
 800909a:	002f      	movs	r7, r5
 800909c:	0589      	lsls	r1, r1, #22
 800909e:	106d      	asrs	r5, r5, #1
 80090a0:	4329      	orrs	r1, r5
 80090a2:	0300      	lsls	r0, r0, #12
 80090a4:	1809      	adds	r1, r1, r0
 80090a6:	04a0      	lsls	r0, r4, #18
 80090a8:	180b      	adds	r3, r1, r0
 80090aa:	9800      	ldr	r0, [sp, #0]
 80090ac:	9901      	ldr	r1, [sp, #4]
 80090ae:	0014      	movs	r4, r2
 80090b0:	001d      	movs	r5, r3
 80090b2:	f7f8 fa3b 	bl	800152c <__aeabi_dmul>
 80090b6:	0002      	movs	r2, r0
 80090b8:	000b      	movs	r3, r1
 80090ba:	9810      	ldr	r0, [sp, #64]	; 0x40
 80090bc:	9911      	ldr	r1, [sp, #68]	; 0x44
 80090be:	f7f8 fcf7 	bl	8001ab0 <__aeabi_dsub>
 80090c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80090c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090c6:	9010      	str	r0, [sp, #64]	; 0x40
 80090c8:	9111      	str	r1, [sp, #68]	; 0x44
 80090ca:	0020      	movs	r0, r4
 80090cc:	0029      	movs	r1, r5
 80090ce:	f7f8 fcef 	bl	8001ab0 <__aeabi_dsub>
 80090d2:	0002      	movs	r2, r0
 80090d4:	000b      	movs	r3, r1
 80090d6:	0030      	movs	r0, r6
 80090d8:	0039      	movs	r1, r7
 80090da:	f7f8 fce9 	bl	8001ab0 <__aeabi_dsub>
 80090de:	9a00      	ldr	r2, [sp, #0]
 80090e0:	9b01      	ldr	r3, [sp, #4]
 80090e2:	f7f8 fa23 	bl	800152c <__aeabi_dmul>
 80090e6:	0002      	movs	r2, r0
 80090e8:	000b      	movs	r3, r1
 80090ea:	9810      	ldr	r0, [sp, #64]	; 0x40
 80090ec:	9911      	ldr	r1, [sp, #68]	; 0x44
 80090ee:	f7f8 fcdf 	bl	8001ab0 <__aeabi_dsub>
 80090f2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80090f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80090f6:	f7f8 fa19 	bl	800152c <__aeabi_dmul>
 80090fa:	9a08      	ldr	r2, [sp, #32]
 80090fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090fe:	900a      	str	r0, [sp, #40]	; 0x28
 8009100:	910b      	str	r1, [sp, #44]	; 0x2c
 8009102:	0010      	movs	r0, r2
 8009104:	0019      	movs	r1, r3
 8009106:	f7f8 fa11 	bl	800152c <__aeabi_dmul>
 800910a:	0006      	movs	r6, r0
 800910c:	000f      	movs	r7, r1
 800910e:	4a7e      	ldr	r2, [pc, #504]	; (8009308 <__ieee754_pow+0x724>)
 8009110:	4b7e      	ldr	r3, [pc, #504]	; (800930c <__ieee754_pow+0x728>)
 8009112:	f7f8 fa0b 	bl	800152c <__aeabi_dmul>
 8009116:	4a7e      	ldr	r2, [pc, #504]	; (8009310 <__ieee754_pow+0x72c>)
 8009118:	4b7e      	ldr	r3, [pc, #504]	; (8009314 <__ieee754_pow+0x730>)
 800911a:	f7f7 faad 	bl	8000678 <__aeabi_dadd>
 800911e:	0032      	movs	r2, r6
 8009120:	003b      	movs	r3, r7
 8009122:	f7f8 fa03 	bl	800152c <__aeabi_dmul>
 8009126:	4a7c      	ldr	r2, [pc, #496]	; (8009318 <__ieee754_pow+0x734>)
 8009128:	4b7c      	ldr	r3, [pc, #496]	; (800931c <__ieee754_pow+0x738>)
 800912a:	f7f7 faa5 	bl	8000678 <__aeabi_dadd>
 800912e:	0032      	movs	r2, r6
 8009130:	003b      	movs	r3, r7
 8009132:	f7f8 f9fb 	bl	800152c <__aeabi_dmul>
 8009136:	4a7a      	ldr	r2, [pc, #488]	; (8009320 <__ieee754_pow+0x73c>)
 8009138:	4b7a      	ldr	r3, [pc, #488]	; (8009324 <__ieee754_pow+0x740>)
 800913a:	f7f7 fa9d 	bl	8000678 <__aeabi_dadd>
 800913e:	0032      	movs	r2, r6
 8009140:	003b      	movs	r3, r7
 8009142:	f7f8 f9f3 	bl	800152c <__aeabi_dmul>
 8009146:	4a78      	ldr	r2, [pc, #480]	; (8009328 <__ieee754_pow+0x744>)
 8009148:	4b78      	ldr	r3, [pc, #480]	; (800932c <__ieee754_pow+0x748>)
 800914a:	f7f7 fa95 	bl	8000678 <__aeabi_dadd>
 800914e:	0032      	movs	r2, r6
 8009150:	003b      	movs	r3, r7
 8009152:	f7f8 f9eb 	bl	800152c <__aeabi_dmul>
 8009156:	4a76      	ldr	r2, [pc, #472]	; (8009330 <__ieee754_pow+0x74c>)
 8009158:	4b76      	ldr	r3, [pc, #472]	; (8009334 <__ieee754_pow+0x750>)
 800915a:	f7f7 fa8d 	bl	8000678 <__aeabi_dadd>
 800915e:	0032      	movs	r2, r6
 8009160:	0004      	movs	r4, r0
 8009162:	000d      	movs	r5, r1
 8009164:	003b      	movs	r3, r7
 8009166:	0030      	movs	r0, r6
 8009168:	0039      	movs	r1, r7
 800916a:	f7f8 f9df 	bl	800152c <__aeabi_dmul>
 800916e:	0002      	movs	r2, r0
 8009170:	000b      	movs	r3, r1
 8009172:	0020      	movs	r0, r4
 8009174:	0029      	movs	r1, r5
 8009176:	f7f8 f9d9 	bl	800152c <__aeabi_dmul>
 800917a:	9a00      	ldr	r2, [sp, #0]
 800917c:	9b01      	ldr	r3, [sp, #4]
 800917e:	0004      	movs	r4, r0
 8009180:	000d      	movs	r5, r1
 8009182:	9808      	ldr	r0, [sp, #32]
 8009184:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009186:	f7f7 fa77 	bl	8000678 <__aeabi_dadd>
 800918a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800918c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800918e:	f7f8 f9cd 	bl	800152c <__aeabi_dmul>
 8009192:	0022      	movs	r2, r4
 8009194:	002b      	movs	r3, r5
 8009196:	f7f7 fa6f 	bl	8000678 <__aeabi_dadd>
 800919a:	9a00      	ldr	r2, [sp, #0]
 800919c:	9b01      	ldr	r3, [sp, #4]
 800919e:	9010      	str	r0, [sp, #64]	; 0x40
 80091a0:	9111      	str	r1, [sp, #68]	; 0x44
 80091a2:	0010      	movs	r0, r2
 80091a4:	0019      	movs	r1, r3
 80091a6:	f7f8 f9c1 	bl	800152c <__aeabi_dmul>
 80091aa:	2200      	movs	r2, #0
 80091ac:	4b62      	ldr	r3, [pc, #392]	; (8009338 <__ieee754_pow+0x754>)
 80091ae:	0004      	movs	r4, r0
 80091b0:	000d      	movs	r5, r1
 80091b2:	f7f7 fa61 	bl	8000678 <__aeabi_dadd>
 80091b6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80091b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80091ba:	f7f7 fa5d 	bl	8000678 <__aeabi_dadd>
 80091be:	2000      	movs	r0, #0
 80091c0:	000f      	movs	r7, r1
 80091c2:	0006      	movs	r6, r0
 80091c4:	0002      	movs	r2, r0
 80091c6:	000b      	movs	r3, r1
 80091c8:	9800      	ldr	r0, [sp, #0]
 80091ca:	9901      	ldr	r1, [sp, #4]
 80091cc:	f7f8 f9ae 	bl	800152c <__aeabi_dmul>
 80091d0:	2200      	movs	r2, #0
 80091d2:	9000      	str	r0, [sp, #0]
 80091d4:	9101      	str	r1, [sp, #4]
 80091d6:	4b58      	ldr	r3, [pc, #352]	; (8009338 <__ieee754_pow+0x754>)
 80091d8:	0030      	movs	r0, r6
 80091da:	0039      	movs	r1, r7
 80091dc:	f7f8 fc68 	bl	8001ab0 <__aeabi_dsub>
 80091e0:	0022      	movs	r2, r4
 80091e2:	002b      	movs	r3, r5
 80091e4:	f7f8 fc64 	bl	8001ab0 <__aeabi_dsub>
 80091e8:	0002      	movs	r2, r0
 80091ea:	000b      	movs	r3, r1
 80091ec:	9810      	ldr	r0, [sp, #64]	; 0x40
 80091ee:	9911      	ldr	r1, [sp, #68]	; 0x44
 80091f0:	f7f8 fc5e 	bl	8001ab0 <__aeabi_dsub>
 80091f4:	9a08      	ldr	r2, [sp, #32]
 80091f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091f8:	f7f8 f998 	bl	800152c <__aeabi_dmul>
 80091fc:	0032      	movs	r2, r6
 80091fe:	0004      	movs	r4, r0
 8009200:	000d      	movs	r5, r1
 8009202:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009204:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009206:	003b      	movs	r3, r7
 8009208:	f7f8 f990 	bl	800152c <__aeabi_dmul>
 800920c:	0002      	movs	r2, r0
 800920e:	000b      	movs	r3, r1
 8009210:	0020      	movs	r0, r4
 8009212:	0029      	movs	r1, r5
 8009214:	f7f7 fa30 	bl	8000678 <__aeabi_dadd>
 8009218:	0004      	movs	r4, r0
 800921a:	000d      	movs	r5, r1
 800921c:	0002      	movs	r2, r0
 800921e:	000b      	movs	r3, r1
 8009220:	9800      	ldr	r0, [sp, #0]
 8009222:	9901      	ldr	r1, [sp, #4]
 8009224:	f7f7 fa28 	bl	8000678 <__aeabi_dadd>
 8009228:	22e0      	movs	r2, #224	; 0xe0
 800922a:	2000      	movs	r0, #0
 800922c:	4b43      	ldr	r3, [pc, #268]	; (800933c <__ieee754_pow+0x758>)
 800922e:	0612      	lsls	r2, r2, #24
 8009230:	0006      	movs	r6, r0
 8009232:	000f      	movs	r7, r1
 8009234:	f7f8 f97a 	bl	800152c <__aeabi_dmul>
 8009238:	9008      	str	r0, [sp, #32]
 800923a:	9109      	str	r1, [sp, #36]	; 0x24
 800923c:	9a00      	ldr	r2, [sp, #0]
 800923e:	9b01      	ldr	r3, [sp, #4]
 8009240:	0030      	movs	r0, r6
 8009242:	0039      	movs	r1, r7
 8009244:	f7f8 fc34 	bl	8001ab0 <__aeabi_dsub>
 8009248:	0002      	movs	r2, r0
 800924a:	000b      	movs	r3, r1
 800924c:	0020      	movs	r0, r4
 800924e:	0029      	movs	r1, r5
 8009250:	f7f8 fc2e 	bl	8001ab0 <__aeabi_dsub>
 8009254:	4a3a      	ldr	r2, [pc, #232]	; (8009340 <__ieee754_pow+0x75c>)
 8009256:	4b39      	ldr	r3, [pc, #228]	; (800933c <__ieee754_pow+0x758>)
 8009258:	f7f8 f968 	bl	800152c <__aeabi_dmul>
 800925c:	4a39      	ldr	r2, [pc, #228]	; (8009344 <__ieee754_pow+0x760>)
 800925e:	0004      	movs	r4, r0
 8009260:	000d      	movs	r5, r1
 8009262:	0030      	movs	r0, r6
 8009264:	0039      	movs	r1, r7
 8009266:	4b38      	ldr	r3, [pc, #224]	; (8009348 <__ieee754_pow+0x764>)
 8009268:	f7f8 f960 	bl	800152c <__aeabi_dmul>
 800926c:	0002      	movs	r2, r0
 800926e:	000b      	movs	r3, r1
 8009270:	0020      	movs	r0, r4
 8009272:	0029      	movs	r1, r5
 8009274:	f7f7 fa00 	bl	8000678 <__aeabi_dadd>
 8009278:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800927a:	4b34      	ldr	r3, [pc, #208]	; (800934c <__ieee754_pow+0x768>)
 800927c:	189b      	adds	r3, r3, r2
 800927e:	681a      	ldr	r2, [r3, #0]
 8009280:	685b      	ldr	r3, [r3, #4]
 8009282:	f7f7 f9f9 	bl	8000678 <__aeabi_dadd>
 8009286:	9000      	str	r0, [sp, #0]
 8009288:	9101      	str	r1, [sp, #4]
 800928a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800928c:	f7f8 ffe6 	bl	800225c <__aeabi_i2d>
 8009290:	0004      	movs	r4, r0
 8009292:	000d      	movs	r5, r1
 8009294:	9808      	ldr	r0, [sp, #32]
 8009296:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009298:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800929a:	4b2d      	ldr	r3, [pc, #180]	; (8009350 <__ieee754_pow+0x76c>)
 800929c:	189b      	adds	r3, r3, r2
 800929e:	681e      	ldr	r6, [r3, #0]
 80092a0:	685f      	ldr	r7, [r3, #4]
 80092a2:	9a00      	ldr	r2, [sp, #0]
 80092a4:	9b01      	ldr	r3, [sp, #4]
 80092a6:	f7f7 f9e7 	bl	8000678 <__aeabi_dadd>
 80092aa:	0032      	movs	r2, r6
 80092ac:	003b      	movs	r3, r7
 80092ae:	f7f7 f9e3 	bl	8000678 <__aeabi_dadd>
 80092b2:	0022      	movs	r2, r4
 80092b4:	002b      	movs	r3, r5
 80092b6:	f7f7 f9df 	bl	8000678 <__aeabi_dadd>
 80092ba:	2000      	movs	r0, #0
 80092bc:	0022      	movs	r2, r4
 80092be:	002b      	movs	r3, r5
 80092c0:	9004      	str	r0, [sp, #16]
 80092c2:	9105      	str	r1, [sp, #20]
 80092c4:	f7f8 fbf4 	bl	8001ab0 <__aeabi_dsub>
 80092c8:	0032      	movs	r2, r6
 80092ca:	003b      	movs	r3, r7
 80092cc:	f7f8 fbf0 	bl	8001ab0 <__aeabi_dsub>
 80092d0:	9a08      	ldr	r2, [sp, #32]
 80092d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092d4:	f7f8 fbec 	bl	8001ab0 <__aeabi_dsub>
 80092d8:	0002      	movs	r2, r0
 80092da:	000b      	movs	r3, r1
 80092dc:	9800      	ldr	r0, [sp, #0]
 80092de:	9901      	ldr	r1, [sp, #4]
 80092e0:	e618      	b.n	8008f14 <__ieee754_pow+0x330>
 80092e2:	2300      	movs	r3, #0
 80092e4:	4c03      	ldr	r4, [pc, #12]	; (80092f4 <__ieee754_pow+0x710>)
 80092e6:	e621      	b.n	8008f2c <__ieee754_pow+0x348>
 80092e8:	7ff00000 	.word	0x7ff00000
 80092ec:	43400000 	.word	0x43400000
 80092f0:	fffffc01 	.word	0xfffffc01
 80092f4:	3ff00000 	.word	0x3ff00000
 80092f8:	0003988e 	.word	0x0003988e
 80092fc:	000bb679 	.word	0x000bb679
 8009300:	fff00000 	.word	0xfff00000
 8009304:	08009a60 	.word	0x08009a60
 8009308:	4a454eef 	.word	0x4a454eef
 800930c:	3fca7e28 	.word	0x3fca7e28
 8009310:	93c9db65 	.word	0x93c9db65
 8009314:	3fcd864a 	.word	0x3fcd864a
 8009318:	a91d4101 	.word	0xa91d4101
 800931c:	3fd17460 	.word	0x3fd17460
 8009320:	518f264d 	.word	0x518f264d
 8009324:	3fd55555 	.word	0x3fd55555
 8009328:	db6fabff 	.word	0xdb6fabff
 800932c:	3fdb6db6 	.word	0x3fdb6db6
 8009330:	33333303 	.word	0x33333303
 8009334:	3fe33333 	.word	0x3fe33333
 8009338:	40080000 	.word	0x40080000
 800933c:	3feec709 	.word	0x3feec709
 8009340:	dc3a03fd 	.word	0xdc3a03fd
 8009344:	145b01f5 	.word	0x145b01f5
 8009348:	be3e2fe0 	.word	0xbe3e2fe0
 800934c:	08009a80 	.word	0x08009a80
 8009350:	08009a70 	.word	0x08009a70
 8009354:	4a90      	ldr	r2, [pc, #576]	; (8009598 <__ieee754_pow+0x9b4>)
 8009356:	4b91      	ldr	r3, [pc, #580]	; (800959c <__ieee754_pow+0x9b8>)
 8009358:	0030      	movs	r0, r6
 800935a:	0039      	movs	r1, r7
 800935c:	f7f7 f98c 	bl	8000678 <__aeabi_dadd>
 8009360:	9a04      	ldr	r2, [sp, #16]
 8009362:	9b05      	ldr	r3, [sp, #20]
 8009364:	9002      	str	r0, [sp, #8]
 8009366:	9103      	str	r1, [sp, #12]
 8009368:	0028      	movs	r0, r5
 800936a:	0021      	movs	r1, r4
 800936c:	f7f8 fba0 	bl	8001ab0 <__aeabi_dsub>
 8009370:	0002      	movs	r2, r0
 8009372:	000b      	movs	r3, r1
 8009374:	9802      	ldr	r0, [sp, #8]
 8009376:	9903      	ldr	r1, [sp, #12]
 8009378:	f7f7 f862 	bl	8000440 <__aeabi_dcmpgt>
 800937c:	2800      	cmp	r0, #0
 800937e:	d000      	beq.n	8009382 <__ieee754_pow+0x79e>
 8009380:	e611      	b.n	8008fa6 <__ieee754_pow+0x3c2>
 8009382:	2100      	movs	r1, #0
 8009384:	4a86      	ldr	r2, [pc, #536]	; (80095a0 <__ieee754_pow+0x9bc>)
 8009386:	0063      	lsls	r3, r4, #1
 8009388:	085b      	lsrs	r3, r3, #1
 800938a:	9102      	str	r1, [sp, #8]
 800938c:	4293      	cmp	r3, r2
 800938e:	dd25      	ble.n	80093dc <__ieee754_pow+0x7f8>
 8009390:	4a84      	ldr	r2, [pc, #528]	; (80095a4 <__ieee754_pow+0x9c0>)
 8009392:	151b      	asrs	r3, r3, #20
 8009394:	189b      	adds	r3, r3, r2
 8009396:	2280      	movs	r2, #128	; 0x80
 8009398:	0352      	lsls	r2, r2, #13
 800939a:	0011      	movs	r1, r2
 800939c:	4119      	asrs	r1, r3
 800939e:	190b      	adds	r3, r1, r4
 80093a0:	005c      	lsls	r4, r3, #1
 80093a2:	4981      	ldr	r1, [pc, #516]	; (80095a8 <__ieee754_pow+0x9c4>)
 80093a4:	4d81      	ldr	r5, [pc, #516]	; (80095ac <__ieee754_pow+0x9c8>)
 80093a6:	0d64      	lsrs	r4, r4, #21
 80093a8:	1864      	adds	r4, r4, r1
 80093aa:	4125      	asrs	r5, r4
 80093ac:	401d      	ands	r5, r3
 80093ae:	031b      	lsls	r3, r3, #12
 80093b0:	0b1b      	lsrs	r3, r3, #12
 80093b2:	4313      	orrs	r3, r2
 80093b4:	2214      	movs	r2, #20
 80093b6:	1b12      	subs	r2, r2, r4
 80093b8:	4113      	asrs	r3, r2
 80093ba:	9302      	str	r3, [sp, #8]
 80093bc:	9b08      	ldr	r3, [sp, #32]
 80093be:	2000      	movs	r0, #0
 80093c0:	0029      	movs	r1, r5
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	da02      	bge.n	80093cc <__ieee754_pow+0x7e8>
 80093c6:	9b02      	ldr	r3, [sp, #8]
 80093c8:	425b      	negs	r3, r3
 80093ca:	9302      	str	r3, [sp, #8]
 80093cc:	0002      	movs	r2, r0
 80093ce:	000b      	movs	r3, r1
 80093d0:	9804      	ldr	r0, [sp, #16]
 80093d2:	9905      	ldr	r1, [sp, #20]
 80093d4:	f7f8 fb6c 	bl	8001ab0 <__aeabi_dsub>
 80093d8:	9006      	str	r0, [sp, #24]
 80093da:	9107      	str	r1, [sp, #28]
 80093dc:	9806      	ldr	r0, [sp, #24]
 80093de:	9907      	ldr	r1, [sp, #28]
 80093e0:	0032      	movs	r2, r6
 80093e2:	003b      	movs	r3, r7
 80093e4:	f7f7 f948 	bl	8000678 <__aeabi_dadd>
 80093e8:	2000      	movs	r0, #0
 80093ea:	2200      	movs	r2, #0
 80093ec:	4b70      	ldr	r3, [pc, #448]	; (80095b0 <__ieee754_pow+0x9cc>)
 80093ee:	9004      	str	r0, [sp, #16]
 80093f0:	9105      	str	r1, [sp, #20]
 80093f2:	f7f8 f89b 	bl	800152c <__aeabi_dmul>
 80093f6:	9a06      	ldr	r2, [sp, #24]
 80093f8:	9b07      	ldr	r3, [sp, #28]
 80093fa:	9008      	str	r0, [sp, #32]
 80093fc:	9109      	str	r1, [sp, #36]	; 0x24
 80093fe:	9804      	ldr	r0, [sp, #16]
 8009400:	9905      	ldr	r1, [sp, #20]
 8009402:	f7f8 fb55 	bl	8001ab0 <__aeabi_dsub>
 8009406:	0002      	movs	r2, r0
 8009408:	000b      	movs	r3, r1
 800940a:	0030      	movs	r0, r6
 800940c:	0039      	movs	r1, r7
 800940e:	f7f8 fb4f 	bl	8001ab0 <__aeabi_dsub>
 8009412:	4a68      	ldr	r2, [pc, #416]	; (80095b4 <__ieee754_pow+0x9d0>)
 8009414:	4b68      	ldr	r3, [pc, #416]	; (80095b8 <__ieee754_pow+0x9d4>)
 8009416:	f7f8 f889 	bl	800152c <__aeabi_dmul>
 800941a:	4a68      	ldr	r2, [pc, #416]	; (80095bc <__ieee754_pow+0x9d8>)
 800941c:	0004      	movs	r4, r0
 800941e:	000d      	movs	r5, r1
 8009420:	9804      	ldr	r0, [sp, #16]
 8009422:	9905      	ldr	r1, [sp, #20]
 8009424:	4b66      	ldr	r3, [pc, #408]	; (80095c0 <__ieee754_pow+0x9dc>)
 8009426:	f7f8 f881 	bl	800152c <__aeabi_dmul>
 800942a:	0002      	movs	r2, r0
 800942c:	000b      	movs	r3, r1
 800942e:	0020      	movs	r0, r4
 8009430:	0029      	movs	r1, r5
 8009432:	f7f7 f921 	bl	8000678 <__aeabi_dadd>
 8009436:	0004      	movs	r4, r0
 8009438:	000d      	movs	r5, r1
 800943a:	0002      	movs	r2, r0
 800943c:	000b      	movs	r3, r1
 800943e:	9808      	ldr	r0, [sp, #32]
 8009440:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009442:	f7f7 f919 	bl	8000678 <__aeabi_dadd>
 8009446:	9a08      	ldr	r2, [sp, #32]
 8009448:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800944a:	0006      	movs	r6, r0
 800944c:	000f      	movs	r7, r1
 800944e:	f7f8 fb2f 	bl	8001ab0 <__aeabi_dsub>
 8009452:	0002      	movs	r2, r0
 8009454:	000b      	movs	r3, r1
 8009456:	0020      	movs	r0, r4
 8009458:	0029      	movs	r1, r5
 800945a:	f7f8 fb29 	bl	8001ab0 <__aeabi_dsub>
 800945e:	0032      	movs	r2, r6
 8009460:	9004      	str	r0, [sp, #16]
 8009462:	9105      	str	r1, [sp, #20]
 8009464:	003b      	movs	r3, r7
 8009466:	0030      	movs	r0, r6
 8009468:	0039      	movs	r1, r7
 800946a:	f7f8 f85f 	bl	800152c <__aeabi_dmul>
 800946e:	0004      	movs	r4, r0
 8009470:	000d      	movs	r5, r1
 8009472:	4a54      	ldr	r2, [pc, #336]	; (80095c4 <__ieee754_pow+0x9e0>)
 8009474:	4b54      	ldr	r3, [pc, #336]	; (80095c8 <__ieee754_pow+0x9e4>)
 8009476:	f7f8 f859 	bl	800152c <__aeabi_dmul>
 800947a:	4a54      	ldr	r2, [pc, #336]	; (80095cc <__ieee754_pow+0x9e8>)
 800947c:	4b54      	ldr	r3, [pc, #336]	; (80095d0 <__ieee754_pow+0x9ec>)
 800947e:	f7f8 fb17 	bl	8001ab0 <__aeabi_dsub>
 8009482:	0022      	movs	r2, r4
 8009484:	002b      	movs	r3, r5
 8009486:	f7f8 f851 	bl	800152c <__aeabi_dmul>
 800948a:	4a52      	ldr	r2, [pc, #328]	; (80095d4 <__ieee754_pow+0x9f0>)
 800948c:	4b52      	ldr	r3, [pc, #328]	; (80095d8 <__ieee754_pow+0x9f4>)
 800948e:	f7f7 f8f3 	bl	8000678 <__aeabi_dadd>
 8009492:	0022      	movs	r2, r4
 8009494:	002b      	movs	r3, r5
 8009496:	f7f8 f849 	bl	800152c <__aeabi_dmul>
 800949a:	4a50      	ldr	r2, [pc, #320]	; (80095dc <__ieee754_pow+0x9f8>)
 800949c:	4b50      	ldr	r3, [pc, #320]	; (80095e0 <__ieee754_pow+0x9fc>)
 800949e:	f7f8 fb07 	bl	8001ab0 <__aeabi_dsub>
 80094a2:	0022      	movs	r2, r4
 80094a4:	002b      	movs	r3, r5
 80094a6:	f7f8 f841 	bl	800152c <__aeabi_dmul>
 80094aa:	4a4e      	ldr	r2, [pc, #312]	; (80095e4 <__ieee754_pow+0xa00>)
 80094ac:	4b4e      	ldr	r3, [pc, #312]	; (80095e8 <__ieee754_pow+0xa04>)
 80094ae:	f7f7 f8e3 	bl	8000678 <__aeabi_dadd>
 80094b2:	0022      	movs	r2, r4
 80094b4:	002b      	movs	r3, r5
 80094b6:	f7f8 f839 	bl	800152c <__aeabi_dmul>
 80094ba:	0002      	movs	r2, r0
 80094bc:	000b      	movs	r3, r1
 80094be:	0030      	movs	r0, r6
 80094c0:	0039      	movs	r1, r7
 80094c2:	f7f8 faf5 	bl	8001ab0 <__aeabi_dsub>
 80094c6:	0004      	movs	r4, r0
 80094c8:	000d      	movs	r5, r1
 80094ca:	0002      	movs	r2, r0
 80094cc:	000b      	movs	r3, r1
 80094ce:	0030      	movs	r0, r6
 80094d0:	0039      	movs	r1, r7
 80094d2:	f7f8 f82b 	bl	800152c <__aeabi_dmul>
 80094d6:	2380      	movs	r3, #128	; 0x80
 80094d8:	9006      	str	r0, [sp, #24]
 80094da:	9107      	str	r1, [sp, #28]
 80094dc:	2200      	movs	r2, #0
 80094de:	0020      	movs	r0, r4
 80094e0:	0029      	movs	r1, r5
 80094e2:	05db      	lsls	r3, r3, #23
 80094e4:	f7f8 fae4 	bl	8001ab0 <__aeabi_dsub>
 80094e8:	0002      	movs	r2, r0
 80094ea:	000b      	movs	r3, r1
 80094ec:	9806      	ldr	r0, [sp, #24]
 80094ee:	9907      	ldr	r1, [sp, #28]
 80094f0:	f7f7 fc22 	bl	8000d38 <__aeabi_ddiv>
 80094f4:	9a04      	ldr	r2, [sp, #16]
 80094f6:	9b05      	ldr	r3, [sp, #20]
 80094f8:	0004      	movs	r4, r0
 80094fa:	000d      	movs	r5, r1
 80094fc:	0030      	movs	r0, r6
 80094fe:	0039      	movs	r1, r7
 8009500:	f7f8 f814 	bl	800152c <__aeabi_dmul>
 8009504:	9a04      	ldr	r2, [sp, #16]
 8009506:	9b05      	ldr	r3, [sp, #20]
 8009508:	f7f7 f8b6 	bl	8000678 <__aeabi_dadd>
 800950c:	0002      	movs	r2, r0
 800950e:	000b      	movs	r3, r1
 8009510:	0020      	movs	r0, r4
 8009512:	0029      	movs	r1, r5
 8009514:	f7f8 facc 	bl	8001ab0 <__aeabi_dsub>
 8009518:	0032      	movs	r2, r6
 800951a:	003b      	movs	r3, r7
 800951c:	f7f8 fac8 	bl	8001ab0 <__aeabi_dsub>
 8009520:	0002      	movs	r2, r0
 8009522:	000b      	movs	r3, r1
 8009524:	2000      	movs	r0, #0
 8009526:	4931      	ldr	r1, [pc, #196]	; (80095ec <__ieee754_pow+0xa08>)
 8009528:	f7f8 fac2 	bl	8001ab0 <__aeabi_dsub>
 800952c:	9b02      	ldr	r3, [sp, #8]
 800952e:	051b      	lsls	r3, r3, #20
 8009530:	185b      	adds	r3, r3, r1
 8009532:	151a      	asrs	r2, r3, #20
 8009534:	2a00      	cmp	r2, #0
 8009536:	dc25      	bgt.n	8009584 <__ieee754_pow+0x9a0>
 8009538:	9a02      	ldr	r2, [sp, #8]
 800953a:	f000 f861 	bl	8009600 <scalbn>
 800953e:	9a00      	ldr	r2, [sp, #0]
 8009540:	9b01      	ldr	r3, [sp, #4]
 8009542:	f7ff fc33 	bl	8008dac <__ieee754_pow+0x1c8>
 8009546:	4a2a      	ldr	r2, [pc, #168]	; (80095f0 <__ieee754_pow+0xa0c>)
 8009548:	004b      	lsls	r3, r1, #1
 800954a:	085b      	lsrs	r3, r3, #1
 800954c:	4293      	cmp	r3, r2
 800954e:	dc00      	bgt.n	8009552 <__ieee754_pow+0x96e>
 8009550:	e717      	b.n	8009382 <__ieee754_pow+0x79e>
 8009552:	4b28      	ldr	r3, [pc, #160]	; (80095f4 <__ieee754_pow+0xa10>)
 8009554:	18cb      	adds	r3, r1, r3
 8009556:	4303      	orrs	r3, r0
 8009558:	d008      	beq.n	800956c <__ieee754_pow+0x988>
 800955a:	9800      	ldr	r0, [sp, #0]
 800955c:	9901      	ldr	r1, [sp, #4]
 800955e:	2300      	movs	r3, #0
 8009560:	2200      	movs	r2, #0
 8009562:	f7f6 ff59 	bl	8000418 <__aeabi_dcmplt>
 8009566:	1e43      	subs	r3, r0, #1
 8009568:	4198      	sbcs	r0, r3
 800956a:	e462      	b.n	8008e32 <__ieee754_pow+0x24e>
 800956c:	9a04      	ldr	r2, [sp, #16]
 800956e:	9b05      	ldr	r3, [sp, #20]
 8009570:	f7f8 fa9e 	bl	8001ab0 <__aeabi_dsub>
 8009574:	0032      	movs	r2, r6
 8009576:	003b      	movs	r3, r7
 8009578:	f7f6 ff6c 	bl	8000454 <__aeabi_dcmpge>
 800957c:	2800      	cmp	r0, #0
 800957e:	d100      	bne.n	8009582 <__ieee754_pow+0x99e>
 8009580:	e6ff      	b.n	8009382 <__ieee754_pow+0x79e>
 8009582:	e7ea      	b.n	800955a <__ieee754_pow+0x976>
 8009584:	0019      	movs	r1, r3
 8009586:	e7da      	b.n	800953e <__ieee754_pow+0x95a>
 8009588:	2300      	movs	r3, #0
 800958a:	4c18      	ldr	r4, [pc, #96]	; (80095ec <__ieee754_pow+0xa08>)
 800958c:	f7ff fbf1 	bl	8008d72 <__ieee754_pow+0x18e>
 8009590:	2300      	movs	r3, #0
 8009592:	2400      	movs	r4, #0
 8009594:	f7ff fbed 	bl	8008d72 <__ieee754_pow+0x18e>
 8009598:	652b82fe 	.word	0x652b82fe
 800959c:	3c971547 	.word	0x3c971547
 80095a0:	3fe00000 	.word	0x3fe00000
 80095a4:	fffffc02 	.word	0xfffffc02
 80095a8:	fffffc01 	.word	0xfffffc01
 80095ac:	fff00000 	.word	0xfff00000
 80095b0:	3fe62e43 	.word	0x3fe62e43
 80095b4:	fefa39ef 	.word	0xfefa39ef
 80095b8:	3fe62e42 	.word	0x3fe62e42
 80095bc:	0ca86c39 	.word	0x0ca86c39
 80095c0:	be205c61 	.word	0xbe205c61
 80095c4:	72bea4d0 	.word	0x72bea4d0
 80095c8:	3e663769 	.word	0x3e663769
 80095cc:	c5d26bf1 	.word	0xc5d26bf1
 80095d0:	3ebbbd41 	.word	0x3ebbbd41
 80095d4:	af25de2c 	.word	0xaf25de2c
 80095d8:	3f11566a 	.word	0x3f11566a
 80095dc:	16bebd93 	.word	0x16bebd93
 80095e0:	3f66c16c 	.word	0x3f66c16c
 80095e4:	5555553e 	.word	0x5555553e
 80095e8:	3fc55555 	.word	0x3fc55555
 80095ec:	3ff00000 	.word	0x3ff00000
 80095f0:	4090cbff 	.word	0x4090cbff
 80095f4:	3f6f3400 	.word	0x3f6f3400

080095f8 <fabs>:
 80095f8:	0049      	lsls	r1, r1, #1
 80095fa:	084b      	lsrs	r3, r1, #1
 80095fc:	0019      	movs	r1, r3
 80095fe:	4770      	bx	lr

08009600 <scalbn>:
 8009600:	b570      	push	{r4, r5, r6, lr}
 8009602:	0014      	movs	r4, r2
 8009604:	004a      	lsls	r2, r1, #1
 8009606:	000b      	movs	r3, r1
 8009608:	0d52      	lsrs	r2, r2, #21
 800960a:	d10f      	bne.n	800962c <scalbn+0x2c>
 800960c:	004b      	lsls	r3, r1, #1
 800960e:	085b      	lsrs	r3, r3, #1
 8009610:	4303      	orrs	r3, r0
 8009612:	d011      	beq.n	8009638 <scalbn+0x38>
 8009614:	4b22      	ldr	r3, [pc, #136]	; (80096a0 <scalbn+0xa0>)
 8009616:	2200      	movs	r2, #0
 8009618:	f7f7 ff88 	bl	800152c <__aeabi_dmul>
 800961c:	4b21      	ldr	r3, [pc, #132]	; (80096a4 <scalbn+0xa4>)
 800961e:	429c      	cmp	r4, r3
 8009620:	da0b      	bge.n	800963a <scalbn+0x3a>
 8009622:	4a21      	ldr	r2, [pc, #132]	; (80096a8 <scalbn+0xa8>)
 8009624:	4b21      	ldr	r3, [pc, #132]	; (80096ac <scalbn+0xac>)
 8009626:	f7f7 ff81 	bl	800152c <__aeabi_dmul>
 800962a:	e005      	b.n	8009638 <scalbn+0x38>
 800962c:	4d20      	ldr	r5, [pc, #128]	; (80096b0 <scalbn+0xb0>)
 800962e:	42aa      	cmp	r2, r5
 8009630:	d107      	bne.n	8009642 <scalbn+0x42>
 8009632:	0002      	movs	r2, r0
 8009634:	f7f7 f820 	bl	8000678 <__aeabi_dadd>
 8009638:	bd70      	pop	{r4, r5, r6, pc}
 800963a:	000b      	movs	r3, r1
 800963c:	004a      	lsls	r2, r1, #1
 800963e:	0d52      	lsrs	r2, r2, #21
 8009640:	3a36      	subs	r2, #54	; 0x36
 8009642:	4d1c      	ldr	r5, [pc, #112]	; (80096b4 <scalbn+0xb4>)
 8009644:	42ac      	cmp	r4, r5
 8009646:	dd0a      	ble.n	800965e <scalbn+0x5e>
 8009648:	4c1b      	ldr	r4, [pc, #108]	; (80096b8 <scalbn+0xb8>)
 800964a:	4d1c      	ldr	r5, [pc, #112]	; (80096bc <scalbn+0xbc>)
 800964c:	2900      	cmp	r1, #0
 800964e:	da01      	bge.n	8009654 <scalbn+0x54>
 8009650:	4c19      	ldr	r4, [pc, #100]	; (80096b8 <scalbn+0xb8>)
 8009652:	4d1b      	ldr	r5, [pc, #108]	; (80096c0 <scalbn+0xc0>)
 8009654:	4a18      	ldr	r2, [pc, #96]	; (80096b8 <scalbn+0xb8>)
 8009656:	4b19      	ldr	r3, [pc, #100]	; (80096bc <scalbn+0xbc>)
 8009658:	0020      	movs	r0, r4
 800965a:	0029      	movs	r1, r5
 800965c:	e7e3      	b.n	8009626 <scalbn+0x26>
 800965e:	18a2      	adds	r2, r4, r2
 8009660:	4c18      	ldr	r4, [pc, #96]	; (80096c4 <scalbn+0xc4>)
 8009662:	42a2      	cmp	r2, r4
 8009664:	dcf0      	bgt.n	8009648 <scalbn+0x48>
 8009666:	2a00      	cmp	r2, #0
 8009668:	dd05      	ble.n	8009676 <scalbn+0x76>
 800966a:	4c17      	ldr	r4, [pc, #92]	; (80096c8 <scalbn+0xc8>)
 800966c:	0512      	lsls	r2, r2, #20
 800966e:	4023      	ands	r3, r4
 8009670:	4313      	orrs	r3, r2
 8009672:	0019      	movs	r1, r3
 8009674:	e7e0      	b.n	8009638 <scalbn+0x38>
 8009676:	0014      	movs	r4, r2
 8009678:	3435      	adds	r4, #53	; 0x35
 800967a:	da08      	bge.n	800968e <scalbn+0x8e>
 800967c:	4c0a      	ldr	r4, [pc, #40]	; (80096a8 <scalbn+0xa8>)
 800967e:	4d0b      	ldr	r5, [pc, #44]	; (80096ac <scalbn+0xac>)
 8009680:	2900      	cmp	r1, #0
 8009682:	da01      	bge.n	8009688 <scalbn+0x88>
 8009684:	4c08      	ldr	r4, [pc, #32]	; (80096a8 <scalbn+0xa8>)
 8009686:	4d11      	ldr	r5, [pc, #68]	; (80096cc <scalbn+0xcc>)
 8009688:	4a07      	ldr	r2, [pc, #28]	; (80096a8 <scalbn+0xa8>)
 800968a:	4b08      	ldr	r3, [pc, #32]	; (80096ac <scalbn+0xac>)
 800968c:	e7e4      	b.n	8009658 <scalbn+0x58>
 800968e:	4c0e      	ldr	r4, [pc, #56]	; (80096c8 <scalbn+0xc8>)
 8009690:	3236      	adds	r2, #54	; 0x36
 8009692:	4023      	ands	r3, r4
 8009694:	0512      	lsls	r2, r2, #20
 8009696:	431a      	orrs	r2, r3
 8009698:	0011      	movs	r1, r2
 800969a:	4b0d      	ldr	r3, [pc, #52]	; (80096d0 <scalbn+0xd0>)
 800969c:	2200      	movs	r2, #0
 800969e:	e7c2      	b.n	8009626 <scalbn+0x26>
 80096a0:	43500000 	.word	0x43500000
 80096a4:	ffff3cb0 	.word	0xffff3cb0
 80096a8:	c2f8f359 	.word	0xc2f8f359
 80096ac:	01a56e1f 	.word	0x01a56e1f
 80096b0:	000007ff 	.word	0x000007ff
 80096b4:	0000c350 	.word	0x0000c350
 80096b8:	8800759c 	.word	0x8800759c
 80096bc:	7e37e43c 	.word	0x7e37e43c
 80096c0:	fe37e43c 	.word	0xfe37e43c
 80096c4:	000007fe 	.word	0x000007fe
 80096c8:	800fffff 	.word	0x800fffff
 80096cc:	81a56e1f 	.word	0x81a56e1f
 80096d0:	3c900000 	.word	0x3c900000

080096d4 <with_errno>:
 80096d4:	b570      	push	{r4, r5, r6, lr}
 80096d6:	000d      	movs	r5, r1
 80096d8:	0016      	movs	r6, r2
 80096da:	0004      	movs	r4, r0
 80096dc:	f7ff f9e2 	bl	8008aa4 <__errno>
 80096e0:	0029      	movs	r1, r5
 80096e2:	6006      	str	r6, [r0, #0]
 80096e4:	0020      	movs	r0, r4
 80096e6:	bd70      	pop	{r4, r5, r6, pc}

080096e8 <xflow>:
 80096e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80096ea:	0015      	movs	r5, r2
 80096ec:	001c      	movs	r4, r3
 80096ee:	2800      	cmp	r0, #0
 80096f0:	d010      	beq.n	8009714 <xflow+0x2c>
 80096f2:	2380      	movs	r3, #128	; 0x80
 80096f4:	0010      	movs	r0, r2
 80096f6:	061b      	lsls	r3, r3, #24
 80096f8:	18e1      	adds	r1, r4, r3
 80096fa:	9000      	str	r0, [sp, #0]
 80096fc:	9101      	str	r1, [sp, #4]
 80096fe:	9a00      	ldr	r2, [sp, #0]
 8009700:	9b01      	ldr	r3, [sp, #4]
 8009702:	0028      	movs	r0, r5
 8009704:	0021      	movs	r1, r4
 8009706:	f7f7 ff11 	bl	800152c <__aeabi_dmul>
 800970a:	2222      	movs	r2, #34	; 0x22
 800970c:	f7ff ffe2 	bl	80096d4 <with_errno>
 8009710:	b003      	add	sp, #12
 8009712:	bd30      	pop	{r4, r5, pc}
 8009714:	0010      	movs	r0, r2
 8009716:	0019      	movs	r1, r3
 8009718:	e7ef      	b.n	80096fa <xflow+0x12>

0800971a <__math_uflow>:
 800971a:	2380      	movs	r3, #128	; 0x80
 800971c:	b510      	push	{r4, lr}
 800971e:	2200      	movs	r2, #0
 8009720:	055b      	lsls	r3, r3, #21
 8009722:	f7ff ffe1 	bl	80096e8 <xflow>
 8009726:	bd10      	pop	{r4, pc}

08009728 <__math_oflow>:
 8009728:	23e0      	movs	r3, #224	; 0xe0
 800972a:	b510      	push	{r4, lr}
 800972c:	2200      	movs	r2, #0
 800972e:	05db      	lsls	r3, r3, #23
 8009730:	f7ff ffda 	bl	80096e8 <xflow>
 8009734:	bd10      	pop	{r4, pc}
	...

08009738 <__ieee754_sqrt>:
 8009738:	b5f0      	push	{r4, r5, r6, r7, lr}
 800973a:	000a      	movs	r2, r1
 800973c:	000c      	movs	r4, r1
 800973e:	496f      	ldr	r1, [pc, #444]	; (80098fc <__ieee754_sqrt+0x1c4>)
 8009740:	0005      	movs	r5, r0
 8009742:	0003      	movs	r3, r0
 8009744:	0008      	movs	r0, r1
 8009746:	b087      	sub	sp, #28
 8009748:	4020      	ands	r0, r4
 800974a:	4288      	cmp	r0, r1
 800974c:	d111      	bne.n	8009772 <__ieee754_sqrt+0x3a>
 800974e:	002a      	movs	r2, r5
 8009750:	0023      	movs	r3, r4
 8009752:	0028      	movs	r0, r5
 8009754:	0021      	movs	r1, r4
 8009756:	f7f7 fee9 	bl	800152c <__aeabi_dmul>
 800975a:	0002      	movs	r2, r0
 800975c:	000b      	movs	r3, r1
 800975e:	0028      	movs	r0, r5
 8009760:	0021      	movs	r1, r4
 8009762:	f7f6 ff89 	bl	8000678 <__aeabi_dadd>
 8009766:	0005      	movs	r5, r0
 8009768:	000c      	movs	r4, r1
 800976a:	0028      	movs	r0, r5
 800976c:	0021      	movs	r1, r4
 800976e:	b007      	add	sp, #28
 8009770:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009772:	2c00      	cmp	r4, #0
 8009774:	dc12      	bgt.n	800979c <__ieee754_sqrt+0x64>
 8009776:	0061      	lsls	r1, r4, #1
 8009778:	0849      	lsrs	r1, r1, #1
 800977a:	4329      	orrs	r1, r5
 800977c:	d0f5      	beq.n	800976a <__ieee754_sqrt+0x32>
 800977e:	2100      	movs	r1, #0
 8009780:	428c      	cmp	r4, r1
 8009782:	d100      	bne.n	8009786 <__ieee754_sqrt+0x4e>
 8009784:	e09f      	b.n	80098c6 <__ieee754_sqrt+0x18e>
 8009786:	002a      	movs	r2, r5
 8009788:	0023      	movs	r3, r4
 800978a:	0028      	movs	r0, r5
 800978c:	0021      	movs	r1, r4
 800978e:	f7f8 f98f 	bl	8001ab0 <__aeabi_dsub>
 8009792:	0002      	movs	r2, r0
 8009794:	000b      	movs	r3, r1
 8009796:	f7f7 facf 	bl	8000d38 <__aeabi_ddiv>
 800979a:	e7e4      	b.n	8009766 <__ieee754_sqrt+0x2e>
 800979c:	1521      	asrs	r1, r4, #20
 800979e:	d100      	bne.n	80097a2 <__ieee754_sqrt+0x6a>
 80097a0:	e091      	b.n	80098c6 <__ieee754_sqrt+0x18e>
 80097a2:	4857      	ldr	r0, [pc, #348]	; (8009900 <__ieee754_sqrt+0x1c8>)
 80097a4:	0312      	lsls	r2, r2, #12
 80097a6:	180c      	adds	r4, r1, r0
 80097a8:	2080      	movs	r0, #128	; 0x80
 80097aa:	0b12      	lsrs	r2, r2, #12
 80097ac:	0340      	lsls	r0, r0, #13
 80097ae:	4310      	orrs	r0, r2
 80097b0:	07c9      	lsls	r1, r1, #31
 80097b2:	d403      	bmi.n	80097bc <__ieee754_sqrt+0x84>
 80097b4:	0fda      	lsrs	r2, r3, #31
 80097b6:	0040      	lsls	r0, r0, #1
 80097b8:	1810      	adds	r0, r2, r0
 80097ba:	005b      	lsls	r3, r3, #1
 80097bc:	2500      	movs	r5, #0
 80097be:	1062      	asrs	r2, r4, #1
 80097c0:	0040      	lsls	r0, r0, #1
 80097c2:	2480      	movs	r4, #128	; 0x80
 80097c4:	9205      	str	r2, [sp, #20]
 80097c6:	0fda      	lsrs	r2, r3, #31
 80097c8:	1812      	adds	r2, r2, r0
 80097ca:	0029      	movs	r1, r5
 80097cc:	2016      	movs	r0, #22
 80097ce:	005b      	lsls	r3, r3, #1
 80097d0:	03a4      	lsls	r4, r4, #14
 80097d2:	190e      	adds	r6, r1, r4
 80097d4:	4296      	cmp	r6, r2
 80097d6:	dc02      	bgt.n	80097de <__ieee754_sqrt+0xa6>
 80097d8:	1931      	adds	r1, r6, r4
 80097da:	1b92      	subs	r2, r2, r6
 80097dc:	192d      	adds	r5, r5, r4
 80097de:	0fde      	lsrs	r6, r3, #31
 80097e0:	0052      	lsls	r2, r2, #1
 80097e2:	3801      	subs	r0, #1
 80097e4:	18b2      	adds	r2, r6, r2
 80097e6:	005b      	lsls	r3, r3, #1
 80097e8:	0864      	lsrs	r4, r4, #1
 80097ea:	2800      	cmp	r0, #0
 80097ec:	d1f1      	bne.n	80097d2 <__ieee754_sqrt+0x9a>
 80097ee:	2620      	movs	r6, #32
 80097f0:	2780      	movs	r7, #128	; 0x80
 80097f2:	0004      	movs	r4, r0
 80097f4:	9604      	str	r6, [sp, #16]
 80097f6:	063f      	lsls	r7, r7, #24
 80097f8:	183e      	adds	r6, r7, r0
 80097fa:	46b4      	mov	ip, r6
 80097fc:	428a      	cmp	r2, r1
 80097fe:	dc02      	bgt.n	8009806 <__ieee754_sqrt+0xce>
 8009800:	d114      	bne.n	800982c <__ieee754_sqrt+0xf4>
 8009802:	429e      	cmp	r6, r3
 8009804:	d812      	bhi.n	800982c <__ieee754_sqrt+0xf4>
 8009806:	4660      	mov	r0, ip
 8009808:	4666      	mov	r6, ip
 800980a:	19c0      	adds	r0, r0, r7
 800980c:	9100      	str	r1, [sp, #0]
 800980e:	2e00      	cmp	r6, #0
 8009810:	da03      	bge.n	800981a <__ieee754_sqrt+0xe2>
 8009812:	43c6      	mvns	r6, r0
 8009814:	0ff6      	lsrs	r6, r6, #31
 8009816:	198e      	adds	r6, r1, r6
 8009818:	9600      	str	r6, [sp, #0]
 800981a:	1a52      	subs	r2, r2, r1
 800981c:	4563      	cmp	r3, ip
 800981e:	4189      	sbcs	r1, r1
 8009820:	4249      	negs	r1, r1
 8009822:	1a52      	subs	r2, r2, r1
 8009824:	4661      	mov	r1, ip
 8009826:	1a5b      	subs	r3, r3, r1
 8009828:	9900      	ldr	r1, [sp, #0]
 800982a:	19e4      	adds	r4, r4, r7
 800982c:	0fde      	lsrs	r6, r3, #31
 800982e:	0052      	lsls	r2, r2, #1
 8009830:	18b2      	adds	r2, r6, r2
 8009832:	9e04      	ldr	r6, [sp, #16]
 8009834:	005b      	lsls	r3, r3, #1
 8009836:	3e01      	subs	r6, #1
 8009838:	087f      	lsrs	r7, r7, #1
 800983a:	9604      	str	r6, [sp, #16]
 800983c:	2e00      	cmp	r6, #0
 800983e:	d1db      	bne.n	80097f8 <__ieee754_sqrt+0xc0>
 8009840:	431a      	orrs	r2, r3
 8009842:	d01f      	beq.n	8009884 <__ieee754_sqrt+0x14c>
 8009844:	4e2f      	ldr	r6, [pc, #188]	; (8009904 <__ieee754_sqrt+0x1cc>)
 8009846:	4f30      	ldr	r7, [pc, #192]	; (8009908 <__ieee754_sqrt+0x1d0>)
 8009848:	6830      	ldr	r0, [r6, #0]
 800984a:	6871      	ldr	r1, [r6, #4]
 800984c:	683a      	ldr	r2, [r7, #0]
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	9200      	str	r2, [sp, #0]
 8009852:	9301      	str	r3, [sp, #4]
 8009854:	6832      	ldr	r2, [r6, #0]
 8009856:	6873      	ldr	r3, [r6, #4]
 8009858:	9202      	str	r2, [sp, #8]
 800985a:	9303      	str	r3, [sp, #12]
 800985c:	9a00      	ldr	r2, [sp, #0]
 800985e:	9b01      	ldr	r3, [sp, #4]
 8009860:	f7f8 f926 	bl	8001ab0 <__aeabi_dsub>
 8009864:	0002      	movs	r2, r0
 8009866:	000b      	movs	r3, r1
 8009868:	9802      	ldr	r0, [sp, #8]
 800986a:	9903      	ldr	r1, [sp, #12]
 800986c:	f7f6 fdde 	bl	800042c <__aeabi_dcmple>
 8009870:	2800      	cmp	r0, #0
 8009872:	d007      	beq.n	8009884 <__ieee754_sqrt+0x14c>
 8009874:	6830      	ldr	r0, [r6, #0]
 8009876:	6871      	ldr	r1, [r6, #4]
 8009878:	683a      	ldr	r2, [r7, #0]
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	1c67      	adds	r7, r4, #1
 800987e:	d127      	bne.n	80098d0 <__ieee754_sqrt+0x198>
 8009880:	9c04      	ldr	r4, [sp, #16]
 8009882:	3501      	adds	r5, #1
 8009884:	4b21      	ldr	r3, [pc, #132]	; (800990c <__ieee754_sqrt+0x1d4>)
 8009886:	1069      	asrs	r1, r5, #1
 8009888:	18c9      	adds	r1, r1, r3
 800988a:	0864      	lsrs	r4, r4, #1
 800988c:	07ed      	lsls	r5, r5, #31
 800988e:	d502      	bpl.n	8009896 <__ieee754_sqrt+0x15e>
 8009890:	2380      	movs	r3, #128	; 0x80
 8009892:	061b      	lsls	r3, r3, #24
 8009894:	431c      	orrs	r4, r3
 8009896:	9b05      	ldr	r3, [sp, #20]
 8009898:	0025      	movs	r5, r4
 800989a:	0518      	lsls	r0, r3, #20
 800989c:	1843      	adds	r3, r0, r1
 800989e:	001c      	movs	r4, r3
 80098a0:	e763      	b.n	800976a <__ieee754_sqrt+0x32>
 80098a2:	0ada      	lsrs	r2, r3, #11
 80098a4:	3815      	subs	r0, #21
 80098a6:	055b      	lsls	r3, r3, #21
 80098a8:	2a00      	cmp	r2, #0
 80098aa:	d0fa      	beq.n	80098a2 <__ieee754_sqrt+0x16a>
 80098ac:	2480      	movs	r4, #128	; 0x80
 80098ae:	0364      	lsls	r4, r4, #13
 80098b0:	4222      	tst	r2, r4
 80098b2:	d00a      	beq.n	80098ca <__ieee754_sqrt+0x192>
 80098b4:	2420      	movs	r4, #32
 80098b6:	001e      	movs	r6, r3
 80098b8:	1a64      	subs	r4, r4, r1
 80098ba:	40e6      	lsrs	r6, r4
 80098bc:	1e4d      	subs	r5, r1, #1
 80098be:	408b      	lsls	r3, r1
 80098c0:	4332      	orrs	r2, r6
 80098c2:	1b41      	subs	r1, r0, r5
 80098c4:	e76d      	b.n	80097a2 <__ieee754_sqrt+0x6a>
 80098c6:	2000      	movs	r0, #0
 80098c8:	e7ee      	b.n	80098a8 <__ieee754_sqrt+0x170>
 80098ca:	0052      	lsls	r2, r2, #1
 80098cc:	3101      	adds	r1, #1
 80098ce:	e7ef      	b.n	80098b0 <__ieee754_sqrt+0x178>
 80098d0:	f7f6 fed2 	bl	8000678 <__aeabi_dadd>
 80098d4:	6877      	ldr	r7, [r6, #4]
 80098d6:	6836      	ldr	r6, [r6, #0]
 80098d8:	0002      	movs	r2, r0
 80098da:	000b      	movs	r3, r1
 80098dc:	0030      	movs	r0, r6
 80098de:	0039      	movs	r1, r7
 80098e0:	f7f6 fd9a 	bl	8000418 <__aeabi_dcmplt>
 80098e4:	2800      	cmp	r0, #0
 80098e6:	d004      	beq.n	80098f2 <__ieee754_sqrt+0x1ba>
 80098e8:	3402      	adds	r4, #2
 80098ea:	4263      	negs	r3, r4
 80098ec:	4163      	adcs	r3, r4
 80098ee:	18ed      	adds	r5, r5, r3
 80098f0:	e7c8      	b.n	8009884 <__ieee754_sqrt+0x14c>
 80098f2:	2301      	movs	r3, #1
 80098f4:	3401      	adds	r4, #1
 80098f6:	439c      	bics	r4, r3
 80098f8:	e7c4      	b.n	8009884 <__ieee754_sqrt+0x14c>
 80098fa:	46c0      	nop			; (mov r8, r8)
 80098fc:	7ff00000 	.word	0x7ff00000
 8009900:	fffffc01 	.word	0xfffffc01
 8009904:	20000068 	.word	0x20000068
 8009908:	20000070 	.word	0x20000070
 800990c:	3fe00000 	.word	0x3fe00000

08009910 <_init>:
 8009910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009912:	46c0      	nop			; (mov r8, r8)
 8009914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009916:	bc08      	pop	{r3}
 8009918:	469e      	mov	lr, r3
 800991a:	4770      	bx	lr

0800991c <_fini>:
 800991c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800991e:	46c0      	nop			; (mov r8, r8)
 8009920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009922:	bc08      	pop	{r3}
 8009924:	469e      	mov	lr, r3
 8009926:	4770      	bx	lr

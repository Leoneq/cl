
cl1-1m.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000996c  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  08009a28  08009a28  00019a28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c28  08009c28  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08009c28  08009c28  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009c28  08009c28  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c28  08009c28  00019c28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009c2c  08009c2c  00019c2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08009c30  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000388  20000078  08009ca8  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000400  08009ca8  00020400  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000151db  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d0e  00000000  00000000  000352be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001340  00000000  00000000  00037fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f15  00000000  00000000  00039310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017d15  00000000  00000000  0003a225  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016d1c  00000000  00000000  00051f3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009a756  00000000  00000000  00068c56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004ce8  00000000  00000000  001033ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00108094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000078 	.word	0x20000078
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08009a0c 	.word	0x08009a0c

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	2000007c 	.word	0x2000007c
 80000fc:	08009a0c 	.word	0x08009a0c

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <__aeabi_cdrcmple>:
 80003ec:	4684      	mov	ip, r0
 80003ee:	0010      	movs	r0, r2
 80003f0:	4662      	mov	r2, ip
 80003f2:	468c      	mov	ip, r1
 80003f4:	0019      	movs	r1, r3
 80003f6:	4663      	mov	r3, ip
 80003f8:	e000      	b.n	80003fc <__aeabi_cdcmpeq>
 80003fa:	46c0      	nop			; (mov r8, r8)

080003fc <__aeabi_cdcmpeq>:
 80003fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80003fe:	f001 f831 	bl	8001464 <__ledf2>
 8000402:	2800      	cmp	r0, #0
 8000404:	d401      	bmi.n	800040a <__aeabi_cdcmpeq+0xe>
 8000406:	2100      	movs	r1, #0
 8000408:	42c8      	cmn	r0, r1
 800040a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800040c <__aeabi_dcmpeq>:
 800040c:	b510      	push	{r4, lr}
 800040e:	f000 ff81 	bl	8001314 <__eqdf2>
 8000412:	4240      	negs	r0, r0
 8000414:	3001      	adds	r0, #1
 8000416:	bd10      	pop	{r4, pc}

08000418 <__aeabi_dcmplt>:
 8000418:	b510      	push	{r4, lr}
 800041a:	f001 f823 	bl	8001464 <__ledf2>
 800041e:	2800      	cmp	r0, #0
 8000420:	db01      	blt.n	8000426 <__aeabi_dcmplt+0xe>
 8000422:	2000      	movs	r0, #0
 8000424:	bd10      	pop	{r4, pc}
 8000426:	2001      	movs	r0, #1
 8000428:	bd10      	pop	{r4, pc}
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_dcmple>:
 800042c:	b510      	push	{r4, lr}
 800042e:	f001 f819 	bl	8001464 <__ledf2>
 8000432:	2800      	cmp	r0, #0
 8000434:	dd01      	ble.n	800043a <__aeabi_dcmple+0xe>
 8000436:	2000      	movs	r0, #0
 8000438:	bd10      	pop	{r4, pc}
 800043a:	2001      	movs	r0, #1
 800043c:	bd10      	pop	{r4, pc}
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__aeabi_dcmpgt>:
 8000440:	b510      	push	{r4, lr}
 8000442:	f000 ffa9 	bl	8001398 <__gedf2>
 8000446:	2800      	cmp	r0, #0
 8000448:	dc01      	bgt.n	800044e <__aeabi_dcmpgt+0xe>
 800044a:	2000      	movs	r0, #0
 800044c:	bd10      	pop	{r4, pc}
 800044e:	2001      	movs	r0, #1
 8000450:	bd10      	pop	{r4, pc}
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__aeabi_dcmpge>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f000 ff9f 	bl	8001398 <__gedf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	da01      	bge.n	8000462 <__aeabi_dcmpge+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_cfrcmple>:
 8000468:	4684      	mov	ip, r0
 800046a:	0008      	movs	r0, r1
 800046c:	4661      	mov	r1, ip
 800046e:	e7ff      	b.n	8000470 <__aeabi_cfcmpeq>

08000470 <__aeabi_cfcmpeq>:
 8000470:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000472:	f000 f8bd 	bl	80005f0 <__lesf2>
 8000476:	2800      	cmp	r0, #0
 8000478:	d401      	bmi.n	800047e <__aeabi_cfcmpeq+0xe>
 800047a:	2100      	movs	r1, #0
 800047c:	42c8      	cmn	r0, r1
 800047e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000480 <__aeabi_fcmpeq>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 f849 	bl	8000518 <__eqsf2>
 8000486:	4240      	negs	r0, r0
 8000488:	3001      	adds	r0, #1
 800048a:	bd10      	pop	{r4, pc}

0800048c <__aeabi_fcmplt>:
 800048c:	b510      	push	{r4, lr}
 800048e:	f000 f8af 	bl	80005f0 <__lesf2>
 8000492:	2800      	cmp	r0, #0
 8000494:	db01      	blt.n	800049a <__aeabi_fcmplt+0xe>
 8000496:	2000      	movs	r0, #0
 8000498:	bd10      	pop	{r4, pc}
 800049a:	2001      	movs	r0, #1
 800049c:	bd10      	pop	{r4, pc}
 800049e:	46c0      	nop			; (mov r8, r8)

080004a0 <__aeabi_fcmple>:
 80004a0:	b510      	push	{r4, lr}
 80004a2:	f000 f8a5 	bl	80005f0 <__lesf2>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	dd01      	ble.n	80004ae <__aeabi_fcmple+0xe>
 80004aa:	2000      	movs	r0, #0
 80004ac:	bd10      	pop	{r4, pc}
 80004ae:	2001      	movs	r0, #1
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	46c0      	nop			; (mov r8, r8)

080004b4 <__aeabi_fcmpgt>:
 80004b4:	b510      	push	{r4, lr}
 80004b6:	f000 f855 	bl	8000564 <__gesf2>
 80004ba:	2800      	cmp	r0, #0
 80004bc:	dc01      	bgt.n	80004c2 <__aeabi_fcmpgt+0xe>
 80004be:	2000      	movs	r0, #0
 80004c0:	bd10      	pop	{r4, pc}
 80004c2:	2001      	movs	r0, #1
 80004c4:	bd10      	pop	{r4, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)

080004c8 <__aeabi_fcmpge>:
 80004c8:	b510      	push	{r4, lr}
 80004ca:	f000 f84b 	bl	8000564 <__gesf2>
 80004ce:	2800      	cmp	r0, #0
 80004d0:	da01      	bge.n	80004d6 <__aeabi_fcmpge+0xe>
 80004d2:	2000      	movs	r0, #0
 80004d4:	bd10      	pop	{r4, pc}
 80004d6:	2001      	movs	r0, #1
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	46c0      	nop			; (mov r8, r8)

080004dc <__aeabi_d2uiz>:
 80004dc:	b570      	push	{r4, r5, r6, lr}
 80004de:	2200      	movs	r2, #0
 80004e0:	4b0c      	ldr	r3, [pc, #48]	; (8000514 <__aeabi_d2uiz+0x38>)
 80004e2:	0004      	movs	r4, r0
 80004e4:	000d      	movs	r5, r1
 80004e6:	f7ff ffb5 	bl	8000454 <__aeabi_dcmpge>
 80004ea:	2800      	cmp	r0, #0
 80004ec:	d104      	bne.n	80004f8 <__aeabi_d2uiz+0x1c>
 80004ee:	0020      	movs	r0, r4
 80004f0:	0029      	movs	r1, r5
 80004f2:	f001 fe7d 	bl	80021f0 <__aeabi_d2iz>
 80004f6:	bd70      	pop	{r4, r5, r6, pc}
 80004f8:	4b06      	ldr	r3, [pc, #24]	; (8000514 <__aeabi_d2uiz+0x38>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	0020      	movs	r0, r4
 80004fe:	0029      	movs	r1, r5
 8000500:	f001 fad6 	bl	8001ab0 <__aeabi_dsub>
 8000504:	f001 fe74 	bl	80021f0 <__aeabi_d2iz>
 8000508:	2380      	movs	r3, #128	; 0x80
 800050a:	061b      	lsls	r3, r3, #24
 800050c:	469c      	mov	ip, r3
 800050e:	4460      	add	r0, ip
 8000510:	e7f1      	b.n	80004f6 <__aeabi_d2uiz+0x1a>
 8000512:	46c0      	nop			; (mov r8, r8)
 8000514:	41e00000 	.word	0x41e00000

08000518 <__eqsf2>:
 8000518:	b570      	push	{r4, r5, r6, lr}
 800051a:	0042      	lsls	r2, r0, #1
 800051c:	0245      	lsls	r5, r0, #9
 800051e:	024e      	lsls	r6, r1, #9
 8000520:	004c      	lsls	r4, r1, #1
 8000522:	0fc3      	lsrs	r3, r0, #31
 8000524:	0a6d      	lsrs	r5, r5, #9
 8000526:	2001      	movs	r0, #1
 8000528:	0e12      	lsrs	r2, r2, #24
 800052a:	0a76      	lsrs	r6, r6, #9
 800052c:	0e24      	lsrs	r4, r4, #24
 800052e:	0fc9      	lsrs	r1, r1, #31
 8000530:	2aff      	cmp	r2, #255	; 0xff
 8000532:	d006      	beq.n	8000542 <__eqsf2+0x2a>
 8000534:	2cff      	cmp	r4, #255	; 0xff
 8000536:	d003      	beq.n	8000540 <__eqsf2+0x28>
 8000538:	42a2      	cmp	r2, r4
 800053a:	d101      	bne.n	8000540 <__eqsf2+0x28>
 800053c:	42b5      	cmp	r5, r6
 800053e:	d006      	beq.n	800054e <__eqsf2+0x36>
 8000540:	bd70      	pop	{r4, r5, r6, pc}
 8000542:	2d00      	cmp	r5, #0
 8000544:	d1fc      	bne.n	8000540 <__eqsf2+0x28>
 8000546:	2cff      	cmp	r4, #255	; 0xff
 8000548:	d1fa      	bne.n	8000540 <__eqsf2+0x28>
 800054a:	2e00      	cmp	r6, #0
 800054c:	d1f8      	bne.n	8000540 <__eqsf2+0x28>
 800054e:	428b      	cmp	r3, r1
 8000550:	d006      	beq.n	8000560 <__eqsf2+0x48>
 8000552:	2001      	movs	r0, #1
 8000554:	2a00      	cmp	r2, #0
 8000556:	d1f3      	bne.n	8000540 <__eqsf2+0x28>
 8000558:	0028      	movs	r0, r5
 800055a:	1e43      	subs	r3, r0, #1
 800055c:	4198      	sbcs	r0, r3
 800055e:	e7ef      	b.n	8000540 <__eqsf2+0x28>
 8000560:	2000      	movs	r0, #0
 8000562:	e7ed      	b.n	8000540 <__eqsf2+0x28>

08000564 <__gesf2>:
 8000564:	b570      	push	{r4, r5, r6, lr}
 8000566:	0042      	lsls	r2, r0, #1
 8000568:	0245      	lsls	r5, r0, #9
 800056a:	024e      	lsls	r6, r1, #9
 800056c:	004c      	lsls	r4, r1, #1
 800056e:	0fc3      	lsrs	r3, r0, #31
 8000570:	0a6d      	lsrs	r5, r5, #9
 8000572:	0e12      	lsrs	r2, r2, #24
 8000574:	0a76      	lsrs	r6, r6, #9
 8000576:	0e24      	lsrs	r4, r4, #24
 8000578:	0fc8      	lsrs	r0, r1, #31
 800057a:	2aff      	cmp	r2, #255	; 0xff
 800057c:	d01b      	beq.n	80005b6 <__gesf2+0x52>
 800057e:	2cff      	cmp	r4, #255	; 0xff
 8000580:	d00e      	beq.n	80005a0 <__gesf2+0x3c>
 8000582:	2a00      	cmp	r2, #0
 8000584:	d11b      	bne.n	80005be <__gesf2+0x5a>
 8000586:	2c00      	cmp	r4, #0
 8000588:	d101      	bne.n	800058e <__gesf2+0x2a>
 800058a:	2e00      	cmp	r6, #0
 800058c:	d01c      	beq.n	80005c8 <__gesf2+0x64>
 800058e:	2d00      	cmp	r5, #0
 8000590:	d00c      	beq.n	80005ac <__gesf2+0x48>
 8000592:	4283      	cmp	r3, r0
 8000594:	d01c      	beq.n	80005d0 <__gesf2+0x6c>
 8000596:	2102      	movs	r1, #2
 8000598:	1e58      	subs	r0, r3, #1
 800059a:	4008      	ands	r0, r1
 800059c:	3801      	subs	r0, #1
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	2e00      	cmp	r6, #0
 80005a2:	d122      	bne.n	80005ea <__gesf2+0x86>
 80005a4:	2a00      	cmp	r2, #0
 80005a6:	d1f4      	bne.n	8000592 <__gesf2+0x2e>
 80005a8:	2d00      	cmp	r5, #0
 80005aa:	d1f2      	bne.n	8000592 <__gesf2+0x2e>
 80005ac:	2800      	cmp	r0, #0
 80005ae:	d1f6      	bne.n	800059e <__gesf2+0x3a>
 80005b0:	2001      	movs	r0, #1
 80005b2:	4240      	negs	r0, r0
 80005b4:	e7f3      	b.n	800059e <__gesf2+0x3a>
 80005b6:	2d00      	cmp	r5, #0
 80005b8:	d117      	bne.n	80005ea <__gesf2+0x86>
 80005ba:	2cff      	cmp	r4, #255	; 0xff
 80005bc:	d0f0      	beq.n	80005a0 <__gesf2+0x3c>
 80005be:	2c00      	cmp	r4, #0
 80005c0:	d1e7      	bne.n	8000592 <__gesf2+0x2e>
 80005c2:	2e00      	cmp	r6, #0
 80005c4:	d1e5      	bne.n	8000592 <__gesf2+0x2e>
 80005c6:	e7e6      	b.n	8000596 <__gesf2+0x32>
 80005c8:	2000      	movs	r0, #0
 80005ca:	2d00      	cmp	r5, #0
 80005cc:	d0e7      	beq.n	800059e <__gesf2+0x3a>
 80005ce:	e7e2      	b.n	8000596 <__gesf2+0x32>
 80005d0:	42a2      	cmp	r2, r4
 80005d2:	dc05      	bgt.n	80005e0 <__gesf2+0x7c>
 80005d4:	dbea      	blt.n	80005ac <__gesf2+0x48>
 80005d6:	42b5      	cmp	r5, r6
 80005d8:	d802      	bhi.n	80005e0 <__gesf2+0x7c>
 80005da:	d3e7      	bcc.n	80005ac <__gesf2+0x48>
 80005dc:	2000      	movs	r0, #0
 80005de:	e7de      	b.n	800059e <__gesf2+0x3a>
 80005e0:	4243      	negs	r3, r0
 80005e2:	4158      	adcs	r0, r3
 80005e4:	0040      	lsls	r0, r0, #1
 80005e6:	3801      	subs	r0, #1
 80005e8:	e7d9      	b.n	800059e <__gesf2+0x3a>
 80005ea:	2002      	movs	r0, #2
 80005ec:	4240      	negs	r0, r0
 80005ee:	e7d6      	b.n	800059e <__gesf2+0x3a>

080005f0 <__lesf2>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	0042      	lsls	r2, r0, #1
 80005f4:	0245      	lsls	r5, r0, #9
 80005f6:	024e      	lsls	r6, r1, #9
 80005f8:	004c      	lsls	r4, r1, #1
 80005fa:	0fc3      	lsrs	r3, r0, #31
 80005fc:	0a6d      	lsrs	r5, r5, #9
 80005fe:	0e12      	lsrs	r2, r2, #24
 8000600:	0a76      	lsrs	r6, r6, #9
 8000602:	0e24      	lsrs	r4, r4, #24
 8000604:	0fc8      	lsrs	r0, r1, #31
 8000606:	2aff      	cmp	r2, #255	; 0xff
 8000608:	d00b      	beq.n	8000622 <__lesf2+0x32>
 800060a:	2cff      	cmp	r4, #255	; 0xff
 800060c:	d00d      	beq.n	800062a <__lesf2+0x3a>
 800060e:	2a00      	cmp	r2, #0
 8000610:	d11f      	bne.n	8000652 <__lesf2+0x62>
 8000612:	2c00      	cmp	r4, #0
 8000614:	d116      	bne.n	8000644 <__lesf2+0x54>
 8000616:	2e00      	cmp	r6, #0
 8000618:	d114      	bne.n	8000644 <__lesf2+0x54>
 800061a:	2000      	movs	r0, #0
 800061c:	2d00      	cmp	r5, #0
 800061e:	d010      	beq.n	8000642 <__lesf2+0x52>
 8000620:	e009      	b.n	8000636 <__lesf2+0x46>
 8000622:	2d00      	cmp	r5, #0
 8000624:	d10c      	bne.n	8000640 <__lesf2+0x50>
 8000626:	2cff      	cmp	r4, #255	; 0xff
 8000628:	d113      	bne.n	8000652 <__lesf2+0x62>
 800062a:	2e00      	cmp	r6, #0
 800062c:	d108      	bne.n	8000640 <__lesf2+0x50>
 800062e:	2a00      	cmp	r2, #0
 8000630:	d008      	beq.n	8000644 <__lesf2+0x54>
 8000632:	4283      	cmp	r3, r0
 8000634:	d012      	beq.n	800065c <__lesf2+0x6c>
 8000636:	2102      	movs	r1, #2
 8000638:	1e58      	subs	r0, r3, #1
 800063a:	4008      	ands	r0, r1
 800063c:	3801      	subs	r0, #1
 800063e:	e000      	b.n	8000642 <__lesf2+0x52>
 8000640:	2002      	movs	r0, #2
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	2d00      	cmp	r5, #0
 8000646:	d1f4      	bne.n	8000632 <__lesf2+0x42>
 8000648:	2800      	cmp	r0, #0
 800064a:	d1fa      	bne.n	8000642 <__lesf2+0x52>
 800064c:	2001      	movs	r0, #1
 800064e:	4240      	negs	r0, r0
 8000650:	e7f7      	b.n	8000642 <__lesf2+0x52>
 8000652:	2c00      	cmp	r4, #0
 8000654:	d1ed      	bne.n	8000632 <__lesf2+0x42>
 8000656:	2e00      	cmp	r6, #0
 8000658:	d1eb      	bne.n	8000632 <__lesf2+0x42>
 800065a:	e7ec      	b.n	8000636 <__lesf2+0x46>
 800065c:	42a2      	cmp	r2, r4
 800065e:	dc05      	bgt.n	800066c <__lesf2+0x7c>
 8000660:	dbf2      	blt.n	8000648 <__lesf2+0x58>
 8000662:	42b5      	cmp	r5, r6
 8000664:	d802      	bhi.n	800066c <__lesf2+0x7c>
 8000666:	d3ef      	bcc.n	8000648 <__lesf2+0x58>
 8000668:	2000      	movs	r0, #0
 800066a:	e7ea      	b.n	8000642 <__lesf2+0x52>
 800066c:	4243      	negs	r3, r0
 800066e:	4158      	adcs	r0, r3
 8000670:	0040      	lsls	r0, r0, #1
 8000672:	3801      	subs	r0, #1
 8000674:	e7e5      	b.n	8000642 <__lesf2+0x52>
 8000676:	46c0      	nop			; (mov r8, r8)

08000678 <__aeabi_dadd>:
 8000678:	b5f0      	push	{r4, r5, r6, r7, lr}
 800067a:	464f      	mov	r7, r9
 800067c:	4646      	mov	r6, r8
 800067e:	46d6      	mov	lr, sl
 8000680:	0004      	movs	r4, r0
 8000682:	b5c0      	push	{r6, r7, lr}
 8000684:	001f      	movs	r7, r3
 8000686:	030b      	lsls	r3, r1, #12
 8000688:	0010      	movs	r0, r2
 800068a:	004e      	lsls	r6, r1, #1
 800068c:	0a5b      	lsrs	r3, r3, #9
 800068e:	0fcd      	lsrs	r5, r1, #31
 8000690:	0f61      	lsrs	r1, r4, #29
 8000692:	007a      	lsls	r2, r7, #1
 8000694:	4319      	orrs	r1, r3
 8000696:	00e3      	lsls	r3, r4, #3
 8000698:	033c      	lsls	r4, r7, #12
 800069a:	0fff      	lsrs	r7, r7, #31
 800069c:	46bc      	mov	ip, r7
 800069e:	0a64      	lsrs	r4, r4, #9
 80006a0:	0f47      	lsrs	r7, r0, #29
 80006a2:	4327      	orrs	r7, r4
 80006a4:	0d76      	lsrs	r6, r6, #21
 80006a6:	0d52      	lsrs	r2, r2, #21
 80006a8:	00c0      	lsls	r0, r0, #3
 80006aa:	46b9      	mov	r9, r7
 80006ac:	4680      	mov	r8, r0
 80006ae:	1ab7      	subs	r7, r6, r2
 80006b0:	4565      	cmp	r5, ip
 80006b2:	d100      	bne.n	80006b6 <__aeabi_dadd+0x3e>
 80006b4:	e09b      	b.n	80007ee <__aeabi_dadd+0x176>
 80006b6:	2f00      	cmp	r7, #0
 80006b8:	dc00      	bgt.n	80006bc <__aeabi_dadd+0x44>
 80006ba:	e084      	b.n	80007c6 <__aeabi_dadd+0x14e>
 80006bc:	2a00      	cmp	r2, #0
 80006be:	d100      	bne.n	80006c2 <__aeabi_dadd+0x4a>
 80006c0:	e0be      	b.n	8000840 <__aeabi_dadd+0x1c8>
 80006c2:	4ac8      	ldr	r2, [pc, #800]	; (80009e4 <__aeabi_dadd+0x36c>)
 80006c4:	4296      	cmp	r6, r2
 80006c6:	d100      	bne.n	80006ca <__aeabi_dadd+0x52>
 80006c8:	e124      	b.n	8000914 <__aeabi_dadd+0x29c>
 80006ca:	2280      	movs	r2, #128	; 0x80
 80006cc:	464c      	mov	r4, r9
 80006ce:	0412      	lsls	r2, r2, #16
 80006d0:	4314      	orrs	r4, r2
 80006d2:	46a1      	mov	r9, r4
 80006d4:	2f38      	cmp	r7, #56	; 0x38
 80006d6:	dd00      	ble.n	80006da <__aeabi_dadd+0x62>
 80006d8:	e167      	b.n	80009aa <__aeabi_dadd+0x332>
 80006da:	2f1f      	cmp	r7, #31
 80006dc:	dd00      	ble.n	80006e0 <__aeabi_dadd+0x68>
 80006de:	e1d6      	b.n	8000a8e <__aeabi_dadd+0x416>
 80006e0:	2220      	movs	r2, #32
 80006e2:	464c      	mov	r4, r9
 80006e4:	1bd2      	subs	r2, r2, r7
 80006e6:	4094      	lsls	r4, r2
 80006e8:	46a2      	mov	sl, r4
 80006ea:	4644      	mov	r4, r8
 80006ec:	40fc      	lsrs	r4, r7
 80006ee:	0020      	movs	r0, r4
 80006f0:	4654      	mov	r4, sl
 80006f2:	4304      	orrs	r4, r0
 80006f4:	4640      	mov	r0, r8
 80006f6:	4090      	lsls	r0, r2
 80006f8:	1e42      	subs	r2, r0, #1
 80006fa:	4190      	sbcs	r0, r2
 80006fc:	464a      	mov	r2, r9
 80006fe:	40fa      	lsrs	r2, r7
 8000700:	4304      	orrs	r4, r0
 8000702:	1a89      	subs	r1, r1, r2
 8000704:	1b1c      	subs	r4, r3, r4
 8000706:	42a3      	cmp	r3, r4
 8000708:	4192      	sbcs	r2, r2
 800070a:	4252      	negs	r2, r2
 800070c:	1a8b      	subs	r3, r1, r2
 800070e:	469a      	mov	sl, r3
 8000710:	4653      	mov	r3, sl
 8000712:	021b      	lsls	r3, r3, #8
 8000714:	d400      	bmi.n	8000718 <__aeabi_dadd+0xa0>
 8000716:	e0d4      	b.n	80008c2 <__aeabi_dadd+0x24a>
 8000718:	4653      	mov	r3, sl
 800071a:	025a      	lsls	r2, r3, #9
 800071c:	0a53      	lsrs	r3, r2, #9
 800071e:	469a      	mov	sl, r3
 8000720:	4653      	mov	r3, sl
 8000722:	2b00      	cmp	r3, #0
 8000724:	d100      	bne.n	8000728 <__aeabi_dadd+0xb0>
 8000726:	e104      	b.n	8000932 <__aeabi_dadd+0x2ba>
 8000728:	4650      	mov	r0, sl
 800072a:	f001 fe73 	bl	8002414 <__clzsi2>
 800072e:	0003      	movs	r3, r0
 8000730:	3b08      	subs	r3, #8
 8000732:	2220      	movs	r2, #32
 8000734:	0020      	movs	r0, r4
 8000736:	1ad2      	subs	r2, r2, r3
 8000738:	4651      	mov	r1, sl
 800073a:	40d0      	lsrs	r0, r2
 800073c:	4099      	lsls	r1, r3
 800073e:	0002      	movs	r2, r0
 8000740:	409c      	lsls	r4, r3
 8000742:	430a      	orrs	r2, r1
 8000744:	42b3      	cmp	r3, r6
 8000746:	da00      	bge.n	800074a <__aeabi_dadd+0xd2>
 8000748:	e102      	b.n	8000950 <__aeabi_dadd+0x2d8>
 800074a:	1b9b      	subs	r3, r3, r6
 800074c:	1c59      	adds	r1, r3, #1
 800074e:	291f      	cmp	r1, #31
 8000750:	dd00      	ble.n	8000754 <__aeabi_dadd+0xdc>
 8000752:	e0a7      	b.n	80008a4 <__aeabi_dadd+0x22c>
 8000754:	2320      	movs	r3, #32
 8000756:	0010      	movs	r0, r2
 8000758:	0026      	movs	r6, r4
 800075a:	1a5b      	subs	r3, r3, r1
 800075c:	409c      	lsls	r4, r3
 800075e:	4098      	lsls	r0, r3
 8000760:	40ce      	lsrs	r6, r1
 8000762:	40ca      	lsrs	r2, r1
 8000764:	1e63      	subs	r3, r4, #1
 8000766:	419c      	sbcs	r4, r3
 8000768:	4330      	orrs	r0, r6
 800076a:	4692      	mov	sl, r2
 800076c:	2600      	movs	r6, #0
 800076e:	4304      	orrs	r4, r0
 8000770:	0763      	lsls	r3, r4, #29
 8000772:	d009      	beq.n	8000788 <__aeabi_dadd+0x110>
 8000774:	230f      	movs	r3, #15
 8000776:	4023      	ands	r3, r4
 8000778:	2b04      	cmp	r3, #4
 800077a:	d005      	beq.n	8000788 <__aeabi_dadd+0x110>
 800077c:	1d23      	adds	r3, r4, #4
 800077e:	42a3      	cmp	r3, r4
 8000780:	41a4      	sbcs	r4, r4
 8000782:	4264      	negs	r4, r4
 8000784:	44a2      	add	sl, r4
 8000786:	001c      	movs	r4, r3
 8000788:	4653      	mov	r3, sl
 800078a:	021b      	lsls	r3, r3, #8
 800078c:	d400      	bmi.n	8000790 <__aeabi_dadd+0x118>
 800078e:	e09b      	b.n	80008c8 <__aeabi_dadd+0x250>
 8000790:	4b94      	ldr	r3, [pc, #592]	; (80009e4 <__aeabi_dadd+0x36c>)
 8000792:	3601      	adds	r6, #1
 8000794:	429e      	cmp	r6, r3
 8000796:	d100      	bne.n	800079a <__aeabi_dadd+0x122>
 8000798:	e0b8      	b.n	800090c <__aeabi_dadd+0x294>
 800079a:	4653      	mov	r3, sl
 800079c:	4992      	ldr	r1, [pc, #584]	; (80009e8 <__aeabi_dadd+0x370>)
 800079e:	08e4      	lsrs	r4, r4, #3
 80007a0:	400b      	ands	r3, r1
 80007a2:	0019      	movs	r1, r3
 80007a4:	075b      	lsls	r3, r3, #29
 80007a6:	4323      	orrs	r3, r4
 80007a8:	0572      	lsls	r2, r6, #21
 80007aa:	024c      	lsls	r4, r1, #9
 80007ac:	0b24      	lsrs	r4, r4, #12
 80007ae:	0d52      	lsrs	r2, r2, #21
 80007b0:	0512      	lsls	r2, r2, #20
 80007b2:	07ed      	lsls	r5, r5, #31
 80007b4:	4322      	orrs	r2, r4
 80007b6:	432a      	orrs	r2, r5
 80007b8:	0018      	movs	r0, r3
 80007ba:	0011      	movs	r1, r2
 80007bc:	bce0      	pop	{r5, r6, r7}
 80007be:	46ba      	mov	sl, r7
 80007c0:	46b1      	mov	r9, r6
 80007c2:	46a8      	mov	r8, r5
 80007c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c6:	2f00      	cmp	r7, #0
 80007c8:	d048      	beq.n	800085c <__aeabi_dadd+0x1e4>
 80007ca:	1b97      	subs	r7, r2, r6
 80007cc:	2e00      	cmp	r6, #0
 80007ce:	d000      	beq.n	80007d2 <__aeabi_dadd+0x15a>
 80007d0:	e10e      	b.n	80009f0 <__aeabi_dadd+0x378>
 80007d2:	000c      	movs	r4, r1
 80007d4:	431c      	orrs	r4, r3
 80007d6:	d100      	bne.n	80007da <__aeabi_dadd+0x162>
 80007d8:	e1b7      	b.n	8000b4a <__aeabi_dadd+0x4d2>
 80007da:	1e7c      	subs	r4, r7, #1
 80007dc:	2f01      	cmp	r7, #1
 80007de:	d100      	bne.n	80007e2 <__aeabi_dadd+0x16a>
 80007e0:	e226      	b.n	8000c30 <__aeabi_dadd+0x5b8>
 80007e2:	4d80      	ldr	r5, [pc, #512]	; (80009e4 <__aeabi_dadd+0x36c>)
 80007e4:	42af      	cmp	r7, r5
 80007e6:	d100      	bne.n	80007ea <__aeabi_dadd+0x172>
 80007e8:	e1d5      	b.n	8000b96 <__aeabi_dadd+0x51e>
 80007ea:	0027      	movs	r7, r4
 80007ec:	e107      	b.n	80009fe <__aeabi_dadd+0x386>
 80007ee:	2f00      	cmp	r7, #0
 80007f0:	dc00      	bgt.n	80007f4 <__aeabi_dadd+0x17c>
 80007f2:	e0b2      	b.n	800095a <__aeabi_dadd+0x2e2>
 80007f4:	2a00      	cmp	r2, #0
 80007f6:	d047      	beq.n	8000888 <__aeabi_dadd+0x210>
 80007f8:	4a7a      	ldr	r2, [pc, #488]	; (80009e4 <__aeabi_dadd+0x36c>)
 80007fa:	4296      	cmp	r6, r2
 80007fc:	d100      	bne.n	8000800 <__aeabi_dadd+0x188>
 80007fe:	e089      	b.n	8000914 <__aeabi_dadd+0x29c>
 8000800:	2280      	movs	r2, #128	; 0x80
 8000802:	464c      	mov	r4, r9
 8000804:	0412      	lsls	r2, r2, #16
 8000806:	4314      	orrs	r4, r2
 8000808:	46a1      	mov	r9, r4
 800080a:	2f38      	cmp	r7, #56	; 0x38
 800080c:	dc6b      	bgt.n	80008e6 <__aeabi_dadd+0x26e>
 800080e:	2f1f      	cmp	r7, #31
 8000810:	dc00      	bgt.n	8000814 <__aeabi_dadd+0x19c>
 8000812:	e16e      	b.n	8000af2 <__aeabi_dadd+0x47a>
 8000814:	003a      	movs	r2, r7
 8000816:	4648      	mov	r0, r9
 8000818:	3a20      	subs	r2, #32
 800081a:	40d0      	lsrs	r0, r2
 800081c:	4684      	mov	ip, r0
 800081e:	2f20      	cmp	r7, #32
 8000820:	d007      	beq.n	8000832 <__aeabi_dadd+0x1ba>
 8000822:	2240      	movs	r2, #64	; 0x40
 8000824:	4648      	mov	r0, r9
 8000826:	1bd2      	subs	r2, r2, r7
 8000828:	4090      	lsls	r0, r2
 800082a:	0002      	movs	r2, r0
 800082c:	4640      	mov	r0, r8
 800082e:	4310      	orrs	r0, r2
 8000830:	4680      	mov	r8, r0
 8000832:	4640      	mov	r0, r8
 8000834:	1e42      	subs	r2, r0, #1
 8000836:	4190      	sbcs	r0, r2
 8000838:	4662      	mov	r2, ip
 800083a:	0004      	movs	r4, r0
 800083c:	4314      	orrs	r4, r2
 800083e:	e057      	b.n	80008f0 <__aeabi_dadd+0x278>
 8000840:	464a      	mov	r2, r9
 8000842:	4302      	orrs	r2, r0
 8000844:	d100      	bne.n	8000848 <__aeabi_dadd+0x1d0>
 8000846:	e103      	b.n	8000a50 <__aeabi_dadd+0x3d8>
 8000848:	1e7a      	subs	r2, r7, #1
 800084a:	2f01      	cmp	r7, #1
 800084c:	d100      	bne.n	8000850 <__aeabi_dadd+0x1d8>
 800084e:	e193      	b.n	8000b78 <__aeabi_dadd+0x500>
 8000850:	4c64      	ldr	r4, [pc, #400]	; (80009e4 <__aeabi_dadd+0x36c>)
 8000852:	42a7      	cmp	r7, r4
 8000854:	d100      	bne.n	8000858 <__aeabi_dadd+0x1e0>
 8000856:	e18a      	b.n	8000b6e <__aeabi_dadd+0x4f6>
 8000858:	0017      	movs	r7, r2
 800085a:	e73b      	b.n	80006d4 <__aeabi_dadd+0x5c>
 800085c:	4c63      	ldr	r4, [pc, #396]	; (80009ec <__aeabi_dadd+0x374>)
 800085e:	1c72      	adds	r2, r6, #1
 8000860:	4222      	tst	r2, r4
 8000862:	d000      	beq.n	8000866 <__aeabi_dadd+0x1ee>
 8000864:	e0e0      	b.n	8000a28 <__aeabi_dadd+0x3b0>
 8000866:	000a      	movs	r2, r1
 8000868:	431a      	orrs	r2, r3
 800086a:	2e00      	cmp	r6, #0
 800086c:	d000      	beq.n	8000870 <__aeabi_dadd+0x1f8>
 800086e:	e174      	b.n	8000b5a <__aeabi_dadd+0x4e2>
 8000870:	2a00      	cmp	r2, #0
 8000872:	d100      	bne.n	8000876 <__aeabi_dadd+0x1fe>
 8000874:	e1d0      	b.n	8000c18 <__aeabi_dadd+0x5a0>
 8000876:	464a      	mov	r2, r9
 8000878:	4302      	orrs	r2, r0
 800087a:	d000      	beq.n	800087e <__aeabi_dadd+0x206>
 800087c:	e1e3      	b.n	8000c46 <__aeabi_dadd+0x5ce>
 800087e:	074a      	lsls	r2, r1, #29
 8000880:	08db      	lsrs	r3, r3, #3
 8000882:	4313      	orrs	r3, r2
 8000884:	08c9      	lsrs	r1, r1, #3
 8000886:	e029      	b.n	80008dc <__aeabi_dadd+0x264>
 8000888:	464a      	mov	r2, r9
 800088a:	4302      	orrs	r2, r0
 800088c:	d100      	bne.n	8000890 <__aeabi_dadd+0x218>
 800088e:	e17d      	b.n	8000b8c <__aeabi_dadd+0x514>
 8000890:	1e7a      	subs	r2, r7, #1
 8000892:	2f01      	cmp	r7, #1
 8000894:	d100      	bne.n	8000898 <__aeabi_dadd+0x220>
 8000896:	e0e0      	b.n	8000a5a <__aeabi_dadd+0x3e2>
 8000898:	4c52      	ldr	r4, [pc, #328]	; (80009e4 <__aeabi_dadd+0x36c>)
 800089a:	42a7      	cmp	r7, r4
 800089c:	d100      	bne.n	80008a0 <__aeabi_dadd+0x228>
 800089e:	e166      	b.n	8000b6e <__aeabi_dadd+0x4f6>
 80008a0:	0017      	movs	r7, r2
 80008a2:	e7b2      	b.n	800080a <__aeabi_dadd+0x192>
 80008a4:	0010      	movs	r0, r2
 80008a6:	3b1f      	subs	r3, #31
 80008a8:	40d8      	lsrs	r0, r3
 80008aa:	2920      	cmp	r1, #32
 80008ac:	d003      	beq.n	80008b6 <__aeabi_dadd+0x23e>
 80008ae:	2340      	movs	r3, #64	; 0x40
 80008b0:	1a5b      	subs	r3, r3, r1
 80008b2:	409a      	lsls	r2, r3
 80008b4:	4314      	orrs	r4, r2
 80008b6:	1e63      	subs	r3, r4, #1
 80008b8:	419c      	sbcs	r4, r3
 80008ba:	2300      	movs	r3, #0
 80008bc:	2600      	movs	r6, #0
 80008be:	469a      	mov	sl, r3
 80008c0:	4304      	orrs	r4, r0
 80008c2:	0763      	lsls	r3, r4, #29
 80008c4:	d000      	beq.n	80008c8 <__aeabi_dadd+0x250>
 80008c6:	e755      	b.n	8000774 <__aeabi_dadd+0xfc>
 80008c8:	4652      	mov	r2, sl
 80008ca:	08e3      	lsrs	r3, r4, #3
 80008cc:	0752      	lsls	r2, r2, #29
 80008ce:	4313      	orrs	r3, r2
 80008d0:	4652      	mov	r2, sl
 80008d2:	0037      	movs	r7, r6
 80008d4:	08d1      	lsrs	r1, r2, #3
 80008d6:	4a43      	ldr	r2, [pc, #268]	; (80009e4 <__aeabi_dadd+0x36c>)
 80008d8:	4297      	cmp	r7, r2
 80008da:	d01f      	beq.n	800091c <__aeabi_dadd+0x2a4>
 80008dc:	0309      	lsls	r1, r1, #12
 80008de:	057a      	lsls	r2, r7, #21
 80008e0:	0b0c      	lsrs	r4, r1, #12
 80008e2:	0d52      	lsrs	r2, r2, #21
 80008e4:	e764      	b.n	80007b0 <__aeabi_dadd+0x138>
 80008e6:	4642      	mov	r2, r8
 80008e8:	464c      	mov	r4, r9
 80008ea:	4314      	orrs	r4, r2
 80008ec:	1e62      	subs	r2, r4, #1
 80008ee:	4194      	sbcs	r4, r2
 80008f0:	18e4      	adds	r4, r4, r3
 80008f2:	429c      	cmp	r4, r3
 80008f4:	4192      	sbcs	r2, r2
 80008f6:	4252      	negs	r2, r2
 80008f8:	4692      	mov	sl, r2
 80008fa:	448a      	add	sl, r1
 80008fc:	4653      	mov	r3, sl
 80008fe:	021b      	lsls	r3, r3, #8
 8000900:	d5df      	bpl.n	80008c2 <__aeabi_dadd+0x24a>
 8000902:	4b38      	ldr	r3, [pc, #224]	; (80009e4 <__aeabi_dadd+0x36c>)
 8000904:	3601      	adds	r6, #1
 8000906:	429e      	cmp	r6, r3
 8000908:	d000      	beq.n	800090c <__aeabi_dadd+0x294>
 800090a:	e0b3      	b.n	8000a74 <__aeabi_dadd+0x3fc>
 800090c:	0032      	movs	r2, r6
 800090e:	2400      	movs	r4, #0
 8000910:	2300      	movs	r3, #0
 8000912:	e74d      	b.n	80007b0 <__aeabi_dadd+0x138>
 8000914:	074a      	lsls	r2, r1, #29
 8000916:	08db      	lsrs	r3, r3, #3
 8000918:	4313      	orrs	r3, r2
 800091a:	08c9      	lsrs	r1, r1, #3
 800091c:	001a      	movs	r2, r3
 800091e:	430a      	orrs	r2, r1
 8000920:	d100      	bne.n	8000924 <__aeabi_dadd+0x2ac>
 8000922:	e200      	b.n	8000d26 <__aeabi_dadd+0x6ae>
 8000924:	2480      	movs	r4, #128	; 0x80
 8000926:	0324      	lsls	r4, r4, #12
 8000928:	430c      	orrs	r4, r1
 800092a:	0324      	lsls	r4, r4, #12
 800092c:	4a2d      	ldr	r2, [pc, #180]	; (80009e4 <__aeabi_dadd+0x36c>)
 800092e:	0b24      	lsrs	r4, r4, #12
 8000930:	e73e      	b.n	80007b0 <__aeabi_dadd+0x138>
 8000932:	0020      	movs	r0, r4
 8000934:	f001 fd6e 	bl	8002414 <__clzsi2>
 8000938:	0003      	movs	r3, r0
 800093a:	3318      	adds	r3, #24
 800093c:	2b1f      	cmp	r3, #31
 800093e:	dc00      	bgt.n	8000942 <__aeabi_dadd+0x2ca>
 8000940:	e6f7      	b.n	8000732 <__aeabi_dadd+0xba>
 8000942:	0022      	movs	r2, r4
 8000944:	3808      	subs	r0, #8
 8000946:	4082      	lsls	r2, r0
 8000948:	2400      	movs	r4, #0
 800094a:	42b3      	cmp	r3, r6
 800094c:	db00      	blt.n	8000950 <__aeabi_dadd+0x2d8>
 800094e:	e6fc      	b.n	800074a <__aeabi_dadd+0xd2>
 8000950:	1af6      	subs	r6, r6, r3
 8000952:	4b25      	ldr	r3, [pc, #148]	; (80009e8 <__aeabi_dadd+0x370>)
 8000954:	401a      	ands	r2, r3
 8000956:	4692      	mov	sl, r2
 8000958:	e70a      	b.n	8000770 <__aeabi_dadd+0xf8>
 800095a:	2f00      	cmp	r7, #0
 800095c:	d02b      	beq.n	80009b6 <__aeabi_dadd+0x33e>
 800095e:	1b97      	subs	r7, r2, r6
 8000960:	2e00      	cmp	r6, #0
 8000962:	d100      	bne.n	8000966 <__aeabi_dadd+0x2ee>
 8000964:	e0b8      	b.n	8000ad8 <__aeabi_dadd+0x460>
 8000966:	4c1f      	ldr	r4, [pc, #124]	; (80009e4 <__aeabi_dadd+0x36c>)
 8000968:	42a2      	cmp	r2, r4
 800096a:	d100      	bne.n	800096e <__aeabi_dadd+0x2f6>
 800096c:	e11c      	b.n	8000ba8 <__aeabi_dadd+0x530>
 800096e:	2480      	movs	r4, #128	; 0x80
 8000970:	0424      	lsls	r4, r4, #16
 8000972:	4321      	orrs	r1, r4
 8000974:	2f38      	cmp	r7, #56	; 0x38
 8000976:	dd00      	ble.n	800097a <__aeabi_dadd+0x302>
 8000978:	e11e      	b.n	8000bb8 <__aeabi_dadd+0x540>
 800097a:	2f1f      	cmp	r7, #31
 800097c:	dd00      	ble.n	8000980 <__aeabi_dadd+0x308>
 800097e:	e19e      	b.n	8000cbe <__aeabi_dadd+0x646>
 8000980:	2620      	movs	r6, #32
 8000982:	000c      	movs	r4, r1
 8000984:	1bf6      	subs	r6, r6, r7
 8000986:	0018      	movs	r0, r3
 8000988:	40b3      	lsls	r3, r6
 800098a:	40b4      	lsls	r4, r6
 800098c:	40f8      	lsrs	r0, r7
 800098e:	1e5e      	subs	r6, r3, #1
 8000990:	41b3      	sbcs	r3, r6
 8000992:	40f9      	lsrs	r1, r7
 8000994:	4304      	orrs	r4, r0
 8000996:	431c      	orrs	r4, r3
 8000998:	4489      	add	r9, r1
 800099a:	4444      	add	r4, r8
 800099c:	4544      	cmp	r4, r8
 800099e:	419b      	sbcs	r3, r3
 80009a0:	425b      	negs	r3, r3
 80009a2:	444b      	add	r3, r9
 80009a4:	469a      	mov	sl, r3
 80009a6:	0016      	movs	r6, r2
 80009a8:	e7a8      	b.n	80008fc <__aeabi_dadd+0x284>
 80009aa:	4642      	mov	r2, r8
 80009ac:	464c      	mov	r4, r9
 80009ae:	4314      	orrs	r4, r2
 80009b0:	1e62      	subs	r2, r4, #1
 80009b2:	4194      	sbcs	r4, r2
 80009b4:	e6a6      	b.n	8000704 <__aeabi_dadd+0x8c>
 80009b6:	4c0d      	ldr	r4, [pc, #52]	; (80009ec <__aeabi_dadd+0x374>)
 80009b8:	1c72      	adds	r2, r6, #1
 80009ba:	4222      	tst	r2, r4
 80009bc:	d000      	beq.n	80009c0 <__aeabi_dadd+0x348>
 80009be:	e0a8      	b.n	8000b12 <__aeabi_dadd+0x49a>
 80009c0:	000a      	movs	r2, r1
 80009c2:	431a      	orrs	r2, r3
 80009c4:	2e00      	cmp	r6, #0
 80009c6:	d000      	beq.n	80009ca <__aeabi_dadd+0x352>
 80009c8:	e10a      	b.n	8000be0 <__aeabi_dadd+0x568>
 80009ca:	2a00      	cmp	r2, #0
 80009cc:	d100      	bne.n	80009d0 <__aeabi_dadd+0x358>
 80009ce:	e15e      	b.n	8000c8e <__aeabi_dadd+0x616>
 80009d0:	464a      	mov	r2, r9
 80009d2:	4302      	orrs	r2, r0
 80009d4:	d000      	beq.n	80009d8 <__aeabi_dadd+0x360>
 80009d6:	e161      	b.n	8000c9c <__aeabi_dadd+0x624>
 80009d8:	074a      	lsls	r2, r1, #29
 80009da:	08db      	lsrs	r3, r3, #3
 80009dc:	4313      	orrs	r3, r2
 80009de:	08c9      	lsrs	r1, r1, #3
 80009e0:	e77c      	b.n	80008dc <__aeabi_dadd+0x264>
 80009e2:	46c0      	nop			; (mov r8, r8)
 80009e4:	000007ff 	.word	0x000007ff
 80009e8:	ff7fffff 	.word	0xff7fffff
 80009ec:	000007fe 	.word	0x000007fe
 80009f0:	4ccf      	ldr	r4, [pc, #828]	; (8000d30 <__aeabi_dadd+0x6b8>)
 80009f2:	42a2      	cmp	r2, r4
 80009f4:	d100      	bne.n	80009f8 <__aeabi_dadd+0x380>
 80009f6:	e0ce      	b.n	8000b96 <__aeabi_dadd+0x51e>
 80009f8:	2480      	movs	r4, #128	; 0x80
 80009fa:	0424      	lsls	r4, r4, #16
 80009fc:	4321      	orrs	r1, r4
 80009fe:	2f38      	cmp	r7, #56	; 0x38
 8000a00:	dc5b      	bgt.n	8000aba <__aeabi_dadd+0x442>
 8000a02:	2f1f      	cmp	r7, #31
 8000a04:	dd00      	ble.n	8000a08 <__aeabi_dadd+0x390>
 8000a06:	e0dc      	b.n	8000bc2 <__aeabi_dadd+0x54a>
 8000a08:	2520      	movs	r5, #32
 8000a0a:	000c      	movs	r4, r1
 8000a0c:	1bed      	subs	r5, r5, r7
 8000a0e:	001e      	movs	r6, r3
 8000a10:	40ab      	lsls	r3, r5
 8000a12:	40ac      	lsls	r4, r5
 8000a14:	40fe      	lsrs	r6, r7
 8000a16:	1e5d      	subs	r5, r3, #1
 8000a18:	41ab      	sbcs	r3, r5
 8000a1a:	4334      	orrs	r4, r6
 8000a1c:	40f9      	lsrs	r1, r7
 8000a1e:	431c      	orrs	r4, r3
 8000a20:	464b      	mov	r3, r9
 8000a22:	1a5b      	subs	r3, r3, r1
 8000a24:	4699      	mov	r9, r3
 8000a26:	e04c      	b.n	8000ac2 <__aeabi_dadd+0x44a>
 8000a28:	464a      	mov	r2, r9
 8000a2a:	1a1c      	subs	r4, r3, r0
 8000a2c:	1a88      	subs	r0, r1, r2
 8000a2e:	42a3      	cmp	r3, r4
 8000a30:	4192      	sbcs	r2, r2
 8000a32:	4252      	negs	r2, r2
 8000a34:	4692      	mov	sl, r2
 8000a36:	0002      	movs	r2, r0
 8000a38:	4650      	mov	r0, sl
 8000a3a:	1a12      	subs	r2, r2, r0
 8000a3c:	4692      	mov	sl, r2
 8000a3e:	0212      	lsls	r2, r2, #8
 8000a40:	d478      	bmi.n	8000b34 <__aeabi_dadd+0x4bc>
 8000a42:	4653      	mov	r3, sl
 8000a44:	4323      	orrs	r3, r4
 8000a46:	d000      	beq.n	8000a4a <__aeabi_dadd+0x3d2>
 8000a48:	e66a      	b.n	8000720 <__aeabi_dadd+0xa8>
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	2500      	movs	r5, #0
 8000a4e:	e745      	b.n	80008dc <__aeabi_dadd+0x264>
 8000a50:	074a      	lsls	r2, r1, #29
 8000a52:	08db      	lsrs	r3, r3, #3
 8000a54:	4313      	orrs	r3, r2
 8000a56:	08c9      	lsrs	r1, r1, #3
 8000a58:	e73d      	b.n	80008d6 <__aeabi_dadd+0x25e>
 8000a5a:	181c      	adds	r4, r3, r0
 8000a5c:	429c      	cmp	r4, r3
 8000a5e:	419b      	sbcs	r3, r3
 8000a60:	4449      	add	r1, r9
 8000a62:	468a      	mov	sl, r1
 8000a64:	425b      	negs	r3, r3
 8000a66:	449a      	add	sl, r3
 8000a68:	4653      	mov	r3, sl
 8000a6a:	2601      	movs	r6, #1
 8000a6c:	021b      	lsls	r3, r3, #8
 8000a6e:	d400      	bmi.n	8000a72 <__aeabi_dadd+0x3fa>
 8000a70:	e727      	b.n	80008c2 <__aeabi_dadd+0x24a>
 8000a72:	2602      	movs	r6, #2
 8000a74:	4652      	mov	r2, sl
 8000a76:	4baf      	ldr	r3, [pc, #700]	; (8000d34 <__aeabi_dadd+0x6bc>)
 8000a78:	2101      	movs	r1, #1
 8000a7a:	401a      	ands	r2, r3
 8000a7c:	0013      	movs	r3, r2
 8000a7e:	4021      	ands	r1, r4
 8000a80:	0862      	lsrs	r2, r4, #1
 8000a82:	430a      	orrs	r2, r1
 8000a84:	07dc      	lsls	r4, r3, #31
 8000a86:	085b      	lsrs	r3, r3, #1
 8000a88:	469a      	mov	sl, r3
 8000a8a:	4314      	orrs	r4, r2
 8000a8c:	e670      	b.n	8000770 <__aeabi_dadd+0xf8>
 8000a8e:	003a      	movs	r2, r7
 8000a90:	464c      	mov	r4, r9
 8000a92:	3a20      	subs	r2, #32
 8000a94:	40d4      	lsrs	r4, r2
 8000a96:	46a4      	mov	ip, r4
 8000a98:	2f20      	cmp	r7, #32
 8000a9a:	d007      	beq.n	8000aac <__aeabi_dadd+0x434>
 8000a9c:	2240      	movs	r2, #64	; 0x40
 8000a9e:	4648      	mov	r0, r9
 8000aa0:	1bd2      	subs	r2, r2, r7
 8000aa2:	4090      	lsls	r0, r2
 8000aa4:	0002      	movs	r2, r0
 8000aa6:	4640      	mov	r0, r8
 8000aa8:	4310      	orrs	r0, r2
 8000aaa:	4680      	mov	r8, r0
 8000aac:	4640      	mov	r0, r8
 8000aae:	1e42      	subs	r2, r0, #1
 8000ab0:	4190      	sbcs	r0, r2
 8000ab2:	4662      	mov	r2, ip
 8000ab4:	0004      	movs	r4, r0
 8000ab6:	4314      	orrs	r4, r2
 8000ab8:	e624      	b.n	8000704 <__aeabi_dadd+0x8c>
 8000aba:	4319      	orrs	r1, r3
 8000abc:	000c      	movs	r4, r1
 8000abe:	1e63      	subs	r3, r4, #1
 8000ac0:	419c      	sbcs	r4, r3
 8000ac2:	4643      	mov	r3, r8
 8000ac4:	1b1c      	subs	r4, r3, r4
 8000ac6:	45a0      	cmp	r8, r4
 8000ac8:	419b      	sbcs	r3, r3
 8000aca:	4649      	mov	r1, r9
 8000acc:	425b      	negs	r3, r3
 8000ace:	1acb      	subs	r3, r1, r3
 8000ad0:	469a      	mov	sl, r3
 8000ad2:	4665      	mov	r5, ip
 8000ad4:	0016      	movs	r6, r2
 8000ad6:	e61b      	b.n	8000710 <__aeabi_dadd+0x98>
 8000ad8:	000c      	movs	r4, r1
 8000ada:	431c      	orrs	r4, r3
 8000adc:	d100      	bne.n	8000ae0 <__aeabi_dadd+0x468>
 8000ade:	e0c7      	b.n	8000c70 <__aeabi_dadd+0x5f8>
 8000ae0:	1e7c      	subs	r4, r7, #1
 8000ae2:	2f01      	cmp	r7, #1
 8000ae4:	d100      	bne.n	8000ae8 <__aeabi_dadd+0x470>
 8000ae6:	e0f9      	b.n	8000cdc <__aeabi_dadd+0x664>
 8000ae8:	4e91      	ldr	r6, [pc, #580]	; (8000d30 <__aeabi_dadd+0x6b8>)
 8000aea:	42b7      	cmp	r7, r6
 8000aec:	d05c      	beq.n	8000ba8 <__aeabi_dadd+0x530>
 8000aee:	0027      	movs	r7, r4
 8000af0:	e740      	b.n	8000974 <__aeabi_dadd+0x2fc>
 8000af2:	2220      	movs	r2, #32
 8000af4:	464c      	mov	r4, r9
 8000af6:	4640      	mov	r0, r8
 8000af8:	1bd2      	subs	r2, r2, r7
 8000afa:	4094      	lsls	r4, r2
 8000afc:	40f8      	lsrs	r0, r7
 8000afe:	4304      	orrs	r4, r0
 8000b00:	4640      	mov	r0, r8
 8000b02:	4090      	lsls	r0, r2
 8000b04:	1e42      	subs	r2, r0, #1
 8000b06:	4190      	sbcs	r0, r2
 8000b08:	464a      	mov	r2, r9
 8000b0a:	40fa      	lsrs	r2, r7
 8000b0c:	4304      	orrs	r4, r0
 8000b0e:	1889      	adds	r1, r1, r2
 8000b10:	e6ee      	b.n	80008f0 <__aeabi_dadd+0x278>
 8000b12:	4c87      	ldr	r4, [pc, #540]	; (8000d30 <__aeabi_dadd+0x6b8>)
 8000b14:	42a2      	cmp	r2, r4
 8000b16:	d100      	bne.n	8000b1a <__aeabi_dadd+0x4a2>
 8000b18:	e6f9      	b.n	800090e <__aeabi_dadd+0x296>
 8000b1a:	1818      	adds	r0, r3, r0
 8000b1c:	4298      	cmp	r0, r3
 8000b1e:	419b      	sbcs	r3, r3
 8000b20:	4449      	add	r1, r9
 8000b22:	425b      	negs	r3, r3
 8000b24:	18cb      	adds	r3, r1, r3
 8000b26:	07dc      	lsls	r4, r3, #31
 8000b28:	0840      	lsrs	r0, r0, #1
 8000b2a:	085b      	lsrs	r3, r3, #1
 8000b2c:	469a      	mov	sl, r3
 8000b2e:	0016      	movs	r6, r2
 8000b30:	4304      	orrs	r4, r0
 8000b32:	e6c6      	b.n	80008c2 <__aeabi_dadd+0x24a>
 8000b34:	4642      	mov	r2, r8
 8000b36:	1ad4      	subs	r4, r2, r3
 8000b38:	45a0      	cmp	r8, r4
 8000b3a:	4180      	sbcs	r0, r0
 8000b3c:	464b      	mov	r3, r9
 8000b3e:	4240      	negs	r0, r0
 8000b40:	1a59      	subs	r1, r3, r1
 8000b42:	1a0b      	subs	r3, r1, r0
 8000b44:	469a      	mov	sl, r3
 8000b46:	4665      	mov	r5, ip
 8000b48:	e5ea      	b.n	8000720 <__aeabi_dadd+0xa8>
 8000b4a:	464b      	mov	r3, r9
 8000b4c:	464a      	mov	r2, r9
 8000b4e:	08c0      	lsrs	r0, r0, #3
 8000b50:	075b      	lsls	r3, r3, #29
 8000b52:	4665      	mov	r5, ip
 8000b54:	4303      	orrs	r3, r0
 8000b56:	08d1      	lsrs	r1, r2, #3
 8000b58:	e6bd      	b.n	80008d6 <__aeabi_dadd+0x25e>
 8000b5a:	2a00      	cmp	r2, #0
 8000b5c:	d000      	beq.n	8000b60 <__aeabi_dadd+0x4e8>
 8000b5e:	e08e      	b.n	8000c7e <__aeabi_dadd+0x606>
 8000b60:	464b      	mov	r3, r9
 8000b62:	4303      	orrs	r3, r0
 8000b64:	d117      	bne.n	8000b96 <__aeabi_dadd+0x51e>
 8000b66:	2180      	movs	r1, #128	; 0x80
 8000b68:	2500      	movs	r5, #0
 8000b6a:	0309      	lsls	r1, r1, #12
 8000b6c:	e6da      	b.n	8000924 <__aeabi_dadd+0x2ac>
 8000b6e:	074a      	lsls	r2, r1, #29
 8000b70:	08db      	lsrs	r3, r3, #3
 8000b72:	4313      	orrs	r3, r2
 8000b74:	08c9      	lsrs	r1, r1, #3
 8000b76:	e6d1      	b.n	800091c <__aeabi_dadd+0x2a4>
 8000b78:	1a1c      	subs	r4, r3, r0
 8000b7a:	464a      	mov	r2, r9
 8000b7c:	42a3      	cmp	r3, r4
 8000b7e:	419b      	sbcs	r3, r3
 8000b80:	1a89      	subs	r1, r1, r2
 8000b82:	425b      	negs	r3, r3
 8000b84:	1acb      	subs	r3, r1, r3
 8000b86:	469a      	mov	sl, r3
 8000b88:	2601      	movs	r6, #1
 8000b8a:	e5c1      	b.n	8000710 <__aeabi_dadd+0x98>
 8000b8c:	074a      	lsls	r2, r1, #29
 8000b8e:	08db      	lsrs	r3, r3, #3
 8000b90:	4313      	orrs	r3, r2
 8000b92:	08c9      	lsrs	r1, r1, #3
 8000b94:	e69f      	b.n	80008d6 <__aeabi_dadd+0x25e>
 8000b96:	4643      	mov	r3, r8
 8000b98:	08d8      	lsrs	r0, r3, #3
 8000b9a:	464b      	mov	r3, r9
 8000b9c:	464a      	mov	r2, r9
 8000b9e:	075b      	lsls	r3, r3, #29
 8000ba0:	4665      	mov	r5, ip
 8000ba2:	4303      	orrs	r3, r0
 8000ba4:	08d1      	lsrs	r1, r2, #3
 8000ba6:	e6b9      	b.n	800091c <__aeabi_dadd+0x2a4>
 8000ba8:	4643      	mov	r3, r8
 8000baa:	08d8      	lsrs	r0, r3, #3
 8000bac:	464b      	mov	r3, r9
 8000bae:	464a      	mov	r2, r9
 8000bb0:	075b      	lsls	r3, r3, #29
 8000bb2:	4303      	orrs	r3, r0
 8000bb4:	08d1      	lsrs	r1, r2, #3
 8000bb6:	e6b1      	b.n	800091c <__aeabi_dadd+0x2a4>
 8000bb8:	4319      	orrs	r1, r3
 8000bba:	000c      	movs	r4, r1
 8000bbc:	1e63      	subs	r3, r4, #1
 8000bbe:	419c      	sbcs	r4, r3
 8000bc0:	e6eb      	b.n	800099a <__aeabi_dadd+0x322>
 8000bc2:	003c      	movs	r4, r7
 8000bc4:	000d      	movs	r5, r1
 8000bc6:	3c20      	subs	r4, #32
 8000bc8:	40e5      	lsrs	r5, r4
 8000bca:	2f20      	cmp	r7, #32
 8000bcc:	d003      	beq.n	8000bd6 <__aeabi_dadd+0x55e>
 8000bce:	2440      	movs	r4, #64	; 0x40
 8000bd0:	1be4      	subs	r4, r4, r7
 8000bd2:	40a1      	lsls	r1, r4
 8000bd4:	430b      	orrs	r3, r1
 8000bd6:	001c      	movs	r4, r3
 8000bd8:	1e63      	subs	r3, r4, #1
 8000bda:	419c      	sbcs	r4, r3
 8000bdc:	432c      	orrs	r4, r5
 8000bde:	e770      	b.n	8000ac2 <__aeabi_dadd+0x44a>
 8000be0:	2a00      	cmp	r2, #0
 8000be2:	d0e1      	beq.n	8000ba8 <__aeabi_dadd+0x530>
 8000be4:	464a      	mov	r2, r9
 8000be6:	4302      	orrs	r2, r0
 8000be8:	d0c1      	beq.n	8000b6e <__aeabi_dadd+0x4f6>
 8000bea:	074a      	lsls	r2, r1, #29
 8000bec:	08db      	lsrs	r3, r3, #3
 8000bee:	4313      	orrs	r3, r2
 8000bf0:	2280      	movs	r2, #128	; 0x80
 8000bf2:	08c9      	lsrs	r1, r1, #3
 8000bf4:	0312      	lsls	r2, r2, #12
 8000bf6:	4211      	tst	r1, r2
 8000bf8:	d008      	beq.n	8000c0c <__aeabi_dadd+0x594>
 8000bfa:	4648      	mov	r0, r9
 8000bfc:	08c4      	lsrs	r4, r0, #3
 8000bfe:	4214      	tst	r4, r2
 8000c00:	d104      	bne.n	8000c0c <__aeabi_dadd+0x594>
 8000c02:	4643      	mov	r3, r8
 8000c04:	0021      	movs	r1, r4
 8000c06:	08db      	lsrs	r3, r3, #3
 8000c08:	0742      	lsls	r2, r0, #29
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	0f5a      	lsrs	r2, r3, #29
 8000c0e:	00db      	lsls	r3, r3, #3
 8000c10:	0752      	lsls	r2, r2, #29
 8000c12:	08db      	lsrs	r3, r3, #3
 8000c14:	4313      	orrs	r3, r2
 8000c16:	e681      	b.n	800091c <__aeabi_dadd+0x2a4>
 8000c18:	464b      	mov	r3, r9
 8000c1a:	4303      	orrs	r3, r0
 8000c1c:	d100      	bne.n	8000c20 <__aeabi_dadd+0x5a8>
 8000c1e:	e714      	b.n	8000a4a <__aeabi_dadd+0x3d2>
 8000c20:	464b      	mov	r3, r9
 8000c22:	464a      	mov	r2, r9
 8000c24:	08c0      	lsrs	r0, r0, #3
 8000c26:	075b      	lsls	r3, r3, #29
 8000c28:	4665      	mov	r5, ip
 8000c2a:	4303      	orrs	r3, r0
 8000c2c:	08d1      	lsrs	r1, r2, #3
 8000c2e:	e655      	b.n	80008dc <__aeabi_dadd+0x264>
 8000c30:	1ac4      	subs	r4, r0, r3
 8000c32:	45a0      	cmp	r8, r4
 8000c34:	4180      	sbcs	r0, r0
 8000c36:	464b      	mov	r3, r9
 8000c38:	4240      	negs	r0, r0
 8000c3a:	1a59      	subs	r1, r3, r1
 8000c3c:	1a0b      	subs	r3, r1, r0
 8000c3e:	469a      	mov	sl, r3
 8000c40:	4665      	mov	r5, ip
 8000c42:	2601      	movs	r6, #1
 8000c44:	e564      	b.n	8000710 <__aeabi_dadd+0x98>
 8000c46:	1a1c      	subs	r4, r3, r0
 8000c48:	464a      	mov	r2, r9
 8000c4a:	42a3      	cmp	r3, r4
 8000c4c:	4180      	sbcs	r0, r0
 8000c4e:	1a8a      	subs	r2, r1, r2
 8000c50:	4240      	negs	r0, r0
 8000c52:	1a12      	subs	r2, r2, r0
 8000c54:	4692      	mov	sl, r2
 8000c56:	0212      	lsls	r2, r2, #8
 8000c58:	d549      	bpl.n	8000cee <__aeabi_dadd+0x676>
 8000c5a:	4642      	mov	r2, r8
 8000c5c:	1ad4      	subs	r4, r2, r3
 8000c5e:	45a0      	cmp	r8, r4
 8000c60:	4180      	sbcs	r0, r0
 8000c62:	464b      	mov	r3, r9
 8000c64:	4240      	negs	r0, r0
 8000c66:	1a59      	subs	r1, r3, r1
 8000c68:	1a0b      	subs	r3, r1, r0
 8000c6a:	469a      	mov	sl, r3
 8000c6c:	4665      	mov	r5, ip
 8000c6e:	e57f      	b.n	8000770 <__aeabi_dadd+0xf8>
 8000c70:	464b      	mov	r3, r9
 8000c72:	464a      	mov	r2, r9
 8000c74:	08c0      	lsrs	r0, r0, #3
 8000c76:	075b      	lsls	r3, r3, #29
 8000c78:	4303      	orrs	r3, r0
 8000c7a:	08d1      	lsrs	r1, r2, #3
 8000c7c:	e62b      	b.n	80008d6 <__aeabi_dadd+0x25e>
 8000c7e:	464a      	mov	r2, r9
 8000c80:	08db      	lsrs	r3, r3, #3
 8000c82:	4302      	orrs	r2, r0
 8000c84:	d138      	bne.n	8000cf8 <__aeabi_dadd+0x680>
 8000c86:	074a      	lsls	r2, r1, #29
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	08c9      	lsrs	r1, r1, #3
 8000c8c:	e646      	b.n	800091c <__aeabi_dadd+0x2a4>
 8000c8e:	464b      	mov	r3, r9
 8000c90:	464a      	mov	r2, r9
 8000c92:	08c0      	lsrs	r0, r0, #3
 8000c94:	075b      	lsls	r3, r3, #29
 8000c96:	4303      	orrs	r3, r0
 8000c98:	08d1      	lsrs	r1, r2, #3
 8000c9a:	e61f      	b.n	80008dc <__aeabi_dadd+0x264>
 8000c9c:	181c      	adds	r4, r3, r0
 8000c9e:	429c      	cmp	r4, r3
 8000ca0:	419b      	sbcs	r3, r3
 8000ca2:	4449      	add	r1, r9
 8000ca4:	468a      	mov	sl, r1
 8000ca6:	425b      	negs	r3, r3
 8000ca8:	449a      	add	sl, r3
 8000caa:	4653      	mov	r3, sl
 8000cac:	021b      	lsls	r3, r3, #8
 8000cae:	d400      	bmi.n	8000cb2 <__aeabi_dadd+0x63a>
 8000cb0:	e607      	b.n	80008c2 <__aeabi_dadd+0x24a>
 8000cb2:	4652      	mov	r2, sl
 8000cb4:	4b1f      	ldr	r3, [pc, #124]	; (8000d34 <__aeabi_dadd+0x6bc>)
 8000cb6:	2601      	movs	r6, #1
 8000cb8:	401a      	ands	r2, r3
 8000cba:	4692      	mov	sl, r2
 8000cbc:	e601      	b.n	80008c2 <__aeabi_dadd+0x24a>
 8000cbe:	003c      	movs	r4, r7
 8000cc0:	000e      	movs	r6, r1
 8000cc2:	3c20      	subs	r4, #32
 8000cc4:	40e6      	lsrs	r6, r4
 8000cc6:	2f20      	cmp	r7, #32
 8000cc8:	d003      	beq.n	8000cd2 <__aeabi_dadd+0x65a>
 8000cca:	2440      	movs	r4, #64	; 0x40
 8000ccc:	1be4      	subs	r4, r4, r7
 8000cce:	40a1      	lsls	r1, r4
 8000cd0:	430b      	orrs	r3, r1
 8000cd2:	001c      	movs	r4, r3
 8000cd4:	1e63      	subs	r3, r4, #1
 8000cd6:	419c      	sbcs	r4, r3
 8000cd8:	4334      	orrs	r4, r6
 8000cda:	e65e      	b.n	800099a <__aeabi_dadd+0x322>
 8000cdc:	4443      	add	r3, r8
 8000cde:	4283      	cmp	r3, r0
 8000ce0:	4180      	sbcs	r0, r0
 8000ce2:	4449      	add	r1, r9
 8000ce4:	468a      	mov	sl, r1
 8000ce6:	4240      	negs	r0, r0
 8000ce8:	001c      	movs	r4, r3
 8000cea:	4482      	add	sl, r0
 8000cec:	e6bc      	b.n	8000a68 <__aeabi_dadd+0x3f0>
 8000cee:	4653      	mov	r3, sl
 8000cf0:	4323      	orrs	r3, r4
 8000cf2:	d100      	bne.n	8000cf6 <__aeabi_dadd+0x67e>
 8000cf4:	e6a9      	b.n	8000a4a <__aeabi_dadd+0x3d2>
 8000cf6:	e5e4      	b.n	80008c2 <__aeabi_dadd+0x24a>
 8000cf8:	074a      	lsls	r2, r1, #29
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	2280      	movs	r2, #128	; 0x80
 8000cfe:	08c9      	lsrs	r1, r1, #3
 8000d00:	0312      	lsls	r2, r2, #12
 8000d02:	4211      	tst	r1, r2
 8000d04:	d009      	beq.n	8000d1a <__aeabi_dadd+0x6a2>
 8000d06:	4648      	mov	r0, r9
 8000d08:	08c4      	lsrs	r4, r0, #3
 8000d0a:	4214      	tst	r4, r2
 8000d0c:	d105      	bne.n	8000d1a <__aeabi_dadd+0x6a2>
 8000d0e:	4643      	mov	r3, r8
 8000d10:	4665      	mov	r5, ip
 8000d12:	0021      	movs	r1, r4
 8000d14:	08db      	lsrs	r3, r3, #3
 8000d16:	0742      	lsls	r2, r0, #29
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	0f5a      	lsrs	r2, r3, #29
 8000d1c:	00db      	lsls	r3, r3, #3
 8000d1e:	08db      	lsrs	r3, r3, #3
 8000d20:	0752      	lsls	r2, r2, #29
 8000d22:	4313      	orrs	r3, r2
 8000d24:	e5fa      	b.n	800091c <__aeabi_dadd+0x2a4>
 8000d26:	2300      	movs	r3, #0
 8000d28:	4a01      	ldr	r2, [pc, #4]	; (8000d30 <__aeabi_dadd+0x6b8>)
 8000d2a:	001c      	movs	r4, r3
 8000d2c:	e540      	b.n	80007b0 <__aeabi_dadd+0x138>
 8000d2e:	46c0      	nop			; (mov r8, r8)
 8000d30:	000007ff 	.word	0x000007ff
 8000d34:	ff7fffff 	.word	0xff7fffff

08000d38 <__aeabi_ddiv>:
 8000d38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d3a:	4657      	mov	r7, sl
 8000d3c:	464e      	mov	r6, r9
 8000d3e:	4645      	mov	r5, r8
 8000d40:	46de      	mov	lr, fp
 8000d42:	b5e0      	push	{r5, r6, r7, lr}
 8000d44:	030c      	lsls	r4, r1, #12
 8000d46:	001f      	movs	r7, r3
 8000d48:	004b      	lsls	r3, r1, #1
 8000d4a:	4681      	mov	r9, r0
 8000d4c:	4692      	mov	sl, r2
 8000d4e:	0005      	movs	r5, r0
 8000d50:	b085      	sub	sp, #20
 8000d52:	0b24      	lsrs	r4, r4, #12
 8000d54:	0d5b      	lsrs	r3, r3, #21
 8000d56:	0fce      	lsrs	r6, r1, #31
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d100      	bne.n	8000d5e <__aeabi_ddiv+0x26>
 8000d5c:	e152      	b.n	8001004 <__aeabi_ddiv+0x2cc>
 8000d5e:	4ad2      	ldr	r2, [pc, #840]	; (80010a8 <__aeabi_ddiv+0x370>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d100      	bne.n	8000d66 <__aeabi_ddiv+0x2e>
 8000d64:	e16e      	b.n	8001044 <__aeabi_ddiv+0x30c>
 8000d66:	0f42      	lsrs	r2, r0, #29
 8000d68:	00e4      	lsls	r4, r4, #3
 8000d6a:	4314      	orrs	r4, r2
 8000d6c:	2280      	movs	r2, #128	; 0x80
 8000d6e:	0412      	lsls	r2, r2, #16
 8000d70:	4322      	orrs	r2, r4
 8000d72:	4690      	mov	r8, r2
 8000d74:	4acd      	ldr	r2, [pc, #820]	; (80010ac <__aeabi_ddiv+0x374>)
 8000d76:	00c5      	lsls	r5, r0, #3
 8000d78:	4693      	mov	fp, r2
 8000d7a:	449b      	add	fp, r3
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	4699      	mov	r9, r3
 8000d80:	9300      	str	r3, [sp, #0]
 8000d82:	033c      	lsls	r4, r7, #12
 8000d84:	007b      	lsls	r3, r7, #1
 8000d86:	4650      	mov	r0, sl
 8000d88:	0b24      	lsrs	r4, r4, #12
 8000d8a:	0d5b      	lsrs	r3, r3, #21
 8000d8c:	0fff      	lsrs	r7, r7, #31
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d100      	bne.n	8000d94 <__aeabi_ddiv+0x5c>
 8000d92:	e11a      	b.n	8000fca <__aeabi_ddiv+0x292>
 8000d94:	4ac4      	ldr	r2, [pc, #784]	; (80010a8 <__aeabi_ddiv+0x370>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d100      	bne.n	8000d9c <__aeabi_ddiv+0x64>
 8000d9a:	e15e      	b.n	800105a <__aeabi_ddiv+0x322>
 8000d9c:	0f42      	lsrs	r2, r0, #29
 8000d9e:	00e4      	lsls	r4, r4, #3
 8000da0:	4322      	orrs	r2, r4
 8000da2:	2480      	movs	r4, #128	; 0x80
 8000da4:	0424      	lsls	r4, r4, #16
 8000da6:	4314      	orrs	r4, r2
 8000da8:	4ac0      	ldr	r2, [pc, #768]	; (80010ac <__aeabi_ddiv+0x374>)
 8000daa:	00c1      	lsls	r1, r0, #3
 8000dac:	4694      	mov	ip, r2
 8000dae:	465a      	mov	r2, fp
 8000db0:	4463      	add	r3, ip
 8000db2:	1ad3      	subs	r3, r2, r3
 8000db4:	469b      	mov	fp, r3
 8000db6:	2000      	movs	r0, #0
 8000db8:	0033      	movs	r3, r6
 8000dba:	407b      	eors	r3, r7
 8000dbc:	469a      	mov	sl, r3
 8000dbe:	464b      	mov	r3, r9
 8000dc0:	2b0f      	cmp	r3, #15
 8000dc2:	d827      	bhi.n	8000e14 <__aeabi_ddiv+0xdc>
 8000dc4:	4aba      	ldr	r2, [pc, #744]	; (80010b0 <__aeabi_ddiv+0x378>)
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	58d3      	ldr	r3, [r2, r3]
 8000dca:	469f      	mov	pc, r3
 8000dcc:	46b2      	mov	sl, r6
 8000dce:	9b00      	ldr	r3, [sp, #0]
 8000dd0:	2b02      	cmp	r3, #2
 8000dd2:	d016      	beq.n	8000e02 <__aeabi_ddiv+0xca>
 8000dd4:	2b03      	cmp	r3, #3
 8000dd6:	d100      	bne.n	8000dda <__aeabi_ddiv+0xa2>
 8000dd8:	e287      	b.n	80012ea <__aeabi_ddiv+0x5b2>
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d000      	beq.n	8000de0 <__aeabi_ddiv+0xa8>
 8000dde:	e0d5      	b.n	8000f8c <__aeabi_ddiv+0x254>
 8000de0:	2300      	movs	r3, #0
 8000de2:	2200      	movs	r2, #0
 8000de4:	2500      	movs	r5, #0
 8000de6:	051b      	lsls	r3, r3, #20
 8000de8:	4313      	orrs	r3, r2
 8000dea:	4652      	mov	r2, sl
 8000dec:	07d2      	lsls	r2, r2, #31
 8000dee:	4313      	orrs	r3, r2
 8000df0:	0028      	movs	r0, r5
 8000df2:	0019      	movs	r1, r3
 8000df4:	b005      	add	sp, #20
 8000df6:	bcf0      	pop	{r4, r5, r6, r7}
 8000df8:	46bb      	mov	fp, r7
 8000dfa:	46b2      	mov	sl, r6
 8000dfc:	46a9      	mov	r9, r5
 8000dfe:	46a0      	mov	r8, r4
 8000e00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e02:	2200      	movs	r2, #0
 8000e04:	2500      	movs	r5, #0
 8000e06:	4ba8      	ldr	r3, [pc, #672]	; (80010a8 <__aeabi_ddiv+0x370>)
 8000e08:	e7ed      	b.n	8000de6 <__aeabi_ddiv+0xae>
 8000e0a:	46ba      	mov	sl, r7
 8000e0c:	46a0      	mov	r8, r4
 8000e0e:	000d      	movs	r5, r1
 8000e10:	9000      	str	r0, [sp, #0]
 8000e12:	e7dc      	b.n	8000dce <__aeabi_ddiv+0x96>
 8000e14:	4544      	cmp	r4, r8
 8000e16:	d200      	bcs.n	8000e1a <__aeabi_ddiv+0xe2>
 8000e18:	e1c4      	b.n	80011a4 <__aeabi_ddiv+0x46c>
 8000e1a:	d100      	bne.n	8000e1e <__aeabi_ddiv+0xe6>
 8000e1c:	e1bf      	b.n	800119e <__aeabi_ddiv+0x466>
 8000e1e:	2301      	movs	r3, #1
 8000e20:	425b      	negs	r3, r3
 8000e22:	469c      	mov	ip, r3
 8000e24:	002e      	movs	r6, r5
 8000e26:	4640      	mov	r0, r8
 8000e28:	2500      	movs	r5, #0
 8000e2a:	44e3      	add	fp, ip
 8000e2c:	0223      	lsls	r3, r4, #8
 8000e2e:	0e0c      	lsrs	r4, r1, #24
 8000e30:	431c      	orrs	r4, r3
 8000e32:	0c1b      	lsrs	r3, r3, #16
 8000e34:	4699      	mov	r9, r3
 8000e36:	0423      	lsls	r3, r4, #16
 8000e38:	020a      	lsls	r2, r1, #8
 8000e3a:	0c1f      	lsrs	r7, r3, #16
 8000e3c:	4649      	mov	r1, r9
 8000e3e:	9200      	str	r2, [sp, #0]
 8000e40:	9701      	str	r7, [sp, #4]
 8000e42:	f7ff f9e3 	bl	800020c <__aeabi_uidivmod>
 8000e46:	0002      	movs	r2, r0
 8000e48:	437a      	muls	r2, r7
 8000e4a:	040b      	lsls	r3, r1, #16
 8000e4c:	0c31      	lsrs	r1, r6, #16
 8000e4e:	4680      	mov	r8, r0
 8000e50:	4319      	orrs	r1, r3
 8000e52:	428a      	cmp	r2, r1
 8000e54:	d907      	bls.n	8000e66 <__aeabi_ddiv+0x12e>
 8000e56:	2301      	movs	r3, #1
 8000e58:	425b      	negs	r3, r3
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	1909      	adds	r1, r1, r4
 8000e5e:	44e0      	add	r8, ip
 8000e60:	428c      	cmp	r4, r1
 8000e62:	d800      	bhi.n	8000e66 <__aeabi_ddiv+0x12e>
 8000e64:	e201      	b.n	800126a <__aeabi_ddiv+0x532>
 8000e66:	1a88      	subs	r0, r1, r2
 8000e68:	4649      	mov	r1, r9
 8000e6a:	f7ff f9cf 	bl	800020c <__aeabi_uidivmod>
 8000e6e:	9a01      	ldr	r2, [sp, #4]
 8000e70:	0436      	lsls	r6, r6, #16
 8000e72:	4342      	muls	r2, r0
 8000e74:	0409      	lsls	r1, r1, #16
 8000e76:	0c36      	lsrs	r6, r6, #16
 8000e78:	0003      	movs	r3, r0
 8000e7a:	430e      	orrs	r6, r1
 8000e7c:	42b2      	cmp	r2, r6
 8000e7e:	d904      	bls.n	8000e8a <__aeabi_ddiv+0x152>
 8000e80:	1936      	adds	r6, r6, r4
 8000e82:	3b01      	subs	r3, #1
 8000e84:	42b4      	cmp	r4, r6
 8000e86:	d800      	bhi.n	8000e8a <__aeabi_ddiv+0x152>
 8000e88:	e1e9      	b.n	800125e <__aeabi_ddiv+0x526>
 8000e8a:	1ab0      	subs	r0, r6, r2
 8000e8c:	4642      	mov	r2, r8
 8000e8e:	9e00      	ldr	r6, [sp, #0]
 8000e90:	0412      	lsls	r2, r2, #16
 8000e92:	431a      	orrs	r2, r3
 8000e94:	0c33      	lsrs	r3, r6, #16
 8000e96:	001f      	movs	r7, r3
 8000e98:	0c11      	lsrs	r1, r2, #16
 8000e9a:	4690      	mov	r8, r2
 8000e9c:	9302      	str	r3, [sp, #8]
 8000e9e:	0413      	lsls	r3, r2, #16
 8000ea0:	0432      	lsls	r2, r6, #16
 8000ea2:	0c16      	lsrs	r6, r2, #16
 8000ea4:	0032      	movs	r2, r6
 8000ea6:	0c1b      	lsrs	r3, r3, #16
 8000ea8:	435a      	muls	r2, r3
 8000eaa:	9603      	str	r6, [sp, #12]
 8000eac:	437b      	muls	r3, r7
 8000eae:	434e      	muls	r6, r1
 8000eb0:	4379      	muls	r1, r7
 8000eb2:	0c17      	lsrs	r7, r2, #16
 8000eb4:	46bc      	mov	ip, r7
 8000eb6:	199b      	adds	r3, r3, r6
 8000eb8:	4463      	add	r3, ip
 8000eba:	429e      	cmp	r6, r3
 8000ebc:	d903      	bls.n	8000ec6 <__aeabi_ddiv+0x18e>
 8000ebe:	2680      	movs	r6, #128	; 0x80
 8000ec0:	0276      	lsls	r6, r6, #9
 8000ec2:	46b4      	mov	ip, r6
 8000ec4:	4461      	add	r1, ip
 8000ec6:	0c1e      	lsrs	r6, r3, #16
 8000ec8:	1871      	adds	r1, r6, r1
 8000eca:	0416      	lsls	r6, r2, #16
 8000ecc:	041b      	lsls	r3, r3, #16
 8000ece:	0c36      	lsrs	r6, r6, #16
 8000ed0:	199e      	adds	r6, r3, r6
 8000ed2:	4288      	cmp	r0, r1
 8000ed4:	d302      	bcc.n	8000edc <__aeabi_ddiv+0x1a4>
 8000ed6:	d112      	bne.n	8000efe <__aeabi_ddiv+0x1c6>
 8000ed8:	42b5      	cmp	r5, r6
 8000eda:	d210      	bcs.n	8000efe <__aeabi_ddiv+0x1c6>
 8000edc:	4643      	mov	r3, r8
 8000ede:	1e5a      	subs	r2, r3, #1
 8000ee0:	9b00      	ldr	r3, [sp, #0]
 8000ee2:	469c      	mov	ip, r3
 8000ee4:	4465      	add	r5, ip
 8000ee6:	001f      	movs	r7, r3
 8000ee8:	429d      	cmp	r5, r3
 8000eea:	419b      	sbcs	r3, r3
 8000eec:	425b      	negs	r3, r3
 8000eee:	191b      	adds	r3, r3, r4
 8000ef0:	18c0      	adds	r0, r0, r3
 8000ef2:	4284      	cmp	r4, r0
 8000ef4:	d200      	bcs.n	8000ef8 <__aeabi_ddiv+0x1c0>
 8000ef6:	e19e      	b.n	8001236 <__aeabi_ddiv+0x4fe>
 8000ef8:	d100      	bne.n	8000efc <__aeabi_ddiv+0x1c4>
 8000efa:	e199      	b.n	8001230 <__aeabi_ddiv+0x4f8>
 8000efc:	4690      	mov	r8, r2
 8000efe:	1bae      	subs	r6, r5, r6
 8000f00:	42b5      	cmp	r5, r6
 8000f02:	41ad      	sbcs	r5, r5
 8000f04:	1a40      	subs	r0, r0, r1
 8000f06:	426d      	negs	r5, r5
 8000f08:	1b40      	subs	r0, r0, r5
 8000f0a:	4284      	cmp	r4, r0
 8000f0c:	d100      	bne.n	8000f10 <__aeabi_ddiv+0x1d8>
 8000f0e:	e1d2      	b.n	80012b6 <__aeabi_ddiv+0x57e>
 8000f10:	4649      	mov	r1, r9
 8000f12:	f7ff f97b 	bl	800020c <__aeabi_uidivmod>
 8000f16:	9a01      	ldr	r2, [sp, #4]
 8000f18:	040b      	lsls	r3, r1, #16
 8000f1a:	4342      	muls	r2, r0
 8000f1c:	0c31      	lsrs	r1, r6, #16
 8000f1e:	0005      	movs	r5, r0
 8000f20:	4319      	orrs	r1, r3
 8000f22:	428a      	cmp	r2, r1
 8000f24:	d900      	bls.n	8000f28 <__aeabi_ddiv+0x1f0>
 8000f26:	e16c      	b.n	8001202 <__aeabi_ddiv+0x4ca>
 8000f28:	1a88      	subs	r0, r1, r2
 8000f2a:	4649      	mov	r1, r9
 8000f2c:	f7ff f96e 	bl	800020c <__aeabi_uidivmod>
 8000f30:	9a01      	ldr	r2, [sp, #4]
 8000f32:	0436      	lsls	r6, r6, #16
 8000f34:	4342      	muls	r2, r0
 8000f36:	0409      	lsls	r1, r1, #16
 8000f38:	0c36      	lsrs	r6, r6, #16
 8000f3a:	0003      	movs	r3, r0
 8000f3c:	430e      	orrs	r6, r1
 8000f3e:	42b2      	cmp	r2, r6
 8000f40:	d900      	bls.n	8000f44 <__aeabi_ddiv+0x20c>
 8000f42:	e153      	b.n	80011ec <__aeabi_ddiv+0x4b4>
 8000f44:	9803      	ldr	r0, [sp, #12]
 8000f46:	1ab6      	subs	r6, r6, r2
 8000f48:	0002      	movs	r2, r0
 8000f4a:	042d      	lsls	r5, r5, #16
 8000f4c:	431d      	orrs	r5, r3
 8000f4e:	9f02      	ldr	r7, [sp, #8]
 8000f50:	042b      	lsls	r3, r5, #16
 8000f52:	0c1b      	lsrs	r3, r3, #16
 8000f54:	435a      	muls	r2, r3
 8000f56:	437b      	muls	r3, r7
 8000f58:	469c      	mov	ip, r3
 8000f5a:	0c29      	lsrs	r1, r5, #16
 8000f5c:	4348      	muls	r0, r1
 8000f5e:	0c13      	lsrs	r3, r2, #16
 8000f60:	4484      	add	ip, r0
 8000f62:	4463      	add	r3, ip
 8000f64:	4379      	muls	r1, r7
 8000f66:	4298      	cmp	r0, r3
 8000f68:	d903      	bls.n	8000f72 <__aeabi_ddiv+0x23a>
 8000f6a:	2080      	movs	r0, #128	; 0x80
 8000f6c:	0240      	lsls	r0, r0, #9
 8000f6e:	4684      	mov	ip, r0
 8000f70:	4461      	add	r1, ip
 8000f72:	0c18      	lsrs	r0, r3, #16
 8000f74:	0412      	lsls	r2, r2, #16
 8000f76:	041b      	lsls	r3, r3, #16
 8000f78:	0c12      	lsrs	r2, r2, #16
 8000f7a:	1840      	adds	r0, r0, r1
 8000f7c:	189b      	adds	r3, r3, r2
 8000f7e:	4286      	cmp	r6, r0
 8000f80:	d200      	bcs.n	8000f84 <__aeabi_ddiv+0x24c>
 8000f82:	e100      	b.n	8001186 <__aeabi_ddiv+0x44e>
 8000f84:	d100      	bne.n	8000f88 <__aeabi_ddiv+0x250>
 8000f86:	e0fb      	b.n	8001180 <__aeabi_ddiv+0x448>
 8000f88:	2301      	movs	r3, #1
 8000f8a:	431d      	orrs	r5, r3
 8000f8c:	4b49      	ldr	r3, [pc, #292]	; (80010b4 <__aeabi_ddiv+0x37c>)
 8000f8e:	445b      	add	r3, fp
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	dc00      	bgt.n	8000f96 <__aeabi_ddiv+0x25e>
 8000f94:	e0aa      	b.n	80010ec <__aeabi_ddiv+0x3b4>
 8000f96:	076a      	lsls	r2, r5, #29
 8000f98:	d000      	beq.n	8000f9c <__aeabi_ddiv+0x264>
 8000f9a:	e13d      	b.n	8001218 <__aeabi_ddiv+0x4e0>
 8000f9c:	08e9      	lsrs	r1, r5, #3
 8000f9e:	4642      	mov	r2, r8
 8000fa0:	01d2      	lsls	r2, r2, #7
 8000fa2:	d506      	bpl.n	8000fb2 <__aeabi_ddiv+0x27a>
 8000fa4:	4642      	mov	r2, r8
 8000fa6:	4b44      	ldr	r3, [pc, #272]	; (80010b8 <__aeabi_ddiv+0x380>)
 8000fa8:	401a      	ands	r2, r3
 8000faa:	2380      	movs	r3, #128	; 0x80
 8000fac:	4690      	mov	r8, r2
 8000fae:	00db      	lsls	r3, r3, #3
 8000fb0:	445b      	add	r3, fp
 8000fb2:	4a42      	ldr	r2, [pc, #264]	; (80010bc <__aeabi_ddiv+0x384>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	dd00      	ble.n	8000fba <__aeabi_ddiv+0x282>
 8000fb8:	e723      	b.n	8000e02 <__aeabi_ddiv+0xca>
 8000fba:	4642      	mov	r2, r8
 8000fbc:	055b      	lsls	r3, r3, #21
 8000fbe:	0755      	lsls	r5, r2, #29
 8000fc0:	0252      	lsls	r2, r2, #9
 8000fc2:	430d      	orrs	r5, r1
 8000fc4:	0b12      	lsrs	r2, r2, #12
 8000fc6:	0d5b      	lsrs	r3, r3, #21
 8000fc8:	e70d      	b.n	8000de6 <__aeabi_ddiv+0xae>
 8000fca:	4651      	mov	r1, sl
 8000fcc:	4321      	orrs	r1, r4
 8000fce:	d100      	bne.n	8000fd2 <__aeabi_ddiv+0x29a>
 8000fd0:	e07c      	b.n	80010cc <__aeabi_ddiv+0x394>
 8000fd2:	2c00      	cmp	r4, #0
 8000fd4:	d100      	bne.n	8000fd8 <__aeabi_ddiv+0x2a0>
 8000fd6:	e0fb      	b.n	80011d0 <__aeabi_ddiv+0x498>
 8000fd8:	0020      	movs	r0, r4
 8000fda:	f001 fa1b 	bl	8002414 <__clzsi2>
 8000fde:	0002      	movs	r2, r0
 8000fe0:	3a0b      	subs	r2, #11
 8000fe2:	231d      	movs	r3, #29
 8000fe4:	1a9b      	subs	r3, r3, r2
 8000fe6:	4652      	mov	r2, sl
 8000fe8:	0001      	movs	r1, r0
 8000fea:	40da      	lsrs	r2, r3
 8000fec:	4653      	mov	r3, sl
 8000fee:	3908      	subs	r1, #8
 8000ff0:	408b      	lsls	r3, r1
 8000ff2:	408c      	lsls	r4, r1
 8000ff4:	0019      	movs	r1, r3
 8000ff6:	4314      	orrs	r4, r2
 8000ff8:	4b31      	ldr	r3, [pc, #196]	; (80010c0 <__aeabi_ddiv+0x388>)
 8000ffa:	4458      	add	r0, fp
 8000ffc:	469b      	mov	fp, r3
 8000ffe:	4483      	add	fp, r0
 8001000:	2000      	movs	r0, #0
 8001002:	e6d9      	b.n	8000db8 <__aeabi_ddiv+0x80>
 8001004:	0003      	movs	r3, r0
 8001006:	4323      	orrs	r3, r4
 8001008:	4698      	mov	r8, r3
 800100a:	d044      	beq.n	8001096 <__aeabi_ddiv+0x35e>
 800100c:	2c00      	cmp	r4, #0
 800100e:	d100      	bne.n	8001012 <__aeabi_ddiv+0x2da>
 8001010:	e0cf      	b.n	80011b2 <__aeabi_ddiv+0x47a>
 8001012:	0020      	movs	r0, r4
 8001014:	f001 f9fe 	bl	8002414 <__clzsi2>
 8001018:	0001      	movs	r1, r0
 800101a:	0002      	movs	r2, r0
 800101c:	390b      	subs	r1, #11
 800101e:	231d      	movs	r3, #29
 8001020:	1a5b      	subs	r3, r3, r1
 8001022:	4649      	mov	r1, r9
 8001024:	0010      	movs	r0, r2
 8001026:	40d9      	lsrs	r1, r3
 8001028:	3808      	subs	r0, #8
 800102a:	4084      	lsls	r4, r0
 800102c:	000b      	movs	r3, r1
 800102e:	464d      	mov	r5, r9
 8001030:	4323      	orrs	r3, r4
 8001032:	4698      	mov	r8, r3
 8001034:	4085      	lsls	r5, r0
 8001036:	4b23      	ldr	r3, [pc, #140]	; (80010c4 <__aeabi_ddiv+0x38c>)
 8001038:	1a9b      	subs	r3, r3, r2
 800103a:	469b      	mov	fp, r3
 800103c:	2300      	movs	r3, #0
 800103e:	4699      	mov	r9, r3
 8001040:	9300      	str	r3, [sp, #0]
 8001042:	e69e      	b.n	8000d82 <__aeabi_ddiv+0x4a>
 8001044:	0002      	movs	r2, r0
 8001046:	4322      	orrs	r2, r4
 8001048:	4690      	mov	r8, r2
 800104a:	d11d      	bne.n	8001088 <__aeabi_ddiv+0x350>
 800104c:	2208      	movs	r2, #8
 800104e:	469b      	mov	fp, r3
 8001050:	2302      	movs	r3, #2
 8001052:	2500      	movs	r5, #0
 8001054:	4691      	mov	r9, r2
 8001056:	9300      	str	r3, [sp, #0]
 8001058:	e693      	b.n	8000d82 <__aeabi_ddiv+0x4a>
 800105a:	4651      	mov	r1, sl
 800105c:	4321      	orrs	r1, r4
 800105e:	d109      	bne.n	8001074 <__aeabi_ddiv+0x33c>
 8001060:	2302      	movs	r3, #2
 8001062:	464a      	mov	r2, r9
 8001064:	431a      	orrs	r2, r3
 8001066:	4b18      	ldr	r3, [pc, #96]	; (80010c8 <__aeabi_ddiv+0x390>)
 8001068:	4691      	mov	r9, r2
 800106a:	469c      	mov	ip, r3
 800106c:	2400      	movs	r4, #0
 800106e:	2002      	movs	r0, #2
 8001070:	44e3      	add	fp, ip
 8001072:	e6a1      	b.n	8000db8 <__aeabi_ddiv+0x80>
 8001074:	2303      	movs	r3, #3
 8001076:	464a      	mov	r2, r9
 8001078:	431a      	orrs	r2, r3
 800107a:	4b13      	ldr	r3, [pc, #76]	; (80010c8 <__aeabi_ddiv+0x390>)
 800107c:	4691      	mov	r9, r2
 800107e:	469c      	mov	ip, r3
 8001080:	4651      	mov	r1, sl
 8001082:	2003      	movs	r0, #3
 8001084:	44e3      	add	fp, ip
 8001086:	e697      	b.n	8000db8 <__aeabi_ddiv+0x80>
 8001088:	220c      	movs	r2, #12
 800108a:	469b      	mov	fp, r3
 800108c:	2303      	movs	r3, #3
 800108e:	46a0      	mov	r8, r4
 8001090:	4691      	mov	r9, r2
 8001092:	9300      	str	r3, [sp, #0]
 8001094:	e675      	b.n	8000d82 <__aeabi_ddiv+0x4a>
 8001096:	2304      	movs	r3, #4
 8001098:	4699      	mov	r9, r3
 800109a:	2300      	movs	r3, #0
 800109c:	469b      	mov	fp, r3
 800109e:	3301      	adds	r3, #1
 80010a0:	2500      	movs	r5, #0
 80010a2:	9300      	str	r3, [sp, #0]
 80010a4:	e66d      	b.n	8000d82 <__aeabi_ddiv+0x4a>
 80010a6:	46c0      	nop			; (mov r8, r8)
 80010a8:	000007ff 	.word	0x000007ff
 80010ac:	fffffc01 	.word	0xfffffc01
 80010b0:	08009a28 	.word	0x08009a28
 80010b4:	000003ff 	.word	0x000003ff
 80010b8:	feffffff 	.word	0xfeffffff
 80010bc:	000007fe 	.word	0x000007fe
 80010c0:	000003f3 	.word	0x000003f3
 80010c4:	fffffc0d 	.word	0xfffffc0d
 80010c8:	fffff801 	.word	0xfffff801
 80010cc:	464a      	mov	r2, r9
 80010ce:	2301      	movs	r3, #1
 80010d0:	431a      	orrs	r2, r3
 80010d2:	4691      	mov	r9, r2
 80010d4:	2400      	movs	r4, #0
 80010d6:	2001      	movs	r0, #1
 80010d8:	e66e      	b.n	8000db8 <__aeabi_ddiv+0x80>
 80010da:	2300      	movs	r3, #0
 80010dc:	2280      	movs	r2, #128	; 0x80
 80010de:	469a      	mov	sl, r3
 80010e0:	2500      	movs	r5, #0
 80010e2:	4b88      	ldr	r3, [pc, #544]	; (8001304 <__aeabi_ddiv+0x5cc>)
 80010e4:	0312      	lsls	r2, r2, #12
 80010e6:	e67e      	b.n	8000de6 <__aeabi_ddiv+0xae>
 80010e8:	2501      	movs	r5, #1
 80010ea:	426d      	negs	r5, r5
 80010ec:	2201      	movs	r2, #1
 80010ee:	1ad2      	subs	r2, r2, r3
 80010f0:	2a38      	cmp	r2, #56	; 0x38
 80010f2:	dd00      	ble.n	80010f6 <__aeabi_ddiv+0x3be>
 80010f4:	e674      	b.n	8000de0 <__aeabi_ddiv+0xa8>
 80010f6:	2a1f      	cmp	r2, #31
 80010f8:	dc00      	bgt.n	80010fc <__aeabi_ddiv+0x3c4>
 80010fa:	e0bd      	b.n	8001278 <__aeabi_ddiv+0x540>
 80010fc:	211f      	movs	r1, #31
 80010fe:	4249      	negs	r1, r1
 8001100:	1acb      	subs	r3, r1, r3
 8001102:	4641      	mov	r1, r8
 8001104:	40d9      	lsrs	r1, r3
 8001106:	000b      	movs	r3, r1
 8001108:	2a20      	cmp	r2, #32
 800110a:	d004      	beq.n	8001116 <__aeabi_ddiv+0x3de>
 800110c:	4641      	mov	r1, r8
 800110e:	4a7e      	ldr	r2, [pc, #504]	; (8001308 <__aeabi_ddiv+0x5d0>)
 8001110:	445a      	add	r2, fp
 8001112:	4091      	lsls	r1, r2
 8001114:	430d      	orrs	r5, r1
 8001116:	0029      	movs	r1, r5
 8001118:	1e4a      	subs	r2, r1, #1
 800111a:	4191      	sbcs	r1, r2
 800111c:	4319      	orrs	r1, r3
 800111e:	2307      	movs	r3, #7
 8001120:	001d      	movs	r5, r3
 8001122:	2200      	movs	r2, #0
 8001124:	400d      	ands	r5, r1
 8001126:	420b      	tst	r3, r1
 8001128:	d100      	bne.n	800112c <__aeabi_ddiv+0x3f4>
 800112a:	e0d0      	b.n	80012ce <__aeabi_ddiv+0x596>
 800112c:	220f      	movs	r2, #15
 800112e:	2300      	movs	r3, #0
 8001130:	400a      	ands	r2, r1
 8001132:	2a04      	cmp	r2, #4
 8001134:	d100      	bne.n	8001138 <__aeabi_ddiv+0x400>
 8001136:	e0c7      	b.n	80012c8 <__aeabi_ddiv+0x590>
 8001138:	1d0a      	adds	r2, r1, #4
 800113a:	428a      	cmp	r2, r1
 800113c:	4189      	sbcs	r1, r1
 800113e:	4249      	negs	r1, r1
 8001140:	185b      	adds	r3, r3, r1
 8001142:	0011      	movs	r1, r2
 8001144:	021a      	lsls	r2, r3, #8
 8001146:	d400      	bmi.n	800114a <__aeabi_ddiv+0x412>
 8001148:	e0be      	b.n	80012c8 <__aeabi_ddiv+0x590>
 800114a:	2301      	movs	r3, #1
 800114c:	2200      	movs	r2, #0
 800114e:	2500      	movs	r5, #0
 8001150:	e649      	b.n	8000de6 <__aeabi_ddiv+0xae>
 8001152:	2280      	movs	r2, #128	; 0x80
 8001154:	4643      	mov	r3, r8
 8001156:	0312      	lsls	r2, r2, #12
 8001158:	4213      	tst	r3, r2
 800115a:	d008      	beq.n	800116e <__aeabi_ddiv+0x436>
 800115c:	4214      	tst	r4, r2
 800115e:	d106      	bne.n	800116e <__aeabi_ddiv+0x436>
 8001160:	4322      	orrs	r2, r4
 8001162:	0312      	lsls	r2, r2, #12
 8001164:	46ba      	mov	sl, r7
 8001166:	000d      	movs	r5, r1
 8001168:	4b66      	ldr	r3, [pc, #408]	; (8001304 <__aeabi_ddiv+0x5cc>)
 800116a:	0b12      	lsrs	r2, r2, #12
 800116c:	e63b      	b.n	8000de6 <__aeabi_ddiv+0xae>
 800116e:	2280      	movs	r2, #128	; 0x80
 8001170:	4643      	mov	r3, r8
 8001172:	0312      	lsls	r2, r2, #12
 8001174:	431a      	orrs	r2, r3
 8001176:	0312      	lsls	r2, r2, #12
 8001178:	46b2      	mov	sl, r6
 800117a:	4b62      	ldr	r3, [pc, #392]	; (8001304 <__aeabi_ddiv+0x5cc>)
 800117c:	0b12      	lsrs	r2, r2, #12
 800117e:	e632      	b.n	8000de6 <__aeabi_ddiv+0xae>
 8001180:	2b00      	cmp	r3, #0
 8001182:	d100      	bne.n	8001186 <__aeabi_ddiv+0x44e>
 8001184:	e702      	b.n	8000f8c <__aeabi_ddiv+0x254>
 8001186:	19a6      	adds	r6, r4, r6
 8001188:	1e6a      	subs	r2, r5, #1
 800118a:	42a6      	cmp	r6, r4
 800118c:	d200      	bcs.n	8001190 <__aeabi_ddiv+0x458>
 800118e:	e089      	b.n	80012a4 <__aeabi_ddiv+0x56c>
 8001190:	4286      	cmp	r6, r0
 8001192:	d200      	bcs.n	8001196 <__aeabi_ddiv+0x45e>
 8001194:	e09f      	b.n	80012d6 <__aeabi_ddiv+0x59e>
 8001196:	d100      	bne.n	800119a <__aeabi_ddiv+0x462>
 8001198:	e0af      	b.n	80012fa <__aeabi_ddiv+0x5c2>
 800119a:	0015      	movs	r5, r2
 800119c:	e6f4      	b.n	8000f88 <__aeabi_ddiv+0x250>
 800119e:	42a9      	cmp	r1, r5
 80011a0:	d900      	bls.n	80011a4 <__aeabi_ddiv+0x46c>
 80011a2:	e63c      	b.n	8000e1e <__aeabi_ddiv+0xe6>
 80011a4:	4643      	mov	r3, r8
 80011a6:	07de      	lsls	r6, r3, #31
 80011a8:	0858      	lsrs	r0, r3, #1
 80011aa:	086b      	lsrs	r3, r5, #1
 80011ac:	431e      	orrs	r6, r3
 80011ae:	07ed      	lsls	r5, r5, #31
 80011b0:	e63c      	b.n	8000e2c <__aeabi_ddiv+0xf4>
 80011b2:	f001 f92f 	bl	8002414 <__clzsi2>
 80011b6:	0001      	movs	r1, r0
 80011b8:	0002      	movs	r2, r0
 80011ba:	3115      	adds	r1, #21
 80011bc:	3220      	adds	r2, #32
 80011be:	291c      	cmp	r1, #28
 80011c0:	dc00      	bgt.n	80011c4 <__aeabi_ddiv+0x48c>
 80011c2:	e72c      	b.n	800101e <__aeabi_ddiv+0x2e6>
 80011c4:	464b      	mov	r3, r9
 80011c6:	3808      	subs	r0, #8
 80011c8:	4083      	lsls	r3, r0
 80011ca:	2500      	movs	r5, #0
 80011cc:	4698      	mov	r8, r3
 80011ce:	e732      	b.n	8001036 <__aeabi_ddiv+0x2fe>
 80011d0:	f001 f920 	bl	8002414 <__clzsi2>
 80011d4:	0003      	movs	r3, r0
 80011d6:	001a      	movs	r2, r3
 80011d8:	3215      	adds	r2, #21
 80011da:	3020      	adds	r0, #32
 80011dc:	2a1c      	cmp	r2, #28
 80011de:	dc00      	bgt.n	80011e2 <__aeabi_ddiv+0x4aa>
 80011e0:	e6ff      	b.n	8000fe2 <__aeabi_ddiv+0x2aa>
 80011e2:	4654      	mov	r4, sl
 80011e4:	3b08      	subs	r3, #8
 80011e6:	2100      	movs	r1, #0
 80011e8:	409c      	lsls	r4, r3
 80011ea:	e705      	b.n	8000ff8 <__aeabi_ddiv+0x2c0>
 80011ec:	1936      	adds	r6, r6, r4
 80011ee:	3b01      	subs	r3, #1
 80011f0:	42b4      	cmp	r4, r6
 80011f2:	d900      	bls.n	80011f6 <__aeabi_ddiv+0x4be>
 80011f4:	e6a6      	b.n	8000f44 <__aeabi_ddiv+0x20c>
 80011f6:	42b2      	cmp	r2, r6
 80011f8:	d800      	bhi.n	80011fc <__aeabi_ddiv+0x4c4>
 80011fa:	e6a3      	b.n	8000f44 <__aeabi_ddiv+0x20c>
 80011fc:	1e83      	subs	r3, r0, #2
 80011fe:	1936      	adds	r6, r6, r4
 8001200:	e6a0      	b.n	8000f44 <__aeabi_ddiv+0x20c>
 8001202:	1909      	adds	r1, r1, r4
 8001204:	3d01      	subs	r5, #1
 8001206:	428c      	cmp	r4, r1
 8001208:	d900      	bls.n	800120c <__aeabi_ddiv+0x4d4>
 800120a:	e68d      	b.n	8000f28 <__aeabi_ddiv+0x1f0>
 800120c:	428a      	cmp	r2, r1
 800120e:	d800      	bhi.n	8001212 <__aeabi_ddiv+0x4da>
 8001210:	e68a      	b.n	8000f28 <__aeabi_ddiv+0x1f0>
 8001212:	1e85      	subs	r5, r0, #2
 8001214:	1909      	adds	r1, r1, r4
 8001216:	e687      	b.n	8000f28 <__aeabi_ddiv+0x1f0>
 8001218:	220f      	movs	r2, #15
 800121a:	402a      	ands	r2, r5
 800121c:	2a04      	cmp	r2, #4
 800121e:	d100      	bne.n	8001222 <__aeabi_ddiv+0x4ea>
 8001220:	e6bc      	b.n	8000f9c <__aeabi_ddiv+0x264>
 8001222:	1d29      	adds	r1, r5, #4
 8001224:	42a9      	cmp	r1, r5
 8001226:	41ad      	sbcs	r5, r5
 8001228:	426d      	negs	r5, r5
 800122a:	08c9      	lsrs	r1, r1, #3
 800122c:	44a8      	add	r8, r5
 800122e:	e6b6      	b.n	8000f9e <__aeabi_ddiv+0x266>
 8001230:	42af      	cmp	r7, r5
 8001232:	d900      	bls.n	8001236 <__aeabi_ddiv+0x4fe>
 8001234:	e662      	b.n	8000efc <__aeabi_ddiv+0x1c4>
 8001236:	4281      	cmp	r1, r0
 8001238:	d804      	bhi.n	8001244 <__aeabi_ddiv+0x50c>
 800123a:	d000      	beq.n	800123e <__aeabi_ddiv+0x506>
 800123c:	e65e      	b.n	8000efc <__aeabi_ddiv+0x1c4>
 800123e:	42ae      	cmp	r6, r5
 8001240:	d800      	bhi.n	8001244 <__aeabi_ddiv+0x50c>
 8001242:	e65b      	b.n	8000efc <__aeabi_ddiv+0x1c4>
 8001244:	2302      	movs	r3, #2
 8001246:	425b      	negs	r3, r3
 8001248:	469c      	mov	ip, r3
 800124a:	9b00      	ldr	r3, [sp, #0]
 800124c:	44e0      	add	r8, ip
 800124e:	469c      	mov	ip, r3
 8001250:	4465      	add	r5, ip
 8001252:	429d      	cmp	r5, r3
 8001254:	419b      	sbcs	r3, r3
 8001256:	425b      	negs	r3, r3
 8001258:	191b      	adds	r3, r3, r4
 800125a:	18c0      	adds	r0, r0, r3
 800125c:	e64f      	b.n	8000efe <__aeabi_ddiv+0x1c6>
 800125e:	42b2      	cmp	r2, r6
 8001260:	d800      	bhi.n	8001264 <__aeabi_ddiv+0x52c>
 8001262:	e612      	b.n	8000e8a <__aeabi_ddiv+0x152>
 8001264:	1e83      	subs	r3, r0, #2
 8001266:	1936      	adds	r6, r6, r4
 8001268:	e60f      	b.n	8000e8a <__aeabi_ddiv+0x152>
 800126a:	428a      	cmp	r2, r1
 800126c:	d800      	bhi.n	8001270 <__aeabi_ddiv+0x538>
 800126e:	e5fa      	b.n	8000e66 <__aeabi_ddiv+0x12e>
 8001270:	1e83      	subs	r3, r0, #2
 8001272:	4698      	mov	r8, r3
 8001274:	1909      	adds	r1, r1, r4
 8001276:	e5f6      	b.n	8000e66 <__aeabi_ddiv+0x12e>
 8001278:	4b24      	ldr	r3, [pc, #144]	; (800130c <__aeabi_ddiv+0x5d4>)
 800127a:	0028      	movs	r0, r5
 800127c:	445b      	add	r3, fp
 800127e:	4641      	mov	r1, r8
 8001280:	409d      	lsls	r5, r3
 8001282:	4099      	lsls	r1, r3
 8001284:	40d0      	lsrs	r0, r2
 8001286:	1e6b      	subs	r3, r5, #1
 8001288:	419d      	sbcs	r5, r3
 800128a:	4643      	mov	r3, r8
 800128c:	4301      	orrs	r1, r0
 800128e:	4329      	orrs	r1, r5
 8001290:	40d3      	lsrs	r3, r2
 8001292:	074a      	lsls	r2, r1, #29
 8001294:	d100      	bne.n	8001298 <__aeabi_ddiv+0x560>
 8001296:	e755      	b.n	8001144 <__aeabi_ddiv+0x40c>
 8001298:	220f      	movs	r2, #15
 800129a:	400a      	ands	r2, r1
 800129c:	2a04      	cmp	r2, #4
 800129e:	d000      	beq.n	80012a2 <__aeabi_ddiv+0x56a>
 80012a0:	e74a      	b.n	8001138 <__aeabi_ddiv+0x400>
 80012a2:	e74f      	b.n	8001144 <__aeabi_ddiv+0x40c>
 80012a4:	0015      	movs	r5, r2
 80012a6:	4286      	cmp	r6, r0
 80012a8:	d000      	beq.n	80012ac <__aeabi_ddiv+0x574>
 80012aa:	e66d      	b.n	8000f88 <__aeabi_ddiv+0x250>
 80012ac:	9a00      	ldr	r2, [sp, #0]
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d000      	beq.n	80012b4 <__aeabi_ddiv+0x57c>
 80012b2:	e669      	b.n	8000f88 <__aeabi_ddiv+0x250>
 80012b4:	e66a      	b.n	8000f8c <__aeabi_ddiv+0x254>
 80012b6:	4b16      	ldr	r3, [pc, #88]	; (8001310 <__aeabi_ddiv+0x5d8>)
 80012b8:	445b      	add	r3, fp
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	dc00      	bgt.n	80012c0 <__aeabi_ddiv+0x588>
 80012be:	e713      	b.n	80010e8 <__aeabi_ddiv+0x3b0>
 80012c0:	2501      	movs	r5, #1
 80012c2:	2100      	movs	r1, #0
 80012c4:	44a8      	add	r8, r5
 80012c6:	e66a      	b.n	8000f9e <__aeabi_ddiv+0x266>
 80012c8:	075d      	lsls	r5, r3, #29
 80012ca:	025b      	lsls	r3, r3, #9
 80012cc:	0b1a      	lsrs	r2, r3, #12
 80012ce:	08c9      	lsrs	r1, r1, #3
 80012d0:	2300      	movs	r3, #0
 80012d2:	430d      	orrs	r5, r1
 80012d4:	e587      	b.n	8000de6 <__aeabi_ddiv+0xae>
 80012d6:	9900      	ldr	r1, [sp, #0]
 80012d8:	3d02      	subs	r5, #2
 80012da:	004a      	lsls	r2, r1, #1
 80012dc:	428a      	cmp	r2, r1
 80012de:	41bf      	sbcs	r7, r7
 80012e0:	427f      	negs	r7, r7
 80012e2:	193f      	adds	r7, r7, r4
 80012e4:	19f6      	adds	r6, r6, r7
 80012e6:	9200      	str	r2, [sp, #0]
 80012e8:	e7dd      	b.n	80012a6 <__aeabi_ddiv+0x56e>
 80012ea:	2280      	movs	r2, #128	; 0x80
 80012ec:	4643      	mov	r3, r8
 80012ee:	0312      	lsls	r2, r2, #12
 80012f0:	431a      	orrs	r2, r3
 80012f2:	0312      	lsls	r2, r2, #12
 80012f4:	4b03      	ldr	r3, [pc, #12]	; (8001304 <__aeabi_ddiv+0x5cc>)
 80012f6:	0b12      	lsrs	r2, r2, #12
 80012f8:	e575      	b.n	8000de6 <__aeabi_ddiv+0xae>
 80012fa:	9900      	ldr	r1, [sp, #0]
 80012fc:	4299      	cmp	r1, r3
 80012fe:	d3ea      	bcc.n	80012d6 <__aeabi_ddiv+0x59e>
 8001300:	0015      	movs	r5, r2
 8001302:	e7d3      	b.n	80012ac <__aeabi_ddiv+0x574>
 8001304:	000007ff 	.word	0x000007ff
 8001308:	0000043e 	.word	0x0000043e
 800130c:	0000041e 	.word	0x0000041e
 8001310:	000003ff 	.word	0x000003ff

08001314 <__eqdf2>:
 8001314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001316:	464e      	mov	r6, r9
 8001318:	4645      	mov	r5, r8
 800131a:	46de      	mov	lr, fp
 800131c:	4657      	mov	r7, sl
 800131e:	4690      	mov	r8, r2
 8001320:	b5e0      	push	{r5, r6, r7, lr}
 8001322:	0017      	movs	r7, r2
 8001324:	031a      	lsls	r2, r3, #12
 8001326:	0b12      	lsrs	r2, r2, #12
 8001328:	0005      	movs	r5, r0
 800132a:	4684      	mov	ip, r0
 800132c:	4819      	ldr	r0, [pc, #100]	; (8001394 <__eqdf2+0x80>)
 800132e:	030e      	lsls	r6, r1, #12
 8001330:	004c      	lsls	r4, r1, #1
 8001332:	4691      	mov	r9, r2
 8001334:	005a      	lsls	r2, r3, #1
 8001336:	0fdb      	lsrs	r3, r3, #31
 8001338:	469b      	mov	fp, r3
 800133a:	0b36      	lsrs	r6, r6, #12
 800133c:	0d64      	lsrs	r4, r4, #21
 800133e:	0fc9      	lsrs	r1, r1, #31
 8001340:	0d52      	lsrs	r2, r2, #21
 8001342:	4284      	cmp	r4, r0
 8001344:	d019      	beq.n	800137a <__eqdf2+0x66>
 8001346:	4282      	cmp	r2, r0
 8001348:	d010      	beq.n	800136c <__eqdf2+0x58>
 800134a:	2001      	movs	r0, #1
 800134c:	4294      	cmp	r4, r2
 800134e:	d10e      	bne.n	800136e <__eqdf2+0x5a>
 8001350:	454e      	cmp	r6, r9
 8001352:	d10c      	bne.n	800136e <__eqdf2+0x5a>
 8001354:	2001      	movs	r0, #1
 8001356:	45c4      	cmp	ip, r8
 8001358:	d109      	bne.n	800136e <__eqdf2+0x5a>
 800135a:	4559      	cmp	r1, fp
 800135c:	d017      	beq.n	800138e <__eqdf2+0x7a>
 800135e:	2c00      	cmp	r4, #0
 8001360:	d105      	bne.n	800136e <__eqdf2+0x5a>
 8001362:	0030      	movs	r0, r6
 8001364:	4328      	orrs	r0, r5
 8001366:	1e43      	subs	r3, r0, #1
 8001368:	4198      	sbcs	r0, r3
 800136a:	e000      	b.n	800136e <__eqdf2+0x5a>
 800136c:	2001      	movs	r0, #1
 800136e:	bcf0      	pop	{r4, r5, r6, r7}
 8001370:	46bb      	mov	fp, r7
 8001372:	46b2      	mov	sl, r6
 8001374:	46a9      	mov	r9, r5
 8001376:	46a0      	mov	r8, r4
 8001378:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800137a:	0033      	movs	r3, r6
 800137c:	2001      	movs	r0, #1
 800137e:	432b      	orrs	r3, r5
 8001380:	d1f5      	bne.n	800136e <__eqdf2+0x5a>
 8001382:	42a2      	cmp	r2, r4
 8001384:	d1f3      	bne.n	800136e <__eqdf2+0x5a>
 8001386:	464b      	mov	r3, r9
 8001388:	433b      	orrs	r3, r7
 800138a:	d1f0      	bne.n	800136e <__eqdf2+0x5a>
 800138c:	e7e2      	b.n	8001354 <__eqdf2+0x40>
 800138e:	2000      	movs	r0, #0
 8001390:	e7ed      	b.n	800136e <__eqdf2+0x5a>
 8001392:	46c0      	nop			; (mov r8, r8)
 8001394:	000007ff 	.word	0x000007ff

08001398 <__gedf2>:
 8001398:	b5f0      	push	{r4, r5, r6, r7, lr}
 800139a:	4647      	mov	r7, r8
 800139c:	46ce      	mov	lr, r9
 800139e:	0004      	movs	r4, r0
 80013a0:	0018      	movs	r0, r3
 80013a2:	0016      	movs	r6, r2
 80013a4:	031b      	lsls	r3, r3, #12
 80013a6:	0b1b      	lsrs	r3, r3, #12
 80013a8:	4d2d      	ldr	r5, [pc, #180]	; (8001460 <__gedf2+0xc8>)
 80013aa:	004a      	lsls	r2, r1, #1
 80013ac:	4699      	mov	r9, r3
 80013ae:	b580      	push	{r7, lr}
 80013b0:	0043      	lsls	r3, r0, #1
 80013b2:	030f      	lsls	r7, r1, #12
 80013b4:	46a4      	mov	ip, r4
 80013b6:	46b0      	mov	r8, r6
 80013b8:	0b3f      	lsrs	r7, r7, #12
 80013ba:	0d52      	lsrs	r2, r2, #21
 80013bc:	0fc9      	lsrs	r1, r1, #31
 80013be:	0d5b      	lsrs	r3, r3, #21
 80013c0:	0fc0      	lsrs	r0, r0, #31
 80013c2:	42aa      	cmp	r2, r5
 80013c4:	d021      	beq.n	800140a <__gedf2+0x72>
 80013c6:	42ab      	cmp	r3, r5
 80013c8:	d013      	beq.n	80013f2 <__gedf2+0x5a>
 80013ca:	2a00      	cmp	r2, #0
 80013cc:	d122      	bne.n	8001414 <__gedf2+0x7c>
 80013ce:	433c      	orrs	r4, r7
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d102      	bne.n	80013da <__gedf2+0x42>
 80013d4:	464d      	mov	r5, r9
 80013d6:	432e      	orrs	r6, r5
 80013d8:	d022      	beq.n	8001420 <__gedf2+0x88>
 80013da:	2c00      	cmp	r4, #0
 80013dc:	d010      	beq.n	8001400 <__gedf2+0x68>
 80013de:	4281      	cmp	r1, r0
 80013e0:	d022      	beq.n	8001428 <__gedf2+0x90>
 80013e2:	2002      	movs	r0, #2
 80013e4:	3901      	subs	r1, #1
 80013e6:	4008      	ands	r0, r1
 80013e8:	3801      	subs	r0, #1
 80013ea:	bcc0      	pop	{r6, r7}
 80013ec:	46b9      	mov	r9, r7
 80013ee:	46b0      	mov	r8, r6
 80013f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013f2:	464d      	mov	r5, r9
 80013f4:	432e      	orrs	r6, r5
 80013f6:	d129      	bne.n	800144c <__gedf2+0xb4>
 80013f8:	2a00      	cmp	r2, #0
 80013fa:	d1f0      	bne.n	80013de <__gedf2+0x46>
 80013fc:	433c      	orrs	r4, r7
 80013fe:	d1ee      	bne.n	80013de <__gedf2+0x46>
 8001400:	2800      	cmp	r0, #0
 8001402:	d1f2      	bne.n	80013ea <__gedf2+0x52>
 8001404:	2001      	movs	r0, #1
 8001406:	4240      	negs	r0, r0
 8001408:	e7ef      	b.n	80013ea <__gedf2+0x52>
 800140a:	003d      	movs	r5, r7
 800140c:	4325      	orrs	r5, r4
 800140e:	d11d      	bne.n	800144c <__gedf2+0xb4>
 8001410:	4293      	cmp	r3, r2
 8001412:	d0ee      	beq.n	80013f2 <__gedf2+0x5a>
 8001414:	2b00      	cmp	r3, #0
 8001416:	d1e2      	bne.n	80013de <__gedf2+0x46>
 8001418:	464c      	mov	r4, r9
 800141a:	4326      	orrs	r6, r4
 800141c:	d1df      	bne.n	80013de <__gedf2+0x46>
 800141e:	e7e0      	b.n	80013e2 <__gedf2+0x4a>
 8001420:	2000      	movs	r0, #0
 8001422:	2c00      	cmp	r4, #0
 8001424:	d0e1      	beq.n	80013ea <__gedf2+0x52>
 8001426:	e7dc      	b.n	80013e2 <__gedf2+0x4a>
 8001428:	429a      	cmp	r2, r3
 800142a:	dc0a      	bgt.n	8001442 <__gedf2+0xaa>
 800142c:	dbe8      	blt.n	8001400 <__gedf2+0x68>
 800142e:	454f      	cmp	r7, r9
 8001430:	d8d7      	bhi.n	80013e2 <__gedf2+0x4a>
 8001432:	d00e      	beq.n	8001452 <__gedf2+0xba>
 8001434:	2000      	movs	r0, #0
 8001436:	454f      	cmp	r7, r9
 8001438:	d2d7      	bcs.n	80013ea <__gedf2+0x52>
 800143a:	2900      	cmp	r1, #0
 800143c:	d0e2      	beq.n	8001404 <__gedf2+0x6c>
 800143e:	0008      	movs	r0, r1
 8001440:	e7d3      	b.n	80013ea <__gedf2+0x52>
 8001442:	4243      	negs	r3, r0
 8001444:	4158      	adcs	r0, r3
 8001446:	0040      	lsls	r0, r0, #1
 8001448:	3801      	subs	r0, #1
 800144a:	e7ce      	b.n	80013ea <__gedf2+0x52>
 800144c:	2002      	movs	r0, #2
 800144e:	4240      	negs	r0, r0
 8001450:	e7cb      	b.n	80013ea <__gedf2+0x52>
 8001452:	45c4      	cmp	ip, r8
 8001454:	d8c5      	bhi.n	80013e2 <__gedf2+0x4a>
 8001456:	2000      	movs	r0, #0
 8001458:	45c4      	cmp	ip, r8
 800145a:	d2c6      	bcs.n	80013ea <__gedf2+0x52>
 800145c:	e7ed      	b.n	800143a <__gedf2+0xa2>
 800145e:	46c0      	nop			; (mov r8, r8)
 8001460:	000007ff 	.word	0x000007ff

08001464 <__ledf2>:
 8001464:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001466:	4647      	mov	r7, r8
 8001468:	46ce      	mov	lr, r9
 800146a:	0004      	movs	r4, r0
 800146c:	0018      	movs	r0, r3
 800146e:	0016      	movs	r6, r2
 8001470:	031b      	lsls	r3, r3, #12
 8001472:	0b1b      	lsrs	r3, r3, #12
 8001474:	4d2c      	ldr	r5, [pc, #176]	; (8001528 <__ledf2+0xc4>)
 8001476:	004a      	lsls	r2, r1, #1
 8001478:	4699      	mov	r9, r3
 800147a:	b580      	push	{r7, lr}
 800147c:	0043      	lsls	r3, r0, #1
 800147e:	030f      	lsls	r7, r1, #12
 8001480:	46a4      	mov	ip, r4
 8001482:	46b0      	mov	r8, r6
 8001484:	0b3f      	lsrs	r7, r7, #12
 8001486:	0d52      	lsrs	r2, r2, #21
 8001488:	0fc9      	lsrs	r1, r1, #31
 800148a:	0d5b      	lsrs	r3, r3, #21
 800148c:	0fc0      	lsrs	r0, r0, #31
 800148e:	42aa      	cmp	r2, r5
 8001490:	d00d      	beq.n	80014ae <__ledf2+0x4a>
 8001492:	42ab      	cmp	r3, r5
 8001494:	d010      	beq.n	80014b8 <__ledf2+0x54>
 8001496:	2a00      	cmp	r2, #0
 8001498:	d127      	bne.n	80014ea <__ledf2+0x86>
 800149a:	433c      	orrs	r4, r7
 800149c:	2b00      	cmp	r3, #0
 800149e:	d111      	bne.n	80014c4 <__ledf2+0x60>
 80014a0:	464d      	mov	r5, r9
 80014a2:	432e      	orrs	r6, r5
 80014a4:	d10e      	bne.n	80014c4 <__ledf2+0x60>
 80014a6:	2000      	movs	r0, #0
 80014a8:	2c00      	cmp	r4, #0
 80014aa:	d015      	beq.n	80014d8 <__ledf2+0x74>
 80014ac:	e00e      	b.n	80014cc <__ledf2+0x68>
 80014ae:	003d      	movs	r5, r7
 80014b0:	4325      	orrs	r5, r4
 80014b2:	d110      	bne.n	80014d6 <__ledf2+0x72>
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d118      	bne.n	80014ea <__ledf2+0x86>
 80014b8:	464d      	mov	r5, r9
 80014ba:	432e      	orrs	r6, r5
 80014bc:	d10b      	bne.n	80014d6 <__ledf2+0x72>
 80014be:	2a00      	cmp	r2, #0
 80014c0:	d102      	bne.n	80014c8 <__ledf2+0x64>
 80014c2:	433c      	orrs	r4, r7
 80014c4:	2c00      	cmp	r4, #0
 80014c6:	d00b      	beq.n	80014e0 <__ledf2+0x7c>
 80014c8:	4281      	cmp	r1, r0
 80014ca:	d014      	beq.n	80014f6 <__ledf2+0x92>
 80014cc:	2002      	movs	r0, #2
 80014ce:	3901      	subs	r1, #1
 80014d0:	4008      	ands	r0, r1
 80014d2:	3801      	subs	r0, #1
 80014d4:	e000      	b.n	80014d8 <__ledf2+0x74>
 80014d6:	2002      	movs	r0, #2
 80014d8:	bcc0      	pop	{r6, r7}
 80014da:	46b9      	mov	r9, r7
 80014dc:	46b0      	mov	r8, r6
 80014de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014e0:	2800      	cmp	r0, #0
 80014e2:	d1f9      	bne.n	80014d8 <__ledf2+0x74>
 80014e4:	2001      	movs	r0, #1
 80014e6:	4240      	negs	r0, r0
 80014e8:	e7f6      	b.n	80014d8 <__ledf2+0x74>
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d1ec      	bne.n	80014c8 <__ledf2+0x64>
 80014ee:	464c      	mov	r4, r9
 80014f0:	4326      	orrs	r6, r4
 80014f2:	d1e9      	bne.n	80014c8 <__ledf2+0x64>
 80014f4:	e7ea      	b.n	80014cc <__ledf2+0x68>
 80014f6:	429a      	cmp	r2, r3
 80014f8:	dd04      	ble.n	8001504 <__ledf2+0xa0>
 80014fa:	4243      	negs	r3, r0
 80014fc:	4158      	adcs	r0, r3
 80014fe:	0040      	lsls	r0, r0, #1
 8001500:	3801      	subs	r0, #1
 8001502:	e7e9      	b.n	80014d8 <__ledf2+0x74>
 8001504:	429a      	cmp	r2, r3
 8001506:	dbeb      	blt.n	80014e0 <__ledf2+0x7c>
 8001508:	454f      	cmp	r7, r9
 800150a:	d8df      	bhi.n	80014cc <__ledf2+0x68>
 800150c:	d006      	beq.n	800151c <__ledf2+0xb8>
 800150e:	2000      	movs	r0, #0
 8001510:	454f      	cmp	r7, r9
 8001512:	d2e1      	bcs.n	80014d8 <__ledf2+0x74>
 8001514:	2900      	cmp	r1, #0
 8001516:	d0e5      	beq.n	80014e4 <__ledf2+0x80>
 8001518:	0008      	movs	r0, r1
 800151a:	e7dd      	b.n	80014d8 <__ledf2+0x74>
 800151c:	45c4      	cmp	ip, r8
 800151e:	d8d5      	bhi.n	80014cc <__ledf2+0x68>
 8001520:	2000      	movs	r0, #0
 8001522:	45c4      	cmp	ip, r8
 8001524:	d2d8      	bcs.n	80014d8 <__ledf2+0x74>
 8001526:	e7f5      	b.n	8001514 <__ledf2+0xb0>
 8001528:	000007ff 	.word	0x000007ff

0800152c <__aeabi_dmul>:
 800152c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800152e:	4645      	mov	r5, r8
 8001530:	46de      	mov	lr, fp
 8001532:	4657      	mov	r7, sl
 8001534:	464e      	mov	r6, r9
 8001536:	b5e0      	push	{r5, r6, r7, lr}
 8001538:	001f      	movs	r7, r3
 800153a:	030b      	lsls	r3, r1, #12
 800153c:	0b1b      	lsrs	r3, r3, #12
 800153e:	469b      	mov	fp, r3
 8001540:	004d      	lsls	r5, r1, #1
 8001542:	0fcb      	lsrs	r3, r1, #31
 8001544:	0004      	movs	r4, r0
 8001546:	4691      	mov	r9, r2
 8001548:	4698      	mov	r8, r3
 800154a:	b087      	sub	sp, #28
 800154c:	0d6d      	lsrs	r5, r5, #21
 800154e:	d100      	bne.n	8001552 <__aeabi_dmul+0x26>
 8001550:	e1cd      	b.n	80018ee <__aeabi_dmul+0x3c2>
 8001552:	4bce      	ldr	r3, [pc, #824]	; (800188c <__aeabi_dmul+0x360>)
 8001554:	429d      	cmp	r5, r3
 8001556:	d100      	bne.n	800155a <__aeabi_dmul+0x2e>
 8001558:	e1e9      	b.n	800192e <__aeabi_dmul+0x402>
 800155a:	465a      	mov	r2, fp
 800155c:	0f43      	lsrs	r3, r0, #29
 800155e:	00d2      	lsls	r2, r2, #3
 8001560:	4313      	orrs	r3, r2
 8001562:	2280      	movs	r2, #128	; 0x80
 8001564:	0412      	lsls	r2, r2, #16
 8001566:	431a      	orrs	r2, r3
 8001568:	00c3      	lsls	r3, r0, #3
 800156a:	469a      	mov	sl, r3
 800156c:	4bc8      	ldr	r3, [pc, #800]	; (8001890 <__aeabi_dmul+0x364>)
 800156e:	4693      	mov	fp, r2
 8001570:	469c      	mov	ip, r3
 8001572:	2300      	movs	r3, #0
 8001574:	2600      	movs	r6, #0
 8001576:	4465      	add	r5, ip
 8001578:	9300      	str	r3, [sp, #0]
 800157a:	033c      	lsls	r4, r7, #12
 800157c:	007b      	lsls	r3, r7, #1
 800157e:	4648      	mov	r0, r9
 8001580:	0b24      	lsrs	r4, r4, #12
 8001582:	0d5b      	lsrs	r3, r3, #21
 8001584:	0fff      	lsrs	r7, r7, #31
 8001586:	2b00      	cmp	r3, #0
 8001588:	d100      	bne.n	800158c <__aeabi_dmul+0x60>
 800158a:	e189      	b.n	80018a0 <__aeabi_dmul+0x374>
 800158c:	4abf      	ldr	r2, [pc, #764]	; (800188c <__aeabi_dmul+0x360>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d019      	beq.n	80015c6 <__aeabi_dmul+0x9a>
 8001592:	0f42      	lsrs	r2, r0, #29
 8001594:	00e4      	lsls	r4, r4, #3
 8001596:	4322      	orrs	r2, r4
 8001598:	2480      	movs	r4, #128	; 0x80
 800159a:	0424      	lsls	r4, r4, #16
 800159c:	4314      	orrs	r4, r2
 800159e:	4abc      	ldr	r2, [pc, #752]	; (8001890 <__aeabi_dmul+0x364>)
 80015a0:	2100      	movs	r1, #0
 80015a2:	4694      	mov	ip, r2
 80015a4:	4642      	mov	r2, r8
 80015a6:	4463      	add	r3, ip
 80015a8:	195b      	adds	r3, r3, r5
 80015aa:	9301      	str	r3, [sp, #4]
 80015ac:	9b01      	ldr	r3, [sp, #4]
 80015ae:	407a      	eors	r2, r7
 80015b0:	3301      	adds	r3, #1
 80015b2:	00c0      	lsls	r0, r0, #3
 80015b4:	b2d2      	uxtb	r2, r2
 80015b6:	9302      	str	r3, [sp, #8]
 80015b8:	2e0a      	cmp	r6, #10
 80015ba:	dd1c      	ble.n	80015f6 <__aeabi_dmul+0xca>
 80015bc:	003a      	movs	r2, r7
 80015be:	2e0b      	cmp	r6, #11
 80015c0:	d05e      	beq.n	8001680 <__aeabi_dmul+0x154>
 80015c2:	4647      	mov	r7, r8
 80015c4:	e056      	b.n	8001674 <__aeabi_dmul+0x148>
 80015c6:	4649      	mov	r1, r9
 80015c8:	4bb0      	ldr	r3, [pc, #704]	; (800188c <__aeabi_dmul+0x360>)
 80015ca:	4321      	orrs	r1, r4
 80015cc:	18eb      	adds	r3, r5, r3
 80015ce:	9301      	str	r3, [sp, #4]
 80015d0:	2900      	cmp	r1, #0
 80015d2:	d12a      	bne.n	800162a <__aeabi_dmul+0xfe>
 80015d4:	2080      	movs	r0, #128	; 0x80
 80015d6:	2202      	movs	r2, #2
 80015d8:	0100      	lsls	r0, r0, #4
 80015da:	002b      	movs	r3, r5
 80015dc:	4684      	mov	ip, r0
 80015de:	4316      	orrs	r6, r2
 80015e0:	4642      	mov	r2, r8
 80015e2:	4463      	add	r3, ip
 80015e4:	407a      	eors	r2, r7
 80015e6:	b2d2      	uxtb	r2, r2
 80015e8:	9302      	str	r3, [sp, #8]
 80015ea:	2e0a      	cmp	r6, #10
 80015ec:	dd00      	ble.n	80015f0 <__aeabi_dmul+0xc4>
 80015ee:	e231      	b.n	8001a54 <__aeabi_dmul+0x528>
 80015f0:	2000      	movs	r0, #0
 80015f2:	2400      	movs	r4, #0
 80015f4:	2102      	movs	r1, #2
 80015f6:	2e02      	cmp	r6, #2
 80015f8:	dc26      	bgt.n	8001648 <__aeabi_dmul+0x11c>
 80015fa:	3e01      	subs	r6, #1
 80015fc:	2e01      	cmp	r6, #1
 80015fe:	d852      	bhi.n	80016a6 <__aeabi_dmul+0x17a>
 8001600:	2902      	cmp	r1, #2
 8001602:	d04c      	beq.n	800169e <__aeabi_dmul+0x172>
 8001604:	2901      	cmp	r1, #1
 8001606:	d000      	beq.n	800160a <__aeabi_dmul+0xde>
 8001608:	e118      	b.n	800183c <__aeabi_dmul+0x310>
 800160a:	2300      	movs	r3, #0
 800160c:	2400      	movs	r4, #0
 800160e:	2500      	movs	r5, #0
 8001610:	051b      	lsls	r3, r3, #20
 8001612:	4323      	orrs	r3, r4
 8001614:	07d2      	lsls	r2, r2, #31
 8001616:	4313      	orrs	r3, r2
 8001618:	0028      	movs	r0, r5
 800161a:	0019      	movs	r1, r3
 800161c:	b007      	add	sp, #28
 800161e:	bcf0      	pop	{r4, r5, r6, r7}
 8001620:	46bb      	mov	fp, r7
 8001622:	46b2      	mov	sl, r6
 8001624:	46a9      	mov	r9, r5
 8001626:	46a0      	mov	r8, r4
 8001628:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800162a:	2180      	movs	r1, #128	; 0x80
 800162c:	2203      	movs	r2, #3
 800162e:	0109      	lsls	r1, r1, #4
 8001630:	002b      	movs	r3, r5
 8001632:	468c      	mov	ip, r1
 8001634:	4316      	orrs	r6, r2
 8001636:	4642      	mov	r2, r8
 8001638:	4463      	add	r3, ip
 800163a:	407a      	eors	r2, r7
 800163c:	b2d2      	uxtb	r2, r2
 800163e:	9302      	str	r3, [sp, #8]
 8001640:	2e0a      	cmp	r6, #10
 8001642:	dd00      	ble.n	8001646 <__aeabi_dmul+0x11a>
 8001644:	e228      	b.n	8001a98 <__aeabi_dmul+0x56c>
 8001646:	2103      	movs	r1, #3
 8001648:	2501      	movs	r5, #1
 800164a:	40b5      	lsls	r5, r6
 800164c:	46ac      	mov	ip, r5
 800164e:	26a6      	movs	r6, #166	; 0xa6
 8001650:	4663      	mov	r3, ip
 8001652:	00f6      	lsls	r6, r6, #3
 8001654:	4035      	ands	r5, r6
 8001656:	4233      	tst	r3, r6
 8001658:	d10b      	bne.n	8001672 <__aeabi_dmul+0x146>
 800165a:	2690      	movs	r6, #144	; 0x90
 800165c:	00b6      	lsls	r6, r6, #2
 800165e:	4233      	tst	r3, r6
 8001660:	d118      	bne.n	8001694 <__aeabi_dmul+0x168>
 8001662:	3eb9      	subs	r6, #185	; 0xb9
 8001664:	3eff      	subs	r6, #255	; 0xff
 8001666:	421e      	tst	r6, r3
 8001668:	d01d      	beq.n	80016a6 <__aeabi_dmul+0x17a>
 800166a:	46a3      	mov	fp, r4
 800166c:	4682      	mov	sl, r0
 800166e:	9100      	str	r1, [sp, #0]
 8001670:	e000      	b.n	8001674 <__aeabi_dmul+0x148>
 8001672:	0017      	movs	r7, r2
 8001674:	9900      	ldr	r1, [sp, #0]
 8001676:	003a      	movs	r2, r7
 8001678:	2902      	cmp	r1, #2
 800167a:	d010      	beq.n	800169e <__aeabi_dmul+0x172>
 800167c:	465c      	mov	r4, fp
 800167e:	4650      	mov	r0, sl
 8001680:	2903      	cmp	r1, #3
 8001682:	d1bf      	bne.n	8001604 <__aeabi_dmul+0xd8>
 8001684:	2380      	movs	r3, #128	; 0x80
 8001686:	031b      	lsls	r3, r3, #12
 8001688:	431c      	orrs	r4, r3
 800168a:	0324      	lsls	r4, r4, #12
 800168c:	0005      	movs	r5, r0
 800168e:	4b7f      	ldr	r3, [pc, #508]	; (800188c <__aeabi_dmul+0x360>)
 8001690:	0b24      	lsrs	r4, r4, #12
 8001692:	e7bd      	b.n	8001610 <__aeabi_dmul+0xe4>
 8001694:	2480      	movs	r4, #128	; 0x80
 8001696:	2200      	movs	r2, #0
 8001698:	4b7c      	ldr	r3, [pc, #496]	; (800188c <__aeabi_dmul+0x360>)
 800169a:	0324      	lsls	r4, r4, #12
 800169c:	e7b8      	b.n	8001610 <__aeabi_dmul+0xe4>
 800169e:	2400      	movs	r4, #0
 80016a0:	2500      	movs	r5, #0
 80016a2:	4b7a      	ldr	r3, [pc, #488]	; (800188c <__aeabi_dmul+0x360>)
 80016a4:	e7b4      	b.n	8001610 <__aeabi_dmul+0xe4>
 80016a6:	4653      	mov	r3, sl
 80016a8:	041e      	lsls	r6, r3, #16
 80016aa:	0c36      	lsrs	r6, r6, #16
 80016ac:	0c1f      	lsrs	r7, r3, #16
 80016ae:	0033      	movs	r3, r6
 80016b0:	0c01      	lsrs	r1, r0, #16
 80016b2:	0400      	lsls	r0, r0, #16
 80016b4:	0c00      	lsrs	r0, r0, #16
 80016b6:	4343      	muls	r3, r0
 80016b8:	4698      	mov	r8, r3
 80016ba:	0003      	movs	r3, r0
 80016bc:	437b      	muls	r3, r7
 80016be:	4699      	mov	r9, r3
 80016c0:	0033      	movs	r3, r6
 80016c2:	434b      	muls	r3, r1
 80016c4:	469c      	mov	ip, r3
 80016c6:	4643      	mov	r3, r8
 80016c8:	000d      	movs	r5, r1
 80016ca:	0c1b      	lsrs	r3, r3, #16
 80016cc:	469a      	mov	sl, r3
 80016ce:	437d      	muls	r5, r7
 80016d0:	44cc      	add	ip, r9
 80016d2:	44d4      	add	ip, sl
 80016d4:	9500      	str	r5, [sp, #0]
 80016d6:	45e1      	cmp	r9, ip
 80016d8:	d904      	bls.n	80016e4 <__aeabi_dmul+0x1b8>
 80016da:	2380      	movs	r3, #128	; 0x80
 80016dc:	025b      	lsls	r3, r3, #9
 80016de:	4699      	mov	r9, r3
 80016e0:	444d      	add	r5, r9
 80016e2:	9500      	str	r5, [sp, #0]
 80016e4:	4663      	mov	r3, ip
 80016e6:	0c1b      	lsrs	r3, r3, #16
 80016e8:	001d      	movs	r5, r3
 80016ea:	4663      	mov	r3, ip
 80016ec:	041b      	lsls	r3, r3, #16
 80016ee:	469c      	mov	ip, r3
 80016f0:	4643      	mov	r3, r8
 80016f2:	041b      	lsls	r3, r3, #16
 80016f4:	0c1b      	lsrs	r3, r3, #16
 80016f6:	4698      	mov	r8, r3
 80016f8:	4663      	mov	r3, ip
 80016fa:	4443      	add	r3, r8
 80016fc:	9303      	str	r3, [sp, #12]
 80016fe:	0c23      	lsrs	r3, r4, #16
 8001700:	4698      	mov	r8, r3
 8001702:	0033      	movs	r3, r6
 8001704:	0424      	lsls	r4, r4, #16
 8001706:	0c24      	lsrs	r4, r4, #16
 8001708:	4363      	muls	r3, r4
 800170a:	469c      	mov	ip, r3
 800170c:	0023      	movs	r3, r4
 800170e:	437b      	muls	r3, r7
 8001710:	4699      	mov	r9, r3
 8001712:	4643      	mov	r3, r8
 8001714:	435e      	muls	r6, r3
 8001716:	435f      	muls	r7, r3
 8001718:	444e      	add	r6, r9
 800171a:	4663      	mov	r3, ip
 800171c:	46b2      	mov	sl, r6
 800171e:	0c1e      	lsrs	r6, r3, #16
 8001720:	4456      	add	r6, sl
 8001722:	45b1      	cmp	r9, r6
 8001724:	d903      	bls.n	800172e <__aeabi_dmul+0x202>
 8001726:	2380      	movs	r3, #128	; 0x80
 8001728:	025b      	lsls	r3, r3, #9
 800172a:	4699      	mov	r9, r3
 800172c:	444f      	add	r7, r9
 800172e:	0c33      	lsrs	r3, r6, #16
 8001730:	4699      	mov	r9, r3
 8001732:	003b      	movs	r3, r7
 8001734:	444b      	add	r3, r9
 8001736:	9305      	str	r3, [sp, #20]
 8001738:	4663      	mov	r3, ip
 800173a:	46ac      	mov	ip, r5
 800173c:	041f      	lsls	r7, r3, #16
 800173e:	0c3f      	lsrs	r7, r7, #16
 8001740:	0436      	lsls	r6, r6, #16
 8001742:	19f6      	adds	r6, r6, r7
 8001744:	44b4      	add	ip, r6
 8001746:	4663      	mov	r3, ip
 8001748:	9304      	str	r3, [sp, #16]
 800174a:	465b      	mov	r3, fp
 800174c:	0c1b      	lsrs	r3, r3, #16
 800174e:	469c      	mov	ip, r3
 8001750:	465b      	mov	r3, fp
 8001752:	041f      	lsls	r7, r3, #16
 8001754:	0c3f      	lsrs	r7, r7, #16
 8001756:	003b      	movs	r3, r7
 8001758:	4343      	muls	r3, r0
 800175a:	4699      	mov	r9, r3
 800175c:	4663      	mov	r3, ip
 800175e:	4343      	muls	r3, r0
 8001760:	469a      	mov	sl, r3
 8001762:	464b      	mov	r3, r9
 8001764:	4660      	mov	r0, ip
 8001766:	0c1b      	lsrs	r3, r3, #16
 8001768:	469b      	mov	fp, r3
 800176a:	4348      	muls	r0, r1
 800176c:	4379      	muls	r1, r7
 800176e:	4451      	add	r1, sl
 8001770:	4459      	add	r1, fp
 8001772:	458a      	cmp	sl, r1
 8001774:	d903      	bls.n	800177e <__aeabi_dmul+0x252>
 8001776:	2380      	movs	r3, #128	; 0x80
 8001778:	025b      	lsls	r3, r3, #9
 800177a:	469a      	mov	sl, r3
 800177c:	4450      	add	r0, sl
 800177e:	0c0b      	lsrs	r3, r1, #16
 8001780:	469a      	mov	sl, r3
 8001782:	464b      	mov	r3, r9
 8001784:	041b      	lsls	r3, r3, #16
 8001786:	0c1b      	lsrs	r3, r3, #16
 8001788:	4699      	mov	r9, r3
 800178a:	003b      	movs	r3, r7
 800178c:	4363      	muls	r3, r4
 800178e:	0409      	lsls	r1, r1, #16
 8001790:	4645      	mov	r5, r8
 8001792:	4449      	add	r1, r9
 8001794:	4699      	mov	r9, r3
 8001796:	4663      	mov	r3, ip
 8001798:	435c      	muls	r4, r3
 800179a:	436b      	muls	r3, r5
 800179c:	469c      	mov	ip, r3
 800179e:	464b      	mov	r3, r9
 80017a0:	0c1b      	lsrs	r3, r3, #16
 80017a2:	4698      	mov	r8, r3
 80017a4:	436f      	muls	r7, r5
 80017a6:	193f      	adds	r7, r7, r4
 80017a8:	4447      	add	r7, r8
 80017aa:	4450      	add	r0, sl
 80017ac:	42bc      	cmp	r4, r7
 80017ae:	d903      	bls.n	80017b8 <__aeabi_dmul+0x28c>
 80017b0:	2380      	movs	r3, #128	; 0x80
 80017b2:	025b      	lsls	r3, r3, #9
 80017b4:	4698      	mov	r8, r3
 80017b6:	44c4      	add	ip, r8
 80017b8:	9b04      	ldr	r3, [sp, #16]
 80017ba:	9d00      	ldr	r5, [sp, #0]
 80017bc:	4698      	mov	r8, r3
 80017be:	4445      	add	r5, r8
 80017c0:	42b5      	cmp	r5, r6
 80017c2:	41b6      	sbcs	r6, r6
 80017c4:	4273      	negs	r3, r6
 80017c6:	4698      	mov	r8, r3
 80017c8:	464b      	mov	r3, r9
 80017ca:	041e      	lsls	r6, r3, #16
 80017cc:	9b05      	ldr	r3, [sp, #20]
 80017ce:	043c      	lsls	r4, r7, #16
 80017d0:	4699      	mov	r9, r3
 80017d2:	0c36      	lsrs	r6, r6, #16
 80017d4:	19a4      	adds	r4, r4, r6
 80017d6:	444c      	add	r4, r9
 80017d8:	46a1      	mov	r9, r4
 80017da:	4683      	mov	fp, r0
 80017dc:	186e      	adds	r6, r5, r1
 80017de:	44c1      	add	r9, r8
 80017e0:	428e      	cmp	r6, r1
 80017e2:	4189      	sbcs	r1, r1
 80017e4:	44cb      	add	fp, r9
 80017e6:	465d      	mov	r5, fp
 80017e8:	4249      	negs	r1, r1
 80017ea:	186d      	adds	r5, r5, r1
 80017ec:	429c      	cmp	r4, r3
 80017ee:	41a4      	sbcs	r4, r4
 80017f0:	45c1      	cmp	r9, r8
 80017f2:	419b      	sbcs	r3, r3
 80017f4:	4583      	cmp	fp, r0
 80017f6:	4180      	sbcs	r0, r0
 80017f8:	428d      	cmp	r5, r1
 80017fa:	4189      	sbcs	r1, r1
 80017fc:	425b      	negs	r3, r3
 80017fe:	4264      	negs	r4, r4
 8001800:	431c      	orrs	r4, r3
 8001802:	4240      	negs	r0, r0
 8001804:	9b03      	ldr	r3, [sp, #12]
 8001806:	4249      	negs	r1, r1
 8001808:	4301      	orrs	r1, r0
 800180a:	0270      	lsls	r0, r6, #9
 800180c:	0c3f      	lsrs	r7, r7, #16
 800180e:	4318      	orrs	r0, r3
 8001810:	19e4      	adds	r4, r4, r7
 8001812:	1e47      	subs	r7, r0, #1
 8001814:	41b8      	sbcs	r0, r7
 8001816:	1864      	adds	r4, r4, r1
 8001818:	4464      	add	r4, ip
 800181a:	0df6      	lsrs	r6, r6, #23
 800181c:	0261      	lsls	r1, r4, #9
 800181e:	4330      	orrs	r0, r6
 8001820:	0dec      	lsrs	r4, r5, #23
 8001822:	026e      	lsls	r6, r5, #9
 8001824:	430c      	orrs	r4, r1
 8001826:	4330      	orrs	r0, r6
 8001828:	01c9      	lsls	r1, r1, #7
 800182a:	d400      	bmi.n	800182e <__aeabi_dmul+0x302>
 800182c:	e0f1      	b.n	8001a12 <__aeabi_dmul+0x4e6>
 800182e:	2101      	movs	r1, #1
 8001830:	0843      	lsrs	r3, r0, #1
 8001832:	4001      	ands	r1, r0
 8001834:	430b      	orrs	r3, r1
 8001836:	07e0      	lsls	r0, r4, #31
 8001838:	4318      	orrs	r0, r3
 800183a:	0864      	lsrs	r4, r4, #1
 800183c:	4915      	ldr	r1, [pc, #84]	; (8001894 <__aeabi_dmul+0x368>)
 800183e:	9b02      	ldr	r3, [sp, #8]
 8001840:	468c      	mov	ip, r1
 8001842:	4463      	add	r3, ip
 8001844:	2b00      	cmp	r3, #0
 8001846:	dc00      	bgt.n	800184a <__aeabi_dmul+0x31e>
 8001848:	e097      	b.n	800197a <__aeabi_dmul+0x44e>
 800184a:	0741      	lsls	r1, r0, #29
 800184c:	d009      	beq.n	8001862 <__aeabi_dmul+0x336>
 800184e:	210f      	movs	r1, #15
 8001850:	4001      	ands	r1, r0
 8001852:	2904      	cmp	r1, #4
 8001854:	d005      	beq.n	8001862 <__aeabi_dmul+0x336>
 8001856:	1d01      	adds	r1, r0, #4
 8001858:	4281      	cmp	r1, r0
 800185a:	4180      	sbcs	r0, r0
 800185c:	4240      	negs	r0, r0
 800185e:	1824      	adds	r4, r4, r0
 8001860:	0008      	movs	r0, r1
 8001862:	01e1      	lsls	r1, r4, #7
 8001864:	d506      	bpl.n	8001874 <__aeabi_dmul+0x348>
 8001866:	2180      	movs	r1, #128	; 0x80
 8001868:	00c9      	lsls	r1, r1, #3
 800186a:	468c      	mov	ip, r1
 800186c:	4b0a      	ldr	r3, [pc, #40]	; (8001898 <__aeabi_dmul+0x36c>)
 800186e:	401c      	ands	r4, r3
 8001870:	9b02      	ldr	r3, [sp, #8]
 8001872:	4463      	add	r3, ip
 8001874:	4909      	ldr	r1, [pc, #36]	; (800189c <__aeabi_dmul+0x370>)
 8001876:	428b      	cmp	r3, r1
 8001878:	dd00      	ble.n	800187c <__aeabi_dmul+0x350>
 800187a:	e710      	b.n	800169e <__aeabi_dmul+0x172>
 800187c:	0761      	lsls	r1, r4, #29
 800187e:	08c5      	lsrs	r5, r0, #3
 8001880:	0264      	lsls	r4, r4, #9
 8001882:	055b      	lsls	r3, r3, #21
 8001884:	430d      	orrs	r5, r1
 8001886:	0b24      	lsrs	r4, r4, #12
 8001888:	0d5b      	lsrs	r3, r3, #21
 800188a:	e6c1      	b.n	8001610 <__aeabi_dmul+0xe4>
 800188c:	000007ff 	.word	0x000007ff
 8001890:	fffffc01 	.word	0xfffffc01
 8001894:	000003ff 	.word	0x000003ff
 8001898:	feffffff 	.word	0xfeffffff
 800189c:	000007fe 	.word	0x000007fe
 80018a0:	464b      	mov	r3, r9
 80018a2:	4323      	orrs	r3, r4
 80018a4:	d059      	beq.n	800195a <__aeabi_dmul+0x42e>
 80018a6:	2c00      	cmp	r4, #0
 80018a8:	d100      	bne.n	80018ac <__aeabi_dmul+0x380>
 80018aa:	e0a3      	b.n	80019f4 <__aeabi_dmul+0x4c8>
 80018ac:	0020      	movs	r0, r4
 80018ae:	f000 fdb1 	bl	8002414 <__clzsi2>
 80018b2:	0001      	movs	r1, r0
 80018b4:	0003      	movs	r3, r0
 80018b6:	390b      	subs	r1, #11
 80018b8:	221d      	movs	r2, #29
 80018ba:	1a52      	subs	r2, r2, r1
 80018bc:	4649      	mov	r1, r9
 80018be:	0018      	movs	r0, r3
 80018c0:	40d1      	lsrs	r1, r2
 80018c2:	464a      	mov	r2, r9
 80018c4:	3808      	subs	r0, #8
 80018c6:	4082      	lsls	r2, r0
 80018c8:	4084      	lsls	r4, r0
 80018ca:	0010      	movs	r0, r2
 80018cc:	430c      	orrs	r4, r1
 80018ce:	4a74      	ldr	r2, [pc, #464]	; (8001aa0 <__aeabi_dmul+0x574>)
 80018d0:	1aeb      	subs	r3, r5, r3
 80018d2:	4694      	mov	ip, r2
 80018d4:	4642      	mov	r2, r8
 80018d6:	4463      	add	r3, ip
 80018d8:	9301      	str	r3, [sp, #4]
 80018da:	9b01      	ldr	r3, [sp, #4]
 80018dc:	407a      	eors	r2, r7
 80018de:	3301      	adds	r3, #1
 80018e0:	2100      	movs	r1, #0
 80018e2:	b2d2      	uxtb	r2, r2
 80018e4:	9302      	str	r3, [sp, #8]
 80018e6:	2e0a      	cmp	r6, #10
 80018e8:	dd00      	ble.n	80018ec <__aeabi_dmul+0x3c0>
 80018ea:	e667      	b.n	80015bc <__aeabi_dmul+0x90>
 80018ec:	e683      	b.n	80015f6 <__aeabi_dmul+0xca>
 80018ee:	465b      	mov	r3, fp
 80018f0:	4303      	orrs	r3, r0
 80018f2:	469a      	mov	sl, r3
 80018f4:	d02a      	beq.n	800194c <__aeabi_dmul+0x420>
 80018f6:	465b      	mov	r3, fp
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d06d      	beq.n	80019d8 <__aeabi_dmul+0x4ac>
 80018fc:	4658      	mov	r0, fp
 80018fe:	f000 fd89 	bl	8002414 <__clzsi2>
 8001902:	0001      	movs	r1, r0
 8001904:	0003      	movs	r3, r0
 8001906:	390b      	subs	r1, #11
 8001908:	221d      	movs	r2, #29
 800190a:	1a52      	subs	r2, r2, r1
 800190c:	0021      	movs	r1, r4
 800190e:	0018      	movs	r0, r3
 8001910:	465d      	mov	r5, fp
 8001912:	40d1      	lsrs	r1, r2
 8001914:	3808      	subs	r0, #8
 8001916:	4085      	lsls	r5, r0
 8001918:	000a      	movs	r2, r1
 800191a:	4084      	lsls	r4, r0
 800191c:	432a      	orrs	r2, r5
 800191e:	4693      	mov	fp, r2
 8001920:	46a2      	mov	sl, r4
 8001922:	4d5f      	ldr	r5, [pc, #380]	; (8001aa0 <__aeabi_dmul+0x574>)
 8001924:	2600      	movs	r6, #0
 8001926:	1aed      	subs	r5, r5, r3
 8001928:	2300      	movs	r3, #0
 800192a:	9300      	str	r3, [sp, #0]
 800192c:	e625      	b.n	800157a <__aeabi_dmul+0x4e>
 800192e:	465b      	mov	r3, fp
 8001930:	4303      	orrs	r3, r0
 8001932:	469a      	mov	sl, r3
 8001934:	d105      	bne.n	8001942 <__aeabi_dmul+0x416>
 8001936:	2300      	movs	r3, #0
 8001938:	469b      	mov	fp, r3
 800193a:	3302      	adds	r3, #2
 800193c:	2608      	movs	r6, #8
 800193e:	9300      	str	r3, [sp, #0]
 8001940:	e61b      	b.n	800157a <__aeabi_dmul+0x4e>
 8001942:	2303      	movs	r3, #3
 8001944:	4682      	mov	sl, r0
 8001946:	260c      	movs	r6, #12
 8001948:	9300      	str	r3, [sp, #0]
 800194a:	e616      	b.n	800157a <__aeabi_dmul+0x4e>
 800194c:	2300      	movs	r3, #0
 800194e:	469b      	mov	fp, r3
 8001950:	3301      	adds	r3, #1
 8001952:	2604      	movs	r6, #4
 8001954:	2500      	movs	r5, #0
 8001956:	9300      	str	r3, [sp, #0]
 8001958:	e60f      	b.n	800157a <__aeabi_dmul+0x4e>
 800195a:	4642      	mov	r2, r8
 800195c:	3301      	adds	r3, #1
 800195e:	9501      	str	r5, [sp, #4]
 8001960:	431e      	orrs	r6, r3
 8001962:	9b01      	ldr	r3, [sp, #4]
 8001964:	407a      	eors	r2, r7
 8001966:	3301      	adds	r3, #1
 8001968:	2400      	movs	r4, #0
 800196a:	2000      	movs	r0, #0
 800196c:	2101      	movs	r1, #1
 800196e:	b2d2      	uxtb	r2, r2
 8001970:	9302      	str	r3, [sp, #8]
 8001972:	2e0a      	cmp	r6, #10
 8001974:	dd00      	ble.n	8001978 <__aeabi_dmul+0x44c>
 8001976:	e621      	b.n	80015bc <__aeabi_dmul+0x90>
 8001978:	e63d      	b.n	80015f6 <__aeabi_dmul+0xca>
 800197a:	2101      	movs	r1, #1
 800197c:	1ac9      	subs	r1, r1, r3
 800197e:	2938      	cmp	r1, #56	; 0x38
 8001980:	dd00      	ble.n	8001984 <__aeabi_dmul+0x458>
 8001982:	e642      	b.n	800160a <__aeabi_dmul+0xde>
 8001984:	291f      	cmp	r1, #31
 8001986:	dd47      	ble.n	8001a18 <__aeabi_dmul+0x4ec>
 8001988:	261f      	movs	r6, #31
 800198a:	0025      	movs	r5, r4
 800198c:	4276      	negs	r6, r6
 800198e:	1af3      	subs	r3, r6, r3
 8001990:	40dd      	lsrs	r5, r3
 8001992:	002b      	movs	r3, r5
 8001994:	2920      	cmp	r1, #32
 8001996:	d005      	beq.n	80019a4 <__aeabi_dmul+0x478>
 8001998:	4942      	ldr	r1, [pc, #264]	; (8001aa4 <__aeabi_dmul+0x578>)
 800199a:	9d02      	ldr	r5, [sp, #8]
 800199c:	468c      	mov	ip, r1
 800199e:	4465      	add	r5, ip
 80019a0:	40ac      	lsls	r4, r5
 80019a2:	4320      	orrs	r0, r4
 80019a4:	1e41      	subs	r1, r0, #1
 80019a6:	4188      	sbcs	r0, r1
 80019a8:	4318      	orrs	r0, r3
 80019aa:	2307      	movs	r3, #7
 80019ac:	001d      	movs	r5, r3
 80019ae:	2400      	movs	r4, #0
 80019b0:	4005      	ands	r5, r0
 80019b2:	4203      	tst	r3, r0
 80019b4:	d04a      	beq.n	8001a4c <__aeabi_dmul+0x520>
 80019b6:	230f      	movs	r3, #15
 80019b8:	2400      	movs	r4, #0
 80019ba:	4003      	ands	r3, r0
 80019bc:	2b04      	cmp	r3, #4
 80019be:	d042      	beq.n	8001a46 <__aeabi_dmul+0x51a>
 80019c0:	1d03      	adds	r3, r0, #4
 80019c2:	4283      	cmp	r3, r0
 80019c4:	4180      	sbcs	r0, r0
 80019c6:	4240      	negs	r0, r0
 80019c8:	1824      	adds	r4, r4, r0
 80019ca:	0018      	movs	r0, r3
 80019cc:	0223      	lsls	r3, r4, #8
 80019ce:	d53a      	bpl.n	8001a46 <__aeabi_dmul+0x51a>
 80019d0:	2301      	movs	r3, #1
 80019d2:	2400      	movs	r4, #0
 80019d4:	2500      	movs	r5, #0
 80019d6:	e61b      	b.n	8001610 <__aeabi_dmul+0xe4>
 80019d8:	f000 fd1c 	bl	8002414 <__clzsi2>
 80019dc:	0001      	movs	r1, r0
 80019de:	0003      	movs	r3, r0
 80019e0:	3115      	adds	r1, #21
 80019e2:	3320      	adds	r3, #32
 80019e4:	291c      	cmp	r1, #28
 80019e6:	dd8f      	ble.n	8001908 <__aeabi_dmul+0x3dc>
 80019e8:	3808      	subs	r0, #8
 80019ea:	2200      	movs	r2, #0
 80019ec:	4084      	lsls	r4, r0
 80019ee:	4692      	mov	sl, r2
 80019f0:	46a3      	mov	fp, r4
 80019f2:	e796      	b.n	8001922 <__aeabi_dmul+0x3f6>
 80019f4:	f000 fd0e 	bl	8002414 <__clzsi2>
 80019f8:	0001      	movs	r1, r0
 80019fa:	0003      	movs	r3, r0
 80019fc:	3115      	adds	r1, #21
 80019fe:	3320      	adds	r3, #32
 8001a00:	291c      	cmp	r1, #28
 8001a02:	dc00      	bgt.n	8001a06 <__aeabi_dmul+0x4da>
 8001a04:	e758      	b.n	80018b8 <__aeabi_dmul+0x38c>
 8001a06:	0002      	movs	r2, r0
 8001a08:	464c      	mov	r4, r9
 8001a0a:	3a08      	subs	r2, #8
 8001a0c:	2000      	movs	r0, #0
 8001a0e:	4094      	lsls	r4, r2
 8001a10:	e75d      	b.n	80018ce <__aeabi_dmul+0x3a2>
 8001a12:	9b01      	ldr	r3, [sp, #4]
 8001a14:	9302      	str	r3, [sp, #8]
 8001a16:	e711      	b.n	800183c <__aeabi_dmul+0x310>
 8001a18:	4b23      	ldr	r3, [pc, #140]	; (8001aa8 <__aeabi_dmul+0x57c>)
 8001a1a:	0026      	movs	r6, r4
 8001a1c:	469c      	mov	ip, r3
 8001a1e:	0003      	movs	r3, r0
 8001a20:	9d02      	ldr	r5, [sp, #8]
 8001a22:	40cb      	lsrs	r3, r1
 8001a24:	4465      	add	r5, ip
 8001a26:	40ae      	lsls	r6, r5
 8001a28:	431e      	orrs	r6, r3
 8001a2a:	0003      	movs	r3, r0
 8001a2c:	40ab      	lsls	r3, r5
 8001a2e:	1e58      	subs	r0, r3, #1
 8001a30:	4183      	sbcs	r3, r0
 8001a32:	0030      	movs	r0, r6
 8001a34:	4318      	orrs	r0, r3
 8001a36:	40cc      	lsrs	r4, r1
 8001a38:	0743      	lsls	r3, r0, #29
 8001a3a:	d0c7      	beq.n	80019cc <__aeabi_dmul+0x4a0>
 8001a3c:	230f      	movs	r3, #15
 8001a3e:	4003      	ands	r3, r0
 8001a40:	2b04      	cmp	r3, #4
 8001a42:	d1bd      	bne.n	80019c0 <__aeabi_dmul+0x494>
 8001a44:	e7c2      	b.n	80019cc <__aeabi_dmul+0x4a0>
 8001a46:	0765      	lsls	r5, r4, #29
 8001a48:	0264      	lsls	r4, r4, #9
 8001a4a:	0b24      	lsrs	r4, r4, #12
 8001a4c:	08c0      	lsrs	r0, r0, #3
 8001a4e:	2300      	movs	r3, #0
 8001a50:	4305      	orrs	r5, r0
 8001a52:	e5dd      	b.n	8001610 <__aeabi_dmul+0xe4>
 8001a54:	2500      	movs	r5, #0
 8001a56:	2302      	movs	r3, #2
 8001a58:	2e0f      	cmp	r6, #15
 8001a5a:	d10c      	bne.n	8001a76 <__aeabi_dmul+0x54a>
 8001a5c:	2480      	movs	r4, #128	; 0x80
 8001a5e:	465b      	mov	r3, fp
 8001a60:	0324      	lsls	r4, r4, #12
 8001a62:	4223      	tst	r3, r4
 8001a64:	d00e      	beq.n	8001a84 <__aeabi_dmul+0x558>
 8001a66:	4221      	tst	r1, r4
 8001a68:	d10c      	bne.n	8001a84 <__aeabi_dmul+0x558>
 8001a6a:	430c      	orrs	r4, r1
 8001a6c:	0324      	lsls	r4, r4, #12
 8001a6e:	003a      	movs	r2, r7
 8001a70:	4b0e      	ldr	r3, [pc, #56]	; (8001aac <__aeabi_dmul+0x580>)
 8001a72:	0b24      	lsrs	r4, r4, #12
 8001a74:	e5cc      	b.n	8001610 <__aeabi_dmul+0xe4>
 8001a76:	2e0b      	cmp	r6, #11
 8001a78:	d000      	beq.n	8001a7c <__aeabi_dmul+0x550>
 8001a7a:	e5a2      	b.n	80015c2 <__aeabi_dmul+0x96>
 8001a7c:	468b      	mov	fp, r1
 8001a7e:	46aa      	mov	sl, r5
 8001a80:	9300      	str	r3, [sp, #0]
 8001a82:	e5f7      	b.n	8001674 <__aeabi_dmul+0x148>
 8001a84:	2480      	movs	r4, #128	; 0x80
 8001a86:	465b      	mov	r3, fp
 8001a88:	0324      	lsls	r4, r4, #12
 8001a8a:	431c      	orrs	r4, r3
 8001a8c:	0324      	lsls	r4, r4, #12
 8001a8e:	4642      	mov	r2, r8
 8001a90:	4655      	mov	r5, sl
 8001a92:	4b06      	ldr	r3, [pc, #24]	; (8001aac <__aeabi_dmul+0x580>)
 8001a94:	0b24      	lsrs	r4, r4, #12
 8001a96:	e5bb      	b.n	8001610 <__aeabi_dmul+0xe4>
 8001a98:	464d      	mov	r5, r9
 8001a9a:	0021      	movs	r1, r4
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e7db      	b.n	8001a58 <__aeabi_dmul+0x52c>
 8001aa0:	fffffc0d 	.word	0xfffffc0d
 8001aa4:	0000043e 	.word	0x0000043e
 8001aa8:	0000041e 	.word	0x0000041e
 8001aac:	000007ff 	.word	0x000007ff

08001ab0 <__aeabi_dsub>:
 8001ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ab2:	4657      	mov	r7, sl
 8001ab4:	464e      	mov	r6, r9
 8001ab6:	4645      	mov	r5, r8
 8001ab8:	46de      	mov	lr, fp
 8001aba:	b5e0      	push	{r5, r6, r7, lr}
 8001abc:	000d      	movs	r5, r1
 8001abe:	0004      	movs	r4, r0
 8001ac0:	0019      	movs	r1, r3
 8001ac2:	0010      	movs	r0, r2
 8001ac4:	032b      	lsls	r3, r5, #12
 8001ac6:	0a5b      	lsrs	r3, r3, #9
 8001ac8:	0f62      	lsrs	r2, r4, #29
 8001aca:	431a      	orrs	r2, r3
 8001acc:	00e3      	lsls	r3, r4, #3
 8001ace:	030c      	lsls	r4, r1, #12
 8001ad0:	0a64      	lsrs	r4, r4, #9
 8001ad2:	0f47      	lsrs	r7, r0, #29
 8001ad4:	4327      	orrs	r7, r4
 8001ad6:	4cd0      	ldr	r4, [pc, #832]	; (8001e18 <__aeabi_dsub+0x368>)
 8001ad8:	006e      	lsls	r6, r5, #1
 8001ada:	4691      	mov	r9, r2
 8001adc:	b083      	sub	sp, #12
 8001ade:	004a      	lsls	r2, r1, #1
 8001ae0:	00c0      	lsls	r0, r0, #3
 8001ae2:	4698      	mov	r8, r3
 8001ae4:	46a2      	mov	sl, r4
 8001ae6:	0d76      	lsrs	r6, r6, #21
 8001ae8:	0fed      	lsrs	r5, r5, #31
 8001aea:	0d52      	lsrs	r2, r2, #21
 8001aec:	0fc9      	lsrs	r1, r1, #31
 8001aee:	9001      	str	r0, [sp, #4]
 8001af0:	42a2      	cmp	r2, r4
 8001af2:	d100      	bne.n	8001af6 <__aeabi_dsub+0x46>
 8001af4:	e0b9      	b.n	8001c6a <__aeabi_dsub+0x1ba>
 8001af6:	2401      	movs	r4, #1
 8001af8:	4061      	eors	r1, r4
 8001afa:	468b      	mov	fp, r1
 8001afc:	428d      	cmp	r5, r1
 8001afe:	d100      	bne.n	8001b02 <__aeabi_dsub+0x52>
 8001b00:	e08d      	b.n	8001c1e <__aeabi_dsub+0x16e>
 8001b02:	1ab4      	subs	r4, r6, r2
 8001b04:	46a4      	mov	ip, r4
 8001b06:	2c00      	cmp	r4, #0
 8001b08:	dc00      	bgt.n	8001b0c <__aeabi_dsub+0x5c>
 8001b0a:	e0b7      	b.n	8001c7c <__aeabi_dsub+0x1cc>
 8001b0c:	2a00      	cmp	r2, #0
 8001b0e:	d100      	bne.n	8001b12 <__aeabi_dsub+0x62>
 8001b10:	e0cb      	b.n	8001caa <__aeabi_dsub+0x1fa>
 8001b12:	4ac1      	ldr	r2, [pc, #772]	; (8001e18 <__aeabi_dsub+0x368>)
 8001b14:	4296      	cmp	r6, r2
 8001b16:	d100      	bne.n	8001b1a <__aeabi_dsub+0x6a>
 8001b18:	e186      	b.n	8001e28 <__aeabi_dsub+0x378>
 8001b1a:	2280      	movs	r2, #128	; 0x80
 8001b1c:	0412      	lsls	r2, r2, #16
 8001b1e:	4317      	orrs	r7, r2
 8001b20:	4662      	mov	r2, ip
 8001b22:	2a38      	cmp	r2, #56	; 0x38
 8001b24:	dd00      	ble.n	8001b28 <__aeabi_dsub+0x78>
 8001b26:	e1a4      	b.n	8001e72 <__aeabi_dsub+0x3c2>
 8001b28:	2a1f      	cmp	r2, #31
 8001b2a:	dd00      	ble.n	8001b2e <__aeabi_dsub+0x7e>
 8001b2c:	e21d      	b.n	8001f6a <__aeabi_dsub+0x4ba>
 8001b2e:	4661      	mov	r1, ip
 8001b30:	2220      	movs	r2, #32
 8001b32:	003c      	movs	r4, r7
 8001b34:	1a52      	subs	r2, r2, r1
 8001b36:	0001      	movs	r1, r0
 8001b38:	4090      	lsls	r0, r2
 8001b3a:	4094      	lsls	r4, r2
 8001b3c:	1e42      	subs	r2, r0, #1
 8001b3e:	4190      	sbcs	r0, r2
 8001b40:	4662      	mov	r2, ip
 8001b42:	46a0      	mov	r8, r4
 8001b44:	4664      	mov	r4, ip
 8001b46:	40d7      	lsrs	r7, r2
 8001b48:	464a      	mov	r2, r9
 8001b4a:	40e1      	lsrs	r1, r4
 8001b4c:	4644      	mov	r4, r8
 8001b4e:	1bd2      	subs	r2, r2, r7
 8001b50:	4691      	mov	r9, r2
 8001b52:	430c      	orrs	r4, r1
 8001b54:	4304      	orrs	r4, r0
 8001b56:	1b1c      	subs	r4, r3, r4
 8001b58:	42a3      	cmp	r3, r4
 8001b5a:	4192      	sbcs	r2, r2
 8001b5c:	464b      	mov	r3, r9
 8001b5e:	4252      	negs	r2, r2
 8001b60:	1a9b      	subs	r3, r3, r2
 8001b62:	469a      	mov	sl, r3
 8001b64:	4653      	mov	r3, sl
 8001b66:	021b      	lsls	r3, r3, #8
 8001b68:	d400      	bmi.n	8001b6c <__aeabi_dsub+0xbc>
 8001b6a:	e12b      	b.n	8001dc4 <__aeabi_dsub+0x314>
 8001b6c:	4653      	mov	r3, sl
 8001b6e:	025a      	lsls	r2, r3, #9
 8001b70:	0a53      	lsrs	r3, r2, #9
 8001b72:	469a      	mov	sl, r3
 8001b74:	4653      	mov	r3, sl
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d100      	bne.n	8001b7c <__aeabi_dsub+0xcc>
 8001b7a:	e166      	b.n	8001e4a <__aeabi_dsub+0x39a>
 8001b7c:	4650      	mov	r0, sl
 8001b7e:	f000 fc49 	bl	8002414 <__clzsi2>
 8001b82:	0003      	movs	r3, r0
 8001b84:	3b08      	subs	r3, #8
 8001b86:	2220      	movs	r2, #32
 8001b88:	0020      	movs	r0, r4
 8001b8a:	1ad2      	subs	r2, r2, r3
 8001b8c:	4651      	mov	r1, sl
 8001b8e:	40d0      	lsrs	r0, r2
 8001b90:	4099      	lsls	r1, r3
 8001b92:	0002      	movs	r2, r0
 8001b94:	409c      	lsls	r4, r3
 8001b96:	430a      	orrs	r2, r1
 8001b98:	429e      	cmp	r6, r3
 8001b9a:	dd00      	ble.n	8001b9e <__aeabi_dsub+0xee>
 8001b9c:	e164      	b.n	8001e68 <__aeabi_dsub+0x3b8>
 8001b9e:	1b9b      	subs	r3, r3, r6
 8001ba0:	1c59      	adds	r1, r3, #1
 8001ba2:	291f      	cmp	r1, #31
 8001ba4:	dd00      	ble.n	8001ba8 <__aeabi_dsub+0xf8>
 8001ba6:	e0fe      	b.n	8001da6 <__aeabi_dsub+0x2f6>
 8001ba8:	2320      	movs	r3, #32
 8001baa:	0010      	movs	r0, r2
 8001bac:	0026      	movs	r6, r4
 8001bae:	1a5b      	subs	r3, r3, r1
 8001bb0:	409c      	lsls	r4, r3
 8001bb2:	4098      	lsls	r0, r3
 8001bb4:	40ce      	lsrs	r6, r1
 8001bb6:	40ca      	lsrs	r2, r1
 8001bb8:	1e63      	subs	r3, r4, #1
 8001bba:	419c      	sbcs	r4, r3
 8001bbc:	4330      	orrs	r0, r6
 8001bbe:	4692      	mov	sl, r2
 8001bc0:	2600      	movs	r6, #0
 8001bc2:	4304      	orrs	r4, r0
 8001bc4:	0763      	lsls	r3, r4, #29
 8001bc6:	d009      	beq.n	8001bdc <__aeabi_dsub+0x12c>
 8001bc8:	230f      	movs	r3, #15
 8001bca:	4023      	ands	r3, r4
 8001bcc:	2b04      	cmp	r3, #4
 8001bce:	d005      	beq.n	8001bdc <__aeabi_dsub+0x12c>
 8001bd0:	1d23      	adds	r3, r4, #4
 8001bd2:	42a3      	cmp	r3, r4
 8001bd4:	41a4      	sbcs	r4, r4
 8001bd6:	4264      	negs	r4, r4
 8001bd8:	44a2      	add	sl, r4
 8001bda:	001c      	movs	r4, r3
 8001bdc:	4653      	mov	r3, sl
 8001bde:	021b      	lsls	r3, r3, #8
 8001be0:	d400      	bmi.n	8001be4 <__aeabi_dsub+0x134>
 8001be2:	e0f2      	b.n	8001dca <__aeabi_dsub+0x31a>
 8001be4:	4b8c      	ldr	r3, [pc, #560]	; (8001e18 <__aeabi_dsub+0x368>)
 8001be6:	3601      	adds	r6, #1
 8001be8:	429e      	cmp	r6, r3
 8001bea:	d100      	bne.n	8001bee <__aeabi_dsub+0x13e>
 8001bec:	e10f      	b.n	8001e0e <__aeabi_dsub+0x35e>
 8001bee:	4653      	mov	r3, sl
 8001bf0:	498a      	ldr	r1, [pc, #552]	; (8001e1c <__aeabi_dsub+0x36c>)
 8001bf2:	08e4      	lsrs	r4, r4, #3
 8001bf4:	400b      	ands	r3, r1
 8001bf6:	0019      	movs	r1, r3
 8001bf8:	075b      	lsls	r3, r3, #29
 8001bfa:	4323      	orrs	r3, r4
 8001bfc:	0572      	lsls	r2, r6, #21
 8001bfe:	024c      	lsls	r4, r1, #9
 8001c00:	0b24      	lsrs	r4, r4, #12
 8001c02:	0d52      	lsrs	r2, r2, #21
 8001c04:	0512      	lsls	r2, r2, #20
 8001c06:	4322      	orrs	r2, r4
 8001c08:	07ed      	lsls	r5, r5, #31
 8001c0a:	432a      	orrs	r2, r5
 8001c0c:	0018      	movs	r0, r3
 8001c0e:	0011      	movs	r1, r2
 8001c10:	b003      	add	sp, #12
 8001c12:	bcf0      	pop	{r4, r5, r6, r7}
 8001c14:	46bb      	mov	fp, r7
 8001c16:	46b2      	mov	sl, r6
 8001c18:	46a9      	mov	r9, r5
 8001c1a:	46a0      	mov	r8, r4
 8001c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c1e:	1ab4      	subs	r4, r6, r2
 8001c20:	46a4      	mov	ip, r4
 8001c22:	2c00      	cmp	r4, #0
 8001c24:	dd59      	ble.n	8001cda <__aeabi_dsub+0x22a>
 8001c26:	2a00      	cmp	r2, #0
 8001c28:	d100      	bne.n	8001c2c <__aeabi_dsub+0x17c>
 8001c2a:	e0b0      	b.n	8001d8e <__aeabi_dsub+0x2de>
 8001c2c:	4556      	cmp	r6, sl
 8001c2e:	d100      	bne.n	8001c32 <__aeabi_dsub+0x182>
 8001c30:	e0fa      	b.n	8001e28 <__aeabi_dsub+0x378>
 8001c32:	2280      	movs	r2, #128	; 0x80
 8001c34:	0412      	lsls	r2, r2, #16
 8001c36:	4317      	orrs	r7, r2
 8001c38:	4662      	mov	r2, ip
 8001c3a:	2a38      	cmp	r2, #56	; 0x38
 8001c3c:	dd00      	ble.n	8001c40 <__aeabi_dsub+0x190>
 8001c3e:	e0d4      	b.n	8001dea <__aeabi_dsub+0x33a>
 8001c40:	2a1f      	cmp	r2, #31
 8001c42:	dc00      	bgt.n	8001c46 <__aeabi_dsub+0x196>
 8001c44:	e1c0      	b.n	8001fc8 <__aeabi_dsub+0x518>
 8001c46:	0039      	movs	r1, r7
 8001c48:	3a20      	subs	r2, #32
 8001c4a:	40d1      	lsrs	r1, r2
 8001c4c:	4662      	mov	r2, ip
 8001c4e:	2a20      	cmp	r2, #32
 8001c50:	d006      	beq.n	8001c60 <__aeabi_dsub+0x1b0>
 8001c52:	4664      	mov	r4, ip
 8001c54:	2240      	movs	r2, #64	; 0x40
 8001c56:	1b12      	subs	r2, r2, r4
 8001c58:	003c      	movs	r4, r7
 8001c5a:	4094      	lsls	r4, r2
 8001c5c:	4304      	orrs	r4, r0
 8001c5e:	9401      	str	r4, [sp, #4]
 8001c60:	9c01      	ldr	r4, [sp, #4]
 8001c62:	1e62      	subs	r2, r4, #1
 8001c64:	4194      	sbcs	r4, r2
 8001c66:	430c      	orrs	r4, r1
 8001c68:	e0c3      	b.n	8001df2 <__aeabi_dsub+0x342>
 8001c6a:	003c      	movs	r4, r7
 8001c6c:	4304      	orrs	r4, r0
 8001c6e:	d02b      	beq.n	8001cc8 <__aeabi_dsub+0x218>
 8001c70:	468b      	mov	fp, r1
 8001c72:	428d      	cmp	r5, r1
 8001c74:	d02e      	beq.n	8001cd4 <__aeabi_dsub+0x224>
 8001c76:	4c6a      	ldr	r4, [pc, #424]	; (8001e20 <__aeabi_dsub+0x370>)
 8001c78:	46a4      	mov	ip, r4
 8001c7a:	44b4      	add	ip, r6
 8001c7c:	4664      	mov	r4, ip
 8001c7e:	2c00      	cmp	r4, #0
 8001c80:	d05f      	beq.n	8001d42 <__aeabi_dsub+0x292>
 8001c82:	1b94      	subs	r4, r2, r6
 8001c84:	46a4      	mov	ip, r4
 8001c86:	2e00      	cmp	r6, #0
 8001c88:	d000      	beq.n	8001c8c <__aeabi_dsub+0x1dc>
 8001c8a:	e120      	b.n	8001ece <__aeabi_dsub+0x41e>
 8001c8c:	464c      	mov	r4, r9
 8001c8e:	431c      	orrs	r4, r3
 8001c90:	d100      	bne.n	8001c94 <__aeabi_dsub+0x1e4>
 8001c92:	e1c7      	b.n	8002024 <__aeabi_dsub+0x574>
 8001c94:	4661      	mov	r1, ip
 8001c96:	1e4c      	subs	r4, r1, #1
 8001c98:	2901      	cmp	r1, #1
 8001c9a:	d100      	bne.n	8001c9e <__aeabi_dsub+0x1ee>
 8001c9c:	e223      	b.n	80020e6 <__aeabi_dsub+0x636>
 8001c9e:	4d5e      	ldr	r5, [pc, #376]	; (8001e18 <__aeabi_dsub+0x368>)
 8001ca0:	45ac      	cmp	ip, r5
 8001ca2:	d100      	bne.n	8001ca6 <__aeabi_dsub+0x1f6>
 8001ca4:	e1d8      	b.n	8002058 <__aeabi_dsub+0x5a8>
 8001ca6:	46a4      	mov	ip, r4
 8001ca8:	e11a      	b.n	8001ee0 <__aeabi_dsub+0x430>
 8001caa:	003a      	movs	r2, r7
 8001cac:	4302      	orrs	r2, r0
 8001cae:	d100      	bne.n	8001cb2 <__aeabi_dsub+0x202>
 8001cb0:	e0e4      	b.n	8001e7c <__aeabi_dsub+0x3cc>
 8001cb2:	0022      	movs	r2, r4
 8001cb4:	3a01      	subs	r2, #1
 8001cb6:	2c01      	cmp	r4, #1
 8001cb8:	d100      	bne.n	8001cbc <__aeabi_dsub+0x20c>
 8001cba:	e1c3      	b.n	8002044 <__aeabi_dsub+0x594>
 8001cbc:	4956      	ldr	r1, [pc, #344]	; (8001e18 <__aeabi_dsub+0x368>)
 8001cbe:	428c      	cmp	r4, r1
 8001cc0:	d100      	bne.n	8001cc4 <__aeabi_dsub+0x214>
 8001cc2:	e0b1      	b.n	8001e28 <__aeabi_dsub+0x378>
 8001cc4:	4694      	mov	ip, r2
 8001cc6:	e72b      	b.n	8001b20 <__aeabi_dsub+0x70>
 8001cc8:	2401      	movs	r4, #1
 8001cca:	4061      	eors	r1, r4
 8001ccc:	468b      	mov	fp, r1
 8001cce:	428d      	cmp	r5, r1
 8001cd0:	d000      	beq.n	8001cd4 <__aeabi_dsub+0x224>
 8001cd2:	e716      	b.n	8001b02 <__aeabi_dsub+0x52>
 8001cd4:	4952      	ldr	r1, [pc, #328]	; (8001e20 <__aeabi_dsub+0x370>)
 8001cd6:	468c      	mov	ip, r1
 8001cd8:	44b4      	add	ip, r6
 8001cda:	4664      	mov	r4, ip
 8001cdc:	2c00      	cmp	r4, #0
 8001cde:	d100      	bne.n	8001ce2 <__aeabi_dsub+0x232>
 8001ce0:	e0d3      	b.n	8001e8a <__aeabi_dsub+0x3da>
 8001ce2:	1b91      	subs	r1, r2, r6
 8001ce4:	468c      	mov	ip, r1
 8001ce6:	2e00      	cmp	r6, #0
 8001ce8:	d100      	bne.n	8001cec <__aeabi_dsub+0x23c>
 8001cea:	e15e      	b.n	8001faa <__aeabi_dsub+0x4fa>
 8001cec:	494a      	ldr	r1, [pc, #296]	; (8001e18 <__aeabi_dsub+0x368>)
 8001cee:	428a      	cmp	r2, r1
 8001cf0:	d100      	bne.n	8001cf4 <__aeabi_dsub+0x244>
 8001cf2:	e1be      	b.n	8002072 <__aeabi_dsub+0x5c2>
 8001cf4:	2180      	movs	r1, #128	; 0x80
 8001cf6:	464c      	mov	r4, r9
 8001cf8:	0409      	lsls	r1, r1, #16
 8001cfa:	430c      	orrs	r4, r1
 8001cfc:	46a1      	mov	r9, r4
 8001cfe:	4661      	mov	r1, ip
 8001d00:	2938      	cmp	r1, #56	; 0x38
 8001d02:	dd00      	ble.n	8001d06 <__aeabi_dsub+0x256>
 8001d04:	e1ba      	b.n	800207c <__aeabi_dsub+0x5cc>
 8001d06:	291f      	cmp	r1, #31
 8001d08:	dd00      	ble.n	8001d0c <__aeabi_dsub+0x25c>
 8001d0a:	e227      	b.n	800215c <__aeabi_dsub+0x6ac>
 8001d0c:	2420      	movs	r4, #32
 8001d0e:	1a64      	subs	r4, r4, r1
 8001d10:	4649      	mov	r1, r9
 8001d12:	40a1      	lsls	r1, r4
 8001d14:	001e      	movs	r6, r3
 8001d16:	4688      	mov	r8, r1
 8001d18:	4661      	mov	r1, ip
 8001d1a:	40a3      	lsls	r3, r4
 8001d1c:	40ce      	lsrs	r6, r1
 8001d1e:	4641      	mov	r1, r8
 8001d20:	1e5c      	subs	r4, r3, #1
 8001d22:	41a3      	sbcs	r3, r4
 8001d24:	4331      	orrs	r1, r6
 8001d26:	4319      	orrs	r1, r3
 8001d28:	000c      	movs	r4, r1
 8001d2a:	4663      	mov	r3, ip
 8001d2c:	4649      	mov	r1, r9
 8001d2e:	40d9      	lsrs	r1, r3
 8001d30:	187f      	adds	r7, r7, r1
 8001d32:	1824      	adds	r4, r4, r0
 8001d34:	4284      	cmp	r4, r0
 8001d36:	419b      	sbcs	r3, r3
 8001d38:	425b      	negs	r3, r3
 8001d3a:	469a      	mov	sl, r3
 8001d3c:	0016      	movs	r6, r2
 8001d3e:	44ba      	add	sl, r7
 8001d40:	e05d      	b.n	8001dfe <__aeabi_dsub+0x34e>
 8001d42:	4c38      	ldr	r4, [pc, #224]	; (8001e24 <__aeabi_dsub+0x374>)
 8001d44:	1c72      	adds	r2, r6, #1
 8001d46:	4222      	tst	r2, r4
 8001d48:	d000      	beq.n	8001d4c <__aeabi_dsub+0x29c>
 8001d4a:	e0df      	b.n	8001f0c <__aeabi_dsub+0x45c>
 8001d4c:	464a      	mov	r2, r9
 8001d4e:	431a      	orrs	r2, r3
 8001d50:	2e00      	cmp	r6, #0
 8001d52:	d000      	beq.n	8001d56 <__aeabi_dsub+0x2a6>
 8001d54:	e15c      	b.n	8002010 <__aeabi_dsub+0x560>
 8001d56:	2a00      	cmp	r2, #0
 8001d58:	d100      	bne.n	8001d5c <__aeabi_dsub+0x2ac>
 8001d5a:	e1cf      	b.n	80020fc <__aeabi_dsub+0x64c>
 8001d5c:	003a      	movs	r2, r7
 8001d5e:	4302      	orrs	r2, r0
 8001d60:	d100      	bne.n	8001d64 <__aeabi_dsub+0x2b4>
 8001d62:	e17f      	b.n	8002064 <__aeabi_dsub+0x5b4>
 8001d64:	1a1c      	subs	r4, r3, r0
 8001d66:	464a      	mov	r2, r9
 8001d68:	42a3      	cmp	r3, r4
 8001d6a:	4189      	sbcs	r1, r1
 8001d6c:	1bd2      	subs	r2, r2, r7
 8001d6e:	4249      	negs	r1, r1
 8001d70:	1a52      	subs	r2, r2, r1
 8001d72:	4692      	mov	sl, r2
 8001d74:	0212      	lsls	r2, r2, #8
 8001d76:	d400      	bmi.n	8001d7a <__aeabi_dsub+0x2ca>
 8001d78:	e20a      	b.n	8002190 <__aeabi_dsub+0x6e0>
 8001d7a:	1ac4      	subs	r4, r0, r3
 8001d7c:	42a0      	cmp	r0, r4
 8001d7e:	4180      	sbcs	r0, r0
 8001d80:	464b      	mov	r3, r9
 8001d82:	4240      	negs	r0, r0
 8001d84:	1aff      	subs	r7, r7, r3
 8001d86:	1a3b      	subs	r3, r7, r0
 8001d88:	469a      	mov	sl, r3
 8001d8a:	465d      	mov	r5, fp
 8001d8c:	e71a      	b.n	8001bc4 <__aeabi_dsub+0x114>
 8001d8e:	003a      	movs	r2, r7
 8001d90:	4302      	orrs	r2, r0
 8001d92:	d073      	beq.n	8001e7c <__aeabi_dsub+0x3cc>
 8001d94:	0022      	movs	r2, r4
 8001d96:	3a01      	subs	r2, #1
 8001d98:	2c01      	cmp	r4, #1
 8001d9a:	d100      	bne.n	8001d9e <__aeabi_dsub+0x2ee>
 8001d9c:	e0cb      	b.n	8001f36 <__aeabi_dsub+0x486>
 8001d9e:	4554      	cmp	r4, sl
 8001da0:	d042      	beq.n	8001e28 <__aeabi_dsub+0x378>
 8001da2:	4694      	mov	ip, r2
 8001da4:	e748      	b.n	8001c38 <__aeabi_dsub+0x188>
 8001da6:	0010      	movs	r0, r2
 8001da8:	3b1f      	subs	r3, #31
 8001daa:	40d8      	lsrs	r0, r3
 8001dac:	2920      	cmp	r1, #32
 8001dae:	d003      	beq.n	8001db8 <__aeabi_dsub+0x308>
 8001db0:	2340      	movs	r3, #64	; 0x40
 8001db2:	1a5b      	subs	r3, r3, r1
 8001db4:	409a      	lsls	r2, r3
 8001db6:	4314      	orrs	r4, r2
 8001db8:	1e63      	subs	r3, r4, #1
 8001dba:	419c      	sbcs	r4, r3
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	2600      	movs	r6, #0
 8001dc0:	469a      	mov	sl, r3
 8001dc2:	4304      	orrs	r4, r0
 8001dc4:	0763      	lsls	r3, r4, #29
 8001dc6:	d000      	beq.n	8001dca <__aeabi_dsub+0x31a>
 8001dc8:	e6fe      	b.n	8001bc8 <__aeabi_dsub+0x118>
 8001dca:	4652      	mov	r2, sl
 8001dcc:	08e3      	lsrs	r3, r4, #3
 8001dce:	0752      	lsls	r2, r2, #29
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	4652      	mov	r2, sl
 8001dd4:	46b4      	mov	ip, r6
 8001dd6:	08d2      	lsrs	r2, r2, #3
 8001dd8:	490f      	ldr	r1, [pc, #60]	; (8001e18 <__aeabi_dsub+0x368>)
 8001dda:	458c      	cmp	ip, r1
 8001ddc:	d02a      	beq.n	8001e34 <__aeabi_dsub+0x384>
 8001dde:	0312      	lsls	r2, r2, #12
 8001de0:	0b14      	lsrs	r4, r2, #12
 8001de2:	4662      	mov	r2, ip
 8001de4:	0552      	lsls	r2, r2, #21
 8001de6:	0d52      	lsrs	r2, r2, #21
 8001de8:	e70c      	b.n	8001c04 <__aeabi_dsub+0x154>
 8001dea:	003c      	movs	r4, r7
 8001dec:	4304      	orrs	r4, r0
 8001dee:	1e62      	subs	r2, r4, #1
 8001df0:	4194      	sbcs	r4, r2
 8001df2:	18e4      	adds	r4, r4, r3
 8001df4:	429c      	cmp	r4, r3
 8001df6:	4192      	sbcs	r2, r2
 8001df8:	4252      	negs	r2, r2
 8001dfa:	444a      	add	r2, r9
 8001dfc:	4692      	mov	sl, r2
 8001dfe:	4653      	mov	r3, sl
 8001e00:	021b      	lsls	r3, r3, #8
 8001e02:	d5df      	bpl.n	8001dc4 <__aeabi_dsub+0x314>
 8001e04:	4b04      	ldr	r3, [pc, #16]	; (8001e18 <__aeabi_dsub+0x368>)
 8001e06:	3601      	adds	r6, #1
 8001e08:	429e      	cmp	r6, r3
 8001e0a:	d000      	beq.n	8001e0e <__aeabi_dsub+0x35e>
 8001e0c:	e0a0      	b.n	8001f50 <__aeabi_dsub+0x4a0>
 8001e0e:	0032      	movs	r2, r6
 8001e10:	2400      	movs	r4, #0
 8001e12:	2300      	movs	r3, #0
 8001e14:	e6f6      	b.n	8001c04 <__aeabi_dsub+0x154>
 8001e16:	46c0      	nop			; (mov r8, r8)
 8001e18:	000007ff 	.word	0x000007ff
 8001e1c:	ff7fffff 	.word	0xff7fffff
 8001e20:	fffff801 	.word	0xfffff801
 8001e24:	000007fe 	.word	0x000007fe
 8001e28:	08db      	lsrs	r3, r3, #3
 8001e2a:	464a      	mov	r2, r9
 8001e2c:	0752      	lsls	r2, r2, #29
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	464a      	mov	r2, r9
 8001e32:	08d2      	lsrs	r2, r2, #3
 8001e34:	0019      	movs	r1, r3
 8001e36:	4311      	orrs	r1, r2
 8001e38:	d100      	bne.n	8001e3c <__aeabi_dsub+0x38c>
 8001e3a:	e1b5      	b.n	80021a8 <__aeabi_dsub+0x6f8>
 8001e3c:	2480      	movs	r4, #128	; 0x80
 8001e3e:	0324      	lsls	r4, r4, #12
 8001e40:	4314      	orrs	r4, r2
 8001e42:	0324      	lsls	r4, r4, #12
 8001e44:	4ad5      	ldr	r2, [pc, #852]	; (800219c <__aeabi_dsub+0x6ec>)
 8001e46:	0b24      	lsrs	r4, r4, #12
 8001e48:	e6dc      	b.n	8001c04 <__aeabi_dsub+0x154>
 8001e4a:	0020      	movs	r0, r4
 8001e4c:	f000 fae2 	bl	8002414 <__clzsi2>
 8001e50:	0003      	movs	r3, r0
 8001e52:	3318      	adds	r3, #24
 8001e54:	2b1f      	cmp	r3, #31
 8001e56:	dc00      	bgt.n	8001e5a <__aeabi_dsub+0x3aa>
 8001e58:	e695      	b.n	8001b86 <__aeabi_dsub+0xd6>
 8001e5a:	0022      	movs	r2, r4
 8001e5c:	3808      	subs	r0, #8
 8001e5e:	4082      	lsls	r2, r0
 8001e60:	2400      	movs	r4, #0
 8001e62:	429e      	cmp	r6, r3
 8001e64:	dc00      	bgt.n	8001e68 <__aeabi_dsub+0x3b8>
 8001e66:	e69a      	b.n	8001b9e <__aeabi_dsub+0xee>
 8001e68:	1af6      	subs	r6, r6, r3
 8001e6a:	4bcd      	ldr	r3, [pc, #820]	; (80021a0 <__aeabi_dsub+0x6f0>)
 8001e6c:	401a      	ands	r2, r3
 8001e6e:	4692      	mov	sl, r2
 8001e70:	e6a8      	b.n	8001bc4 <__aeabi_dsub+0x114>
 8001e72:	003c      	movs	r4, r7
 8001e74:	4304      	orrs	r4, r0
 8001e76:	1e62      	subs	r2, r4, #1
 8001e78:	4194      	sbcs	r4, r2
 8001e7a:	e66c      	b.n	8001b56 <__aeabi_dsub+0xa6>
 8001e7c:	464a      	mov	r2, r9
 8001e7e:	08db      	lsrs	r3, r3, #3
 8001e80:	0752      	lsls	r2, r2, #29
 8001e82:	4313      	orrs	r3, r2
 8001e84:	464a      	mov	r2, r9
 8001e86:	08d2      	lsrs	r2, r2, #3
 8001e88:	e7a6      	b.n	8001dd8 <__aeabi_dsub+0x328>
 8001e8a:	4cc6      	ldr	r4, [pc, #792]	; (80021a4 <__aeabi_dsub+0x6f4>)
 8001e8c:	1c72      	adds	r2, r6, #1
 8001e8e:	4222      	tst	r2, r4
 8001e90:	d000      	beq.n	8001e94 <__aeabi_dsub+0x3e4>
 8001e92:	e0ac      	b.n	8001fee <__aeabi_dsub+0x53e>
 8001e94:	464a      	mov	r2, r9
 8001e96:	431a      	orrs	r2, r3
 8001e98:	2e00      	cmp	r6, #0
 8001e9a:	d000      	beq.n	8001e9e <__aeabi_dsub+0x3ee>
 8001e9c:	e105      	b.n	80020aa <__aeabi_dsub+0x5fa>
 8001e9e:	2a00      	cmp	r2, #0
 8001ea0:	d100      	bne.n	8001ea4 <__aeabi_dsub+0x3f4>
 8001ea2:	e156      	b.n	8002152 <__aeabi_dsub+0x6a2>
 8001ea4:	003a      	movs	r2, r7
 8001ea6:	4302      	orrs	r2, r0
 8001ea8:	d100      	bne.n	8001eac <__aeabi_dsub+0x3fc>
 8001eaa:	e0db      	b.n	8002064 <__aeabi_dsub+0x5b4>
 8001eac:	181c      	adds	r4, r3, r0
 8001eae:	429c      	cmp	r4, r3
 8001eb0:	419b      	sbcs	r3, r3
 8001eb2:	444f      	add	r7, r9
 8001eb4:	46ba      	mov	sl, r7
 8001eb6:	425b      	negs	r3, r3
 8001eb8:	449a      	add	sl, r3
 8001eba:	4653      	mov	r3, sl
 8001ebc:	021b      	lsls	r3, r3, #8
 8001ebe:	d400      	bmi.n	8001ec2 <__aeabi_dsub+0x412>
 8001ec0:	e780      	b.n	8001dc4 <__aeabi_dsub+0x314>
 8001ec2:	4652      	mov	r2, sl
 8001ec4:	4bb6      	ldr	r3, [pc, #728]	; (80021a0 <__aeabi_dsub+0x6f0>)
 8001ec6:	2601      	movs	r6, #1
 8001ec8:	401a      	ands	r2, r3
 8001eca:	4692      	mov	sl, r2
 8001ecc:	e77a      	b.n	8001dc4 <__aeabi_dsub+0x314>
 8001ece:	4cb3      	ldr	r4, [pc, #716]	; (800219c <__aeabi_dsub+0x6ec>)
 8001ed0:	42a2      	cmp	r2, r4
 8001ed2:	d100      	bne.n	8001ed6 <__aeabi_dsub+0x426>
 8001ed4:	e0c0      	b.n	8002058 <__aeabi_dsub+0x5a8>
 8001ed6:	2480      	movs	r4, #128	; 0x80
 8001ed8:	464d      	mov	r5, r9
 8001eda:	0424      	lsls	r4, r4, #16
 8001edc:	4325      	orrs	r5, r4
 8001ede:	46a9      	mov	r9, r5
 8001ee0:	4664      	mov	r4, ip
 8001ee2:	2c38      	cmp	r4, #56	; 0x38
 8001ee4:	dc53      	bgt.n	8001f8e <__aeabi_dsub+0x4de>
 8001ee6:	4661      	mov	r1, ip
 8001ee8:	2c1f      	cmp	r4, #31
 8001eea:	dd00      	ble.n	8001eee <__aeabi_dsub+0x43e>
 8001eec:	e0cd      	b.n	800208a <__aeabi_dsub+0x5da>
 8001eee:	2520      	movs	r5, #32
 8001ef0:	001e      	movs	r6, r3
 8001ef2:	1b2d      	subs	r5, r5, r4
 8001ef4:	464c      	mov	r4, r9
 8001ef6:	40ab      	lsls	r3, r5
 8001ef8:	40ac      	lsls	r4, r5
 8001efa:	40ce      	lsrs	r6, r1
 8001efc:	1e5d      	subs	r5, r3, #1
 8001efe:	41ab      	sbcs	r3, r5
 8001f00:	4334      	orrs	r4, r6
 8001f02:	4323      	orrs	r3, r4
 8001f04:	464c      	mov	r4, r9
 8001f06:	40cc      	lsrs	r4, r1
 8001f08:	1b3f      	subs	r7, r7, r4
 8001f0a:	e045      	b.n	8001f98 <__aeabi_dsub+0x4e8>
 8001f0c:	464a      	mov	r2, r9
 8001f0e:	1a1c      	subs	r4, r3, r0
 8001f10:	1bd1      	subs	r1, r2, r7
 8001f12:	42a3      	cmp	r3, r4
 8001f14:	4192      	sbcs	r2, r2
 8001f16:	4252      	negs	r2, r2
 8001f18:	4692      	mov	sl, r2
 8001f1a:	000a      	movs	r2, r1
 8001f1c:	4651      	mov	r1, sl
 8001f1e:	1a52      	subs	r2, r2, r1
 8001f20:	4692      	mov	sl, r2
 8001f22:	0212      	lsls	r2, r2, #8
 8001f24:	d500      	bpl.n	8001f28 <__aeabi_dsub+0x478>
 8001f26:	e083      	b.n	8002030 <__aeabi_dsub+0x580>
 8001f28:	4653      	mov	r3, sl
 8001f2a:	4323      	orrs	r3, r4
 8001f2c:	d000      	beq.n	8001f30 <__aeabi_dsub+0x480>
 8001f2e:	e621      	b.n	8001b74 <__aeabi_dsub+0xc4>
 8001f30:	2200      	movs	r2, #0
 8001f32:	2500      	movs	r5, #0
 8001f34:	e753      	b.n	8001dde <__aeabi_dsub+0x32e>
 8001f36:	181c      	adds	r4, r3, r0
 8001f38:	429c      	cmp	r4, r3
 8001f3a:	419b      	sbcs	r3, r3
 8001f3c:	444f      	add	r7, r9
 8001f3e:	46ba      	mov	sl, r7
 8001f40:	425b      	negs	r3, r3
 8001f42:	449a      	add	sl, r3
 8001f44:	4653      	mov	r3, sl
 8001f46:	2601      	movs	r6, #1
 8001f48:	021b      	lsls	r3, r3, #8
 8001f4a:	d400      	bmi.n	8001f4e <__aeabi_dsub+0x49e>
 8001f4c:	e73a      	b.n	8001dc4 <__aeabi_dsub+0x314>
 8001f4e:	2602      	movs	r6, #2
 8001f50:	4652      	mov	r2, sl
 8001f52:	4b93      	ldr	r3, [pc, #588]	; (80021a0 <__aeabi_dsub+0x6f0>)
 8001f54:	2101      	movs	r1, #1
 8001f56:	401a      	ands	r2, r3
 8001f58:	0013      	movs	r3, r2
 8001f5a:	4021      	ands	r1, r4
 8001f5c:	0862      	lsrs	r2, r4, #1
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	07dc      	lsls	r4, r3, #31
 8001f62:	085b      	lsrs	r3, r3, #1
 8001f64:	469a      	mov	sl, r3
 8001f66:	4314      	orrs	r4, r2
 8001f68:	e62c      	b.n	8001bc4 <__aeabi_dsub+0x114>
 8001f6a:	0039      	movs	r1, r7
 8001f6c:	3a20      	subs	r2, #32
 8001f6e:	40d1      	lsrs	r1, r2
 8001f70:	4662      	mov	r2, ip
 8001f72:	2a20      	cmp	r2, #32
 8001f74:	d006      	beq.n	8001f84 <__aeabi_dsub+0x4d4>
 8001f76:	4664      	mov	r4, ip
 8001f78:	2240      	movs	r2, #64	; 0x40
 8001f7a:	1b12      	subs	r2, r2, r4
 8001f7c:	003c      	movs	r4, r7
 8001f7e:	4094      	lsls	r4, r2
 8001f80:	4304      	orrs	r4, r0
 8001f82:	9401      	str	r4, [sp, #4]
 8001f84:	9c01      	ldr	r4, [sp, #4]
 8001f86:	1e62      	subs	r2, r4, #1
 8001f88:	4194      	sbcs	r4, r2
 8001f8a:	430c      	orrs	r4, r1
 8001f8c:	e5e3      	b.n	8001b56 <__aeabi_dsub+0xa6>
 8001f8e:	4649      	mov	r1, r9
 8001f90:	4319      	orrs	r1, r3
 8001f92:	000b      	movs	r3, r1
 8001f94:	1e5c      	subs	r4, r3, #1
 8001f96:	41a3      	sbcs	r3, r4
 8001f98:	1ac4      	subs	r4, r0, r3
 8001f9a:	42a0      	cmp	r0, r4
 8001f9c:	419b      	sbcs	r3, r3
 8001f9e:	425b      	negs	r3, r3
 8001fa0:	1afb      	subs	r3, r7, r3
 8001fa2:	469a      	mov	sl, r3
 8001fa4:	465d      	mov	r5, fp
 8001fa6:	0016      	movs	r6, r2
 8001fa8:	e5dc      	b.n	8001b64 <__aeabi_dsub+0xb4>
 8001faa:	4649      	mov	r1, r9
 8001fac:	4319      	orrs	r1, r3
 8001fae:	d100      	bne.n	8001fb2 <__aeabi_dsub+0x502>
 8001fb0:	e0ae      	b.n	8002110 <__aeabi_dsub+0x660>
 8001fb2:	4661      	mov	r1, ip
 8001fb4:	4664      	mov	r4, ip
 8001fb6:	3901      	subs	r1, #1
 8001fb8:	2c01      	cmp	r4, #1
 8001fba:	d100      	bne.n	8001fbe <__aeabi_dsub+0x50e>
 8001fbc:	e0e0      	b.n	8002180 <__aeabi_dsub+0x6d0>
 8001fbe:	4c77      	ldr	r4, [pc, #476]	; (800219c <__aeabi_dsub+0x6ec>)
 8001fc0:	45a4      	cmp	ip, r4
 8001fc2:	d056      	beq.n	8002072 <__aeabi_dsub+0x5c2>
 8001fc4:	468c      	mov	ip, r1
 8001fc6:	e69a      	b.n	8001cfe <__aeabi_dsub+0x24e>
 8001fc8:	4661      	mov	r1, ip
 8001fca:	2220      	movs	r2, #32
 8001fcc:	003c      	movs	r4, r7
 8001fce:	1a52      	subs	r2, r2, r1
 8001fd0:	4094      	lsls	r4, r2
 8001fd2:	0001      	movs	r1, r0
 8001fd4:	4090      	lsls	r0, r2
 8001fd6:	46a0      	mov	r8, r4
 8001fd8:	4664      	mov	r4, ip
 8001fda:	1e42      	subs	r2, r0, #1
 8001fdc:	4190      	sbcs	r0, r2
 8001fde:	4662      	mov	r2, ip
 8001fe0:	40e1      	lsrs	r1, r4
 8001fe2:	4644      	mov	r4, r8
 8001fe4:	40d7      	lsrs	r7, r2
 8001fe6:	430c      	orrs	r4, r1
 8001fe8:	4304      	orrs	r4, r0
 8001fea:	44b9      	add	r9, r7
 8001fec:	e701      	b.n	8001df2 <__aeabi_dsub+0x342>
 8001fee:	496b      	ldr	r1, [pc, #428]	; (800219c <__aeabi_dsub+0x6ec>)
 8001ff0:	428a      	cmp	r2, r1
 8001ff2:	d100      	bne.n	8001ff6 <__aeabi_dsub+0x546>
 8001ff4:	e70c      	b.n	8001e10 <__aeabi_dsub+0x360>
 8001ff6:	1818      	adds	r0, r3, r0
 8001ff8:	4298      	cmp	r0, r3
 8001ffa:	419b      	sbcs	r3, r3
 8001ffc:	444f      	add	r7, r9
 8001ffe:	425b      	negs	r3, r3
 8002000:	18fb      	adds	r3, r7, r3
 8002002:	07dc      	lsls	r4, r3, #31
 8002004:	0840      	lsrs	r0, r0, #1
 8002006:	085b      	lsrs	r3, r3, #1
 8002008:	469a      	mov	sl, r3
 800200a:	0016      	movs	r6, r2
 800200c:	4304      	orrs	r4, r0
 800200e:	e6d9      	b.n	8001dc4 <__aeabi_dsub+0x314>
 8002010:	2a00      	cmp	r2, #0
 8002012:	d000      	beq.n	8002016 <__aeabi_dsub+0x566>
 8002014:	e081      	b.n	800211a <__aeabi_dsub+0x66a>
 8002016:	003b      	movs	r3, r7
 8002018:	4303      	orrs	r3, r0
 800201a:	d11d      	bne.n	8002058 <__aeabi_dsub+0x5a8>
 800201c:	2280      	movs	r2, #128	; 0x80
 800201e:	2500      	movs	r5, #0
 8002020:	0312      	lsls	r2, r2, #12
 8002022:	e70b      	b.n	8001e3c <__aeabi_dsub+0x38c>
 8002024:	08c0      	lsrs	r0, r0, #3
 8002026:	077b      	lsls	r3, r7, #29
 8002028:	465d      	mov	r5, fp
 800202a:	4303      	orrs	r3, r0
 800202c:	08fa      	lsrs	r2, r7, #3
 800202e:	e6d3      	b.n	8001dd8 <__aeabi_dsub+0x328>
 8002030:	1ac4      	subs	r4, r0, r3
 8002032:	42a0      	cmp	r0, r4
 8002034:	4180      	sbcs	r0, r0
 8002036:	464b      	mov	r3, r9
 8002038:	4240      	negs	r0, r0
 800203a:	1aff      	subs	r7, r7, r3
 800203c:	1a3b      	subs	r3, r7, r0
 800203e:	469a      	mov	sl, r3
 8002040:	465d      	mov	r5, fp
 8002042:	e597      	b.n	8001b74 <__aeabi_dsub+0xc4>
 8002044:	1a1c      	subs	r4, r3, r0
 8002046:	464a      	mov	r2, r9
 8002048:	42a3      	cmp	r3, r4
 800204a:	419b      	sbcs	r3, r3
 800204c:	1bd7      	subs	r7, r2, r7
 800204e:	425b      	negs	r3, r3
 8002050:	1afb      	subs	r3, r7, r3
 8002052:	469a      	mov	sl, r3
 8002054:	2601      	movs	r6, #1
 8002056:	e585      	b.n	8001b64 <__aeabi_dsub+0xb4>
 8002058:	08c0      	lsrs	r0, r0, #3
 800205a:	077b      	lsls	r3, r7, #29
 800205c:	465d      	mov	r5, fp
 800205e:	4303      	orrs	r3, r0
 8002060:	08fa      	lsrs	r2, r7, #3
 8002062:	e6e7      	b.n	8001e34 <__aeabi_dsub+0x384>
 8002064:	464a      	mov	r2, r9
 8002066:	08db      	lsrs	r3, r3, #3
 8002068:	0752      	lsls	r2, r2, #29
 800206a:	4313      	orrs	r3, r2
 800206c:	464a      	mov	r2, r9
 800206e:	08d2      	lsrs	r2, r2, #3
 8002070:	e6b5      	b.n	8001dde <__aeabi_dsub+0x32e>
 8002072:	08c0      	lsrs	r0, r0, #3
 8002074:	077b      	lsls	r3, r7, #29
 8002076:	4303      	orrs	r3, r0
 8002078:	08fa      	lsrs	r2, r7, #3
 800207a:	e6db      	b.n	8001e34 <__aeabi_dsub+0x384>
 800207c:	4649      	mov	r1, r9
 800207e:	4319      	orrs	r1, r3
 8002080:	000b      	movs	r3, r1
 8002082:	1e59      	subs	r1, r3, #1
 8002084:	418b      	sbcs	r3, r1
 8002086:	001c      	movs	r4, r3
 8002088:	e653      	b.n	8001d32 <__aeabi_dsub+0x282>
 800208a:	464d      	mov	r5, r9
 800208c:	3c20      	subs	r4, #32
 800208e:	40e5      	lsrs	r5, r4
 8002090:	2920      	cmp	r1, #32
 8002092:	d005      	beq.n	80020a0 <__aeabi_dsub+0x5f0>
 8002094:	2440      	movs	r4, #64	; 0x40
 8002096:	1a64      	subs	r4, r4, r1
 8002098:	4649      	mov	r1, r9
 800209a:	40a1      	lsls	r1, r4
 800209c:	430b      	orrs	r3, r1
 800209e:	4698      	mov	r8, r3
 80020a0:	4643      	mov	r3, r8
 80020a2:	1e5c      	subs	r4, r3, #1
 80020a4:	41a3      	sbcs	r3, r4
 80020a6:	432b      	orrs	r3, r5
 80020a8:	e776      	b.n	8001f98 <__aeabi_dsub+0x4e8>
 80020aa:	2a00      	cmp	r2, #0
 80020ac:	d0e1      	beq.n	8002072 <__aeabi_dsub+0x5c2>
 80020ae:	003a      	movs	r2, r7
 80020b0:	08db      	lsrs	r3, r3, #3
 80020b2:	4302      	orrs	r2, r0
 80020b4:	d100      	bne.n	80020b8 <__aeabi_dsub+0x608>
 80020b6:	e6b8      	b.n	8001e2a <__aeabi_dsub+0x37a>
 80020b8:	464a      	mov	r2, r9
 80020ba:	0752      	lsls	r2, r2, #29
 80020bc:	2480      	movs	r4, #128	; 0x80
 80020be:	4313      	orrs	r3, r2
 80020c0:	464a      	mov	r2, r9
 80020c2:	0324      	lsls	r4, r4, #12
 80020c4:	08d2      	lsrs	r2, r2, #3
 80020c6:	4222      	tst	r2, r4
 80020c8:	d007      	beq.n	80020da <__aeabi_dsub+0x62a>
 80020ca:	08fe      	lsrs	r6, r7, #3
 80020cc:	4226      	tst	r6, r4
 80020ce:	d104      	bne.n	80020da <__aeabi_dsub+0x62a>
 80020d0:	465d      	mov	r5, fp
 80020d2:	0032      	movs	r2, r6
 80020d4:	08c3      	lsrs	r3, r0, #3
 80020d6:	077f      	lsls	r7, r7, #29
 80020d8:	433b      	orrs	r3, r7
 80020da:	0f59      	lsrs	r1, r3, #29
 80020dc:	00db      	lsls	r3, r3, #3
 80020de:	0749      	lsls	r1, r1, #29
 80020e0:	08db      	lsrs	r3, r3, #3
 80020e2:	430b      	orrs	r3, r1
 80020e4:	e6a6      	b.n	8001e34 <__aeabi_dsub+0x384>
 80020e6:	1ac4      	subs	r4, r0, r3
 80020e8:	42a0      	cmp	r0, r4
 80020ea:	4180      	sbcs	r0, r0
 80020ec:	464b      	mov	r3, r9
 80020ee:	4240      	negs	r0, r0
 80020f0:	1aff      	subs	r7, r7, r3
 80020f2:	1a3b      	subs	r3, r7, r0
 80020f4:	469a      	mov	sl, r3
 80020f6:	465d      	mov	r5, fp
 80020f8:	2601      	movs	r6, #1
 80020fa:	e533      	b.n	8001b64 <__aeabi_dsub+0xb4>
 80020fc:	003b      	movs	r3, r7
 80020fe:	4303      	orrs	r3, r0
 8002100:	d100      	bne.n	8002104 <__aeabi_dsub+0x654>
 8002102:	e715      	b.n	8001f30 <__aeabi_dsub+0x480>
 8002104:	08c0      	lsrs	r0, r0, #3
 8002106:	077b      	lsls	r3, r7, #29
 8002108:	465d      	mov	r5, fp
 800210a:	4303      	orrs	r3, r0
 800210c:	08fa      	lsrs	r2, r7, #3
 800210e:	e666      	b.n	8001dde <__aeabi_dsub+0x32e>
 8002110:	08c0      	lsrs	r0, r0, #3
 8002112:	077b      	lsls	r3, r7, #29
 8002114:	4303      	orrs	r3, r0
 8002116:	08fa      	lsrs	r2, r7, #3
 8002118:	e65e      	b.n	8001dd8 <__aeabi_dsub+0x328>
 800211a:	003a      	movs	r2, r7
 800211c:	08db      	lsrs	r3, r3, #3
 800211e:	4302      	orrs	r2, r0
 8002120:	d100      	bne.n	8002124 <__aeabi_dsub+0x674>
 8002122:	e682      	b.n	8001e2a <__aeabi_dsub+0x37a>
 8002124:	464a      	mov	r2, r9
 8002126:	0752      	lsls	r2, r2, #29
 8002128:	2480      	movs	r4, #128	; 0x80
 800212a:	4313      	orrs	r3, r2
 800212c:	464a      	mov	r2, r9
 800212e:	0324      	lsls	r4, r4, #12
 8002130:	08d2      	lsrs	r2, r2, #3
 8002132:	4222      	tst	r2, r4
 8002134:	d007      	beq.n	8002146 <__aeabi_dsub+0x696>
 8002136:	08fe      	lsrs	r6, r7, #3
 8002138:	4226      	tst	r6, r4
 800213a:	d104      	bne.n	8002146 <__aeabi_dsub+0x696>
 800213c:	465d      	mov	r5, fp
 800213e:	0032      	movs	r2, r6
 8002140:	08c3      	lsrs	r3, r0, #3
 8002142:	077f      	lsls	r7, r7, #29
 8002144:	433b      	orrs	r3, r7
 8002146:	0f59      	lsrs	r1, r3, #29
 8002148:	00db      	lsls	r3, r3, #3
 800214a:	08db      	lsrs	r3, r3, #3
 800214c:	0749      	lsls	r1, r1, #29
 800214e:	430b      	orrs	r3, r1
 8002150:	e670      	b.n	8001e34 <__aeabi_dsub+0x384>
 8002152:	08c0      	lsrs	r0, r0, #3
 8002154:	077b      	lsls	r3, r7, #29
 8002156:	4303      	orrs	r3, r0
 8002158:	08fa      	lsrs	r2, r7, #3
 800215a:	e640      	b.n	8001dde <__aeabi_dsub+0x32e>
 800215c:	464c      	mov	r4, r9
 800215e:	3920      	subs	r1, #32
 8002160:	40cc      	lsrs	r4, r1
 8002162:	4661      	mov	r1, ip
 8002164:	2920      	cmp	r1, #32
 8002166:	d006      	beq.n	8002176 <__aeabi_dsub+0x6c6>
 8002168:	4666      	mov	r6, ip
 800216a:	2140      	movs	r1, #64	; 0x40
 800216c:	1b89      	subs	r1, r1, r6
 800216e:	464e      	mov	r6, r9
 8002170:	408e      	lsls	r6, r1
 8002172:	4333      	orrs	r3, r6
 8002174:	4698      	mov	r8, r3
 8002176:	4643      	mov	r3, r8
 8002178:	1e59      	subs	r1, r3, #1
 800217a:	418b      	sbcs	r3, r1
 800217c:	431c      	orrs	r4, r3
 800217e:	e5d8      	b.n	8001d32 <__aeabi_dsub+0x282>
 8002180:	181c      	adds	r4, r3, r0
 8002182:	4284      	cmp	r4, r0
 8002184:	4180      	sbcs	r0, r0
 8002186:	444f      	add	r7, r9
 8002188:	46ba      	mov	sl, r7
 800218a:	4240      	negs	r0, r0
 800218c:	4482      	add	sl, r0
 800218e:	e6d9      	b.n	8001f44 <__aeabi_dsub+0x494>
 8002190:	4653      	mov	r3, sl
 8002192:	4323      	orrs	r3, r4
 8002194:	d100      	bne.n	8002198 <__aeabi_dsub+0x6e8>
 8002196:	e6cb      	b.n	8001f30 <__aeabi_dsub+0x480>
 8002198:	e614      	b.n	8001dc4 <__aeabi_dsub+0x314>
 800219a:	46c0      	nop			; (mov r8, r8)
 800219c:	000007ff 	.word	0x000007ff
 80021a0:	ff7fffff 	.word	0xff7fffff
 80021a4:	000007fe 	.word	0x000007fe
 80021a8:	2300      	movs	r3, #0
 80021aa:	4a01      	ldr	r2, [pc, #4]	; (80021b0 <__aeabi_dsub+0x700>)
 80021ac:	001c      	movs	r4, r3
 80021ae:	e529      	b.n	8001c04 <__aeabi_dsub+0x154>
 80021b0:	000007ff 	.word	0x000007ff

080021b4 <__aeabi_dcmpun>:
 80021b4:	b570      	push	{r4, r5, r6, lr}
 80021b6:	0005      	movs	r5, r0
 80021b8:	480c      	ldr	r0, [pc, #48]	; (80021ec <__aeabi_dcmpun+0x38>)
 80021ba:	031c      	lsls	r4, r3, #12
 80021bc:	0016      	movs	r6, r2
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	030a      	lsls	r2, r1, #12
 80021c2:	0049      	lsls	r1, r1, #1
 80021c4:	0b12      	lsrs	r2, r2, #12
 80021c6:	0d49      	lsrs	r1, r1, #21
 80021c8:	0b24      	lsrs	r4, r4, #12
 80021ca:	0d5b      	lsrs	r3, r3, #21
 80021cc:	4281      	cmp	r1, r0
 80021ce:	d008      	beq.n	80021e2 <__aeabi_dcmpun+0x2e>
 80021d0:	4a06      	ldr	r2, [pc, #24]	; (80021ec <__aeabi_dcmpun+0x38>)
 80021d2:	2000      	movs	r0, #0
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d103      	bne.n	80021e0 <__aeabi_dcmpun+0x2c>
 80021d8:	0020      	movs	r0, r4
 80021da:	4330      	orrs	r0, r6
 80021dc:	1e43      	subs	r3, r0, #1
 80021de:	4198      	sbcs	r0, r3
 80021e0:	bd70      	pop	{r4, r5, r6, pc}
 80021e2:	2001      	movs	r0, #1
 80021e4:	432a      	orrs	r2, r5
 80021e6:	d1fb      	bne.n	80021e0 <__aeabi_dcmpun+0x2c>
 80021e8:	e7f2      	b.n	80021d0 <__aeabi_dcmpun+0x1c>
 80021ea:	46c0      	nop			; (mov r8, r8)
 80021ec:	000007ff 	.word	0x000007ff

080021f0 <__aeabi_d2iz>:
 80021f0:	000a      	movs	r2, r1
 80021f2:	b530      	push	{r4, r5, lr}
 80021f4:	4c13      	ldr	r4, [pc, #76]	; (8002244 <__aeabi_d2iz+0x54>)
 80021f6:	0053      	lsls	r3, r2, #1
 80021f8:	0309      	lsls	r1, r1, #12
 80021fa:	0005      	movs	r5, r0
 80021fc:	0b09      	lsrs	r1, r1, #12
 80021fe:	2000      	movs	r0, #0
 8002200:	0d5b      	lsrs	r3, r3, #21
 8002202:	0fd2      	lsrs	r2, r2, #31
 8002204:	42a3      	cmp	r3, r4
 8002206:	dd04      	ble.n	8002212 <__aeabi_d2iz+0x22>
 8002208:	480f      	ldr	r0, [pc, #60]	; (8002248 <__aeabi_d2iz+0x58>)
 800220a:	4283      	cmp	r3, r0
 800220c:	dd02      	ble.n	8002214 <__aeabi_d2iz+0x24>
 800220e:	4b0f      	ldr	r3, [pc, #60]	; (800224c <__aeabi_d2iz+0x5c>)
 8002210:	18d0      	adds	r0, r2, r3
 8002212:	bd30      	pop	{r4, r5, pc}
 8002214:	2080      	movs	r0, #128	; 0x80
 8002216:	0340      	lsls	r0, r0, #13
 8002218:	4301      	orrs	r1, r0
 800221a:	480d      	ldr	r0, [pc, #52]	; (8002250 <__aeabi_d2iz+0x60>)
 800221c:	1ac0      	subs	r0, r0, r3
 800221e:	281f      	cmp	r0, #31
 8002220:	dd08      	ble.n	8002234 <__aeabi_d2iz+0x44>
 8002222:	480c      	ldr	r0, [pc, #48]	; (8002254 <__aeabi_d2iz+0x64>)
 8002224:	1ac3      	subs	r3, r0, r3
 8002226:	40d9      	lsrs	r1, r3
 8002228:	000b      	movs	r3, r1
 800222a:	4258      	negs	r0, r3
 800222c:	2a00      	cmp	r2, #0
 800222e:	d1f0      	bne.n	8002212 <__aeabi_d2iz+0x22>
 8002230:	0018      	movs	r0, r3
 8002232:	e7ee      	b.n	8002212 <__aeabi_d2iz+0x22>
 8002234:	4c08      	ldr	r4, [pc, #32]	; (8002258 <__aeabi_d2iz+0x68>)
 8002236:	40c5      	lsrs	r5, r0
 8002238:	46a4      	mov	ip, r4
 800223a:	4463      	add	r3, ip
 800223c:	4099      	lsls	r1, r3
 800223e:	000b      	movs	r3, r1
 8002240:	432b      	orrs	r3, r5
 8002242:	e7f2      	b.n	800222a <__aeabi_d2iz+0x3a>
 8002244:	000003fe 	.word	0x000003fe
 8002248:	0000041d 	.word	0x0000041d
 800224c:	7fffffff 	.word	0x7fffffff
 8002250:	00000433 	.word	0x00000433
 8002254:	00000413 	.word	0x00000413
 8002258:	fffffbed 	.word	0xfffffbed

0800225c <__aeabi_i2d>:
 800225c:	b570      	push	{r4, r5, r6, lr}
 800225e:	2800      	cmp	r0, #0
 8002260:	d016      	beq.n	8002290 <__aeabi_i2d+0x34>
 8002262:	17c3      	asrs	r3, r0, #31
 8002264:	18c5      	adds	r5, r0, r3
 8002266:	405d      	eors	r5, r3
 8002268:	0fc4      	lsrs	r4, r0, #31
 800226a:	0028      	movs	r0, r5
 800226c:	f000 f8d2 	bl	8002414 <__clzsi2>
 8002270:	4b11      	ldr	r3, [pc, #68]	; (80022b8 <__aeabi_i2d+0x5c>)
 8002272:	1a1b      	subs	r3, r3, r0
 8002274:	280a      	cmp	r0, #10
 8002276:	dc16      	bgt.n	80022a6 <__aeabi_i2d+0x4a>
 8002278:	0002      	movs	r2, r0
 800227a:	002e      	movs	r6, r5
 800227c:	3215      	adds	r2, #21
 800227e:	4096      	lsls	r6, r2
 8002280:	220b      	movs	r2, #11
 8002282:	1a12      	subs	r2, r2, r0
 8002284:	40d5      	lsrs	r5, r2
 8002286:	055b      	lsls	r3, r3, #21
 8002288:	032d      	lsls	r5, r5, #12
 800228a:	0b2d      	lsrs	r5, r5, #12
 800228c:	0d5b      	lsrs	r3, r3, #21
 800228e:	e003      	b.n	8002298 <__aeabi_i2d+0x3c>
 8002290:	2400      	movs	r4, #0
 8002292:	2300      	movs	r3, #0
 8002294:	2500      	movs	r5, #0
 8002296:	2600      	movs	r6, #0
 8002298:	051b      	lsls	r3, r3, #20
 800229a:	432b      	orrs	r3, r5
 800229c:	07e4      	lsls	r4, r4, #31
 800229e:	4323      	orrs	r3, r4
 80022a0:	0030      	movs	r0, r6
 80022a2:	0019      	movs	r1, r3
 80022a4:	bd70      	pop	{r4, r5, r6, pc}
 80022a6:	380b      	subs	r0, #11
 80022a8:	4085      	lsls	r5, r0
 80022aa:	055b      	lsls	r3, r3, #21
 80022ac:	032d      	lsls	r5, r5, #12
 80022ae:	2600      	movs	r6, #0
 80022b0:	0b2d      	lsrs	r5, r5, #12
 80022b2:	0d5b      	lsrs	r3, r3, #21
 80022b4:	e7f0      	b.n	8002298 <__aeabi_i2d+0x3c>
 80022b6:	46c0      	nop			; (mov r8, r8)
 80022b8:	0000041e 	.word	0x0000041e

080022bc <__aeabi_ui2d>:
 80022bc:	b510      	push	{r4, lr}
 80022be:	1e04      	subs	r4, r0, #0
 80022c0:	d010      	beq.n	80022e4 <__aeabi_ui2d+0x28>
 80022c2:	f000 f8a7 	bl	8002414 <__clzsi2>
 80022c6:	4b0f      	ldr	r3, [pc, #60]	; (8002304 <__aeabi_ui2d+0x48>)
 80022c8:	1a1b      	subs	r3, r3, r0
 80022ca:	280a      	cmp	r0, #10
 80022cc:	dc11      	bgt.n	80022f2 <__aeabi_ui2d+0x36>
 80022ce:	220b      	movs	r2, #11
 80022d0:	0021      	movs	r1, r4
 80022d2:	1a12      	subs	r2, r2, r0
 80022d4:	40d1      	lsrs	r1, r2
 80022d6:	3015      	adds	r0, #21
 80022d8:	030a      	lsls	r2, r1, #12
 80022da:	055b      	lsls	r3, r3, #21
 80022dc:	4084      	lsls	r4, r0
 80022de:	0b12      	lsrs	r2, r2, #12
 80022e0:	0d5b      	lsrs	r3, r3, #21
 80022e2:	e001      	b.n	80022e8 <__aeabi_ui2d+0x2c>
 80022e4:	2300      	movs	r3, #0
 80022e6:	2200      	movs	r2, #0
 80022e8:	051b      	lsls	r3, r3, #20
 80022ea:	4313      	orrs	r3, r2
 80022ec:	0020      	movs	r0, r4
 80022ee:	0019      	movs	r1, r3
 80022f0:	bd10      	pop	{r4, pc}
 80022f2:	0022      	movs	r2, r4
 80022f4:	380b      	subs	r0, #11
 80022f6:	4082      	lsls	r2, r0
 80022f8:	055b      	lsls	r3, r3, #21
 80022fa:	0312      	lsls	r2, r2, #12
 80022fc:	2400      	movs	r4, #0
 80022fe:	0b12      	lsrs	r2, r2, #12
 8002300:	0d5b      	lsrs	r3, r3, #21
 8002302:	e7f1      	b.n	80022e8 <__aeabi_ui2d+0x2c>
 8002304:	0000041e 	.word	0x0000041e

08002308 <__aeabi_d2f>:
 8002308:	0002      	movs	r2, r0
 800230a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800230c:	004b      	lsls	r3, r1, #1
 800230e:	030d      	lsls	r5, r1, #12
 8002310:	0f40      	lsrs	r0, r0, #29
 8002312:	0d5b      	lsrs	r3, r3, #21
 8002314:	0fcc      	lsrs	r4, r1, #31
 8002316:	0a6d      	lsrs	r5, r5, #9
 8002318:	493a      	ldr	r1, [pc, #232]	; (8002404 <__aeabi_d2f+0xfc>)
 800231a:	4305      	orrs	r5, r0
 800231c:	1c58      	adds	r0, r3, #1
 800231e:	00d7      	lsls	r7, r2, #3
 8002320:	4208      	tst	r0, r1
 8002322:	d00a      	beq.n	800233a <__aeabi_d2f+0x32>
 8002324:	4938      	ldr	r1, [pc, #224]	; (8002408 <__aeabi_d2f+0x100>)
 8002326:	1859      	adds	r1, r3, r1
 8002328:	29fe      	cmp	r1, #254	; 0xfe
 800232a:	dd16      	ble.n	800235a <__aeabi_d2f+0x52>
 800232c:	20ff      	movs	r0, #255	; 0xff
 800232e:	2200      	movs	r2, #0
 8002330:	05c0      	lsls	r0, r0, #23
 8002332:	4310      	orrs	r0, r2
 8002334:	07e4      	lsls	r4, r4, #31
 8002336:	4320      	orrs	r0, r4
 8002338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800233a:	2b00      	cmp	r3, #0
 800233c:	d106      	bne.n	800234c <__aeabi_d2f+0x44>
 800233e:	433d      	orrs	r5, r7
 8002340:	d026      	beq.n	8002390 <__aeabi_d2f+0x88>
 8002342:	2205      	movs	r2, #5
 8002344:	0192      	lsls	r2, r2, #6
 8002346:	0a52      	lsrs	r2, r2, #9
 8002348:	b2d8      	uxtb	r0, r3
 800234a:	e7f1      	b.n	8002330 <__aeabi_d2f+0x28>
 800234c:	432f      	orrs	r7, r5
 800234e:	d0ed      	beq.n	800232c <__aeabi_d2f+0x24>
 8002350:	2280      	movs	r2, #128	; 0x80
 8002352:	03d2      	lsls	r2, r2, #15
 8002354:	20ff      	movs	r0, #255	; 0xff
 8002356:	432a      	orrs	r2, r5
 8002358:	e7ea      	b.n	8002330 <__aeabi_d2f+0x28>
 800235a:	2900      	cmp	r1, #0
 800235c:	dd1b      	ble.n	8002396 <__aeabi_d2f+0x8e>
 800235e:	0192      	lsls	r2, r2, #6
 8002360:	1e50      	subs	r0, r2, #1
 8002362:	4182      	sbcs	r2, r0
 8002364:	00ed      	lsls	r5, r5, #3
 8002366:	0f7f      	lsrs	r7, r7, #29
 8002368:	432a      	orrs	r2, r5
 800236a:	433a      	orrs	r2, r7
 800236c:	0753      	lsls	r3, r2, #29
 800236e:	d047      	beq.n	8002400 <__aeabi_d2f+0xf8>
 8002370:	230f      	movs	r3, #15
 8002372:	4013      	ands	r3, r2
 8002374:	2b04      	cmp	r3, #4
 8002376:	d000      	beq.n	800237a <__aeabi_d2f+0x72>
 8002378:	3204      	adds	r2, #4
 800237a:	2380      	movs	r3, #128	; 0x80
 800237c:	04db      	lsls	r3, r3, #19
 800237e:	4013      	ands	r3, r2
 8002380:	d03e      	beq.n	8002400 <__aeabi_d2f+0xf8>
 8002382:	1c48      	adds	r0, r1, #1
 8002384:	29fe      	cmp	r1, #254	; 0xfe
 8002386:	d0d1      	beq.n	800232c <__aeabi_d2f+0x24>
 8002388:	0192      	lsls	r2, r2, #6
 800238a:	0a52      	lsrs	r2, r2, #9
 800238c:	b2c0      	uxtb	r0, r0
 800238e:	e7cf      	b.n	8002330 <__aeabi_d2f+0x28>
 8002390:	2000      	movs	r0, #0
 8002392:	2200      	movs	r2, #0
 8002394:	e7cc      	b.n	8002330 <__aeabi_d2f+0x28>
 8002396:	000a      	movs	r2, r1
 8002398:	3217      	adds	r2, #23
 800239a:	db2f      	blt.n	80023fc <__aeabi_d2f+0xf4>
 800239c:	2680      	movs	r6, #128	; 0x80
 800239e:	0436      	lsls	r6, r6, #16
 80023a0:	432e      	orrs	r6, r5
 80023a2:	251e      	movs	r5, #30
 80023a4:	1a6d      	subs	r5, r5, r1
 80023a6:	2d1f      	cmp	r5, #31
 80023a8:	dd11      	ble.n	80023ce <__aeabi_d2f+0xc6>
 80023aa:	2202      	movs	r2, #2
 80023ac:	4252      	negs	r2, r2
 80023ae:	1a52      	subs	r2, r2, r1
 80023b0:	0031      	movs	r1, r6
 80023b2:	40d1      	lsrs	r1, r2
 80023b4:	2d20      	cmp	r5, #32
 80023b6:	d004      	beq.n	80023c2 <__aeabi_d2f+0xba>
 80023b8:	4a14      	ldr	r2, [pc, #80]	; (800240c <__aeabi_d2f+0x104>)
 80023ba:	4694      	mov	ip, r2
 80023bc:	4463      	add	r3, ip
 80023be:	409e      	lsls	r6, r3
 80023c0:	4337      	orrs	r7, r6
 80023c2:	003a      	movs	r2, r7
 80023c4:	1e53      	subs	r3, r2, #1
 80023c6:	419a      	sbcs	r2, r3
 80023c8:	430a      	orrs	r2, r1
 80023ca:	2100      	movs	r1, #0
 80023cc:	e7ce      	b.n	800236c <__aeabi_d2f+0x64>
 80023ce:	4a10      	ldr	r2, [pc, #64]	; (8002410 <__aeabi_d2f+0x108>)
 80023d0:	0038      	movs	r0, r7
 80023d2:	4694      	mov	ip, r2
 80023d4:	4463      	add	r3, ip
 80023d6:	4098      	lsls	r0, r3
 80023d8:	003a      	movs	r2, r7
 80023da:	1e41      	subs	r1, r0, #1
 80023dc:	4188      	sbcs	r0, r1
 80023de:	409e      	lsls	r6, r3
 80023e0:	40ea      	lsrs	r2, r5
 80023e2:	4330      	orrs	r0, r6
 80023e4:	4302      	orrs	r2, r0
 80023e6:	2100      	movs	r1, #0
 80023e8:	0753      	lsls	r3, r2, #29
 80023ea:	d1c1      	bne.n	8002370 <__aeabi_d2f+0x68>
 80023ec:	2180      	movs	r1, #128	; 0x80
 80023ee:	0013      	movs	r3, r2
 80023f0:	04c9      	lsls	r1, r1, #19
 80023f2:	2001      	movs	r0, #1
 80023f4:	400b      	ands	r3, r1
 80023f6:	420a      	tst	r2, r1
 80023f8:	d1c6      	bne.n	8002388 <__aeabi_d2f+0x80>
 80023fa:	e7a3      	b.n	8002344 <__aeabi_d2f+0x3c>
 80023fc:	2300      	movs	r3, #0
 80023fe:	e7a0      	b.n	8002342 <__aeabi_d2f+0x3a>
 8002400:	000b      	movs	r3, r1
 8002402:	e79f      	b.n	8002344 <__aeabi_d2f+0x3c>
 8002404:	000007fe 	.word	0x000007fe
 8002408:	fffffc80 	.word	0xfffffc80
 800240c:	fffffca2 	.word	0xfffffca2
 8002410:	fffffc82 	.word	0xfffffc82

08002414 <__clzsi2>:
 8002414:	211c      	movs	r1, #28
 8002416:	2301      	movs	r3, #1
 8002418:	041b      	lsls	r3, r3, #16
 800241a:	4298      	cmp	r0, r3
 800241c:	d301      	bcc.n	8002422 <__clzsi2+0xe>
 800241e:	0c00      	lsrs	r0, r0, #16
 8002420:	3910      	subs	r1, #16
 8002422:	0a1b      	lsrs	r3, r3, #8
 8002424:	4298      	cmp	r0, r3
 8002426:	d301      	bcc.n	800242c <__clzsi2+0x18>
 8002428:	0a00      	lsrs	r0, r0, #8
 800242a:	3908      	subs	r1, #8
 800242c:	091b      	lsrs	r3, r3, #4
 800242e:	4298      	cmp	r0, r3
 8002430:	d301      	bcc.n	8002436 <__clzsi2+0x22>
 8002432:	0900      	lsrs	r0, r0, #4
 8002434:	3904      	subs	r1, #4
 8002436:	a202      	add	r2, pc, #8	; (adr r2, 8002440 <__clzsi2+0x2c>)
 8002438:	5c10      	ldrb	r0, [r2, r0]
 800243a:	1840      	adds	r0, r0, r1
 800243c:	4770      	bx	lr
 800243e:	46c0      	nop			; (mov r8, r8)
 8002440:	02020304 	.word	0x02020304
 8002444:	01010101 	.word	0x01010101
	...

08002450 <moveSnake>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//Funkcje do snake'a
void moveSnake(uint8_t leftOrRight) {
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	0002      	movs	r2, r0
 8002458:	1dfb      	adds	r3, r7, #7
 800245a:	701a      	strb	r2, [r3, #0]
	for (int i = snakeLenth; i > 0; i--) {
 800245c:	4b8f      	ldr	r3, [pc, #572]	; (800269c <moveSnake+0x24c>)
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	b2db      	uxtb	r3, r3
 8002462:	60fb      	str	r3, [r7, #12]
 8002464:	e016      	b.n	8002494 <moveSnake+0x44>
		xCord[i] = xCord[i - 1];
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	3b01      	subs	r3, #1
 800246a:	4a8d      	ldr	r2, [pc, #564]	; (80026a0 <moveSnake+0x250>)
 800246c:	5cd3      	ldrb	r3, [r2, r3]
 800246e:	b2d9      	uxtb	r1, r3
 8002470:	4a8b      	ldr	r2, [pc, #556]	; (80026a0 <moveSnake+0x250>)
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	18d3      	adds	r3, r2, r3
 8002476:	1c0a      	adds	r2, r1, #0
 8002478:	701a      	strb	r2, [r3, #0]
		yCord[i] = yCord[i - 1];
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	3b01      	subs	r3, #1
 800247e:	4a89      	ldr	r2, [pc, #548]	; (80026a4 <moveSnake+0x254>)
 8002480:	5cd3      	ldrb	r3, [r2, r3]
 8002482:	b2d9      	uxtb	r1, r3
 8002484:	4a87      	ldr	r2, [pc, #540]	; (80026a4 <moveSnake+0x254>)
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	18d3      	adds	r3, r2, r3
 800248a:	1c0a      	adds	r2, r1, #0
 800248c:	701a      	strb	r2, [r3, #0]
	for (int i = snakeLenth; i > 0; i--) {
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	3b01      	subs	r3, #1
 8002492:	60fb      	str	r3, [r7, #12]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2b00      	cmp	r3, #0
 8002498:	dce5      	bgt.n	8002466 <moveSnake+0x16>
	}
	switch (snakeDir) {
 800249a:	4b83      	ldr	r3, [pc, #524]	; (80026a8 <moveSnake+0x258>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	2b04      	cmp	r3, #4
 80024a2:	d020      	beq.n	80024e6 <moveSnake+0x96>
 80024a4:	dc27      	bgt.n	80024f6 <moveSnake+0xa6>
 80024a6:	2b03      	cmp	r3, #3
 80024a8:	d015      	beq.n	80024d6 <moveSnake+0x86>
 80024aa:	dc24      	bgt.n	80024f6 <moveSnake+0xa6>
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d002      	beq.n	80024b6 <moveSnake+0x66>
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d008      	beq.n	80024c6 <moveSnake+0x76>
 80024b4:	e01f      	b.n	80024f6 <moveSnake+0xa6>
	case 1:
		yCord[0]--;
 80024b6:	4b7b      	ldr	r3, [pc, #492]	; (80026a4 <moveSnake+0x254>)
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	3b01      	subs	r3, #1
 80024be:	b2da      	uxtb	r2, r3
 80024c0:	4b78      	ldr	r3, [pc, #480]	; (80026a4 <moveSnake+0x254>)
 80024c2:	701a      	strb	r2, [r3, #0]
		break;
 80024c4:	e017      	b.n	80024f6 <moveSnake+0xa6>
	case 2:
		xCord[0]++;
 80024c6:	4b76      	ldr	r3, [pc, #472]	; (80026a0 <moveSnake+0x250>)
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	3301      	adds	r3, #1
 80024ce:	b2da      	uxtb	r2, r3
 80024d0:	4b73      	ldr	r3, [pc, #460]	; (80026a0 <moveSnake+0x250>)
 80024d2:	701a      	strb	r2, [r3, #0]
		break;
 80024d4:	e00f      	b.n	80024f6 <moveSnake+0xa6>
	case 3:
		yCord[0]++;
 80024d6:	4b73      	ldr	r3, [pc, #460]	; (80026a4 <moveSnake+0x254>)
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	3301      	adds	r3, #1
 80024de:	b2da      	uxtb	r2, r3
 80024e0:	4b70      	ldr	r3, [pc, #448]	; (80026a4 <moveSnake+0x254>)
 80024e2:	701a      	strb	r2, [r3, #0]
		break;
 80024e4:	e007      	b.n	80024f6 <moveSnake+0xa6>
	case 4:
		xCord[0]--;
 80024e6:	4b6e      	ldr	r3, [pc, #440]	; (80026a0 <moveSnake+0x250>)
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	3b01      	subs	r3, #1
 80024ee:	b2da      	uxtb	r2, r3
 80024f0:	4b6b      	ldr	r3, [pc, #428]	; (80026a0 <moveSnake+0x250>)
 80024f2:	701a      	strb	r2, [r3, #0]
		break;
 80024f4:	46c0      	nop			; (mov r8, r8)
	}

	if (leftOrRight == 1) {
 80024f6:	1dfb      	adds	r3, r7, #7
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d13b      	bne.n	8002576 <moveSnake+0x126>
		switch (snakeDir) {
 80024fe:	4b6a      	ldr	r3, [pc, #424]	; (80026a8 <moveSnake+0x258>)
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	b2db      	uxtb	r3, r3
 8002504:	2b04      	cmp	r3, #4
 8002506:	d02b      	beq.n	8002560 <moveSnake+0x110>
 8002508:	dd00      	ble.n	800250c <moveSnake+0xbc>
 800250a:	e0a1      	b.n	8002650 <moveSnake+0x200>
 800250c:	2b03      	cmp	r3, #3
 800250e:	d01c      	beq.n	800254a <moveSnake+0xfa>
 8002510:	dd00      	ble.n	8002514 <moveSnake+0xc4>
 8002512:	e09d      	b.n	8002650 <moveSnake+0x200>
 8002514:	2b01      	cmp	r3, #1
 8002516:	d002      	beq.n	800251e <moveSnake+0xce>
 8002518:	2b02      	cmp	r3, #2
 800251a:	d00b      	beq.n	8002534 <moveSnake+0xe4>
 800251c:	e098      	b.n	8002650 <moveSnake+0x200>
		case 1:
			xCord[0]--;
 800251e:	4b60      	ldr	r3, [pc, #384]	; (80026a0 <moveSnake+0x250>)
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	b2db      	uxtb	r3, r3
 8002524:	3b01      	subs	r3, #1
 8002526:	b2da      	uxtb	r2, r3
 8002528:	4b5d      	ldr	r3, [pc, #372]	; (80026a0 <moveSnake+0x250>)
 800252a:	701a      	strb	r2, [r3, #0]
			snakeDir = 4;
 800252c:	4b5e      	ldr	r3, [pc, #376]	; (80026a8 <moveSnake+0x258>)
 800252e:	2204      	movs	r2, #4
 8002530:	701a      	strb	r2, [r3, #0]
			break;
 8002532:	e08d      	b.n	8002650 <moveSnake+0x200>
		case 2:
			yCord[0]--;
 8002534:	4b5b      	ldr	r3, [pc, #364]	; (80026a4 <moveSnake+0x254>)
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	b2db      	uxtb	r3, r3
 800253a:	3b01      	subs	r3, #1
 800253c:	b2da      	uxtb	r2, r3
 800253e:	4b59      	ldr	r3, [pc, #356]	; (80026a4 <moveSnake+0x254>)
 8002540:	701a      	strb	r2, [r3, #0]
			snakeDir = 1;
 8002542:	4b59      	ldr	r3, [pc, #356]	; (80026a8 <moveSnake+0x258>)
 8002544:	2201      	movs	r2, #1
 8002546:	701a      	strb	r2, [r3, #0]
			break;
 8002548:	e082      	b.n	8002650 <moveSnake+0x200>
		case 3:
			xCord[0]++;
 800254a:	4b55      	ldr	r3, [pc, #340]	; (80026a0 <moveSnake+0x250>)
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	b2db      	uxtb	r3, r3
 8002550:	3301      	adds	r3, #1
 8002552:	b2da      	uxtb	r2, r3
 8002554:	4b52      	ldr	r3, [pc, #328]	; (80026a0 <moveSnake+0x250>)
 8002556:	701a      	strb	r2, [r3, #0]
			snakeDir = 2;
 8002558:	4b53      	ldr	r3, [pc, #332]	; (80026a8 <moveSnake+0x258>)
 800255a:	2202      	movs	r2, #2
 800255c:	701a      	strb	r2, [r3, #0]
			break;
 800255e:	e077      	b.n	8002650 <moveSnake+0x200>
		case 4:
			yCord[0]++;
 8002560:	4b50      	ldr	r3, [pc, #320]	; (80026a4 <moveSnake+0x254>)
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	b2db      	uxtb	r3, r3
 8002566:	3301      	adds	r3, #1
 8002568:	b2da      	uxtb	r2, r3
 800256a:	4b4e      	ldr	r3, [pc, #312]	; (80026a4 <moveSnake+0x254>)
 800256c:	701a      	strb	r2, [r3, #0]
			snakeDir = 3;
 800256e:	4b4e      	ldr	r3, [pc, #312]	; (80026a8 <moveSnake+0x258>)
 8002570:	2203      	movs	r2, #3
 8002572:	701a      	strb	r2, [r3, #0]
			break;
 8002574:	e06c      	b.n	8002650 <moveSnake+0x200>
		}

	} else if (leftOrRight == 2) {
 8002576:	1dfb      	adds	r3, r7, #7
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	2b02      	cmp	r3, #2
 800257c:	d13a      	bne.n	80025f4 <moveSnake+0x1a4>
		switch (snakeDir) {
 800257e:	4b4a      	ldr	r3, [pc, #296]	; (80026a8 <moveSnake+0x258>)
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	b2db      	uxtb	r3, r3
 8002584:	2b04      	cmp	r3, #4
 8002586:	d02a      	beq.n	80025de <moveSnake+0x18e>
 8002588:	dd00      	ble.n	800258c <moveSnake+0x13c>
 800258a:	e061      	b.n	8002650 <moveSnake+0x200>
 800258c:	2b03      	cmp	r3, #3
 800258e:	d01b      	beq.n	80025c8 <moveSnake+0x178>
 8002590:	dc5e      	bgt.n	8002650 <moveSnake+0x200>
 8002592:	2b01      	cmp	r3, #1
 8002594:	d002      	beq.n	800259c <moveSnake+0x14c>
 8002596:	2b02      	cmp	r3, #2
 8002598:	d00b      	beq.n	80025b2 <moveSnake+0x162>
 800259a:	e059      	b.n	8002650 <moveSnake+0x200>
		case 1:
			xCord[0]++;
 800259c:	4b40      	ldr	r3, [pc, #256]	; (80026a0 <moveSnake+0x250>)
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	3301      	adds	r3, #1
 80025a4:	b2da      	uxtb	r2, r3
 80025a6:	4b3e      	ldr	r3, [pc, #248]	; (80026a0 <moveSnake+0x250>)
 80025a8:	701a      	strb	r2, [r3, #0]
			snakeDir = 2;
 80025aa:	4b3f      	ldr	r3, [pc, #252]	; (80026a8 <moveSnake+0x258>)
 80025ac:	2202      	movs	r2, #2
 80025ae:	701a      	strb	r2, [r3, #0]
			break;
 80025b0:	e04e      	b.n	8002650 <moveSnake+0x200>
		case 2:
			yCord[0]++;
 80025b2:	4b3c      	ldr	r3, [pc, #240]	; (80026a4 <moveSnake+0x254>)
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	3301      	adds	r3, #1
 80025ba:	b2da      	uxtb	r2, r3
 80025bc:	4b39      	ldr	r3, [pc, #228]	; (80026a4 <moveSnake+0x254>)
 80025be:	701a      	strb	r2, [r3, #0]
			snakeDir = 3;
 80025c0:	4b39      	ldr	r3, [pc, #228]	; (80026a8 <moveSnake+0x258>)
 80025c2:	2203      	movs	r2, #3
 80025c4:	701a      	strb	r2, [r3, #0]
			break;
 80025c6:	e043      	b.n	8002650 <moveSnake+0x200>
		case 3:
			xCord[0]--;
 80025c8:	4b35      	ldr	r3, [pc, #212]	; (80026a0 <moveSnake+0x250>)
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	3b01      	subs	r3, #1
 80025d0:	b2da      	uxtb	r2, r3
 80025d2:	4b33      	ldr	r3, [pc, #204]	; (80026a0 <moveSnake+0x250>)
 80025d4:	701a      	strb	r2, [r3, #0]
			snakeDir = 4;
 80025d6:	4b34      	ldr	r3, [pc, #208]	; (80026a8 <moveSnake+0x258>)
 80025d8:	2204      	movs	r2, #4
 80025da:	701a      	strb	r2, [r3, #0]
			break;
 80025dc:	e038      	b.n	8002650 <moveSnake+0x200>
		case 4:
			yCord[0]--;
 80025de:	4b31      	ldr	r3, [pc, #196]	; (80026a4 <moveSnake+0x254>)
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	3b01      	subs	r3, #1
 80025e6:	b2da      	uxtb	r2, r3
 80025e8:	4b2e      	ldr	r3, [pc, #184]	; (80026a4 <moveSnake+0x254>)
 80025ea:	701a      	strb	r2, [r3, #0]
			snakeDir = 1;
 80025ec:	4b2e      	ldr	r3, [pc, #184]	; (80026a8 <moveSnake+0x258>)
 80025ee:	2201      	movs	r2, #1
 80025f0:	701a      	strb	r2, [r3, #0]
			break;
 80025f2:	e02d      	b.n	8002650 <moveSnake+0x200>
		}
	} else {
		switch (snakeDir) {
 80025f4:	4b2c      	ldr	r3, [pc, #176]	; (80026a8 <moveSnake+0x258>)
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b04      	cmp	r3, #4
 80025fc:	d020      	beq.n	8002640 <moveSnake+0x1f0>
 80025fe:	dc27      	bgt.n	8002650 <moveSnake+0x200>
 8002600:	2b03      	cmp	r3, #3
 8002602:	d015      	beq.n	8002630 <moveSnake+0x1e0>
 8002604:	dc24      	bgt.n	8002650 <moveSnake+0x200>
 8002606:	2b01      	cmp	r3, #1
 8002608:	d002      	beq.n	8002610 <moveSnake+0x1c0>
 800260a:	2b02      	cmp	r3, #2
 800260c:	d008      	beq.n	8002620 <moveSnake+0x1d0>
 800260e:	e01f      	b.n	8002650 <moveSnake+0x200>
		case 1:
			yCord[0]--;
 8002610:	4b24      	ldr	r3, [pc, #144]	; (80026a4 <moveSnake+0x254>)
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	b2db      	uxtb	r3, r3
 8002616:	3b01      	subs	r3, #1
 8002618:	b2da      	uxtb	r2, r3
 800261a:	4b22      	ldr	r3, [pc, #136]	; (80026a4 <moveSnake+0x254>)
 800261c:	701a      	strb	r2, [r3, #0]
			break;
 800261e:	e017      	b.n	8002650 <moveSnake+0x200>
		case 2:
			xCord[0]++;
 8002620:	4b1f      	ldr	r3, [pc, #124]	; (80026a0 <moveSnake+0x250>)
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	b2db      	uxtb	r3, r3
 8002626:	3301      	adds	r3, #1
 8002628:	b2da      	uxtb	r2, r3
 800262a:	4b1d      	ldr	r3, [pc, #116]	; (80026a0 <moveSnake+0x250>)
 800262c:	701a      	strb	r2, [r3, #0]
			break;
 800262e:	e00f      	b.n	8002650 <moveSnake+0x200>
		case 3:
			yCord[0]++;
 8002630:	4b1c      	ldr	r3, [pc, #112]	; (80026a4 <moveSnake+0x254>)
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	b2db      	uxtb	r3, r3
 8002636:	3301      	adds	r3, #1
 8002638:	b2da      	uxtb	r2, r3
 800263a:	4b1a      	ldr	r3, [pc, #104]	; (80026a4 <moveSnake+0x254>)
 800263c:	701a      	strb	r2, [r3, #0]
			break;
 800263e:	e007      	b.n	8002650 <moveSnake+0x200>
		case 4:
			xCord[0]--;
 8002640:	4b17      	ldr	r3, [pc, #92]	; (80026a0 <moveSnake+0x250>)
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	b2db      	uxtb	r3, r3
 8002646:	3b01      	subs	r3, #1
 8002648:	b2da      	uxtb	r2, r3
 800264a:	4b15      	ldr	r3, [pc, #84]	; (80026a0 <moveSnake+0x250>)
 800264c:	701a      	strb	r2, [r3, #0]
			break;
 800264e:	46c0      	nop			; (mov r8, r8)
		}
	}

	if (yCord[0] <= 0) {
 8002650:	4b14      	ldr	r3, [pc, #80]	; (80026a4 <moveSnake+0x254>)
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	b2db      	uxtb	r3, r3
 8002656:	2b00      	cmp	r3, #0
 8002658:	d103      	bne.n	8002662 <moveSnake+0x212>
		yCord[0] = 4;
 800265a:	4b12      	ldr	r3, [pc, #72]	; (80026a4 <moveSnake+0x254>)
 800265c:	2204      	movs	r2, #4
 800265e:	701a      	strb	r2, [r3, #0]
 8002660:	e007      	b.n	8002672 <moveSnake+0x222>
	} else if (yCord[0] >= 6) {
 8002662:	4b10      	ldr	r3, [pc, #64]	; (80026a4 <moveSnake+0x254>)
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	b2db      	uxtb	r3, r3
 8002668:	2b05      	cmp	r3, #5
 800266a:	d902      	bls.n	8002672 <moveSnake+0x222>
		yCord[0] = 2;
 800266c:	4b0d      	ldr	r3, [pc, #52]	; (80026a4 <moveSnake+0x254>)
 800266e:	2202      	movs	r2, #2
 8002670:	701a      	strb	r2, [r3, #0]
	}
	if (xCord[0] <= 0) {
 8002672:	4b0b      	ldr	r3, [pc, #44]	; (80026a0 <moveSnake+0x250>)
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	b2db      	uxtb	r3, r3
 8002678:	2b00      	cmp	r3, #0
 800267a:	d103      	bne.n	8002684 <moveSnake+0x234>
		xCord[0] = 8;
 800267c:	4b08      	ldr	r3, [pc, #32]	; (80026a0 <moveSnake+0x250>)
 800267e:	2208      	movs	r2, #8
 8002680:	701a      	strb	r2, [r3, #0]
	} else if (xCord[0] >= 10) {
		xCord[0] = 2;
	}
}
 8002682:	e007      	b.n	8002694 <moveSnake+0x244>
	} else if (xCord[0] >= 10) {
 8002684:	4b06      	ldr	r3, [pc, #24]	; (80026a0 <moveSnake+0x250>)
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	b2db      	uxtb	r3, r3
 800268a:	2b09      	cmp	r3, #9
 800268c:	d902      	bls.n	8002694 <moveSnake+0x244>
		xCord[0] = 2;
 800268e:	4b04      	ldr	r3, [pc, #16]	; (80026a0 <moveSnake+0x250>)
 8002690:	2202      	movs	r2, #2
 8002692:	701a      	strb	r2, [r3, #0]
}
 8002694:	46c0      	nop			; (mov r8, r8)
 8002696:	46bd      	mov	sp, r7
 8002698:	b004      	add	sp, #16
 800269a:	bd80      	pop	{r7, pc}
 800269c:	20000008 	.word	0x20000008
 80026a0:	20000288 	.word	0x20000288
 80026a4:	200002a0 	.word	0x200002a0
 80026a8:	20000009 	.word	0x20000009

080026ac <updateSnakeValue>:

void updateSnakeValue() {
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
	dispValeForSnake = 0;
 80026b2:	4b19      	ldr	r3, [pc, #100]	; (8002718 <updateSnakeValue+0x6c>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < snakeLenth; i++) {
 80026b8:	2300      	movs	r3, #0
 80026ba:	607b      	str	r3, [r7, #4]
 80026bc:	e01f      	b.n	80026fe <updateSnakeValue+0x52>
		dispValeForSnake |= (1 << cordsToDisp[yCord[i]][xCord[i]]);
 80026be:	4a17      	ldr	r2, [pc, #92]	; (800271c <updateSnakeValue+0x70>)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	18d3      	adds	r3, r2, r3
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	001a      	movs	r2, r3
 80026ca:	4915      	ldr	r1, [pc, #84]	; (8002720 <updateSnakeValue+0x74>)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	18cb      	adds	r3, r1, r3
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	0018      	movs	r0, r3
 80026d6:	4913      	ldr	r1, [pc, #76]	; (8002724 <updateSnakeValue+0x78>)
 80026d8:	0013      	movs	r3, r2
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	189b      	adds	r3, r3, r2
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	189b      	adds	r3, r3, r2
 80026e2:	18cb      	adds	r3, r1, r3
 80026e4:	5c1b      	ldrb	r3, [r3, r0]
 80026e6:	001a      	movs	r2, r3
 80026e8:	2301      	movs	r3, #1
 80026ea:	4093      	lsls	r3, r2
 80026ec:	001a      	movs	r2, r3
 80026ee:	4b0a      	ldr	r3, [pc, #40]	; (8002718 <updateSnakeValue+0x6c>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	431a      	orrs	r2, r3
 80026f4:	4b08      	ldr	r3, [pc, #32]	; (8002718 <updateSnakeValue+0x6c>)
 80026f6:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < snakeLenth; i++) {
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	3301      	adds	r3, #1
 80026fc:	607b      	str	r3, [r7, #4]
 80026fe:	4b0a      	ldr	r3, [pc, #40]	; (8002728 <updateSnakeValue+0x7c>)
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	b2db      	uxtb	r3, r3
 8002704:	001a      	movs	r2, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4293      	cmp	r3, r2
 800270a:	dbd8      	blt.n	80026be <updateSnakeValue+0x12>
	}
}
 800270c:	46c0      	nop			; (mov r8, r8)
 800270e:	46c0      	nop			; (mov r8, r8)
 8002710:	46bd      	mov	sp, r7
 8002712:	b002      	add	sp, #8
 8002714:	bd80      	pop	{r7, pc}
 8002716:	46c0      	nop			; (mov r8, r8)
 8002718:	20000280 	.word	0x20000280
 800271c:	200002a0 	.word	0x200002a0
 8002720:	20000288 	.word	0x20000288
 8002724:	08009ac8 	.word	0x08009ac8
 8002728:	20000008 	.word	0x20000008

0800272c <setByte>:

void setByte(uint8_t byte) {
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	0002      	movs	r2, r0
 8002734:	1dfb      	adds	r3, r7, #7
 8002736:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; i++) {
 8002738:	2300      	movs	r3, #0
 800273a:	60fb      	str	r3, [r7, #12]
 800273c:	e016      	b.n	800276c <setByte+0x40>
		HAL_GPIO_WritePin(SEG_Port[i], SEG_Pin[i],
 800273e:	4b0f      	ldr	r3, [pc, #60]	; (800277c <setByte+0x50>)
 8002740:	68fa      	ldr	r2, [r7, #12]
 8002742:	0092      	lsls	r2, r2, #2
 8002744:	58d0      	ldr	r0, [r2, r3]
 8002746:	4b0e      	ldr	r3, [pc, #56]	; (8002780 <setByte+0x54>)
 8002748:	68fa      	ldr	r2, [r7, #12]
 800274a:	0052      	lsls	r2, r2, #1
 800274c:	5ad1      	ldrh	r1, [r2, r3]
				((((byte >> i) & 1) == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET));
 800274e:	1dfb      	adds	r3, r7, #7
 8002750:	781a      	ldrb	r2, [r3, #0]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	411a      	asrs	r2, r3
 8002756:	0013      	movs	r3, r2
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2201      	movs	r2, #1
 800275c:	4013      	ands	r3, r2
 800275e:	b2db      	uxtb	r3, r3
		HAL_GPIO_WritePin(SEG_Port[i], SEG_Pin[i],
 8002760:	001a      	movs	r2, r3
 8002762:	f003 fbfa 	bl	8005f5a <HAL_GPIO_WritePin>
	for (int i = 0; i < 8; i++) {
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	3301      	adds	r3, #1
 800276a:	60fb      	str	r3, [r7, #12]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2b07      	cmp	r3, #7
 8002770:	dde5      	ble.n	800273e <setByte+0x12>

	}
}
 8002772:	46c0      	nop			; (mov r8, r8)
 8002774:	46c0      	nop			; (mov r8, r8)
 8002776:	46bd      	mov	sp, r7
 8002778:	b004      	add	sp, #16
 800277a:	bd80      	pop	{r7, pc}
 800277c:	08009a98 	.word	0x08009a98
 8002780:	08009ab8 	.word	0x08009ab8

08002784 <setDigit>:

//Koniec funkcji do snake'a

void setDigit(int digit) {
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 8; i++) {
 800278c:	2300      	movs	r3, #0
 800278e:	60fb      	str	r3, [r7, #12]
 8002790:	e019      	b.n	80027c6 <setDigit+0x42>
		HAL_GPIO_WritePin(SEG_Port[i], SEG_Pin[i],
 8002792:	4b11      	ldr	r3, [pc, #68]	; (80027d8 <setDigit+0x54>)
 8002794:	68fa      	ldr	r2, [r7, #12]
 8002796:	0092      	lsls	r2, r2, #2
 8002798:	58d0      	ldr	r0, [r2, r3]
 800279a:	4b10      	ldr	r3, [pc, #64]	; (80027dc <setDigit+0x58>)
 800279c:	68fa      	ldr	r2, [r7, #12]
 800279e:	0052      	lsls	r2, r2, #1
 80027a0:	5ad1      	ldrh	r1, [r2, r3]
				((((digits[digit] >> i) & 1) == 1) ?
 80027a2:	4a0f      	ldr	r2, [pc, #60]	; (80027e0 <setDigit+0x5c>)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	18d3      	adds	r3, r2, r3
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	001a      	movs	r2, r3
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	411a      	asrs	r2, r3
 80027b0:	0013      	movs	r3, r2
						GPIO_PIN_SET : GPIO_PIN_RESET));
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	2201      	movs	r2, #1
 80027b6:	4013      	ands	r3, r2
 80027b8:	b2db      	uxtb	r3, r3
		HAL_GPIO_WritePin(SEG_Port[i], SEG_Pin[i],
 80027ba:	001a      	movs	r2, r3
 80027bc:	f003 fbcd 	bl	8005f5a <HAL_GPIO_WritePin>
	for (int i = 0; i < 8; i++) {
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	3301      	adds	r3, #1
 80027c4:	60fb      	str	r3, [r7, #12]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2b07      	cmp	r3, #7
 80027ca:	dde2      	ble.n	8002792 <setDigit+0xe>

	}
}
 80027cc:	46c0      	nop			; (mov r8, r8)
 80027ce:	46c0      	nop			; (mov r8, r8)
 80027d0:	46bd      	mov	sp, r7
 80027d2:	b004      	add	sp, #16
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	46c0      	nop			; (mov r8, r8)
 80027d8:	08009a98 	.word	0x08009a98
 80027dc:	08009ab8 	.word	0x08009ab8
 80027e0:	08009a8c 	.word	0x08009a8c

080027e4 <customTick>:

void customTick() {
 80027e4:	b580      	push	{r7, lr}
 80027e6:	af00      	add	r7, sp, #0
	if (isPressed != 3)
 80027e8:	4b06      	ldr	r3, [pc, #24]	; (8002804 <customTick+0x20>)
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	2b03      	cmp	r3, #3
 80027f0:	d004      	beq.n	80027fc <customTick+0x18>
		actTick++;
 80027f2:	4b05      	ldr	r3, [pc, #20]	; (8002808 <customTick+0x24>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	1c5a      	adds	r2, r3, #1
 80027f8:	4b03      	ldr	r3, [pc, #12]	; (8002808 <customTick+0x24>)
 80027fa:	601a      	str	r2, [r3, #0]
}
 80027fc:	46c0      	nop			; (mov r8, r8)
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	46c0      	nop			; (mov r8, r8)
 8002804:	20000000 	.word	0x20000000
 8002808:	20000268 	.word	0x20000268

0800280c <swToggle>:

// Obsługa przerwań wywoływanych przez przyciski
void swToggle(uint16_t GPIO_Pin) {
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	0002      	movs	r2, r0
 8002814:	1dbb      	adds	r3, r7, #6
 8002816:	801a      	strh	r2, [r3, #0]
	if ((HAL_GPIO_ReadPin(GPIOD, GPIO_Pin) == GPIO_PIN_RESET)
 8002818:	1dbb      	adds	r3, r7, #6
 800281a:	881b      	ldrh	r3, [r3, #0]
 800281c:	4a36      	ldr	r2, [pc, #216]	; (80028f8 <swToggle+0xec>)
 800281e:	0019      	movs	r1, r3
 8002820:	0010      	movs	r0, r2
 8002822:	f003 fb7d 	bl	8005f20 <HAL_GPIO_ReadPin>
 8002826:	1e03      	subs	r3, r0, #0
 8002828:	d122      	bne.n	8002870 <swToggle+0x64>
			&& (isPressed == 3)) {
 800282a:	4b34      	ldr	r3, [pc, #208]	; (80028fc <swToggle+0xf0>)
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	b2db      	uxtb	r3, r3
 8002830:	2b03      	cmp	r3, #3
 8002832:	d11d      	bne.n	8002870 <swToggle+0x64>
		actTick = 0;
 8002834:	4b32      	ldr	r3, [pc, #200]	; (8002900 <swToggle+0xf4>)
 8002836:	2200      	movs	r2, #0
 8002838:	601a      	str	r2, [r3, #0]
		isPressed = GPIO_Pin;
 800283a:	1dbb      	adds	r3, r7, #6
 800283c:	881b      	ldrh	r3, [r3, #0]
 800283e:	b2da      	uxtb	r2, r3
 8002840:	4b2e      	ldr	r3, [pc, #184]	; (80028fc <swToggle+0xf0>)
 8002842:	701a      	strb	r2, [r3, #0]
		if ((gpio_pins[GPIO_Pin] + 1) == 1) {
 8002844:	1dbb      	adds	r3, r7, #6
 8002846:	881a      	ldrh	r2, [r3, #0]
 8002848:	4b2e      	ldr	r3, [pc, #184]	; (8002904 <swToggle+0xf8>)
 800284a:	0052      	lsls	r2, r2, #1
 800284c:	5ad3      	ldrh	r3, [r2, r3]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d103      	bne.n	800285a <swToggle+0x4e>
			snakeButton = 2;
 8002852:	4b2d      	ldr	r3, [pc, #180]	; (8002908 <swToggle+0xfc>)
 8002854:	2202      	movs	r2, #2
 8002856:	701a      	strb	r2, [r3, #0]
		if ((gpio_pins[GPIO_Pin] + 1) == 1) {
 8002858:	e048      	b.n	80028ec <swToggle+0xe0>
		} else if ((gpio_pins[GPIO_Pin] + 1) == 3) {
 800285a:	1dbb      	adds	r3, r7, #6
 800285c:	881a      	ldrh	r2, [r3, #0]
 800285e:	4b29      	ldr	r3, [pc, #164]	; (8002904 <swToggle+0xf8>)
 8002860:	0052      	lsls	r2, r2, #1
 8002862:	5ad3      	ldrh	r3, [r2, r3]
 8002864:	2b02      	cmp	r3, #2
 8002866:	d141      	bne.n	80028ec <swToggle+0xe0>
			snakeButton = 1;
 8002868:	4b27      	ldr	r3, [pc, #156]	; (8002908 <swToggle+0xfc>)
 800286a:	2201      	movs	r2, #1
 800286c:	701a      	strb	r2, [r3, #0]
		if ((gpio_pins[GPIO_Pin] + 1) == 1) {
 800286e:	e03d      	b.n	80028ec <swToggle+0xe0>
		}
	} else if ((HAL_GPIO_ReadPin(GPIOD, GPIO_Pin) == GPIO_PIN_SET)
 8002870:	1dbb      	adds	r3, r7, #6
 8002872:	881b      	ldrh	r3, [r3, #0]
 8002874:	4a20      	ldr	r2, [pc, #128]	; (80028f8 <swToggle+0xec>)
 8002876:	0019      	movs	r1, r3
 8002878:	0010      	movs	r0, r2
 800287a:	f003 fb51 	bl	8005f20 <HAL_GPIO_ReadPin>
 800287e:	0003      	movs	r3, r0
 8002880:	2b01      	cmp	r3, #1
 8002882:	d131      	bne.n	80028e8 <swToggle+0xdc>
			&& (isPressed == GPIO_Pin)) {
 8002884:	4b1d      	ldr	r3, [pc, #116]	; (80028fc <swToggle+0xf0>)
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	b2db      	uxtb	r3, r3
 800288a:	b29b      	uxth	r3, r3
 800288c:	1dba      	adds	r2, r7, #6
 800288e:	8812      	ldrh	r2, [r2, #0]
 8002890:	429a      	cmp	r2, r3
 8002892:	d129      	bne.n	80028e8 <swToggle+0xdc>
		if (actTick > 50 && actTick < 700) {
 8002894:	4b1a      	ldr	r3, [pc, #104]	; (8002900 <swToggle+0xf4>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2b32      	cmp	r3, #50	; 0x32
 800289a:	d910      	bls.n	80028be <swToggle+0xb2>
 800289c:	4b18      	ldr	r3, [pc, #96]	; (8002900 <swToggle+0xf4>)
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	23af      	movs	r3, #175	; 0xaf
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d20a      	bcs.n	80028be <swToggle+0xb2>
			clickType = gpio_pins[GPIO_Pin] + 1;
 80028a8:	1dbb      	adds	r3, r7, #6
 80028aa:	881a      	ldrh	r2, [r3, #0]
 80028ac:	4b15      	ldr	r3, [pc, #84]	; (8002904 <swToggle+0xf8>)
 80028ae:	0052      	lsls	r2, r2, #1
 80028b0:	5ad3      	ldrh	r3, [r2, r3]
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	3301      	adds	r3, #1
 80028b6:	b2da      	uxtb	r2, r3
 80028b8:	4b14      	ldr	r3, [pc, #80]	; (800290c <swToggle+0x100>)
 80028ba:	701a      	strb	r2, [r3, #0]
 80028bc:	e00d      	b.n	80028da <swToggle+0xce>
		} else if (actTick > 50) {
 80028be:	4b10      	ldr	r3, [pc, #64]	; (8002900 <swToggle+0xf4>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	2b32      	cmp	r3, #50	; 0x32
 80028c4:	d909      	bls.n	80028da <swToggle+0xce>
			clickType = gpio_pins[GPIO_Pin] + 4;
 80028c6:	1dbb      	adds	r3, r7, #6
 80028c8:	881a      	ldrh	r2, [r3, #0]
 80028ca:	4b0e      	ldr	r3, [pc, #56]	; (8002904 <swToggle+0xf8>)
 80028cc:	0052      	lsls	r2, r2, #1
 80028ce:	5ad3      	ldrh	r3, [r2, r3]
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	3304      	adds	r3, #4
 80028d4:	b2da      	uxtb	r2, r3
 80028d6:	4b0d      	ldr	r3, [pc, #52]	; (800290c <swToggle+0x100>)
 80028d8:	701a      	strb	r2, [r3, #0]
		}
		actTick = 0;
 80028da:	4b09      	ldr	r3, [pc, #36]	; (8002900 <swToggle+0xf4>)
 80028dc:	2200      	movs	r2, #0
 80028de:	601a      	str	r2, [r3, #0]
		isPressed = 3;
 80028e0:	4b06      	ldr	r3, [pc, #24]	; (80028fc <swToggle+0xf0>)
 80028e2:	2203      	movs	r2, #3
 80028e4:	701a      	strb	r2, [r3, #0]
 80028e6:	e002      	b.n	80028ee <swToggle+0xe2>
	} else {
		__NOP();
 80028e8:	46c0      	nop			; (mov r8, r8)
	}
}
 80028ea:	e000      	b.n	80028ee <swToggle+0xe2>
		if ((gpio_pins[GPIO_Pin] + 1) == 1) {
 80028ec:	46c0      	nop			; (mov r8, r8)
}
 80028ee:	46c0      	nop			; (mov r8, r8)
 80028f0:	46bd      	mov	sp, r7
 80028f2:	b002      	add	sp, #8
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	46c0      	nop			; (mov r8, r8)
 80028f8:	50000c00 	.word	0x50000c00
 80028fc:	20000000 	.word	0x20000000
 8002900:	20000268 	.word	0x20000268
 8002904:	08009a80 	.word	0x08009a80
 8002908:	20000284 	.word	0x20000284
 800290c:	20000274 	.word	0x20000274

08002910 <HAL_GPIO_EXTI_Falling_Callback>:
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	0002      	movs	r2, r0
 8002918:	1dbb      	adds	r3, r7, #6
 800291a:	801a      	strh	r2, [r3, #0]
	swToggle(GPIO_Pin);
 800291c:	1dbb      	adds	r3, r7, #6
 800291e:	881b      	ldrh	r3, [r3, #0]
 8002920:	0018      	movs	r0, r3
 8002922:	f7ff ff73 	bl	800280c <swToggle>
}
 8002926:	46c0      	nop			; (mov r8, r8)
 8002928:	46bd      	mov	sp, r7
 800292a:	b002      	add	sp, #8
 800292c:	bd80      	pop	{r7, pc}

0800292e <HAL_GPIO_EXTI_Rising_Callback>:
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin) {
 800292e:	b580      	push	{r7, lr}
 8002930:	b082      	sub	sp, #8
 8002932:	af00      	add	r7, sp, #0
 8002934:	0002      	movs	r2, r0
 8002936:	1dbb      	adds	r3, r7, #6
 8002938:	801a      	strh	r2, [r3, #0]
	swToggle(GPIO_Pin);
 800293a:	1dbb      	adds	r3, r7, #6
 800293c:	881b      	ldrh	r3, [r3, #0]
 800293e:	0018      	movs	r0, r3
 8002940:	f7ff ff64 	bl	800280c <swToggle>
}
 8002944:	46c0      	nop			; (mov r8, r8)
 8002946:	46bd      	mov	sp, r7
 8002948:	b002      	add	sp, #8
 800294a:	bd80      	pop	{r7, pc}

0800294c <TIM14_Callback>:
volatile long delayForBlink = 0;
volatile long delay = 0;
// Przerwanie do odświeżania zegarka

void TIM14_Callback() {
 800294c:	b5b0      	push	{r4, r5, r7, lr}
 800294e:	af00      	add	r7, sp, #0
	if (delay == 0) {
 8002950:	4bcc      	ldr	r3, [pc, #816]	; (8002c84 <TIM14_Callback+0x338>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d125      	bne.n	80029a4 <TIM14_Callback+0x58>
		HAL_GPIO_WritePin(DIG_Port[(curDig + 3) % 4], DIG_Pin[(curDig + 3) % 4],
 8002958:	4bcb      	ldr	r3, [pc, #812]	; (8002c88 <TIM14_Callback+0x33c>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	3303      	adds	r3, #3
 800295e:	4acb      	ldr	r2, [pc, #812]	; (8002c8c <TIM14_Callback+0x340>)
 8002960:	4013      	ands	r3, r2
 8002962:	d504      	bpl.n	800296e <TIM14_Callback+0x22>
 8002964:	3b01      	subs	r3, #1
 8002966:	2204      	movs	r2, #4
 8002968:	4252      	negs	r2, r2
 800296a:	4313      	orrs	r3, r2
 800296c:	3301      	adds	r3, #1
 800296e:	001a      	movs	r2, r3
 8002970:	4bc7      	ldr	r3, [pc, #796]	; (8002c90 <TIM14_Callback+0x344>)
 8002972:	0092      	lsls	r2, r2, #2
 8002974:	58d0      	ldr	r0, [r2, r3]
 8002976:	4bc4      	ldr	r3, [pc, #784]	; (8002c88 <TIM14_Callback+0x33c>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	3303      	adds	r3, #3
 800297c:	4ac3      	ldr	r2, [pc, #780]	; (8002c8c <TIM14_Callback+0x340>)
 800297e:	4013      	ands	r3, r2
 8002980:	d504      	bpl.n	800298c <TIM14_Callback+0x40>
 8002982:	3b01      	subs	r3, #1
 8002984:	2204      	movs	r2, #4
 8002986:	4252      	negs	r2, r2
 8002988:	4313      	orrs	r3, r2
 800298a:	3301      	adds	r3, #1
 800298c:	001a      	movs	r2, r3
 800298e:	4bc1      	ldr	r3, [pc, #772]	; (8002c94 <TIM14_Callback+0x348>)
 8002990:	0052      	lsls	r2, r2, #1
 8002992:	5ad3      	ldrh	r3, [r2, r3]
 8002994:	2200      	movs	r2, #0
 8002996:	0019      	movs	r1, r3
 8002998:	f003 fadf 	bl	8005f5a <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		setDigit(10);
 800299c:	200a      	movs	r0, #10
 800299e:	f7ff fef1 	bl	8002784 <setDigit>
 80029a2:	e1a4      	b.n	8002cee <TIM14_Callback+0x3a2>
	} else if (delay == 5) {
 80029a4:	4bb7      	ldr	r3, [pc, #732]	; (8002c84 <TIM14_Callback+0x338>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2b05      	cmp	r3, #5
 80029aa:	d000      	beq.n	80029ae <TIM14_Callback+0x62>
 80029ac:	e12d      	b.n	8002c0a <TIM14_Callback+0x2be>
		HAL_GPIO_WritePin(DIG_Port[(curDig + 3) % 4], DIG_Pin[(curDig + 3) % 4],
 80029ae:	4bb6      	ldr	r3, [pc, #728]	; (8002c88 <TIM14_Callback+0x33c>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	3303      	adds	r3, #3
 80029b4:	4ab5      	ldr	r2, [pc, #724]	; (8002c8c <TIM14_Callback+0x340>)
 80029b6:	4013      	ands	r3, r2
 80029b8:	d504      	bpl.n	80029c4 <TIM14_Callback+0x78>
 80029ba:	3b01      	subs	r3, #1
 80029bc:	2204      	movs	r2, #4
 80029be:	4252      	negs	r2, r2
 80029c0:	4313      	orrs	r3, r2
 80029c2:	3301      	adds	r3, #1
 80029c4:	001a      	movs	r2, r3
 80029c6:	4bb2      	ldr	r3, [pc, #712]	; (8002c90 <TIM14_Callback+0x344>)
 80029c8:	0092      	lsls	r2, r2, #2
 80029ca:	58d0      	ldr	r0, [r2, r3]
 80029cc:	4bae      	ldr	r3, [pc, #696]	; (8002c88 <TIM14_Callback+0x33c>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	3303      	adds	r3, #3
 80029d2:	4aae      	ldr	r2, [pc, #696]	; (8002c8c <TIM14_Callback+0x340>)
 80029d4:	4013      	ands	r3, r2
 80029d6:	d504      	bpl.n	80029e2 <TIM14_Callback+0x96>
 80029d8:	3b01      	subs	r3, #1
 80029da:	2204      	movs	r2, #4
 80029dc:	4252      	negs	r2, r2
 80029de:	4313      	orrs	r3, r2
 80029e0:	3301      	adds	r3, #1
 80029e2:	001a      	movs	r2, r3
 80029e4:	4bab      	ldr	r3, [pc, #684]	; (8002c94 <TIM14_Callback+0x348>)
 80029e6:	0052      	lsls	r2, r2, #1
 80029e8:	5ad3      	ldrh	r3, [r2, r3]
 80029ea:	2200      	movs	r2, #0
 80029ec:	0019      	movs	r1, r3
 80029ee:	f003 fab4 	bl	8005f5a <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		if (setupMode == 5) {
 80029f2:	4ba9      	ldr	r3, [pc, #676]	; (8002c98 <TIM14_Callback+0x34c>)
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	2b05      	cmp	r3, #5
 80029f8:	d110      	bne.n	8002a1c <TIM14_Callback+0xd0>
			setByte((dispValeForSnake >> (curDig * 8)) % 100000000);
 80029fa:	4ba8      	ldr	r3, [pc, #672]	; (8002c9c <TIM14_Callback+0x350>)
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	4ba2      	ldr	r3, [pc, #648]	; (8002c88 <TIM14_Callback+0x33c>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	00db      	lsls	r3, r3, #3
 8002a04:	40da      	lsrs	r2, r3
 8002a06:	0013      	movs	r3, r2
 8002a08:	49a5      	ldr	r1, [pc, #660]	; (8002ca0 <TIM14_Callback+0x354>)
 8002a0a:	0018      	movs	r0, r3
 8002a0c:	f7fd fbfe 	bl	800020c <__aeabi_uidivmod>
 8002a10:	000b      	movs	r3, r1
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	0018      	movs	r0, r3
 8002a16:	f7ff fe89 	bl	800272c <setByte>
 8002a1a:	e0e6      	b.n	8002bea <TIM14_Callback+0x29e>
		} else if (setupDig == curDig
 8002a1c:	4ba1      	ldr	r3, [pc, #644]	; (8002ca4 <TIM14_Callback+0x358>)
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	001a      	movs	r2, r3
 8002a22:	4b99      	ldr	r3, [pc, #612]	; (8002c88 <TIM14_Callback+0x33c>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d13a      	bne.n	8002aa0 <TIM14_Callback+0x154>
				&& (setupMode == 1 || setupMode == 3 || setupMode == 4)) {
 8002a2a:	4b9b      	ldr	r3, [pc, #620]	; (8002c98 <TIM14_Callback+0x34c>)
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d007      	beq.n	8002a42 <TIM14_Callback+0xf6>
 8002a32:	4b99      	ldr	r3, [pc, #612]	; (8002c98 <TIM14_Callback+0x34c>)
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	2b03      	cmp	r3, #3
 8002a38:	d003      	beq.n	8002a42 <TIM14_Callback+0xf6>
 8002a3a:	4b97      	ldr	r3, [pc, #604]	; (8002c98 <TIM14_Callback+0x34c>)
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	2b04      	cmp	r3, #4
 8002a40:	d12e      	bne.n	8002aa0 <TIM14_Callback+0x154>
			setDigit(
					(delayForBlink < 50000) ?
 8002a42:	4b99      	ldr	r3, [pc, #612]	; (8002ca8 <TIM14_Callback+0x35c>)
 8002a44:	681b      	ldr	r3, [r3, #0]
			setDigit(
 8002a46:	4a99      	ldr	r2, [pc, #612]	; (8002cac <TIM14_Callback+0x360>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	dc24      	bgt.n	8002a96 <TIM14_Callback+0x14a>
							((int) (dispValue / pow(10.0, curDig)) % 10) : 10);
 8002a4c:	4b98      	ldr	r3, [pc, #608]	; (8002cb0 <TIM14_Callback+0x364>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	0018      	movs	r0, r3
 8002a52:	f7ff fc03 	bl	800225c <__aeabi_i2d>
 8002a56:	0004      	movs	r4, r0
 8002a58:	000d      	movs	r5, r1
 8002a5a:	4b8b      	ldr	r3, [pc, #556]	; (8002c88 <TIM14_Callback+0x33c>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	0018      	movs	r0, r3
 8002a60:	f7ff fbfc 	bl	800225c <__aeabi_i2d>
 8002a64:	0002      	movs	r2, r0
 8002a66:	000b      	movs	r3, r1
 8002a68:	2000      	movs	r0, #0
 8002a6a:	4992      	ldr	r1, [pc, #584]	; (8002cb4 <TIM14_Callback+0x368>)
 8002a6c:	f006 f8c2 	bl	8008bf4 <pow>
 8002a70:	0002      	movs	r2, r0
 8002a72:	000b      	movs	r3, r1
 8002a74:	0020      	movs	r0, r4
 8002a76:	0029      	movs	r1, r5
 8002a78:	f7fe f95e 	bl	8000d38 <__aeabi_ddiv>
 8002a7c:	0002      	movs	r2, r0
 8002a7e:	000b      	movs	r3, r1
 8002a80:	0010      	movs	r0, r2
 8002a82:	0019      	movs	r1, r3
 8002a84:	f7ff fbb4 	bl	80021f0 <__aeabi_d2iz>
 8002a88:	0003      	movs	r3, r0
			setDigit(
 8002a8a:	210a      	movs	r1, #10
 8002a8c:	0018      	movs	r0, r3
 8002a8e:	f7fd fca7 	bl	80003e0 <__aeabi_idivmod>
 8002a92:	000b      	movs	r3, r1
 8002a94:	e000      	b.n	8002a98 <TIM14_Callback+0x14c>
 8002a96:	230a      	movs	r3, #10
 8002a98:	0018      	movs	r0, r3
 8002a9a:	f7ff fe73 	bl	8002784 <setDigit>
 8002a9e:	e0a4      	b.n	8002bea <TIM14_Callback+0x29e>
		} else if (setupDig == 0 && (curDig == 0 || curDig == 1)
 8002aa0:	4b80      	ldr	r3, [pc, #512]	; (8002ca4 <TIM14_Callback+0x358>)
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d13a      	bne.n	8002b1e <TIM14_Callback+0x1d2>
 8002aa8:	4b77      	ldr	r3, [pc, #476]	; (8002c88 <TIM14_Callback+0x33c>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d003      	beq.n	8002ab8 <TIM14_Callback+0x16c>
 8002ab0:	4b75      	ldr	r3, [pc, #468]	; (8002c88 <TIM14_Callback+0x33c>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d132      	bne.n	8002b1e <TIM14_Callback+0x1d2>
				&& setupMode == 2) {
 8002ab8:	4b77      	ldr	r3, [pc, #476]	; (8002c98 <TIM14_Callback+0x34c>)
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d12e      	bne.n	8002b1e <TIM14_Callback+0x1d2>
			setDigit(
					(delayForBlink < 50000) ?
 8002ac0:	4b79      	ldr	r3, [pc, #484]	; (8002ca8 <TIM14_Callback+0x35c>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
			setDigit(
 8002ac4:	4a79      	ldr	r2, [pc, #484]	; (8002cac <TIM14_Callback+0x360>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	dc24      	bgt.n	8002b14 <TIM14_Callback+0x1c8>
							((int) (dispValue / pow(10.0, curDig)) % 10) : 10);
 8002aca:	4b79      	ldr	r3, [pc, #484]	; (8002cb0 <TIM14_Callback+0x364>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	0018      	movs	r0, r3
 8002ad0:	f7ff fbc4 	bl	800225c <__aeabi_i2d>
 8002ad4:	0004      	movs	r4, r0
 8002ad6:	000d      	movs	r5, r1
 8002ad8:	4b6b      	ldr	r3, [pc, #428]	; (8002c88 <TIM14_Callback+0x33c>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	0018      	movs	r0, r3
 8002ade:	f7ff fbbd 	bl	800225c <__aeabi_i2d>
 8002ae2:	0002      	movs	r2, r0
 8002ae4:	000b      	movs	r3, r1
 8002ae6:	2000      	movs	r0, #0
 8002ae8:	4972      	ldr	r1, [pc, #456]	; (8002cb4 <TIM14_Callback+0x368>)
 8002aea:	f006 f883 	bl	8008bf4 <pow>
 8002aee:	0002      	movs	r2, r0
 8002af0:	000b      	movs	r3, r1
 8002af2:	0020      	movs	r0, r4
 8002af4:	0029      	movs	r1, r5
 8002af6:	f7fe f91f 	bl	8000d38 <__aeabi_ddiv>
 8002afa:	0002      	movs	r2, r0
 8002afc:	000b      	movs	r3, r1
 8002afe:	0010      	movs	r0, r2
 8002b00:	0019      	movs	r1, r3
 8002b02:	f7ff fb75 	bl	80021f0 <__aeabi_d2iz>
 8002b06:	0003      	movs	r3, r0
			setDigit(
 8002b08:	210a      	movs	r1, #10
 8002b0a:	0018      	movs	r0, r3
 8002b0c:	f7fd fc68 	bl	80003e0 <__aeabi_idivmod>
 8002b10:	000b      	movs	r3, r1
 8002b12:	e000      	b.n	8002b16 <TIM14_Callback+0x1ca>
 8002b14:	230a      	movs	r3, #10
 8002b16:	0018      	movs	r0, r3
 8002b18:	f7ff fe34 	bl	8002784 <setDigit>
 8002b1c:	e065      	b.n	8002bea <TIM14_Callback+0x29e>
		} else if (setupDig == 1 && (curDig == 2 || curDig == 3)
 8002b1e:	4b61      	ldr	r3, [pc, #388]	; (8002ca4 <TIM14_Callback+0x358>)
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d13a      	bne.n	8002b9c <TIM14_Callback+0x250>
 8002b26:	4b58      	ldr	r3, [pc, #352]	; (8002c88 <TIM14_Callback+0x33c>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d003      	beq.n	8002b36 <TIM14_Callback+0x1ea>
 8002b2e:	4b56      	ldr	r3, [pc, #344]	; (8002c88 <TIM14_Callback+0x33c>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2b03      	cmp	r3, #3
 8002b34:	d132      	bne.n	8002b9c <TIM14_Callback+0x250>
				&& setupMode == 2) {
 8002b36:	4b58      	ldr	r3, [pc, #352]	; (8002c98 <TIM14_Callback+0x34c>)
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d12e      	bne.n	8002b9c <TIM14_Callback+0x250>
			setDigit(
					(delayForBlink < 50000) ?
 8002b3e:	4b5a      	ldr	r3, [pc, #360]	; (8002ca8 <TIM14_Callback+0x35c>)
 8002b40:	681b      	ldr	r3, [r3, #0]
			setDigit(
 8002b42:	4a5a      	ldr	r2, [pc, #360]	; (8002cac <TIM14_Callback+0x360>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	dc24      	bgt.n	8002b92 <TIM14_Callback+0x246>
							((int) (dispValue / pow(10.0, curDig)) % 10) : 10);
 8002b48:	4b59      	ldr	r3, [pc, #356]	; (8002cb0 <TIM14_Callback+0x364>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	0018      	movs	r0, r3
 8002b4e:	f7ff fb85 	bl	800225c <__aeabi_i2d>
 8002b52:	0004      	movs	r4, r0
 8002b54:	000d      	movs	r5, r1
 8002b56:	4b4c      	ldr	r3, [pc, #304]	; (8002c88 <TIM14_Callback+0x33c>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	0018      	movs	r0, r3
 8002b5c:	f7ff fb7e 	bl	800225c <__aeabi_i2d>
 8002b60:	0002      	movs	r2, r0
 8002b62:	000b      	movs	r3, r1
 8002b64:	2000      	movs	r0, #0
 8002b66:	4953      	ldr	r1, [pc, #332]	; (8002cb4 <TIM14_Callback+0x368>)
 8002b68:	f006 f844 	bl	8008bf4 <pow>
 8002b6c:	0002      	movs	r2, r0
 8002b6e:	000b      	movs	r3, r1
 8002b70:	0020      	movs	r0, r4
 8002b72:	0029      	movs	r1, r5
 8002b74:	f7fe f8e0 	bl	8000d38 <__aeabi_ddiv>
 8002b78:	0002      	movs	r2, r0
 8002b7a:	000b      	movs	r3, r1
 8002b7c:	0010      	movs	r0, r2
 8002b7e:	0019      	movs	r1, r3
 8002b80:	f7ff fb36 	bl	80021f0 <__aeabi_d2iz>
 8002b84:	0003      	movs	r3, r0
			setDigit(
 8002b86:	210a      	movs	r1, #10
 8002b88:	0018      	movs	r0, r3
 8002b8a:	f7fd fc29 	bl	80003e0 <__aeabi_idivmod>
 8002b8e:	000b      	movs	r3, r1
 8002b90:	e000      	b.n	8002b94 <TIM14_Callback+0x248>
 8002b92:	230a      	movs	r3, #10
 8002b94:	0018      	movs	r0, r3
 8002b96:	f7ff fdf5 	bl	8002784 <setDigit>
 8002b9a:	e026      	b.n	8002bea <TIM14_Callback+0x29e>
		} else {
			setDigit((int) (dispValue / pow(10.0, curDig)) % 10);
 8002b9c:	4b44      	ldr	r3, [pc, #272]	; (8002cb0 <TIM14_Callback+0x364>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	0018      	movs	r0, r3
 8002ba2:	f7ff fb5b 	bl	800225c <__aeabi_i2d>
 8002ba6:	0004      	movs	r4, r0
 8002ba8:	000d      	movs	r5, r1
 8002baa:	4b37      	ldr	r3, [pc, #220]	; (8002c88 <TIM14_Callback+0x33c>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	0018      	movs	r0, r3
 8002bb0:	f7ff fb54 	bl	800225c <__aeabi_i2d>
 8002bb4:	0002      	movs	r2, r0
 8002bb6:	000b      	movs	r3, r1
 8002bb8:	2000      	movs	r0, #0
 8002bba:	493e      	ldr	r1, [pc, #248]	; (8002cb4 <TIM14_Callback+0x368>)
 8002bbc:	f006 f81a 	bl	8008bf4 <pow>
 8002bc0:	0002      	movs	r2, r0
 8002bc2:	000b      	movs	r3, r1
 8002bc4:	0020      	movs	r0, r4
 8002bc6:	0029      	movs	r1, r5
 8002bc8:	f7fe f8b6 	bl	8000d38 <__aeabi_ddiv>
 8002bcc:	0002      	movs	r2, r0
 8002bce:	000b      	movs	r3, r1
 8002bd0:	0010      	movs	r0, r2
 8002bd2:	0019      	movs	r1, r3
 8002bd4:	f7ff fb0c 	bl	80021f0 <__aeabi_d2iz>
 8002bd8:	0003      	movs	r3, r0
 8002bda:	210a      	movs	r1, #10
 8002bdc:	0018      	movs	r0, r3
 8002bde:	f7fd fbff 	bl	80003e0 <__aeabi_idivmod>
 8002be2:	000b      	movs	r3, r1
 8002be4:	0018      	movs	r0, r3
 8002be6:	f7ff fdcd 	bl	8002784 <setDigit>
		}
		HAL_GPIO_WritePin(SEG_Port[7], SEG_Pin[7],
 8002bea:	23a0      	movs	r3, #160	; 0xa0
 8002bec:	05d8      	lsls	r0, r3, #23
 8002bee:	2180      	movs	r1, #128	; 0x80
				((setupMode - 1) == curDig) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8002bf0:	4b29      	ldr	r3, [pc, #164]	; (8002c98 <TIM14_Callback+0x34c>)
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	1e5a      	subs	r2, r3, #1
		HAL_GPIO_WritePin(SEG_Port[7], SEG_Pin[7],
 8002bf6:	4b24      	ldr	r3, [pc, #144]	; (8002c88 <TIM14_Callback+0x33c>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	425a      	negs	r2, r3
 8002bfe:	4153      	adcs	r3, r2
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	001a      	movs	r2, r3
 8002c04:	f003 f9a9 	bl	8005f5a <HAL_GPIO_WritePin>
 8002c08:	e071      	b.n	8002cee <TIM14_Callback+0x3a2>
	} else if (setupMode == 2) {
 8002c0a:	4b23      	ldr	r3, [pc, #140]	; (8002c98 <TIM14_Callback+0x34c>)
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d156      	bne.n	8002cc0 <TIM14_Callback+0x374>
		if (curDig == 0 || curDig == 1) {
 8002c12:	4b1d      	ldr	r3, [pc, #116]	; (8002c88 <TIM14_Callback+0x33c>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d003      	beq.n	8002c22 <TIM14_Callback+0x2d6>
 8002c1a:	4b1b      	ldr	r3, [pc, #108]	; (8002c88 <TIM14_Callback+0x33c>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d117      	bne.n	8002c52 <TIM14_Callback+0x306>
			if (delay == 126 - onBright) {
 8002c22:	4b25      	ldr	r3, [pc, #148]	; (8002cb8 <TIM14_Callback+0x36c>)
 8002c24:	881b      	ldrh	r3, [r3, #0]
 8002c26:	001a      	movs	r2, r3
 8002c28:	237e      	movs	r3, #126	; 0x7e
 8002c2a:	1a9a      	subs	r2, r3, r2
 8002c2c:	4b15      	ldr	r3, [pc, #84]	; (8002c84 <TIM14_Callback+0x338>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d15c      	bne.n	8002cee <TIM14_Callback+0x3a2>
				HAL_GPIO_WritePin(DIG_Port[curDig], DIG_Pin[curDig],
 8002c34:	4b14      	ldr	r3, [pc, #80]	; (8002c88 <TIM14_Callback+0x33c>)
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	4b15      	ldr	r3, [pc, #84]	; (8002c90 <TIM14_Callback+0x344>)
 8002c3a:	0092      	lsls	r2, r2, #2
 8002c3c:	58d0      	ldr	r0, [r2, r3]
 8002c3e:	4b12      	ldr	r3, [pc, #72]	; (8002c88 <TIM14_Callback+0x33c>)
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	4b14      	ldr	r3, [pc, #80]	; (8002c94 <TIM14_Callback+0x348>)
 8002c44:	0052      	lsls	r2, r2, #1
 8002c46:	5ad3      	ldrh	r3, [r2, r3]
 8002c48:	2201      	movs	r2, #1
 8002c4a:	0019      	movs	r1, r3
 8002c4c:	f003 f985 	bl	8005f5a <HAL_GPIO_WritePin>
			if (delay == 126 - onBright) {
 8002c50:	e04d      	b.n	8002cee <TIM14_Callback+0x3a2>
						GPIO_PIN_SET);
			}
		} else {
			if (delay == 126 - offBright) {
 8002c52:	4b1a      	ldr	r3, [pc, #104]	; (8002cbc <TIM14_Callback+0x370>)
 8002c54:	881b      	ldrh	r3, [r3, #0]
 8002c56:	001a      	movs	r2, r3
 8002c58:	237e      	movs	r3, #126	; 0x7e
 8002c5a:	1a9a      	subs	r2, r3, r2
 8002c5c:	4b09      	ldr	r3, [pc, #36]	; (8002c84 <TIM14_Callback+0x338>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d144      	bne.n	8002cee <TIM14_Callback+0x3a2>
				HAL_GPIO_WritePin(DIG_Port[curDig], DIG_Pin[curDig],
 8002c64:	4b08      	ldr	r3, [pc, #32]	; (8002c88 <TIM14_Callback+0x33c>)
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	4b09      	ldr	r3, [pc, #36]	; (8002c90 <TIM14_Callback+0x344>)
 8002c6a:	0092      	lsls	r2, r2, #2
 8002c6c:	58d0      	ldr	r0, [r2, r3]
 8002c6e:	4b06      	ldr	r3, [pc, #24]	; (8002c88 <TIM14_Callback+0x33c>)
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	4b08      	ldr	r3, [pc, #32]	; (8002c94 <TIM14_Callback+0x348>)
 8002c74:	0052      	lsls	r2, r2, #1
 8002c76:	5ad3      	ldrh	r3, [r2, r3]
 8002c78:	2201      	movs	r2, #1
 8002c7a:	0019      	movs	r1, r3
 8002c7c:	f003 f96d 	bl	8005f5a <HAL_GPIO_WritePin>
 8002c80:	e035      	b.n	8002cee <TIM14_Callback+0x3a2>
 8002c82:	46c0      	nop			; (mov r8, r8)
 8002c84:	200002c0 	.word	0x200002c0
 8002c88:	20000270 	.word	0x20000270
 8002c8c:	80000003 	.word	0x80000003
 8002c90:	08009a68 	.word	0x08009a68
 8002c94:	08009a78 	.word	0x08009a78
 8002c98:	20000275 	.word	0x20000275
 8002c9c:	20000280 	.word	0x20000280
 8002ca0:	05f5e100 	.word	0x05f5e100
 8002ca4:	20000276 	.word	0x20000276
 8002ca8:	200002bc 	.word	0x200002bc
 8002cac:	0000c34f 	.word	0x0000c34f
 8002cb0:	2000026c 	.word	0x2000026c
 8002cb4:	40240000 	.word	0x40240000
 8002cb8:	20000004 	.word	0x20000004
 8002cbc:	20000006 	.word	0x20000006
						GPIO_PIN_SET);
			}

		}
	} else if (delay >= (126 - brightness)) {
 8002cc0:	4b21      	ldr	r3, [pc, #132]	; (8002d48 <TIM14_Callback+0x3fc>)
 8002cc2:	881b      	ldrh	r3, [r3, #0]
 8002cc4:	001a      	movs	r2, r3
 8002cc6:	237e      	movs	r3, #126	; 0x7e
 8002cc8:	1a9a      	subs	r2, r3, r2
 8002cca:	4b20      	ldr	r3, [pc, #128]	; (8002d4c <TIM14_Callback+0x400>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	dc0d      	bgt.n	8002cee <TIM14_Callback+0x3a2>
		HAL_GPIO_WritePin(DIG_Port[curDig], DIG_Pin[curDig], GPIO_PIN_SET);
 8002cd2:	4b1f      	ldr	r3, [pc, #124]	; (8002d50 <TIM14_Callback+0x404>)
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	4b1f      	ldr	r3, [pc, #124]	; (8002d54 <TIM14_Callback+0x408>)
 8002cd8:	0092      	lsls	r2, r2, #2
 8002cda:	58d0      	ldr	r0, [r2, r3]
 8002cdc:	4b1c      	ldr	r3, [pc, #112]	; (8002d50 <TIM14_Callback+0x404>)
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	4b1d      	ldr	r3, [pc, #116]	; (8002d58 <TIM14_Callback+0x40c>)
 8002ce2:	0052      	lsls	r2, r2, #1
 8002ce4:	5ad3      	ldrh	r3, [r2, r3]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	0019      	movs	r1, r3
 8002cea:	f003 f936 	bl	8005f5a <HAL_GPIO_WritePin>

	}

	if (delay == 125) {
 8002cee:	4b17      	ldr	r3, [pc, #92]	; (8002d4c <TIM14_Callback+0x400>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2b7d      	cmp	r3, #125	; 0x7d
 8002cf4:	d111      	bne.n	8002d1a <TIM14_Callback+0x3ce>
		delay = 0;
 8002cf6:	4b15      	ldr	r3, [pc, #84]	; (8002d4c <TIM14_Callback+0x400>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	601a      	str	r2, [r3, #0]
		curDig = (curDig + 1) % 4;
 8002cfc:	4b14      	ldr	r3, [pc, #80]	; (8002d50 <TIM14_Callback+0x404>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	3301      	adds	r3, #1
 8002d02:	4a16      	ldr	r2, [pc, #88]	; (8002d5c <TIM14_Callback+0x410>)
 8002d04:	4013      	ands	r3, r2
 8002d06:	d504      	bpl.n	8002d12 <TIM14_Callback+0x3c6>
 8002d08:	3b01      	subs	r3, #1
 8002d0a:	2204      	movs	r2, #4
 8002d0c:	4252      	negs	r2, r2
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	3301      	adds	r3, #1
 8002d12:	001a      	movs	r2, r3
 8002d14:	4b0e      	ldr	r3, [pc, #56]	; (8002d50 <TIM14_Callback+0x404>)
 8002d16:	601a      	str	r2, [r3, #0]
 8002d18:	e004      	b.n	8002d24 <TIM14_Callback+0x3d8>
	} else {
		delay++;
 8002d1a:	4b0c      	ldr	r3, [pc, #48]	; (8002d4c <TIM14_Callback+0x400>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	1c5a      	adds	r2, r3, #1
 8002d20:	4b0a      	ldr	r3, [pc, #40]	; (8002d4c <TIM14_Callback+0x400>)
 8002d22:	601a      	str	r2, [r3, #0]
	}
	if (delayForBlink == 100000) {
 8002d24:	4b0e      	ldr	r3, [pc, #56]	; (8002d60 <TIM14_Callback+0x414>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a0e      	ldr	r2, [pc, #56]	; (8002d64 <TIM14_Callback+0x418>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d103      	bne.n	8002d36 <TIM14_Callback+0x3ea>
		delayForBlink = 0;
 8002d2e:	4b0c      	ldr	r3, [pc, #48]	; (8002d60 <TIM14_Callback+0x414>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	601a      	str	r2, [r3, #0]
	} else {
		delayForBlink++;
	}
}
 8002d34:	e004      	b.n	8002d40 <TIM14_Callback+0x3f4>
		delayForBlink++;
 8002d36:	4b0a      	ldr	r3, [pc, #40]	; (8002d60 <TIM14_Callback+0x414>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	1c5a      	adds	r2, r3, #1
 8002d3c:	4b08      	ldr	r3, [pc, #32]	; (8002d60 <TIM14_Callback+0x414>)
 8002d3e:	601a      	str	r2, [r3, #0]
}
 8002d40:	46c0      	nop			; (mov r8, r8)
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bdb0      	pop	{r4, r5, r7, pc}
 8002d46:	46c0      	nop			; (mov r8, r8)
 8002d48:	20000278 	.word	0x20000278
 8002d4c:	200002c0 	.word	0x200002c0
 8002d50:	20000270 	.word	0x20000270
 8002d54:	08009a68 	.word	0x08009a68
 8002d58:	08009a78 	.word	0x08009a78
 8002d5c:	80000003 	.word	0x80000003
 8002d60:	200002bc 	.word	0x200002bc
 8002d64:	000186a0 	.word	0x000186a0

08002d68 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002d68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d6a:	b085      	sub	sp, #20
 8002d6c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002d6e:	f001 fe0f 	bl	8004990 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002d72:	f001 f99d 	bl	80040b0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002d76:	f001 fb6f 	bl	8004458 <MX_GPIO_Init>
	MX_ADC1_Init();
 8002d7a:	f001 fa01 	bl	8004180 <MX_ADC1_Init>
	MX_RTC_Init();
 8002d7e:	f001 fa6b 	bl	8004258 <MX_RTC_Init>
	MX_TIM3_Init();
 8002d82:	f001 fa97 	bl	80042b4 <MX_TIM3_Init>
	MX_USART1_UART_Init();
 8002d86:	f001 fb19 	bl	80043bc <MX_USART1_UART_Init>
	MX_TIM14_Init();
 8002d8a:	f001 faf3 	bl	8004374 <MX_TIM14_Init>
	/* USER CODE BEGIN 2 */
	HAL_ADCEx_Calibration_Start(&hadc1);
 8002d8e:	4bc8      	ldr	r3, [pc, #800]	; (80030b0 <main+0x348>)
 8002d90:	0018      	movs	r0, r3
 8002d92:	f002 fdad 	bl	80058f0 <HAL_ADCEx_Calibration_Start>
	HAL_TIM_Base_Start_IT(&htim14);
 8002d96:	4bc7      	ldr	r3, [pc, #796]	; (80030b4 <main+0x34c>)
 8002d98:	0018      	movs	r0, r3
 8002d9a:	f004 fad7 	bl	800734c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 8002d9e:	4bc6      	ldr	r3, [pc, #792]	; (80030b8 <main+0x350>)
 8002da0:	0018      	movs	r0, r3
 8002da2:	f004 fad3 	bl	800734c <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002da6:	4bc4      	ldr	r3, [pc, #784]	; (80030b8 <main+0x350>)
 8002da8:	2100      	movs	r1, #0
 8002daa:	0018      	movs	r0, r3
 8002dac:	f004 fb74 	bl	8007498 <HAL_TIM_PWM_Start>

	onTime = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0);
 8002db0:	4bc2      	ldr	r3, [pc, #776]	; (80030bc <main+0x354>)
 8002db2:	2100      	movs	r1, #0
 8002db4:	0018      	movs	r0, r3
 8002db6:	f004 fa55 	bl	8007264 <HAL_RTCEx_BKUPRead>
 8002dba:	0003      	movs	r3, r0
 8002dbc:	b29a      	uxth	r2, r3
 8002dbe:	4bc0      	ldr	r3, [pc, #768]	; (80030c0 <main+0x358>)
 8002dc0:	801a      	strh	r2, [r3, #0]
	offTime = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1);
 8002dc2:	4bbe      	ldr	r3, [pc, #760]	; (80030bc <main+0x354>)
 8002dc4:	2101      	movs	r1, #1
 8002dc6:	0018      	movs	r0, r3
 8002dc8:	f004 fa4c 	bl	8007264 <HAL_RTCEx_BKUPRead>
 8002dcc:	0003      	movs	r3, r0
 8002dce:	b29a      	uxth	r2, r3
 8002dd0:	4bbc      	ldr	r3, [pc, #752]	; (80030c4 <main+0x35c>)
 8002dd2:	801a      	strh	r2, [r3, #0]
	onBright =
			(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR2) != 0) ?
 8002dd4:	4bb9      	ldr	r3, [pc, #740]	; (80030bc <main+0x354>)
 8002dd6:	2102      	movs	r1, #2
 8002dd8:	0018      	movs	r0, r3
 8002dda:	f004 fa43 	bl	8007264 <HAL_RTCEx_BKUPRead>
 8002dde:	1e03      	subs	r3, r0, #0
	onBright =
 8002de0:	d007      	beq.n	8002df2 <main+0x8a>
					HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR2) : 50;
 8002de2:	4bb6      	ldr	r3, [pc, #728]	; (80030bc <main+0x354>)
 8002de4:	2102      	movs	r1, #2
 8002de6:	0018      	movs	r0, r3
 8002de8:	f004 fa3c 	bl	8007264 <HAL_RTCEx_BKUPRead>
 8002dec:	0003      	movs	r3, r0
	onBright =
 8002dee:	b29a      	uxth	r2, r3
 8002df0:	e000      	b.n	8002df4 <main+0x8c>
 8002df2:	2232      	movs	r2, #50	; 0x32
 8002df4:	4bb4      	ldr	r3, [pc, #720]	; (80030c8 <main+0x360>)
 8002df6:	801a      	strh	r2, [r3, #0]
	offBright = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR3);
 8002df8:	4bb0      	ldr	r3, [pc, #704]	; (80030bc <main+0x354>)
 8002dfa:	2103      	movs	r1, #3
 8002dfc:	0018      	movs	r0, r3
 8002dfe:	f004 fa31 	bl	8007264 <HAL_RTCEx_BKUPRead>
 8002e02:	0003      	movs	r3, r0
 8002e04:	b29a      	uxth	r2, r3
 8002e06:	4bb1      	ldr	r3, [pc, #708]	; (80030cc <main+0x364>)
 8002e08:	801a      	strh	r2, [r3, #0]
	xCord[0] = 2;
 8002e0a:	4bb1      	ldr	r3, [pc, #708]	; (80030d0 <main+0x368>)
 8002e0c:	2202      	movs	r2, #2
 8002e0e:	701a      	strb	r2, [r3, #0]
	yCord[0] = 1;
 8002e10:	4bb0      	ldr	r3, [pc, #704]	; (80030d4 <main+0x36c>)
 8002e12:	2201      	movs	r2, #1
 8002e14:	701a      	strb	r2, [r3, #0]
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

// Obsługa przetwornicy
		HAL_ADC_Start(&hadc1);
 8002e16:	4ba6      	ldr	r3, [pc, #664]	; (80030b0 <main+0x348>)
 8002e18:	0018      	movs	r0, r3
 8002e1a:	f002 f93f 	bl	800509c <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8002e1e:	2301      	movs	r3, #1
 8002e20:	425a      	negs	r2, r3
 8002e22:	4ba3      	ldr	r3, [pc, #652]	; (80030b0 <main+0x348>)
 8002e24:	0011      	movs	r1, r2
 8002e26:	0018      	movs	r0, r3
 8002e28:	f002 f986 	bl	8005138 <HAL_ADC_PollForConversion>
		uint32_t value = HAL_ADC_GetValue(&hadc1);
 8002e2c:	4ba0      	ldr	r3, [pc, #640]	; (80030b0 <main+0x348>)
 8002e2e:	0018      	movs	r0, r3
 8002e30:	f002 fa16 	bl	8005260 <HAL_ADC_GetValue>
 8002e34:	0003      	movs	r3, r0
 8002e36:	60fb      	str	r3, [r7, #12]
		float voltage = (((3.3 * value)) / 4096) * 33.6;
 8002e38:	68f8      	ldr	r0, [r7, #12]
 8002e3a:	f7ff fa3f 	bl	80022bc <__aeabi_ui2d>
 8002e3e:	4aa6      	ldr	r2, [pc, #664]	; (80030d8 <main+0x370>)
 8002e40:	4ba6      	ldr	r3, [pc, #664]	; (80030dc <main+0x374>)
 8002e42:	f7fe fb73 	bl	800152c <__aeabi_dmul>
 8002e46:	0002      	movs	r2, r0
 8002e48:	000b      	movs	r3, r1
 8002e4a:	0010      	movs	r0, r2
 8002e4c:	0019      	movs	r1, r3
 8002e4e:	2200      	movs	r2, #0
 8002e50:	4ba3      	ldr	r3, [pc, #652]	; (80030e0 <main+0x378>)
 8002e52:	f7fd ff71 	bl	8000d38 <__aeabi_ddiv>
 8002e56:	0002      	movs	r2, r0
 8002e58:	000b      	movs	r3, r1
 8002e5a:	0010      	movs	r0, r2
 8002e5c:	0019      	movs	r1, r3
 8002e5e:	4aa1      	ldr	r2, [pc, #644]	; (80030e4 <main+0x37c>)
 8002e60:	4ba1      	ldr	r3, [pc, #644]	; (80030e8 <main+0x380>)
 8002e62:	f7fe fb63 	bl	800152c <__aeabi_dmul>
 8002e66:	0002      	movs	r2, r0
 8002e68:	000b      	movs	r3, r1
 8002e6a:	0010      	movs	r0, r2
 8002e6c:	0019      	movs	r1, r3
 8002e6e:	f7ff fa4b 	bl	8002308 <__aeabi_d2f>
 8002e72:	1c03      	adds	r3, r0, #0
 8002e74:	60bb      	str	r3, [r7, #8]
		if (40 < voltage) {
 8002e76:	499d      	ldr	r1, [pc, #628]	; (80030ec <main+0x384>)
 8002e78:	68b8      	ldr	r0, [r7, #8]
 8002e7a:	f7fd fb1b 	bl	80004b4 <__aeabi_fcmpgt>
 8002e7e:	1e03      	subs	r3, r0, #0
 8002e80:	d00a      	beq.n	8002e98 <main+0x130>
			if (pwm > 0)
 8002e82:	4b9b      	ldr	r3, [pc, #620]	; (80030f0 <main+0x388>)
 8002e84:	881b      	ldrh	r3, [r3, #0]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d010      	beq.n	8002eac <main+0x144>
				pwm--;
 8002e8a:	4b99      	ldr	r3, [pc, #612]	; (80030f0 <main+0x388>)
 8002e8c:	881b      	ldrh	r3, [r3, #0]
 8002e8e:	3b01      	subs	r3, #1
 8002e90:	b29a      	uxth	r2, r3
 8002e92:	4b97      	ldr	r3, [pc, #604]	; (80030f0 <main+0x388>)
 8002e94:	801a      	strh	r2, [r3, #0]
 8002e96:	e009      	b.n	8002eac <main+0x144>
		} else {
			if (pwm < 198)
 8002e98:	4b95      	ldr	r3, [pc, #596]	; (80030f0 <main+0x388>)
 8002e9a:	881b      	ldrh	r3, [r3, #0]
 8002e9c:	2bc5      	cmp	r3, #197	; 0xc5
 8002e9e:	d805      	bhi.n	8002eac <main+0x144>
				pwm++;
 8002ea0:	4b93      	ldr	r3, [pc, #588]	; (80030f0 <main+0x388>)
 8002ea2:	881b      	ldrh	r3, [r3, #0]
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	b29a      	uxth	r2, r3
 8002ea8:	4b91      	ldr	r3, [pc, #580]	; (80030f0 <main+0x388>)
 8002eaa:	801a      	strh	r2, [r3, #0]
		}
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pwm);
 8002eac:	4b90      	ldr	r3, [pc, #576]	; (80030f0 <main+0x388>)
 8002eae:	881a      	ldrh	r2, [r3, #0]
 8002eb0:	4b81      	ldr	r3, [pc, #516]	; (80030b8 <main+0x350>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	635a      	str	r2, [r3, #52]	; 0x34
		if(voltage < 10 ){
 8002eb6:	498f      	ldr	r1, [pc, #572]	; (80030f4 <main+0x38c>)
 8002eb8:	68b8      	ldr	r0, [r7, #8]
 8002eba:	f7fd fae7 	bl	800048c <__aeabi_fcmplt>
 8002ebe:	1e03      	subs	r3, r0, #0
 8002ec0:	d01e      	beq.n	8002f00 <main+0x198>
			if ((HAL_GPIO_ReadPin(GPIOD, SW0_Pin) == GPIO_PIN_RESET)
 8002ec2:	4b8d      	ldr	r3, [pc, #564]	; (80030f8 <main+0x390>)
 8002ec4:	2101      	movs	r1, #1
 8002ec6:	0018      	movs	r0, r3
 8002ec8:	f003 f82a 	bl	8005f20 <HAL_GPIO_ReadPin>
 8002ecc:	1e03      	subs	r3, r0, #0
 8002ece:	d114      	bne.n	8002efa <main+0x192>
					&& (HAL_GPIO_ReadPin(GPIOD, SW1_Pin) == GPIO_PIN_RESET)
 8002ed0:	4b89      	ldr	r3, [pc, #548]	; (80030f8 <main+0x390>)
 8002ed2:	2102      	movs	r1, #2
 8002ed4:	0018      	movs	r0, r3
 8002ed6:	f003 f823 	bl	8005f20 <HAL_GPIO_ReadPin>
 8002eda:	1e03      	subs	r3, r0, #0
 8002edc:	d10d      	bne.n	8002efa <main+0x192>
					&& (HAL_GPIO_ReadPin(GPIOD, SW2_Pin) == GPIO_PIN_RESET)) {
 8002ede:	4b86      	ldr	r3, [pc, #536]	; (80030f8 <main+0x390>)
 8002ee0:	2104      	movs	r1, #4
 8002ee2:	0018      	movs	r0, r3
 8002ee4:	f003 f81c 	bl	8005f20 <HAL_GPIO_ReadPin>
 8002ee8:	1e03      	subs	r3, r0, #0
 8002eea:	d106      	bne.n	8002efa <main+0x192>
				setupMode = 5;
 8002eec:	4b83      	ldr	r3, [pc, #524]	; (80030fc <main+0x394>)
 8002eee:	2205      	movs	r2, #5
 8002ef0:	701a      	strb	r2, [r3, #0]
				brightness= 50;
 8002ef2:	4b83      	ldr	r3, [pc, #524]	; (8003100 <main+0x398>)
 8002ef4:	2232      	movs	r2, #50	; 0x32
 8002ef6:	801a      	strh	r2, [r3, #0]
 8002ef8:	e002      	b.n	8002f00 <main+0x198>
			} else {
				setupMode = 0;
 8002efa:	4b80      	ldr	r3, [pc, #512]	; (80030fc <main+0x394>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	701a      	strb	r2, [r3, #0]
			}
		}
		if (setupMode == 5) {
 8002f00:	4b7e      	ldr	r3, [pc, #504]	; (80030fc <main+0x394>)
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	2b05      	cmp	r3, #5
 8002f06:	d11c      	bne.n	8002f42 <main+0x1da>
			if (HAL_GetTick() > (snakeTick + 750)) {
 8002f08:	f001 fdbe 	bl	8004a88 <HAL_GetTick>
 8002f0c:	0002      	movs	r2, r0
 8002f0e:	4b7d      	ldr	r3, [pc, #500]	; (8003104 <main+0x39c>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	497d      	ldr	r1, [pc, #500]	; (8003108 <main+0x3a0>)
 8002f14:	468c      	mov	ip, r1
 8002f16:	4463      	add	r3, ip
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d800      	bhi.n	8002f1e <main+0x1b6>
 8002f1c:	e77b      	b.n	8002e16 <main+0xae>
				moveSnake(snakeButton);
 8002f1e:	4b7b      	ldr	r3, [pc, #492]	; (800310c <main+0x3a4>)
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	0018      	movs	r0, r3
 8002f26:	f7ff fa93 	bl	8002450 <moveSnake>
				updateSnakeValue();
 8002f2a:	f7ff fbbf 	bl	80026ac <updateSnakeValue>
				snakeTick = HAL_GetTick();
 8002f2e:	f001 fdab 	bl	8004a88 <HAL_GetTick>
 8002f32:	0003      	movs	r3, r0
 8002f34:	001a      	movs	r2, r3
 8002f36:	4b73      	ldr	r3, [pc, #460]	; (8003104 <main+0x39c>)
 8002f38:	601a      	str	r2, [r3, #0]
				snakeButton = 0;
 8002f3a:	4b74      	ldr	r3, [pc, #464]	; (800310c <main+0x3a4>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	701a      	strb	r2, [r3, #0]
 8002f40:	e769      	b.n	8002e16 <main+0xae>
			}
		} else if (setupMode == 0) { // Dla setupMode równego 0 zegarek pracuje normalnie
 8002f42:	4b6e      	ldr	r3, [pc, #440]	; (80030fc <main+0x394>)
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d000      	beq.n	8002f4c <main+0x1e4>
 8002f4a:	e073      	b.n	8003034 <main+0x2cc>
			HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8002f4c:	4970      	ldr	r1, [pc, #448]	; (8003110 <main+0x3a8>)
 8002f4e:	4b5b      	ldr	r3, [pc, #364]	; (80030bc <main+0x354>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	0018      	movs	r0, r3
 8002f54:	f003 ffcc 	bl	8006ef0 <HAL_RTC_GetTime>
			HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8002f58:	496e      	ldr	r1, [pc, #440]	; (8003114 <main+0x3ac>)
 8002f5a:	4b58      	ldr	r3, [pc, #352]	; (80030bc <main+0x354>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	0018      	movs	r0, r3
 8002f60:	f004 f822 	bl	8006fa8 <HAL_RTC_GetDate>
			if (dispValue % 100 != time.Minutes) {
 8002f64:	4b6c      	ldr	r3, [pc, #432]	; (8003118 <main+0x3b0>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2164      	movs	r1, #100	; 0x64
 8002f6a:	0018      	movs	r0, r3
 8002f6c:	f7fd fa38 	bl	80003e0 <__aeabi_idivmod>
 8002f70:	000b      	movs	r3, r1
 8002f72:	001a      	movs	r2, r3
 8002f74:	4b66      	ldr	r3, [pc, #408]	; (8003110 <main+0x3a8>)
 8002f76:	785b      	ldrb	r3, [r3, #1]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d009      	beq.n	8002f90 <main+0x228>
				dispValue = (time.Hours * 100) + time.Minutes;
 8002f7c:	4b64      	ldr	r3, [pc, #400]	; (8003110 <main+0x3a8>)
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	001a      	movs	r2, r3
 8002f82:	2364      	movs	r3, #100	; 0x64
 8002f84:	4353      	muls	r3, r2
 8002f86:	4a62      	ldr	r2, [pc, #392]	; (8003110 <main+0x3a8>)
 8002f88:	7852      	ldrb	r2, [r2, #1]
 8002f8a:	189a      	adds	r2, r3, r2
 8002f8c:	4b62      	ldr	r3, [pc, #392]	; (8003118 <main+0x3b0>)
 8002f8e:	601a      	str	r2, [r3, #0]
			}
			if (onTime < offTime) {
 8002f90:	4b4b      	ldr	r3, [pc, #300]	; (80030c0 <main+0x358>)
 8002f92:	881a      	ldrh	r2, [r3, #0]
 8002f94:	4b4b      	ldr	r3, [pc, #300]	; (80030c4 <main+0x35c>)
 8002f96:	881b      	ldrh	r3, [r3, #0]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d217      	bcs.n	8002fcc <main+0x264>
				if (dispValue >= onTime && dispValue < offTime) {
 8002f9c:	4b48      	ldr	r3, [pc, #288]	; (80030c0 <main+0x358>)
 8002f9e:	881b      	ldrh	r3, [r3, #0]
 8002fa0:	001a      	movs	r2, r3
 8002fa2:	4b5d      	ldr	r3, [pc, #372]	; (8003118 <main+0x3b0>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	dc0b      	bgt.n	8002fc2 <main+0x25a>
 8002faa:	4b46      	ldr	r3, [pc, #280]	; (80030c4 <main+0x35c>)
 8002fac:	881b      	ldrh	r3, [r3, #0]
 8002fae:	001a      	movs	r2, r3
 8002fb0:	4b59      	ldr	r3, [pc, #356]	; (8003118 <main+0x3b0>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	dd04      	ble.n	8002fc2 <main+0x25a>
					brightness= onBright;
 8002fb8:	4b43      	ldr	r3, [pc, #268]	; (80030c8 <main+0x360>)
 8002fba:	881a      	ldrh	r2, [r3, #0]
 8002fbc:	4b50      	ldr	r3, [pc, #320]	; (8003100 <main+0x398>)
 8002fbe:	801a      	strh	r2, [r3, #0]
 8002fc0:	e026      	b.n	8003010 <main+0x2a8>
				} else {
					brightness= offBright;
 8002fc2:	4b42      	ldr	r3, [pc, #264]	; (80030cc <main+0x364>)
 8002fc4:	881a      	ldrh	r2, [r3, #0]
 8002fc6:	4b4e      	ldr	r3, [pc, #312]	; (8003100 <main+0x398>)
 8002fc8:	801a      	strh	r2, [r3, #0]
 8002fca:	e021      	b.n	8003010 <main+0x2a8>
				}

			} else if (onTime > offTime) {
 8002fcc:	4b3c      	ldr	r3, [pc, #240]	; (80030c0 <main+0x358>)
 8002fce:	881a      	ldrh	r2, [r3, #0]
 8002fd0:	4b3c      	ldr	r3, [pc, #240]	; (80030c4 <main+0x35c>)
 8002fd2:	881b      	ldrh	r3, [r3, #0]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d917      	bls.n	8003008 <main+0x2a0>
				if (dispValue < onTime && dispValue >= offTime) {
 8002fd8:	4b39      	ldr	r3, [pc, #228]	; (80030c0 <main+0x358>)
 8002fda:	881b      	ldrh	r3, [r3, #0]
 8002fdc:	001a      	movs	r2, r3
 8002fde:	4b4e      	ldr	r3, [pc, #312]	; (8003118 <main+0x3b0>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	dd0b      	ble.n	8002ffe <main+0x296>
 8002fe6:	4b37      	ldr	r3, [pc, #220]	; (80030c4 <main+0x35c>)
 8002fe8:	881b      	ldrh	r3, [r3, #0]
 8002fea:	001a      	movs	r2, r3
 8002fec:	4b4a      	ldr	r3, [pc, #296]	; (8003118 <main+0x3b0>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	dc04      	bgt.n	8002ffe <main+0x296>
					brightness= offBright;
 8002ff4:	4b35      	ldr	r3, [pc, #212]	; (80030cc <main+0x364>)
 8002ff6:	881a      	ldrh	r2, [r3, #0]
 8002ff8:	4b41      	ldr	r3, [pc, #260]	; (8003100 <main+0x398>)
 8002ffa:	801a      	strh	r2, [r3, #0]
 8002ffc:	e008      	b.n	8003010 <main+0x2a8>
				} else {
					brightness= onBright;
 8002ffe:	4b32      	ldr	r3, [pc, #200]	; (80030c8 <main+0x360>)
 8003000:	881a      	ldrh	r2, [r3, #0]
 8003002:	4b3f      	ldr	r3, [pc, #252]	; (8003100 <main+0x398>)
 8003004:	801a      	strh	r2, [r3, #0]
 8003006:	e003      	b.n	8003010 <main+0x2a8>
				}
			} else {
				brightness= onBright;
 8003008:	4b2f      	ldr	r3, [pc, #188]	; (80030c8 <main+0x360>)
 800300a:	881a      	ldrh	r2, [r3, #0]
 800300c:	4b3c      	ldr	r3, [pc, #240]	; (8003100 <main+0x398>)
 800300e:	801a      	strh	r2, [r3, #0]
			}
			if (clickType == 5) {
 8003010:	4b42      	ldr	r3, [pc, #264]	; (800311c <main+0x3b4>)
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	2b05      	cmp	r3, #5
 8003016:	d000      	beq.n	800301a <main+0x2b2>
 8003018:	e6fd      	b.n	8002e16 <main+0xae>
				clickType = 0;
 800301a:	4b40      	ldr	r3, [pc, #256]	; (800311c <main+0x3b4>)
 800301c:	2200      	movs	r2, #0
 800301e:	701a      	strb	r2, [r3, #0]
				setupDig = 0;
 8003020:	4b3f      	ldr	r3, [pc, #252]	; (8003120 <main+0x3b8>)
 8003022:	2200      	movs	r2, #0
 8003024:	701a      	strb	r2, [r3, #0]
				setupMode++;
 8003026:	4b35      	ldr	r3, [pc, #212]	; (80030fc <main+0x394>)
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	3301      	adds	r3, #1
 800302c:	b2da      	uxtb	r2, r3
 800302e:	4b33      	ldr	r3, [pc, #204]	; (80030fc <main+0x394>)
 8003030:	701a      	strb	r2, [r3, #0]
 8003032:	e6f0      	b.n	8002e16 <main+0xae>
			}
		} else if (setupMode != 5) {
 8003034:	4b31      	ldr	r3, [pc, #196]	; (80030fc <main+0x394>)
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	2b05      	cmp	r3, #5
 800303a:	d100      	bne.n	800303e <main+0x2d6>
 800303c:	e6eb      	b.n	8002e16 <main+0xae>
			brightness= 50;
 800303e:	4b30      	ldr	r3, [pc, #192]	; (8003100 <main+0x398>)
 8003040:	2232      	movs	r2, #50	; 0x32
 8003042:	801a      	strh	r2, [r3, #0]
			if (clickType == 5) {
 8003044:	4b35      	ldr	r3, [pc, #212]	; (800311c <main+0x3b4>)
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	2b05      	cmp	r3, #5
 800304a:	d106      	bne.n	800305a <main+0x2f2>
				clickType = 0;
 800304c:	4b33      	ldr	r3, [pc, #204]	; (800311c <main+0x3b4>)
 800304e:	2200      	movs	r2, #0
 8003050:	701a      	strb	r2, [r3, #0]
				setupMode = 0;
 8003052:	4b2a      	ldr	r3, [pc, #168]	; (80030fc <main+0x394>)
 8003054:	2200      	movs	r2, #0
 8003056:	701a      	strb	r2, [r3, #0]
 8003058:	e067      	b.n	800312a <main+0x3c2>
			} else if (clickType == 4) {
 800305a:	4b30      	ldr	r3, [pc, #192]	; (800311c <main+0x3b4>)
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	2b04      	cmp	r3, #4
 8003060:	d112      	bne.n	8003088 <main+0x320>
				clickType = 0;
 8003062:	4b2e      	ldr	r3, [pc, #184]	; (800311c <main+0x3b4>)
 8003064:	2200      	movs	r2, #0
 8003066:	701a      	strb	r2, [r3, #0]
				setupDig = 0;
 8003068:	4b2d      	ldr	r3, [pc, #180]	; (8003120 <main+0x3b8>)
 800306a:	2200      	movs	r2, #0
 800306c:	701a      	strb	r2, [r3, #0]
				setupMode = (setupMode == 1) ? 4 : setupMode - 1;
 800306e:	4b23      	ldr	r3, [pc, #140]	; (80030fc <main+0x394>)
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	2b01      	cmp	r3, #1
 8003074:	d004      	beq.n	8003080 <main+0x318>
 8003076:	4b21      	ldr	r3, [pc, #132]	; (80030fc <main+0x394>)
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	3b01      	subs	r3, #1
 800307c:	b2da      	uxtb	r2, r3
 800307e:	e000      	b.n	8003082 <main+0x31a>
 8003080:	2204      	movs	r2, #4
 8003082:	4b1e      	ldr	r3, [pc, #120]	; (80030fc <main+0x394>)
 8003084:	701a      	strb	r2, [r3, #0]
 8003086:	e050      	b.n	800312a <main+0x3c2>
			} else if (clickType == 6) {
 8003088:	4b24      	ldr	r3, [pc, #144]	; (800311c <main+0x3b4>)
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	2b06      	cmp	r3, #6
 800308e:	d14c      	bne.n	800312a <main+0x3c2>
				clickType = 0;
 8003090:	4b22      	ldr	r3, [pc, #136]	; (800311c <main+0x3b4>)
 8003092:	2200      	movs	r2, #0
 8003094:	701a      	strb	r2, [r3, #0]
				setupDig = 0;
 8003096:	4b22      	ldr	r3, [pc, #136]	; (8003120 <main+0x3b8>)
 8003098:	2200      	movs	r2, #0
 800309a:	701a      	strb	r2, [r3, #0]
				setupMode = (setupMode >= 4) ? 1 : setupMode + 1;
 800309c:	4b17      	ldr	r3, [pc, #92]	; (80030fc <main+0x394>)
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	2b03      	cmp	r3, #3
 80030a2:	d83f      	bhi.n	8003124 <main+0x3bc>
 80030a4:	4b15      	ldr	r3, [pc, #84]	; (80030fc <main+0x394>)
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	3301      	adds	r3, #1
 80030aa:	b2da      	uxtb	r2, r3
 80030ac:	e03b      	b.n	8003126 <main+0x3be>
 80030ae:	46c0      	nop			; (mov r8, r8)
 80030b0:	20000094 	.word	0x20000094
 80030b4:	20000170 	.word	0x20000170
 80030b8:	20000124 	.word	0x20000124
 80030bc:	200000f8 	.word	0x200000f8
 80030c0:	2000027a 	.word	0x2000027a
 80030c4:	2000027c 	.word	0x2000027c
 80030c8:	20000004 	.word	0x20000004
 80030cc:	20000006 	.word	0x20000006
 80030d0:	20000288 	.word	0x20000288
 80030d4:	200002a0 	.word	0x200002a0
 80030d8:	66666666 	.word	0x66666666
 80030dc:	400a6666 	.word	0x400a6666
 80030e0:	40b00000 	.word	0x40b00000
 80030e4:	cccccccd 	.word	0xcccccccd
 80030e8:	4040cccc 	.word	0x4040cccc
 80030ec:	42200000 	.word	0x42200000
 80030f0:	20000002 	.word	0x20000002
 80030f4:	41200000 	.word	0x41200000
 80030f8:	50000c00 	.word	0x50000c00
 80030fc:	20000275 	.word	0x20000275
 8003100:	20000278 	.word	0x20000278
 8003104:	200002b8 	.word	0x200002b8
 8003108:	000002ee 	.word	0x000002ee
 800310c:	20000284 	.word	0x20000284
 8003110:	20000250 	.word	0x20000250
 8003114:	20000264 	.word	0x20000264
 8003118:	2000026c 	.word	0x2000026c
 800311c:	20000274 	.word	0x20000274
 8003120:	20000276 	.word	0x20000276
 8003124:	2201      	movs	r2, #1
 8003126:	4bbe      	ldr	r3, [pc, #760]	; (8003420 <main+0x6b8>)
 8003128:	701a      	strb	r2, [r3, #0]
			}
			switch (setupMode) {
 800312a:	4bbd      	ldr	r3, [pc, #756]	; (8003420 <main+0x6b8>)
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	2b04      	cmp	r3, #4
 8003130:	d101      	bne.n	8003136 <main+0x3ce>
 8003132:	f000 fd6d 	bl	8003c10 <main+0xea8>
 8003136:	dd00      	ble.n	800313a <main+0x3d2>
 8003138:	e66d      	b.n	8002e16 <main+0xae>
 800313a:	2b03      	cmp	r3, #3
 800313c:	d100      	bne.n	8003140 <main+0x3d8>
 800313e:	e335      	b.n	80037ac <main+0xa44>
 8003140:	dd00      	ble.n	8003144 <main+0x3dc>
 8003142:	e668      	b.n	8002e16 <main+0xae>
 8003144:	2b01      	cmp	r3, #1
 8003146:	d004      	beq.n	8003152 <main+0x3ea>
 8003148:	2b02      	cmp	r3, #2
 800314a:	d100      	bne.n	800314e <main+0x3e6>
 800314c:	e248      	b.n	80035e0 <main+0x878>
 800314e:	f000 ff9f 	bl	8004090 <main+0x1328>
			case 1:
				dispValue = (time.Hours * 100) + time.Minutes;
 8003152:	4bb4      	ldr	r3, [pc, #720]	; (8003424 <main+0x6bc>)
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	001a      	movs	r2, r3
 8003158:	2364      	movs	r3, #100	; 0x64
 800315a:	4353      	muls	r3, r2
 800315c:	4ab1      	ldr	r2, [pc, #708]	; (8003424 <main+0x6bc>)
 800315e:	7852      	ldrb	r2, [r2, #1]
 8003160:	189a      	adds	r2, r3, r2
 8003162:	4bb1      	ldr	r3, [pc, #708]	; (8003428 <main+0x6c0>)
 8003164:	601a      	str	r2, [r3, #0]
				newDig = ((int) (dispValue / pow(10.0, setupDig)) % 10);
 8003166:	4bb0      	ldr	r3, [pc, #704]	; (8003428 <main+0x6c0>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	0018      	movs	r0, r3
 800316c:	f7ff f876 	bl	800225c <__aeabi_i2d>
 8003170:	0004      	movs	r4, r0
 8003172:	000d      	movs	r5, r1
 8003174:	4bad      	ldr	r3, [pc, #692]	; (800342c <main+0x6c4>)
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	0018      	movs	r0, r3
 800317a:	f7ff f89f 	bl	80022bc <__aeabi_ui2d>
 800317e:	0002      	movs	r2, r0
 8003180:	000b      	movs	r3, r1
 8003182:	2000      	movs	r0, #0
 8003184:	49aa      	ldr	r1, [pc, #680]	; (8003430 <main+0x6c8>)
 8003186:	f005 fd35 	bl	8008bf4 <pow>
 800318a:	0002      	movs	r2, r0
 800318c:	000b      	movs	r3, r1
 800318e:	0020      	movs	r0, r4
 8003190:	0029      	movs	r1, r5
 8003192:	f7fd fdd1 	bl	8000d38 <__aeabi_ddiv>
 8003196:	0002      	movs	r2, r0
 8003198:	000b      	movs	r3, r1
 800319a:	0010      	movs	r0, r2
 800319c:	0019      	movs	r1, r3
 800319e:	f7ff f827 	bl	80021f0 <__aeabi_d2iz>
 80031a2:	0003      	movs	r3, r0
 80031a4:	210a      	movs	r1, #10
 80031a6:	0018      	movs	r0, r3
 80031a8:	f7fd f91a 	bl	80003e0 <__aeabi_idivmod>
 80031ac:	000b      	movs	r3, r1
 80031ae:	b2da      	uxtb	r2, r3
 80031b0:	4ba0      	ldr	r3, [pc, #640]	; (8003434 <main+0x6cc>)
 80031b2:	701a      	strb	r2, [r3, #0]
				if (clickType == 2) {
 80031b4:	4ba0      	ldr	r3, [pc, #640]	; (8003438 <main+0x6d0>)
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d13b      	bne.n	8003234 <main+0x4cc>
					delayForBlink = 25000;
 80031bc:	4b9f      	ldr	r3, [pc, #636]	; (800343c <main+0x6d4>)
 80031be:	4aa0      	ldr	r2, [pc, #640]	; (8003440 <main+0x6d8>)
 80031c0:	601a      	str	r2, [r3, #0]
					clickType = 0;
 80031c2:	4b9d      	ldr	r3, [pc, #628]	; (8003438 <main+0x6d0>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	701a      	strb	r2, [r3, #0]
					setupDig = (setupDig + 1) % 4;
 80031c8:	4b98      	ldr	r3, [pc, #608]	; (800342c <main+0x6c4>)
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	3301      	adds	r3, #1
 80031ce:	4a9d      	ldr	r2, [pc, #628]	; (8003444 <main+0x6dc>)
 80031d0:	4013      	ands	r3, r2
 80031d2:	d504      	bpl.n	80031de <main+0x476>
 80031d4:	3b01      	subs	r3, #1
 80031d6:	2204      	movs	r2, #4
 80031d8:	4252      	negs	r2, r2
 80031da:	4313      	orrs	r3, r2
 80031dc:	3301      	adds	r3, #1
 80031de:	b2da      	uxtb	r2, r3
 80031e0:	4b92      	ldr	r3, [pc, #584]	; (800342c <main+0x6c4>)
 80031e2:	701a      	strb	r2, [r3, #0]
					newDig = ((int) (dispValue / pow(10.0, setupDig)) % 10);
 80031e4:	4b90      	ldr	r3, [pc, #576]	; (8003428 <main+0x6c0>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	0018      	movs	r0, r3
 80031ea:	f7ff f837 	bl	800225c <__aeabi_i2d>
 80031ee:	0004      	movs	r4, r0
 80031f0:	000d      	movs	r5, r1
 80031f2:	4b8e      	ldr	r3, [pc, #568]	; (800342c <main+0x6c4>)
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	0018      	movs	r0, r3
 80031f8:	f7ff f860 	bl	80022bc <__aeabi_ui2d>
 80031fc:	0002      	movs	r2, r0
 80031fe:	000b      	movs	r3, r1
 8003200:	2000      	movs	r0, #0
 8003202:	498b      	ldr	r1, [pc, #556]	; (8003430 <main+0x6c8>)
 8003204:	f005 fcf6 	bl	8008bf4 <pow>
 8003208:	0002      	movs	r2, r0
 800320a:	000b      	movs	r3, r1
 800320c:	0020      	movs	r0, r4
 800320e:	0029      	movs	r1, r5
 8003210:	f7fd fd92 	bl	8000d38 <__aeabi_ddiv>
 8003214:	0002      	movs	r2, r0
 8003216:	000b      	movs	r3, r1
 8003218:	0010      	movs	r0, r2
 800321a:	0019      	movs	r1, r3
 800321c:	f7fe ffe8 	bl	80021f0 <__aeabi_d2iz>
 8003220:	0003      	movs	r3, r0
 8003222:	210a      	movs	r1, #10
 8003224:	0018      	movs	r0, r3
 8003226:	f7fd f8db 	bl	80003e0 <__aeabi_idivmod>
 800322a:	000b      	movs	r3, r1
 800322c:	b2da      	uxtb	r2, r3
 800322e:	4b81      	ldr	r3, [pc, #516]	; (8003434 <main+0x6cc>)
 8003230:	701a      	strb	r2, [r3, #0]
 8003232:	e116      	b.n	8003462 <main+0x6fa>
				} else if (clickType == 1) {
 8003234:	4b80      	ldr	r3, [pc, #512]	; (8003438 <main+0x6d0>)
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	2b01      	cmp	r3, #1
 800323a:	d000      	beq.n	800323e <main+0x4d6>
 800323c:	e07b      	b.n	8003336 <main+0x5ce>
					clickType = 0;
 800323e:	4b7e      	ldr	r3, [pc, #504]	; (8003438 <main+0x6d0>)
 8003240:	2200      	movs	r2, #0
 8003242:	701a      	strb	r2, [r3, #0]
					if (setupDig == 0) {
 8003244:	4b79      	ldr	r3, [pc, #484]	; (800342c <main+0x6c4>)
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d10b      	bne.n	8003264 <main+0x4fc>
						newDig = (newDig + 1) % 10;
 800324c:	4b79      	ldr	r3, [pc, #484]	; (8003434 <main+0x6cc>)
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	3301      	adds	r3, #1
 8003252:	210a      	movs	r1, #10
 8003254:	0018      	movs	r0, r3
 8003256:	f7fd f8c3 	bl	80003e0 <__aeabi_idivmod>
 800325a:	000b      	movs	r3, r1
 800325c:	b2da      	uxtb	r2, r3
 800325e:	4b75      	ldr	r3, [pc, #468]	; (8003434 <main+0x6cc>)
 8003260:	701a      	strb	r2, [r3, #0]
 8003262:	e0fe      	b.n	8003462 <main+0x6fa>
					} else if (setupDig == 1) {
 8003264:	4b71      	ldr	r3, [pc, #452]	; (800342c <main+0x6c4>)
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	2b01      	cmp	r3, #1
 800326a:	d10b      	bne.n	8003284 <main+0x51c>
						newDig = (newDig + 1) % 6;
 800326c:	4b71      	ldr	r3, [pc, #452]	; (8003434 <main+0x6cc>)
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	3301      	adds	r3, #1
 8003272:	2106      	movs	r1, #6
 8003274:	0018      	movs	r0, r3
 8003276:	f7fd f8b3 	bl	80003e0 <__aeabi_idivmod>
 800327a:	000b      	movs	r3, r1
 800327c:	b2da      	uxtb	r2, r3
 800327e:	4b6d      	ldr	r3, [pc, #436]	; (8003434 <main+0x6cc>)
 8003280:	701a      	strb	r2, [r3, #0]
 8003282:	e0ee      	b.n	8003462 <main+0x6fa>
					} else if (setupDig == 2) {
 8003284:	4b69      	ldr	r3, [pc, #420]	; (800342c <main+0x6c4>)
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	2b02      	cmp	r3, #2
 800328a:	d126      	bne.n	80032da <main+0x572>
						if (((dispValue / 1000) % 10) == 2) {
 800328c:	4b66      	ldr	r3, [pc, #408]	; (8003428 <main+0x6c0>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	22fa      	movs	r2, #250	; 0xfa
 8003292:	0091      	lsls	r1, r2, #2
 8003294:	0018      	movs	r0, r3
 8003296:	f7fc ffbd 	bl	8000214 <__divsi3>
 800329a:	0003      	movs	r3, r0
 800329c:	210a      	movs	r1, #10
 800329e:	0018      	movs	r0, r3
 80032a0:	f7fd f89e 	bl	80003e0 <__aeabi_idivmod>
 80032a4:	000b      	movs	r3, r1
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d10b      	bne.n	80032c2 <main+0x55a>
							newDig = (newDig + 1) % 5;
 80032aa:	4b62      	ldr	r3, [pc, #392]	; (8003434 <main+0x6cc>)
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	3301      	adds	r3, #1
 80032b0:	2105      	movs	r1, #5
 80032b2:	0018      	movs	r0, r3
 80032b4:	f7fd f894 	bl	80003e0 <__aeabi_idivmod>
 80032b8:	000b      	movs	r3, r1
 80032ba:	b2da      	uxtb	r2, r3
 80032bc:	4b5d      	ldr	r3, [pc, #372]	; (8003434 <main+0x6cc>)
 80032be:	701a      	strb	r2, [r3, #0]
 80032c0:	e0cf      	b.n	8003462 <main+0x6fa>
						} else {
							newDig = (newDig + 1) % 10;
 80032c2:	4b5c      	ldr	r3, [pc, #368]	; (8003434 <main+0x6cc>)
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	3301      	adds	r3, #1
 80032c8:	210a      	movs	r1, #10
 80032ca:	0018      	movs	r0, r3
 80032cc:	f7fd f888 	bl	80003e0 <__aeabi_idivmod>
 80032d0:	000b      	movs	r3, r1
 80032d2:	b2da      	uxtb	r2, r3
 80032d4:	4b57      	ldr	r3, [pc, #348]	; (8003434 <main+0x6cc>)
 80032d6:	701a      	strb	r2, [r3, #0]
 80032d8:	e0c3      	b.n	8003462 <main+0x6fa>
						}
					} else if (setupDig == 3) {
 80032da:	4b54      	ldr	r3, [pc, #336]	; (800342c <main+0x6c4>)
 80032dc:	781b      	ldrb	r3, [r3, #0]
 80032de:	2b03      	cmp	r3, #3
 80032e0:	d000      	beq.n	80032e4 <main+0x57c>
 80032e2:	e0be      	b.n	8003462 <main+0x6fa>
						if (((dispValue / 100) % 10) > 4) {
 80032e4:	4b50      	ldr	r3, [pc, #320]	; (8003428 <main+0x6c0>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	2164      	movs	r1, #100	; 0x64
 80032ea:	0018      	movs	r0, r3
 80032ec:	f7fc ff92 	bl	8000214 <__divsi3>
 80032f0:	0003      	movs	r3, r0
 80032f2:	210a      	movs	r1, #10
 80032f4:	0018      	movs	r0, r3
 80032f6:	f7fd f873 	bl	80003e0 <__aeabi_idivmod>
 80032fa:	000b      	movs	r3, r1
 80032fc:	2b04      	cmp	r3, #4
 80032fe:	dd0e      	ble.n	800331e <main+0x5b6>
							newDig = (newDig + 1) % 2;
 8003300:	4b4c      	ldr	r3, [pc, #304]	; (8003434 <main+0x6cc>)
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	3301      	adds	r3, #1
 8003306:	4a50      	ldr	r2, [pc, #320]	; (8003448 <main+0x6e0>)
 8003308:	4013      	ands	r3, r2
 800330a:	d504      	bpl.n	8003316 <main+0x5ae>
 800330c:	3b01      	subs	r3, #1
 800330e:	2202      	movs	r2, #2
 8003310:	4252      	negs	r2, r2
 8003312:	4313      	orrs	r3, r2
 8003314:	3301      	adds	r3, #1
 8003316:	b2da      	uxtb	r2, r3
 8003318:	4b46      	ldr	r3, [pc, #280]	; (8003434 <main+0x6cc>)
 800331a:	701a      	strb	r2, [r3, #0]
 800331c:	e0a1      	b.n	8003462 <main+0x6fa>
						} else {
							newDig = (newDig + 1) % 3;
 800331e:	4b45      	ldr	r3, [pc, #276]	; (8003434 <main+0x6cc>)
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	3301      	adds	r3, #1
 8003324:	2103      	movs	r1, #3
 8003326:	0018      	movs	r0, r3
 8003328:	f7fd f85a 	bl	80003e0 <__aeabi_idivmod>
 800332c:	000b      	movs	r3, r1
 800332e:	b2da      	uxtb	r2, r3
 8003330:	4b40      	ldr	r3, [pc, #256]	; (8003434 <main+0x6cc>)
 8003332:	701a      	strb	r2, [r3, #0]
 8003334:	e095      	b.n	8003462 <main+0x6fa>
						}
					}
				} else if (clickType == 3) {
 8003336:	4b40      	ldr	r3, [pc, #256]	; (8003438 <main+0x6d0>)
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	2b03      	cmp	r3, #3
 800333c:	d000      	beq.n	8003340 <main+0x5d8>
 800333e:	e090      	b.n	8003462 <main+0x6fa>
					clickType = 0;
 8003340:	4b3d      	ldr	r3, [pc, #244]	; (8003438 <main+0x6d0>)
 8003342:	2200      	movs	r2, #0
 8003344:	701a      	strb	r2, [r3, #0]
					if (setupDig == 0) {
 8003346:	4b39      	ldr	r3, [pc, #228]	; (800342c <main+0x6c4>)
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d10b      	bne.n	8003366 <main+0x5fe>
						newDig = (newDig + 9) % 10;
 800334e:	4b39      	ldr	r3, [pc, #228]	; (8003434 <main+0x6cc>)
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	3309      	adds	r3, #9
 8003354:	210a      	movs	r1, #10
 8003356:	0018      	movs	r0, r3
 8003358:	f7fd f842 	bl	80003e0 <__aeabi_idivmod>
 800335c:	000b      	movs	r3, r1
 800335e:	b2da      	uxtb	r2, r3
 8003360:	4b34      	ldr	r3, [pc, #208]	; (8003434 <main+0x6cc>)
 8003362:	701a      	strb	r2, [r3, #0]
 8003364:	e07d      	b.n	8003462 <main+0x6fa>
					} else if (setupDig == 1) {
 8003366:	4b31      	ldr	r3, [pc, #196]	; (800342c <main+0x6c4>)
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	2b01      	cmp	r3, #1
 800336c:	d10b      	bne.n	8003386 <main+0x61e>
						newDig = (newDig + 5) % 6;
 800336e:	4b31      	ldr	r3, [pc, #196]	; (8003434 <main+0x6cc>)
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	3305      	adds	r3, #5
 8003374:	2106      	movs	r1, #6
 8003376:	0018      	movs	r0, r3
 8003378:	f7fd f832 	bl	80003e0 <__aeabi_idivmod>
 800337c:	000b      	movs	r3, r1
 800337e:	b2da      	uxtb	r2, r3
 8003380:	4b2c      	ldr	r3, [pc, #176]	; (8003434 <main+0x6cc>)
 8003382:	701a      	strb	r2, [r3, #0]
 8003384:	e06d      	b.n	8003462 <main+0x6fa>
					} else if (setupDig == 2) {
 8003386:	4b29      	ldr	r3, [pc, #164]	; (800342c <main+0x6c4>)
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	2b02      	cmp	r3, #2
 800338c:	d126      	bne.n	80033dc <main+0x674>
						if (((dispValue / 1000) % 10) == 2) {
 800338e:	4b26      	ldr	r3, [pc, #152]	; (8003428 <main+0x6c0>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	22fa      	movs	r2, #250	; 0xfa
 8003394:	0091      	lsls	r1, r2, #2
 8003396:	0018      	movs	r0, r3
 8003398:	f7fc ff3c 	bl	8000214 <__divsi3>
 800339c:	0003      	movs	r3, r0
 800339e:	210a      	movs	r1, #10
 80033a0:	0018      	movs	r0, r3
 80033a2:	f7fd f81d 	bl	80003e0 <__aeabi_idivmod>
 80033a6:	000b      	movs	r3, r1
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	d10b      	bne.n	80033c4 <main+0x65c>
							newDig = (newDig + 4) % 5;
 80033ac:	4b21      	ldr	r3, [pc, #132]	; (8003434 <main+0x6cc>)
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	3304      	adds	r3, #4
 80033b2:	2105      	movs	r1, #5
 80033b4:	0018      	movs	r0, r3
 80033b6:	f7fd f813 	bl	80003e0 <__aeabi_idivmod>
 80033ba:	000b      	movs	r3, r1
 80033bc:	b2da      	uxtb	r2, r3
 80033be:	4b1d      	ldr	r3, [pc, #116]	; (8003434 <main+0x6cc>)
 80033c0:	701a      	strb	r2, [r3, #0]
 80033c2:	e04e      	b.n	8003462 <main+0x6fa>
						} else {
							newDig = (newDig + 9) % 10;
 80033c4:	4b1b      	ldr	r3, [pc, #108]	; (8003434 <main+0x6cc>)
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	3309      	adds	r3, #9
 80033ca:	210a      	movs	r1, #10
 80033cc:	0018      	movs	r0, r3
 80033ce:	f7fd f807 	bl	80003e0 <__aeabi_idivmod>
 80033d2:	000b      	movs	r3, r1
 80033d4:	b2da      	uxtb	r2, r3
 80033d6:	4b17      	ldr	r3, [pc, #92]	; (8003434 <main+0x6cc>)
 80033d8:	701a      	strb	r2, [r3, #0]
 80033da:	e042      	b.n	8003462 <main+0x6fa>
						}
					} else if (setupDig == 3) {
 80033dc:	4b13      	ldr	r3, [pc, #76]	; (800342c <main+0x6c4>)
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	2b03      	cmp	r3, #3
 80033e2:	d13e      	bne.n	8003462 <main+0x6fa>
						if (((dispValue / 100) % 10) > 4) {
 80033e4:	4b10      	ldr	r3, [pc, #64]	; (8003428 <main+0x6c0>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2164      	movs	r1, #100	; 0x64
 80033ea:	0018      	movs	r0, r3
 80033ec:	f7fc ff12 	bl	8000214 <__divsi3>
 80033f0:	0003      	movs	r3, r0
 80033f2:	210a      	movs	r1, #10
 80033f4:	0018      	movs	r0, r3
 80033f6:	f7fc fff3 	bl	80003e0 <__aeabi_idivmod>
 80033fa:	000b      	movs	r3, r1
 80033fc:	2b04      	cmp	r3, #4
 80033fe:	dd25      	ble.n	800344c <main+0x6e4>
							newDig = (newDig + 1) % 2;
 8003400:	4b0c      	ldr	r3, [pc, #48]	; (8003434 <main+0x6cc>)
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	3301      	adds	r3, #1
 8003406:	4a10      	ldr	r2, [pc, #64]	; (8003448 <main+0x6e0>)
 8003408:	4013      	ands	r3, r2
 800340a:	d504      	bpl.n	8003416 <main+0x6ae>
 800340c:	3b01      	subs	r3, #1
 800340e:	2202      	movs	r2, #2
 8003410:	4252      	negs	r2, r2
 8003412:	4313      	orrs	r3, r2
 8003414:	3301      	adds	r3, #1
 8003416:	b2da      	uxtb	r2, r3
 8003418:	4b06      	ldr	r3, [pc, #24]	; (8003434 <main+0x6cc>)
 800341a:	701a      	strb	r2, [r3, #0]
 800341c:	e021      	b.n	8003462 <main+0x6fa>
 800341e:	46c0      	nop			; (mov r8, r8)
 8003420:	20000275 	.word	0x20000275
 8003424:	20000250 	.word	0x20000250
 8003428:	2000026c 	.word	0x2000026c
 800342c:	20000276 	.word	0x20000276
 8003430:	40240000 	.word	0x40240000
 8003434:	20000277 	.word	0x20000277
 8003438:	20000274 	.word	0x20000274
 800343c:	200002bc 	.word	0x200002bc
 8003440:	000061a8 	.word	0x000061a8
 8003444:	80000003 	.word	0x80000003
 8003448:	80000001 	.word	0x80000001
						} else {
							newDig = (newDig + 2) % 3;
 800344c:	4bca      	ldr	r3, [pc, #808]	; (8003778 <main+0xa10>)
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	3302      	adds	r3, #2
 8003452:	2103      	movs	r1, #3
 8003454:	0018      	movs	r0, r3
 8003456:	f7fc ffc3 	bl	80003e0 <__aeabi_idivmod>
 800345a:	000b      	movs	r3, r1
 800345c:	b2da      	uxtb	r2, r3
 800345e:	4bc6      	ldr	r3, [pc, #792]	; (8003778 <main+0xa10>)
 8003460:	701a      	strb	r2, [r3, #0]
						}
					}
				}
				if (newDig != ((int) (dispValue / pow(10.0, setupDig)) % 10)) {
 8003462:	4bc5      	ldr	r3, [pc, #788]	; (8003778 <main+0xa10>)
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	001e      	movs	r6, r3
 8003468:	4bc4      	ldr	r3, [pc, #784]	; (800377c <main+0xa14>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	0018      	movs	r0, r3
 800346e:	f7fe fef5 	bl	800225c <__aeabi_i2d>
 8003472:	0004      	movs	r4, r0
 8003474:	000d      	movs	r5, r1
 8003476:	4bc2      	ldr	r3, [pc, #776]	; (8003780 <main+0xa18>)
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	0018      	movs	r0, r3
 800347c:	f7fe ff1e 	bl	80022bc <__aeabi_ui2d>
 8003480:	0002      	movs	r2, r0
 8003482:	000b      	movs	r3, r1
 8003484:	2000      	movs	r0, #0
 8003486:	49bf      	ldr	r1, [pc, #764]	; (8003784 <main+0xa1c>)
 8003488:	f005 fbb4 	bl	8008bf4 <pow>
 800348c:	0002      	movs	r2, r0
 800348e:	000b      	movs	r3, r1
 8003490:	0020      	movs	r0, r4
 8003492:	0029      	movs	r1, r5
 8003494:	f7fd fc50 	bl	8000d38 <__aeabi_ddiv>
 8003498:	0002      	movs	r2, r0
 800349a:	000b      	movs	r3, r1
 800349c:	0010      	movs	r0, r2
 800349e:	0019      	movs	r1, r3
 80034a0:	f7fe fea6 	bl	80021f0 <__aeabi_d2iz>
 80034a4:	0003      	movs	r3, r0
 80034a6:	210a      	movs	r1, #10
 80034a8:	0018      	movs	r0, r3
 80034aa:	f7fc ff99 	bl	80003e0 <__aeabi_idivmod>
 80034ae:	000b      	movs	r3, r1
 80034b0:	429e      	cmp	r6, r3
 80034b2:	d101      	bne.n	80034b8 <main+0x750>
 80034b4:	f000 fde2 	bl	800407c <main+0x1314>
					delayForBlink = 0;
 80034b8:	4bb3      	ldr	r3, [pc, #716]	; (8003788 <main+0xa20>)
 80034ba:	2200      	movs	r2, #0
 80034bc:	601a      	str	r2, [r3, #0]
					dispValue = (dispValue
							- (((int) (dispValue / pow(10.0, setupDig)) % 10))
 80034be:	4baf      	ldr	r3, [pc, #700]	; (800377c <main+0xa14>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	0018      	movs	r0, r3
 80034c4:	f7fe feca 	bl	800225c <__aeabi_i2d>
 80034c8:	0004      	movs	r4, r0
 80034ca:	000d      	movs	r5, r1
 80034cc:	4bab      	ldr	r3, [pc, #684]	; (800377c <main+0xa14>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	0018      	movs	r0, r3
 80034d2:	f7fe fec3 	bl	800225c <__aeabi_i2d>
 80034d6:	6038      	str	r0, [r7, #0]
 80034d8:	6079      	str	r1, [r7, #4]
 80034da:	4ba9      	ldr	r3, [pc, #676]	; (8003780 <main+0xa18>)
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	0018      	movs	r0, r3
 80034e0:	f7fe feec 	bl	80022bc <__aeabi_ui2d>
 80034e4:	0002      	movs	r2, r0
 80034e6:	000b      	movs	r3, r1
 80034e8:	2000      	movs	r0, #0
 80034ea:	49a6      	ldr	r1, [pc, #664]	; (8003784 <main+0xa1c>)
 80034ec:	f005 fb82 	bl	8008bf4 <pow>
 80034f0:	0002      	movs	r2, r0
 80034f2:	000b      	movs	r3, r1
 80034f4:	6838      	ldr	r0, [r7, #0]
 80034f6:	6879      	ldr	r1, [r7, #4]
 80034f8:	f7fd fc1e 	bl	8000d38 <__aeabi_ddiv>
 80034fc:	0002      	movs	r2, r0
 80034fe:	000b      	movs	r3, r1
 8003500:	0010      	movs	r0, r2
 8003502:	0019      	movs	r1, r3
 8003504:	f7fe fe74 	bl	80021f0 <__aeabi_d2iz>
 8003508:	0003      	movs	r3, r0
 800350a:	210a      	movs	r1, #10
 800350c:	0018      	movs	r0, r3
 800350e:	f7fc ff67 	bl	80003e0 <__aeabi_idivmod>
 8003512:	000b      	movs	r3, r1
									* pow(10.0, setupDig))
 8003514:	0018      	movs	r0, r3
 8003516:	f7fe fea1 	bl	800225c <__aeabi_i2d>
 800351a:	6038      	str	r0, [r7, #0]
 800351c:	6079      	str	r1, [r7, #4]
 800351e:	4b98      	ldr	r3, [pc, #608]	; (8003780 <main+0xa18>)
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	0018      	movs	r0, r3
 8003524:	f7fe feca 	bl	80022bc <__aeabi_ui2d>
 8003528:	0002      	movs	r2, r0
 800352a:	000b      	movs	r3, r1
 800352c:	2000      	movs	r0, #0
 800352e:	4995      	ldr	r1, [pc, #596]	; (8003784 <main+0xa1c>)
 8003530:	f005 fb60 	bl	8008bf4 <pow>
 8003534:	0002      	movs	r2, r0
 8003536:	000b      	movs	r3, r1
 8003538:	6838      	ldr	r0, [r7, #0]
 800353a:	6879      	ldr	r1, [r7, #4]
 800353c:	f7fd fff6 	bl	800152c <__aeabi_dmul>
 8003540:	0002      	movs	r2, r0
 8003542:	000b      	movs	r3, r1
							- (((int) (dispValue / pow(10.0, setupDig)) % 10))
 8003544:	0020      	movs	r0, r4
 8003546:	0029      	movs	r1, r5
 8003548:	f7fe fab2 	bl	8001ab0 <__aeabi_dsub>
 800354c:	0002      	movs	r2, r0
 800354e:	000b      	movs	r3, r1
 8003550:	603a      	str	r2, [r7, #0]
 8003552:	607b      	str	r3, [r7, #4]
							+ (newDig * pow(10.0, setupDig));
 8003554:	4b88      	ldr	r3, [pc, #544]	; (8003778 <main+0xa10>)
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	0018      	movs	r0, r3
 800355a:	f7fe fe7f 	bl	800225c <__aeabi_i2d>
 800355e:	0004      	movs	r4, r0
 8003560:	000d      	movs	r5, r1
 8003562:	4b87      	ldr	r3, [pc, #540]	; (8003780 <main+0xa18>)
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	0018      	movs	r0, r3
 8003568:	f7fe fea8 	bl	80022bc <__aeabi_ui2d>
 800356c:	0002      	movs	r2, r0
 800356e:	000b      	movs	r3, r1
 8003570:	2000      	movs	r0, #0
 8003572:	4984      	ldr	r1, [pc, #528]	; (8003784 <main+0xa1c>)
 8003574:	f005 fb3e 	bl	8008bf4 <pow>
 8003578:	0002      	movs	r2, r0
 800357a:	000b      	movs	r3, r1
 800357c:	0020      	movs	r0, r4
 800357e:	0029      	movs	r1, r5
 8003580:	f7fd ffd4 	bl	800152c <__aeabi_dmul>
 8003584:	0002      	movs	r2, r0
 8003586:	000b      	movs	r3, r1
 8003588:	6838      	ldr	r0, [r7, #0]
 800358a:	6879      	ldr	r1, [r7, #4]
 800358c:	f7fd f874 	bl	8000678 <__aeabi_dadd>
 8003590:	0002      	movs	r2, r0
 8003592:	000b      	movs	r3, r1
					dispValue = (dispValue
 8003594:	0010      	movs	r0, r2
 8003596:	0019      	movs	r1, r3
 8003598:	f7fe fe2a 	bl	80021f0 <__aeabi_d2iz>
 800359c:	0002      	movs	r2, r0
 800359e:	4b77      	ldr	r3, [pc, #476]	; (800377c <main+0xa14>)
 80035a0:	601a      	str	r2, [r3, #0]
					time.Hours = dispValue / 100;
 80035a2:	4b76      	ldr	r3, [pc, #472]	; (800377c <main+0xa14>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	2164      	movs	r1, #100	; 0x64
 80035a8:	0018      	movs	r0, r3
 80035aa:	f7fc fe33 	bl	8000214 <__divsi3>
 80035ae:	0003      	movs	r3, r0
 80035b0:	b2da      	uxtb	r2, r3
 80035b2:	4b76      	ldr	r3, [pc, #472]	; (800378c <main+0xa24>)
 80035b4:	701a      	strb	r2, [r3, #0]
					time.Minutes = dispValue % 100;
 80035b6:	4b71      	ldr	r3, [pc, #452]	; (800377c <main+0xa14>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2164      	movs	r1, #100	; 0x64
 80035bc:	0018      	movs	r0, r3
 80035be:	f7fc ff0f 	bl	80003e0 <__aeabi_idivmod>
 80035c2:	000b      	movs	r3, r1
 80035c4:	b2da      	uxtb	r2, r3
 80035c6:	4b71      	ldr	r3, [pc, #452]	; (800378c <main+0xa24>)
 80035c8:	705a      	strb	r2, [r3, #1]
					time.Seconds = 0;
 80035ca:	4b70      	ldr	r3, [pc, #448]	; (800378c <main+0xa24>)
 80035cc:	2200      	movs	r2, #0
 80035ce:	709a      	strb	r2, [r3, #2]
					HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BIN);
 80035d0:	496e      	ldr	r1, [pc, #440]	; (800378c <main+0xa24>)
 80035d2:	4b6f      	ldr	r3, [pc, #444]	; (8003790 <main+0xa28>)
 80035d4:	2200      	movs	r2, #0
 80035d6:	0018      	movs	r0, r3
 80035d8:	f003 fbe2 	bl	8006da0 <HAL_RTC_SetTime>
				}

				break;
 80035dc:	f000 fd4e 	bl	800407c <main+0x1314>
			case 2:
				dispValue = ((onBright == 100) ? 99 : onBright)
 80035e0:	4b6c      	ldr	r3, [pc, #432]	; (8003794 <main+0xa2c>)
 80035e2:	881b      	ldrh	r3, [r3, #0]
 80035e4:	2b64      	cmp	r3, #100	; 0x64
 80035e6:	d003      	beq.n	80035f0 <main+0x888>
 80035e8:	4b6a      	ldr	r3, [pc, #424]	; (8003794 <main+0xa2c>)
 80035ea:	881b      	ldrh	r3, [r3, #0]
 80035ec:	001a      	movs	r2, r3
 80035ee:	e000      	b.n	80035f2 <main+0x88a>
 80035f0:	2263      	movs	r2, #99	; 0x63
						+ (((offBright == 100) ? 99 : offBright) * 100);
 80035f2:	4b69      	ldr	r3, [pc, #420]	; (8003798 <main+0xa30>)
 80035f4:	881b      	ldrh	r3, [r3, #0]
 80035f6:	2b64      	cmp	r3, #100	; 0x64
 80035f8:	d005      	beq.n	8003606 <main+0x89e>
 80035fa:	4b67      	ldr	r3, [pc, #412]	; (8003798 <main+0xa30>)
 80035fc:	881b      	ldrh	r3, [r3, #0]
 80035fe:	0019      	movs	r1, r3
 8003600:	2364      	movs	r3, #100	; 0x64
 8003602:	434b      	muls	r3, r1
 8003604:	e000      	b.n	8003608 <main+0x8a0>
 8003606:	4b65      	ldr	r3, [pc, #404]	; (800379c <main+0xa34>)
 8003608:	18d2      	adds	r2, r2, r3
				dispValue = ((onBright == 100) ? 99 : onBright)
 800360a:	4b5c      	ldr	r3, [pc, #368]	; (800377c <main+0xa14>)
 800360c:	601a      	str	r2, [r3, #0]
				if (clickType == 2) {
 800360e:	4b64      	ldr	r3, [pc, #400]	; (80037a0 <main+0xa38>)
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	2b02      	cmp	r3, #2
 8003614:	d115      	bne.n	8003642 <main+0x8da>
					delayForBlink = 25000;
 8003616:	4b5c      	ldr	r3, [pc, #368]	; (8003788 <main+0xa20>)
 8003618:	4a62      	ldr	r2, [pc, #392]	; (80037a4 <main+0xa3c>)
 800361a:	601a      	str	r2, [r3, #0]
					clickType = 0;
 800361c:	4b60      	ldr	r3, [pc, #384]	; (80037a0 <main+0xa38>)
 800361e:	2200      	movs	r2, #0
 8003620:	701a      	strb	r2, [r3, #0]
					setupDig = (setupDig + 1) % 2;
 8003622:	4b57      	ldr	r3, [pc, #348]	; (8003780 <main+0xa18>)
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	3301      	adds	r3, #1
 8003628:	4a5f      	ldr	r2, [pc, #380]	; (80037a8 <main+0xa40>)
 800362a:	4013      	ands	r3, r2
 800362c:	d504      	bpl.n	8003638 <main+0x8d0>
 800362e:	3b01      	subs	r3, #1
 8003630:	2202      	movs	r2, #2
 8003632:	4252      	negs	r2, r2
 8003634:	4313      	orrs	r3, r2
 8003636:	3301      	adds	r3, #1
 8003638:	b2da      	uxtb	r2, r3
 800363a:	4b51      	ldr	r3, [pc, #324]	; (8003780 <main+0xa18>)
 800363c:	701a      	strb	r2, [r3, #0]
					} else {
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR3, offBright);
						offBright = (((offBright / 5) + 20) % 21) * 5;
					}
				}
				break;
 800363e:	f000 fd20 	bl	8004082 <main+0x131a>
				} else if (clickType == 1) {
 8003642:	4b57      	ldr	r3, [pc, #348]	; (80037a0 <main+0xa38>)
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	2b01      	cmp	r3, #1
 8003648:	d147      	bne.n	80036da <main+0x972>
					delayForBlink = 0;
 800364a:	4b4f      	ldr	r3, [pc, #316]	; (8003788 <main+0xa20>)
 800364c:	2200      	movs	r2, #0
 800364e:	601a      	str	r2, [r3, #0]
					clickType = 0;
 8003650:	4b53      	ldr	r3, [pc, #332]	; (80037a0 <main+0xa38>)
 8003652:	2200      	movs	r2, #0
 8003654:	701a      	strb	r2, [r3, #0]
					if (setupDig == 0) {
 8003656:	4b4a      	ldr	r3, [pc, #296]	; (8003780 <main+0xa18>)
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d11e      	bne.n	800369c <main+0x934>
						onBright = (((onBright / 5) + 1) % 21) * 5;
 800365e:	4b4d      	ldr	r3, [pc, #308]	; (8003794 <main+0xa2c>)
 8003660:	881b      	ldrh	r3, [r3, #0]
 8003662:	2105      	movs	r1, #5
 8003664:	0018      	movs	r0, r3
 8003666:	f7fc fd4b 	bl	8000100 <__udivsi3>
 800366a:	0003      	movs	r3, r0
 800366c:	b29b      	uxth	r3, r3
 800366e:	3301      	adds	r3, #1
 8003670:	2115      	movs	r1, #21
 8003672:	0018      	movs	r0, r3
 8003674:	f7fc feb4 	bl	80003e0 <__aeabi_idivmod>
 8003678:	000b      	movs	r3, r1
 800367a:	b29b      	uxth	r3, r3
 800367c:	1c1a      	adds	r2, r3, #0
 800367e:	0092      	lsls	r2, r2, #2
 8003680:	18d3      	adds	r3, r2, r3
 8003682:	b29a      	uxth	r2, r3
 8003684:	4b43      	ldr	r3, [pc, #268]	; (8003794 <main+0xa2c>)
 8003686:	801a      	strh	r2, [r3, #0]
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR2, onBright);
 8003688:	4b42      	ldr	r3, [pc, #264]	; (8003794 <main+0xa2c>)
 800368a:	881b      	ldrh	r3, [r3, #0]
 800368c:	001a      	movs	r2, r3
 800368e:	4b40      	ldr	r3, [pc, #256]	; (8003790 <main+0xa28>)
 8003690:	2102      	movs	r1, #2
 8003692:	0018      	movs	r0, r3
 8003694:	f003 fdc9 	bl	800722a <HAL_RTCEx_BKUPWrite>
				break;
 8003698:	f000 fcf3 	bl	8004082 <main+0x131a>
						offBright = (((offBright / 5) + 1) % 21) * 5;
 800369c:	4b3e      	ldr	r3, [pc, #248]	; (8003798 <main+0xa30>)
 800369e:	881b      	ldrh	r3, [r3, #0]
 80036a0:	2105      	movs	r1, #5
 80036a2:	0018      	movs	r0, r3
 80036a4:	f7fc fd2c 	bl	8000100 <__udivsi3>
 80036a8:	0003      	movs	r3, r0
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	3301      	adds	r3, #1
 80036ae:	2115      	movs	r1, #21
 80036b0:	0018      	movs	r0, r3
 80036b2:	f7fc fe95 	bl	80003e0 <__aeabi_idivmod>
 80036b6:	000b      	movs	r3, r1
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	1c1a      	adds	r2, r3, #0
 80036bc:	0092      	lsls	r2, r2, #2
 80036be:	18d3      	adds	r3, r2, r3
 80036c0:	b29a      	uxth	r2, r3
 80036c2:	4b35      	ldr	r3, [pc, #212]	; (8003798 <main+0xa30>)
 80036c4:	801a      	strh	r2, [r3, #0]
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR3, offBright);
 80036c6:	4b34      	ldr	r3, [pc, #208]	; (8003798 <main+0xa30>)
 80036c8:	881b      	ldrh	r3, [r3, #0]
 80036ca:	001a      	movs	r2, r3
 80036cc:	4b30      	ldr	r3, [pc, #192]	; (8003790 <main+0xa28>)
 80036ce:	2103      	movs	r1, #3
 80036d0:	0018      	movs	r0, r3
 80036d2:	f003 fdaa 	bl	800722a <HAL_RTCEx_BKUPWrite>
				break;
 80036d6:	f000 fcd4 	bl	8004082 <main+0x131a>
				} else if (clickType == 3) {
 80036da:	4b31      	ldr	r3, [pc, #196]	; (80037a0 <main+0xa38>)
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	2b03      	cmp	r3, #3
 80036e0:	d001      	beq.n	80036e6 <main+0x97e>
 80036e2:	f000 fcce 	bl	8004082 <main+0x131a>
					delayForBlink = 0;
 80036e6:	4b28      	ldr	r3, [pc, #160]	; (8003788 <main+0xa20>)
 80036e8:	2200      	movs	r2, #0
 80036ea:	601a      	str	r2, [r3, #0]
					clickType = 0;
 80036ec:	4b2c      	ldr	r3, [pc, #176]	; (80037a0 <main+0xa38>)
 80036ee:	2200      	movs	r2, #0
 80036f0:	701a      	strb	r2, [r3, #0]
					if (setupDig == 0) {
 80036f2:	4b23      	ldr	r3, [pc, #140]	; (8003780 <main+0xa18>)
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d11e      	bne.n	8003738 <main+0x9d0>
						onBright = (((onBright / 5) + 20) % 21) * 5;
 80036fa:	4b26      	ldr	r3, [pc, #152]	; (8003794 <main+0xa2c>)
 80036fc:	881b      	ldrh	r3, [r3, #0]
 80036fe:	2105      	movs	r1, #5
 8003700:	0018      	movs	r0, r3
 8003702:	f7fc fcfd 	bl	8000100 <__udivsi3>
 8003706:	0003      	movs	r3, r0
 8003708:	b29b      	uxth	r3, r3
 800370a:	3314      	adds	r3, #20
 800370c:	2115      	movs	r1, #21
 800370e:	0018      	movs	r0, r3
 8003710:	f7fc fe66 	bl	80003e0 <__aeabi_idivmod>
 8003714:	000b      	movs	r3, r1
 8003716:	b29b      	uxth	r3, r3
 8003718:	1c1a      	adds	r2, r3, #0
 800371a:	0092      	lsls	r2, r2, #2
 800371c:	18d3      	adds	r3, r2, r3
 800371e:	b29a      	uxth	r2, r3
 8003720:	4b1c      	ldr	r3, [pc, #112]	; (8003794 <main+0xa2c>)
 8003722:	801a      	strh	r2, [r3, #0]
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR2, onBright);
 8003724:	4b1b      	ldr	r3, [pc, #108]	; (8003794 <main+0xa2c>)
 8003726:	881b      	ldrh	r3, [r3, #0]
 8003728:	001a      	movs	r2, r3
 800372a:	4b19      	ldr	r3, [pc, #100]	; (8003790 <main+0xa28>)
 800372c:	2102      	movs	r1, #2
 800372e:	0018      	movs	r0, r3
 8003730:	f003 fd7b 	bl	800722a <HAL_RTCEx_BKUPWrite>
				break;
 8003734:	f000 fca5 	bl	8004082 <main+0x131a>
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR3, offBright);
 8003738:	4b17      	ldr	r3, [pc, #92]	; (8003798 <main+0xa30>)
 800373a:	881b      	ldrh	r3, [r3, #0]
 800373c:	001a      	movs	r2, r3
 800373e:	4b14      	ldr	r3, [pc, #80]	; (8003790 <main+0xa28>)
 8003740:	2103      	movs	r1, #3
 8003742:	0018      	movs	r0, r3
 8003744:	f003 fd71 	bl	800722a <HAL_RTCEx_BKUPWrite>
						offBright = (((offBright / 5) + 20) % 21) * 5;
 8003748:	4b13      	ldr	r3, [pc, #76]	; (8003798 <main+0xa30>)
 800374a:	881b      	ldrh	r3, [r3, #0]
 800374c:	2105      	movs	r1, #5
 800374e:	0018      	movs	r0, r3
 8003750:	f7fc fcd6 	bl	8000100 <__udivsi3>
 8003754:	0003      	movs	r3, r0
 8003756:	b29b      	uxth	r3, r3
 8003758:	3314      	adds	r3, #20
 800375a:	2115      	movs	r1, #21
 800375c:	0018      	movs	r0, r3
 800375e:	f7fc fe3f 	bl	80003e0 <__aeabi_idivmod>
 8003762:	000b      	movs	r3, r1
 8003764:	b29b      	uxth	r3, r3
 8003766:	1c1a      	adds	r2, r3, #0
 8003768:	0092      	lsls	r2, r2, #2
 800376a:	18d3      	adds	r3, r2, r3
 800376c:	b29a      	uxth	r2, r3
 800376e:	4b0a      	ldr	r3, [pc, #40]	; (8003798 <main+0xa30>)
 8003770:	801a      	strh	r2, [r3, #0]
				break;
 8003772:	f000 fc86 	bl	8004082 <main+0x131a>
 8003776:	46c0      	nop			; (mov r8, r8)
 8003778:	20000277 	.word	0x20000277
 800377c:	2000026c 	.word	0x2000026c
 8003780:	20000276 	.word	0x20000276
 8003784:	40240000 	.word	0x40240000
 8003788:	200002bc 	.word	0x200002bc
 800378c:	20000250 	.word	0x20000250
 8003790:	200000f8 	.word	0x200000f8
 8003794:	20000004 	.word	0x20000004
 8003798:	20000006 	.word	0x20000006
 800379c:	000026ac 	.word	0x000026ac
 80037a0:	20000274 	.word	0x20000274
 80037a4:	000061a8 	.word	0x000061a8
 80037a8:	80000001 	.word	0x80000001
			case 3:
				dispValue = onTime;
 80037ac:	4bb4      	ldr	r3, [pc, #720]	; (8003a80 <main+0xd18>)
 80037ae:	881b      	ldrh	r3, [r3, #0]
 80037b0:	001a      	movs	r2, r3
 80037b2:	4bb4      	ldr	r3, [pc, #720]	; (8003a84 <main+0xd1c>)
 80037b4:	601a      	str	r2, [r3, #0]
				newDig = ((int) (onTime / pow(10.0, setupDig)) % 10);
 80037b6:	4bb2      	ldr	r3, [pc, #712]	; (8003a80 <main+0xd18>)
 80037b8:	881b      	ldrh	r3, [r3, #0]
 80037ba:	0018      	movs	r0, r3
 80037bc:	f7fe fd4e 	bl	800225c <__aeabi_i2d>
 80037c0:	0004      	movs	r4, r0
 80037c2:	000d      	movs	r5, r1
 80037c4:	4bb0      	ldr	r3, [pc, #704]	; (8003a88 <main+0xd20>)
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	0018      	movs	r0, r3
 80037ca:	f7fe fd77 	bl	80022bc <__aeabi_ui2d>
 80037ce:	0002      	movs	r2, r0
 80037d0:	000b      	movs	r3, r1
 80037d2:	2000      	movs	r0, #0
 80037d4:	49ad      	ldr	r1, [pc, #692]	; (8003a8c <main+0xd24>)
 80037d6:	f005 fa0d 	bl	8008bf4 <pow>
 80037da:	0002      	movs	r2, r0
 80037dc:	000b      	movs	r3, r1
 80037de:	0020      	movs	r0, r4
 80037e0:	0029      	movs	r1, r5
 80037e2:	f7fd faa9 	bl	8000d38 <__aeabi_ddiv>
 80037e6:	0002      	movs	r2, r0
 80037e8:	000b      	movs	r3, r1
 80037ea:	0010      	movs	r0, r2
 80037ec:	0019      	movs	r1, r3
 80037ee:	f7fe fcff 	bl	80021f0 <__aeabi_d2iz>
 80037f2:	0003      	movs	r3, r0
 80037f4:	210a      	movs	r1, #10
 80037f6:	0018      	movs	r0, r3
 80037f8:	f7fc fdf2 	bl	80003e0 <__aeabi_idivmod>
 80037fc:	000b      	movs	r3, r1
 80037fe:	b2da      	uxtb	r2, r3
 8003800:	4ba3      	ldr	r3, [pc, #652]	; (8003a90 <main+0xd28>)
 8003802:	701a      	strb	r2, [r3, #0]
				if (clickType == 2) {
 8003804:	4ba3      	ldr	r3, [pc, #652]	; (8003a94 <main+0xd2c>)
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	2b02      	cmp	r3, #2
 800380a:	d13b      	bne.n	8003884 <main+0xb1c>
					delayForBlink = 25000;
 800380c:	4ba2      	ldr	r3, [pc, #648]	; (8003a98 <main+0xd30>)
 800380e:	4aa3      	ldr	r2, [pc, #652]	; (8003a9c <main+0xd34>)
 8003810:	601a      	str	r2, [r3, #0]
					clickType = 0;
 8003812:	4ba0      	ldr	r3, [pc, #640]	; (8003a94 <main+0xd2c>)
 8003814:	2200      	movs	r2, #0
 8003816:	701a      	strb	r2, [r3, #0]
					setupDig = (setupDig + 1) % 4;
 8003818:	4b9b      	ldr	r3, [pc, #620]	; (8003a88 <main+0xd20>)
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	3301      	adds	r3, #1
 800381e:	4aa0      	ldr	r2, [pc, #640]	; (8003aa0 <main+0xd38>)
 8003820:	4013      	ands	r3, r2
 8003822:	d504      	bpl.n	800382e <main+0xac6>
 8003824:	3b01      	subs	r3, #1
 8003826:	2204      	movs	r2, #4
 8003828:	4252      	negs	r2, r2
 800382a:	4313      	orrs	r3, r2
 800382c:	3301      	adds	r3, #1
 800382e:	b2da      	uxtb	r2, r3
 8003830:	4b95      	ldr	r3, [pc, #596]	; (8003a88 <main+0xd20>)
 8003832:	701a      	strb	r2, [r3, #0]
					newDig = ((int) (onTime / pow(10.0, setupDig)) % 10);
 8003834:	4b92      	ldr	r3, [pc, #584]	; (8003a80 <main+0xd18>)
 8003836:	881b      	ldrh	r3, [r3, #0]
 8003838:	0018      	movs	r0, r3
 800383a:	f7fe fd0f 	bl	800225c <__aeabi_i2d>
 800383e:	0004      	movs	r4, r0
 8003840:	000d      	movs	r5, r1
 8003842:	4b91      	ldr	r3, [pc, #580]	; (8003a88 <main+0xd20>)
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	0018      	movs	r0, r3
 8003848:	f7fe fd38 	bl	80022bc <__aeabi_ui2d>
 800384c:	0002      	movs	r2, r0
 800384e:	000b      	movs	r3, r1
 8003850:	2000      	movs	r0, #0
 8003852:	498e      	ldr	r1, [pc, #568]	; (8003a8c <main+0xd24>)
 8003854:	f005 f9ce 	bl	8008bf4 <pow>
 8003858:	0002      	movs	r2, r0
 800385a:	000b      	movs	r3, r1
 800385c:	0020      	movs	r0, r4
 800385e:	0029      	movs	r1, r5
 8003860:	f7fd fa6a 	bl	8000d38 <__aeabi_ddiv>
 8003864:	0002      	movs	r2, r0
 8003866:	000b      	movs	r3, r1
 8003868:	0010      	movs	r0, r2
 800386a:	0019      	movs	r1, r3
 800386c:	f7fe fcc0 	bl	80021f0 <__aeabi_d2iz>
 8003870:	0003      	movs	r3, r0
 8003872:	210a      	movs	r1, #10
 8003874:	0018      	movs	r0, r3
 8003876:	f7fc fdb3 	bl	80003e0 <__aeabi_idivmod>
 800387a:	000b      	movs	r3, r1
 800387c:	b2da      	uxtb	r2, r3
 800387e:	4b84      	ldr	r3, [pc, #528]	; (8003a90 <main+0xd28>)
 8003880:	701a      	strb	r2, [r3, #0]
 8003882:	e11c      	b.n	8003abe <main+0xd56>
				} else if (clickType == 1) {
 8003884:	4b83      	ldr	r3, [pc, #524]	; (8003a94 <main+0xd2c>)
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	2b01      	cmp	r3, #1
 800388a:	d000      	beq.n	800388e <main+0xb26>
 800388c:	e07f      	b.n	800398e <main+0xc26>
					clickType = 0;
 800388e:	4b81      	ldr	r3, [pc, #516]	; (8003a94 <main+0xd2c>)
 8003890:	2200      	movs	r2, #0
 8003892:	701a      	strb	r2, [r3, #0]
					if (setupDig == 0) {
 8003894:	4b7c      	ldr	r3, [pc, #496]	; (8003a88 <main+0xd20>)
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d10b      	bne.n	80038b4 <main+0xb4c>
						newDig = (newDig + 1) % 10;
 800389c:	4b7c      	ldr	r3, [pc, #496]	; (8003a90 <main+0xd28>)
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	3301      	adds	r3, #1
 80038a2:	210a      	movs	r1, #10
 80038a4:	0018      	movs	r0, r3
 80038a6:	f7fc fd9b 	bl	80003e0 <__aeabi_idivmod>
 80038aa:	000b      	movs	r3, r1
 80038ac:	b2da      	uxtb	r2, r3
 80038ae:	4b78      	ldr	r3, [pc, #480]	; (8003a90 <main+0xd28>)
 80038b0:	701a      	strb	r2, [r3, #0]
 80038b2:	e104      	b.n	8003abe <main+0xd56>
					} else if (setupDig == 1) {
 80038b4:	4b74      	ldr	r3, [pc, #464]	; (8003a88 <main+0xd20>)
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d10b      	bne.n	80038d4 <main+0xb6c>
						newDig = (newDig + 1) % 6;
 80038bc:	4b74      	ldr	r3, [pc, #464]	; (8003a90 <main+0xd28>)
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	3301      	adds	r3, #1
 80038c2:	2106      	movs	r1, #6
 80038c4:	0018      	movs	r0, r3
 80038c6:	f7fc fd8b 	bl	80003e0 <__aeabi_idivmod>
 80038ca:	000b      	movs	r3, r1
 80038cc:	b2da      	uxtb	r2, r3
 80038ce:	4b70      	ldr	r3, [pc, #448]	; (8003a90 <main+0xd28>)
 80038d0:	701a      	strb	r2, [r3, #0]
 80038d2:	e0f4      	b.n	8003abe <main+0xd56>
					} else if (setupDig == 2) {
 80038d4:	4b6c      	ldr	r3, [pc, #432]	; (8003a88 <main+0xd20>)
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d128      	bne.n	800392e <main+0xbc6>
						if (((onTime / 1000) % 10) == 2) {
 80038dc:	4b68      	ldr	r3, [pc, #416]	; (8003a80 <main+0xd18>)
 80038de:	881b      	ldrh	r3, [r3, #0]
 80038e0:	22fa      	movs	r2, #250	; 0xfa
 80038e2:	0091      	lsls	r1, r2, #2
 80038e4:	0018      	movs	r0, r3
 80038e6:	f7fc fc0b 	bl	8000100 <__udivsi3>
 80038ea:	0003      	movs	r3, r0
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	210a      	movs	r1, #10
 80038f0:	0018      	movs	r0, r3
 80038f2:	f7fc fc8b 	bl	800020c <__aeabi_uidivmod>
 80038f6:	000b      	movs	r3, r1
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	2b02      	cmp	r3, #2
 80038fc:	d10b      	bne.n	8003916 <main+0xbae>
							newDig = (newDig + 1) % 5;
 80038fe:	4b64      	ldr	r3, [pc, #400]	; (8003a90 <main+0xd28>)
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	3301      	adds	r3, #1
 8003904:	2105      	movs	r1, #5
 8003906:	0018      	movs	r0, r3
 8003908:	f7fc fd6a 	bl	80003e0 <__aeabi_idivmod>
 800390c:	000b      	movs	r3, r1
 800390e:	b2da      	uxtb	r2, r3
 8003910:	4b5f      	ldr	r3, [pc, #380]	; (8003a90 <main+0xd28>)
 8003912:	701a      	strb	r2, [r3, #0]
 8003914:	e0d3      	b.n	8003abe <main+0xd56>
						} else {
							newDig = (newDig + 1) % 10;
 8003916:	4b5e      	ldr	r3, [pc, #376]	; (8003a90 <main+0xd28>)
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	3301      	adds	r3, #1
 800391c:	210a      	movs	r1, #10
 800391e:	0018      	movs	r0, r3
 8003920:	f7fc fd5e 	bl	80003e0 <__aeabi_idivmod>
 8003924:	000b      	movs	r3, r1
 8003926:	b2da      	uxtb	r2, r3
 8003928:	4b59      	ldr	r3, [pc, #356]	; (8003a90 <main+0xd28>)
 800392a:	701a      	strb	r2, [r3, #0]
 800392c:	e0c7      	b.n	8003abe <main+0xd56>
						}
					} else if (setupDig == 3) {
 800392e:	4b56      	ldr	r3, [pc, #344]	; (8003a88 <main+0xd20>)
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	2b03      	cmp	r3, #3
 8003934:	d000      	beq.n	8003938 <main+0xbd0>
 8003936:	e0c2      	b.n	8003abe <main+0xd56>
						if (((onTime / 100) % 10) > 4) {
 8003938:	4b51      	ldr	r3, [pc, #324]	; (8003a80 <main+0xd18>)
 800393a:	881b      	ldrh	r3, [r3, #0]
 800393c:	2164      	movs	r1, #100	; 0x64
 800393e:	0018      	movs	r0, r3
 8003940:	f7fc fbde 	bl	8000100 <__udivsi3>
 8003944:	0003      	movs	r3, r0
 8003946:	b29b      	uxth	r3, r3
 8003948:	210a      	movs	r1, #10
 800394a:	0018      	movs	r0, r3
 800394c:	f7fc fc5e 	bl	800020c <__aeabi_uidivmod>
 8003950:	000b      	movs	r3, r1
 8003952:	b29b      	uxth	r3, r3
 8003954:	2b04      	cmp	r3, #4
 8003956:	d90e      	bls.n	8003976 <main+0xc0e>
							newDig = (newDig + 1) % 2;
 8003958:	4b4d      	ldr	r3, [pc, #308]	; (8003a90 <main+0xd28>)
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	3301      	adds	r3, #1
 800395e:	4a51      	ldr	r2, [pc, #324]	; (8003aa4 <main+0xd3c>)
 8003960:	4013      	ands	r3, r2
 8003962:	d504      	bpl.n	800396e <main+0xc06>
 8003964:	3b01      	subs	r3, #1
 8003966:	2202      	movs	r2, #2
 8003968:	4252      	negs	r2, r2
 800396a:	4313      	orrs	r3, r2
 800396c:	3301      	adds	r3, #1
 800396e:	b2da      	uxtb	r2, r3
 8003970:	4b47      	ldr	r3, [pc, #284]	; (8003a90 <main+0xd28>)
 8003972:	701a      	strb	r2, [r3, #0]
 8003974:	e0a3      	b.n	8003abe <main+0xd56>
						} else {
							newDig = (newDig + 1) % 3;
 8003976:	4b46      	ldr	r3, [pc, #280]	; (8003a90 <main+0xd28>)
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	3301      	adds	r3, #1
 800397c:	2103      	movs	r1, #3
 800397e:	0018      	movs	r0, r3
 8003980:	f7fc fd2e 	bl	80003e0 <__aeabi_idivmod>
 8003984:	000b      	movs	r3, r1
 8003986:	b2da      	uxtb	r2, r3
 8003988:	4b41      	ldr	r3, [pc, #260]	; (8003a90 <main+0xd28>)
 800398a:	701a      	strb	r2, [r3, #0]
 800398c:	e097      	b.n	8003abe <main+0xd56>
						}
					}
				} else if (clickType == 3) {
 800398e:	4b41      	ldr	r3, [pc, #260]	; (8003a94 <main+0xd2c>)
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	2b03      	cmp	r3, #3
 8003994:	d000      	beq.n	8003998 <main+0xc30>
 8003996:	e092      	b.n	8003abe <main+0xd56>
					clickType = 0;
 8003998:	4b3e      	ldr	r3, [pc, #248]	; (8003a94 <main+0xd2c>)
 800399a:	2200      	movs	r2, #0
 800399c:	701a      	strb	r2, [r3, #0]
					if (setupDig == 0) {
 800399e:	4b3a      	ldr	r3, [pc, #232]	; (8003a88 <main+0xd20>)
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d10b      	bne.n	80039be <main+0xc56>
						newDig = (newDig + 9) % 10;
 80039a6:	4b3a      	ldr	r3, [pc, #232]	; (8003a90 <main+0xd28>)
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	3309      	adds	r3, #9
 80039ac:	210a      	movs	r1, #10
 80039ae:	0018      	movs	r0, r3
 80039b0:	f7fc fd16 	bl	80003e0 <__aeabi_idivmod>
 80039b4:	000b      	movs	r3, r1
 80039b6:	b2da      	uxtb	r2, r3
 80039b8:	4b35      	ldr	r3, [pc, #212]	; (8003a90 <main+0xd28>)
 80039ba:	701a      	strb	r2, [r3, #0]
 80039bc:	e07f      	b.n	8003abe <main+0xd56>
					} else if (setupDig == 1) {
 80039be:	4b32      	ldr	r3, [pc, #200]	; (8003a88 <main+0xd20>)
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d10b      	bne.n	80039de <main+0xc76>
						newDig = (newDig + 5) % 6;
 80039c6:	4b32      	ldr	r3, [pc, #200]	; (8003a90 <main+0xd28>)
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	3305      	adds	r3, #5
 80039cc:	2106      	movs	r1, #6
 80039ce:	0018      	movs	r0, r3
 80039d0:	f7fc fd06 	bl	80003e0 <__aeabi_idivmod>
 80039d4:	000b      	movs	r3, r1
 80039d6:	b2da      	uxtb	r2, r3
 80039d8:	4b2d      	ldr	r3, [pc, #180]	; (8003a90 <main+0xd28>)
 80039da:	701a      	strb	r2, [r3, #0]
 80039dc:	e06f      	b.n	8003abe <main+0xd56>
					} else if (setupDig == 2) {
 80039de:	4b2a      	ldr	r3, [pc, #168]	; (8003a88 <main+0xd20>)
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d128      	bne.n	8003a38 <main+0xcd0>
						if (((onTime / 1000) % 10) == 2) {
 80039e6:	4b26      	ldr	r3, [pc, #152]	; (8003a80 <main+0xd18>)
 80039e8:	881b      	ldrh	r3, [r3, #0]
 80039ea:	22fa      	movs	r2, #250	; 0xfa
 80039ec:	0091      	lsls	r1, r2, #2
 80039ee:	0018      	movs	r0, r3
 80039f0:	f7fc fb86 	bl	8000100 <__udivsi3>
 80039f4:	0003      	movs	r3, r0
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	210a      	movs	r1, #10
 80039fa:	0018      	movs	r0, r3
 80039fc:	f7fc fc06 	bl	800020c <__aeabi_uidivmod>
 8003a00:	000b      	movs	r3, r1
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d10b      	bne.n	8003a20 <main+0xcb8>
							newDig = (newDig + 4) % 5;
 8003a08:	4b21      	ldr	r3, [pc, #132]	; (8003a90 <main+0xd28>)
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	3304      	adds	r3, #4
 8003a0e:	2105      	movs	r1, #5
 8003a10:	0018      	movs	r0, r3
 8003a12:	f7fc fce5 	bl	80003e0 <__aeabi_idivmod>
 8003a16:	000b      	movs	r3, r1
 8003a18:	b2da      	uxtb	r2, r3
 8003a1a:	4b1d      	ldr	r3, [pc, #116]	; (8003a90 <main+0xd28>)
 8003a1c:	701a      	strb	r2, [r3, #0]
 8003a1e:	e04e      	b.n	8003abe <main+0xd56>
						} else {
							newDig = (newDig + 9) % 10;
 8003a20:	4b1b      	ldr	r3, [pc, #108]	; (8003a90 <main+0xd28>)
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	3309      	adds	r3, #9
 8003a26:	210a      	movs	r1, #10
 8003a28:	0018      	movs	r0, r3
 8003a2a:	f7fc fcd9 	bl	80003e0 <__aeabi_idivmod>
 8003a2e:	000b      	movs	r3, r1
 8003a30:	b2da      	uxtb	r2, r3
 8003a32:	4b17      	ldr	r3, [pc, #92]	; (8003a90 <main+0xd28>)
 8003a34:	701a      	strb	r2, [r3, #0]
 8003a36:	e042      	b.n	8003abe <main+0xd56>
						}
					} else if (setupDig == 3) {
 8003a38:	4b13      	ldr	r3, [pc, #76]	; (8003a88 <main+0xd20>)
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	2b03      	cmp	r3, #3
 8003a3e:	d13e      	bne.n	8003abe <main+0xd56>
						if (((onTime / 100) % 10) > 4) {
 8003a40:	4b0f      	ldr	r3, [pc, #60]	; (8003a80 <main+0xd18>)
 8003a42:	881b      	ldrh	r3, [r3, #0]
 8003a44:	2164      	movs	r1, #100	; 0x64
 8003a46:	0018      	movs	r0, r3
 8003a48:	f7fc fb5a 	bl	8000100 <__udivsi3>
 8003a4c:	0003      	movs	r3, r0
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	210a      	movs	r1, #10
 8003a52:	0018      	movs	r0, r3
 8003a54:	f7fc fbda 	bl	800020c <__aeabi_uidivmod>
 8003a58:	000b      	movs	r3, r1
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	2b04      	cmp	r3, #4
 8003a5e:	d923      	bls.n	8003aa8 <main+0xd40>
							newDig = (newDig + 1) % 2;
 8003a60:	4b0b      	ldr	r3, [pc, #44]	; (8003a90 <main+0xd28>)
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	3301      	adds	r3, #1
 8003a66:	4a0f      	ldr	r2, [pc, #60]	; (8003aa4 <main+0xd3c>)
 8003a68:	4013      	ands	r3, r2
 8003a6a:	d504      	bpl.n	8003a76 <main+0xd0e>
 8003a6c:	3b01      	subs	r3, #1
 8003a6e:	2202      	movs	r2, #2
 8003a70:	4252      	negs	r2, r2
 8003a72:	4313      	orrs	r3, r2
 8003a74:	3301      	adds	r3, #1
 8003a76:	b2da      	uxtb	r2, r3
 8003a78:	4b05      	ldr	r3, [pc, #20]	; (8003a90 <main+0xd28>)
 8003a7a:	701a      	strb	r2, [r3, #0]
 8003a7c:	e01f      	b.n	8003abe <main+0xd56>
 8003a7e:	46c0      	nop			; (mov r8, r8)
 8003a80:	2000027a 	.word	0x2000027a
 8003a84:	2000026c 	.word	0x2000026c
 8003a88:	20000276 	.word	0x20000276
 8003a8c:	40240000 	.word	0x40240000
 8003a90:	20000277 	.word	0x20000277
 8003a94:	20000274 	.word	0x20000274
 8003a98:	200002bc 	.word	0x200002bc
 8003a9c:	000061a8 	.word	0x000061a8
 8003aa0:	80000003 	.word	0x80000003
 8003aa4:	80000001 	.word	0x80000001
						} else {
							newDig = (newDig + 2) % 3;
 8003aa8:	4bde      	ldr	r3, [pc, #888]	; (8003e24 <main+0x10bc>)
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	3302      	adds	r3, #2
 8003aae:	2103      	movs	r1, #3
 8003ab0:	0018      	movs	r0, r3
 8003ab2:	f7fc fc95 	bl	80003e0 <__aeabi_idivmod>
 8003ab6:	000b      	movs	r3, r1
 8003ab8:	b2da      	uxtb	r2, r3
 8003aba:	4bda      	ldr	r3, [pc, #872]	; (8003e24 <main+0x10bc>)
 8003abc:	701a      	strb	r2, [r3, #0]
						}
					}
				}
				if (newDig != ((int) (onTime / pow(10.0, setupDig)) % 10)) {
 8003abe:	4bd9      	ldr	r3, [pc, #868]	; (8003e24 <main+0x10bc>)
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	001e      	movs	r6, r3
 8003ac4:	4bd8      	ldr	r3, [pc, #864]	; (8003e28 <main+0x10c0>)
 8003ac6:	881b      	ldrh	r3, [r3, #0]
 8003ac8:	0018      	movs	r0, r3
 8003aca:	f7fe fbc7 	bl	800225c <__aeabi_i2d>
 8003ace:	0004      	movs	r4, r0
 8003ad0:	000d      	movs	r5, r1
 8003ad2:	4bd6      	ldr	r3, [pc, #856]	; (8003e2c <main+0x10c4>)
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	0018      	movs	r0, r3
 8003ad8:	f7fe fbf0 	bl	80022bc <__aeabi_ui2d>
 8003adc:	0002      	movs	r2, r0
 8003ade:	000b      	movs	r3, r1
 8003ae0:	2000      	movs	r0, #0
 8003ae2:	49d3      	ldr	r1, [pc, #844]	; (8003e30 <main+0x10c8>)
 8003ae4:	f005 f886 	bl	8008bf4 <pow>
 8003ae8:	0002      	movs	r2, r0
 8003aea:	000b      	movs	r3, r1
 8003aec:	0020      	movs	r0, r4
 8003aee:	0029      	movs	r1, r5
 8003af0:	f7fd f922 	bl	8000d38 <__aeabi_ddiv>
 8003af4:	0002      	movs	r2, r0
 8003af6:	000b      	movs	r3, r1
 8003af8:	0010      	movs	r0, r2
 8003afa:	0019      	movs	r1, r3
 8003afc:	f7fe fb78 	bl	80021f0 <__aeabi_d2iz>
 8003b00:	0003      	movs	r3, r0
 8003b02:	210a      	movs	r1, #10
 8003b04:	0018      	movs	r0, r3
 8003b06:	f7fc fc6b 	bl	80003e0 <__aeabi_idivmod>
 8003b0a:	000b      	movs	r3, r1
 8003b0c:	429e      	cmp	r6, r3
 8003b0e:	d100      	bne.n	8003b12 <main+0xdaa>
 8003b10:	e2ba      	b.n	8004088 <main+0x1320>
					delayForBlink = 0;
 8003b12:	4bc8      	ldr	r3, [pc, #800]	; (8003e34 <main+0x10cc>)
 8003b14:	2200      	movs	r2, #0
 8003b16:	601a      	str	r2, [r3, #0]
					onTime = (onTime
							- (((int) (onTime / pow(10.0, setupDig)) % 10))
 8003b18:	4bc3      	ldr	r3, [pc, #780]	; (8003e28 <main+0x10c0>)
 8003b1a:	881b      	ldrh	r3, [r3, #0]
 8003b1c:	0018      	movs	r0, r3
 8003b1e:	f7fe fb9d 	bl	800225c <__aeabi_i2d>
 8003b22:	0004      	movs	r4, r0
 8003b24:	000d      	movs	r5, r1
 8003b26:	4bc0      	ldr	r3, [pc, #768]	; (8003e28 <main+0x10c0>)
 8003b28:	881b      	ldrh	r3, [r3, #0]
 8003b2a:	0018      	movs	r0, r3
 8003b2c:	f7fe fb96 	bl	800225c <__aeabi_i2d>
 8003b30:	6038      	str	r0, [r7, #0]
 8003b32:	6079      	str	r1, [r7, #4]
 8003b34:	4bbd      	ldr	r3, [pc, #756]	; (8003e2c <main+0x10c4>)
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	0018      	movs	r0, r3
 8003b3a:	f7fe fbbf 	bl	80022bc <__aeabi_ui2d>
 8003b3e:	0002      	movs	r2, r0
 8003b40:	000b      	movs	r3, r1
 8003b42:	2000      	movs	r0, #0
 8003b44:	49ba      	ldr	r1, [pc, #744]	; (8003e30 <main+0x10c8>)
 8003b46:	f005 f855 	bl	8008bf4 <pow>
 8003b4a:	0002      	movs	r2, r0
 8003b4c:	000b      	movs	r3, r1
 8003b4e:	6838      	ldr	r0, [r7, #0]
 8003b50:	6879      	ldr	r1, [r7, #4]
 8003b52:	f7fd f8f1 	bl	8000d38 <__aeabi_ddiv>
 8003b56:	0002      	movs	r2, r0
 8003b58:	000b      	movs	r3, r1
 8003b5a:	0010      	movs	r0, r2
 8003b5c:	0019      	movs	r1, r3
 8003b5e:	f7fe fb47 	bl	80021f0 <__aeabi_d2iz>
 8003b62:	0003      	movs	r3, r0
 8003b64:	210a      	movs	r1, #10
 8003b66:	0018      	movs	r0, r3
 8003b68:	f7fc fc3a 	bl	80003e0 <__aeabi_idivmod>
 8003b6c:	000b      	movs	r3, r1
									* pow(10.0, setupDig))
 8003b6e:	0018      	movs	r0, r3
 8003b70:	f7fe fb74 	bl	800225c <__aeabi_i2d>
 8003b74:	6038      	str	r0, [r7, #0]
 8003b76:	6079      	str	r1, [r7, #4]
 8003b78:	4bac      	ldr	r3, [pc, #688]	; (8003e2c <main+0x10c4>)
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	0018      	movs	r0, r3
 8003b7e:	f7fe fb9d 	bl	80022bc <__aeabi_ui2d>
 8003b82:	0002      	movs	r2, r0
 8003b84:	000b      	movs	r3, r1
 8003b86:	2000      	movs	r0, #0
 8003b88:	49a9      	ldr	r1, [pc, #676]	; (8003e30 <main+0x10c8>)
 8003b8a:	f005 f833 	bl	8008bf4 <pow>
 8003b8e:	0002      	movs	r2, r0
 8003b90:	000b      	movs	r3, r1
 8003b92:	6838      	ldr	r0, [r7, #0]
 8003b94:	6879      	ldr	r1, [r7, #4]
 8003b96:	f7fd fcc9 	bl	800152c <__aeabi_dmul>
 8003b9a:	0002      	movs	r2, r0
 8003b9c:	000b      	movs	r3, r1
							- (((int) (onTime / pow(10.0, setupDig)) % 10))
 8003b9e:	0020      	movs	r0, r4
 8003ba0:	0029      	movs	r1, r5
 8003ba2:	f7fd ff85 	bl	8001ab0 <__aeabi_dsub>
 8003ba6:	0002      	movs	r2, r0
 8003ba8:	000b      	movs	r3, r1
 8003baa:	603a      	str	r2, [r7, #0]
 8003bac:	607b      	str	r3, [r7, #4]
							+ (newDig * pow(10.0, setupDig));
 8003bae:	4b9d      	ldr	r3, [pc, #628]	; (8003e24 <main+0x10bc>)
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	0018      	movs	r0, r3
 8003bb4:	f7fe fb52 	bl	800225c <__aeabi_i2d>
 8003bb8:	0004      	movs	r4, r0
 8003bba:	000d      	movs	r5, r1
 8003bbc:	4b9b      	ldr	r3, [pc, #620]	; (8003e2c <main+0x10c4>)
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	0018      	movs	r0, r3
 8003bc2:	f7fe fb7b 	bl	80022bc <__aeabi_ui2d>
 8003bc6:	0002      	movs	r2, r0
 8003bc8:	000b      	movs	r3, r1
 8003bca:	2000      	movs	r0, #0
 8003bcc:	4998      	ldr	r1, [pc, #608]	; (8003e30 <main+0x10c8>)
 8003bce:	f005 f811 	bl	8008bf4 <pow>
 8003bd2:	0002      	movs	r2, r0
 8003bd4:	000b      	movs	r3, r1
 8003bd6:	0020      	movs	r0, r4
 8003bd8:	0029      	movs	r1, r5
 8003bda:	f7fd fca7 	bl	800152c <__aeabi_dmul>
 8003bde:	0002      	movs	r2, r0
 8003be0:	000b      	movs	r3, r1
 8003be2:	6838      	ldr	r0, [r7, #0]
 8003be4:	6879      	ldr	r1, [r7, #4]
 8003be6:	f7fc fd47 	bl	8000678 <__aeabi_dadd>
 8003bea:	0002      	movs	r2, r0
 8003bec:	000b      	movs	r3, r1
					onTime = (onTime
 8003bee:	0010      	movs	r0, r2
 8003bf0:	0019      	movs	r1, r3
 8003bf2:	f7fc fc73 	bl	80004dc <__aeabi_d2uiz>
 8003bf6:	0003      	movs	r3, r0
 8003bf8:	b29a      	uxth	r2, r3
 8003bfa:	4b8b      	ldr	r3, [pc, #556]	; (8003e28 <main+0x10c0>)
 8003bfc:	801a      	strh	r2, [r3, #0]
					HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, onTime);
 8003bfe:	4b8a      	ldr	r3, [pc, #552]	; (8003e28 <main+0x10c0>)
 8003c00:	881b      	ldrh	r3, [r3, #0]
 8003c02:	001a      	movs	r2, r3
 8003c04:	4b8c      	ldr	r3, [pc, #560]	; (8003e38 <main+0x10d0>)
 8003c06:	2100      	movs	r1, #0
 8003c08:	0018      	movs	r0, r3
 8003c0a:	f003 fb0e 	bl	800722a <HAL_RTCEx_BKUPWrite>
				}

				break;
 8003c0e:	e23b      	b.n	8004088 <main+0x1320>
			case 4:
				dispValue = offTime;
 8003c10:	4b8a      	ldr	r3, [pc, #552]	; (8003e3c <main+0x10d4>)
 8003c12:	881b      	ldrh	r3, [r3, #0]
 8003c14:	001a      	movs	r2, r3
 8003c16:	4b8a      	ldr	r3, [pc, #552]	; (8003e40 <main+0x10d8>)
 8003c18:	601a      	str	r2, [r3, #0]
				newDig = ((int) (offTime / pow(10.0, setupDig)) % 10);
 8003c1a:	4b88      	ldr	r3, [pc, #544]	; (8003e3c <main+0x10d4>)
 8003c1c:	881b      	ldrh	r3, [r3, #0]
 8003c1e:	0018      	movs	r0, r3
 8003c20:	f7fe fb1c 	bl	800225c <__aeabi_i2d>
 8003c24:	0004      	movs	r4, r0
 8003c26:	000d      	movs	r5, r1
 8003c28:	4b80      	ldr	r3, [pc, #512]	; (8003e2c <main+0x10c4>)
 8003c2a:	781b      	ldrb	r3, [r3, #0]
 8003c2c:	0018      	movs	r0, r3
 8003c2e:	f7fe fb45 	bl	80022bc <__aeabi_ui2d>
 8003c32:	0002      	movs	r2, r0
 8003c34:	000b      	movs	r3, r1
 8003c36:	2000      	movs	r0, #0
 8003c38:	497d      	ldr	r1, [pc, #500]	; (8003e30 <main+0x10c8>)
 8003c3a:	f004 ffdb 	bl	8008bf4 <pow>
 8003c3e:	0002      	movs	r2, r0
 8003c40:	000b      	movs	r3, r1
 8003c42:	0020      	movs	r0, r4
 8003c44:	0029      	movs	r1, r5
 8003c46:	f7fd f877 	bl	8000d38 <__aeabi_ddiv>
 8003c4a:	0002      	movs	r2, r0
 8003c4c:	000b      	movs	r3, r1
 8003c4e:	0010      	movs	r0, r2
 8003c50:	0019      	movs	r1, r3
 8003c52:	f7fe facd 	bl	80021f0 <__aeabi_d2iz>
 8003c56:	0003      	movs	r3, r0
 8003c58:	210a      	movs	r1, #10
 8003c5a:	0018      	movs	r0, r3
 8003c5c:	f7fc fbc0 	bl	80003e0 <__aeabi_idivmod>
 8003c60:	000b      	movs	r3, r1
 8003c62:	b2da      	uxtb	r2, r3
 8003c64:	4b6f      	ldr	r3, [pc, #444]	; (8003e24 <main+0x10bc>)
 8003c66:	701a      	strb	r2, [r3, #0]
				if (clickType == 2) {
 8003c68:	4b76      	ldr	r3, [pc, #472]	; (8003e44 <main+0x10dc>)
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	d13b      	bne.n	8003ce8 <main+0xf80>
					delayForBlink = 25000;
 8003c70:	4b70      	ldr	r3, [pc, #448]	; (8003e34 <main+0x10cc>)
 8003c72:	4a75      	ldr	r2, [pc, #468]	; (8003e48 <main+0x10e0>)
 8003c74:	601a      	str	r2, [r3, #0]
					clickType = 0;
 8003c76:	4b73      	ldr	r3, [pc, #460]	; (8003e44 <main+0x10dc>)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	701a      	strb	r2, [r3, #0]
					setupDig = (setupDig + 1) % 4;
 8003c7c:	4b6b      	ldr	r3, [pc, #428]	; (8003e2c <main+0x10c4>)
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	3301      	adds	r3, #1
 8003c82:	4a72      	ldr	r2, [pc, #456]	; (8003e4c <main+0x10e4>)
 8003c84:	4013      	ands	r3, r2
 8003c86:	d504      	bpl.n	8003c92 <main+0xf2a>
 8003c88:	3b01      	subs	r3, #1
 8003c8a:	2204      	movs	r2, #4
 8003c8c:	4252      	negs	r2, r2
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	3301      	adds	r3, #1
 8003c92:	b2da      	uxtb	r2, r3
 8003c94:	4b65      	ldr	r3, [pc, #404]	; (8003e2c <main+0x10c4>)
 8003c96:	701a      	strb	r2, [r3, #0]
					newDig = ((int) (offTime / pow(10.0, setupDig)) % 10);
 8003c98:	4b68      	ldr	r3, [pc, #416]	; (8003e3c <main+0x10d4>)
 8003c9a:	881b      	ldrh	r3, [r3, #0]
 8003c9c:	0018      	movs	r0, r3
 8003c9e:	f7fe fadd 	bl	800225c <__aeabi_i2d>
 8003ca2:	0004      	movs	r4, r0
 8003ca4:	000d      	movs	r5, r1
 8003ca6:	4b61      	ldr	r3, [pc, #388]	; (8003e2c <main+0x10c4>)
 8003ca8:	781b      	ldrb	r3, [r3, #0]
 8003caa:	0018      	movs	r0, r3
 8003cac:	f7fe fb06 	bl	80022bc <__aeabi_ui2d>
 8003cb0:	0002      	movs	r2, r0
 8003cb2:	000b      	movs	r3, r1
 8003cb4:	2000      	movs	r0, #0
 8003cb6:	495e      	ldr	r1, [pc, #376]	; (8003e30 <main+0x10c8>)
 8003cb8:	f004 ff9c 	bl	8008bf4 <pow>
 8003cbc:	0002      	movs	r2, r0
 8003cbe:	000b      	movs	r3, r1
 8003cc0:	0020      	movs	r0, r4
 8003cc2:	0029      	movs	r1, r5
 8003cc4:	f7fd f838 	bl	8000d38 <__aeabi_ddiv>
 8003cc8:	0002      	movs	r2, r0
 8003cca:	000b      	movs	r3, r1
 8003ccc:	0010      	movs	r0, r2
 8003cce:	0019      	movs	r1, r3
 8003cd0:	f7fe fa8e 	bl	80021f0 <__aeabi_d2iz>
 8003cd4:	0003      	movs	r3, r0
 8003cd6:	210a      	movs	r1, #10
 8003cd8:	0018      	movs	r0, r3
 8003cda:	f7fc fb81 	bl	80003e0 <__aeabi_idivmod>
 8003cde:	000b      	movs	r3, r1
 8003ce0:	b2da      	uxtb	r2, r3
 8003ce2:	4b50      	ldr	r3, [pc, #320]	; (8003e24 <main+0x10bc>)
 8003ce4:	701a      	strb	r2, [r3, #0]
 8003ce6:	e120      	b.n	8003f2a <main+0x11c2>
				} else if (clickType == 1) {
 8003ce8:	4b56      	ldr	r3, [pc, #344]	; (8003e44 <main+0x10dc>)
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d000      	beq.n	8003cf2 <main+0xf8a>
 8003cf0:	e07f      	b.n	8003df2 <main+0x108a>
					clickType = 0;
 8003cf2:	4b54      	ldr	r3, [pc, #336]	; (8003e44 <main+0x10dc>)
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	701a      	strb	r2, [r3, #0]
					if (setupDig == 0) {
 8003cf8:	4b4c      	ldr	r3, [pc, #304]	; (8003e2c <main+0x10c4>)
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d10b      	bne.n	8003d18 <main+0xfb0>
						newDig = (newDig + 1) % 10;
 8003d00:	4b48      	ldr	r3, [pc, #288]	; (8003e24 <main+0x10bc>)
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	3301      	adds	r3, #1
 8003d06:	210a      	movs	r1, #10
 8003d08:	0018      	movs	r0, r3
 8003d0a:	f7fc fb69 	bl	80003e0 <__aeabi_idivmod>
 8003d0e:	000b      	movs	r3, r1
 8003d10:	b2da      	uxtb	r2, r3
 8003d12:	4b44      	ldr	r3, [pc, #272]	; (8003e24 <main+0x10bc>)
 8003d14:	701a      	strb	r2, [r3, #0]
 8003d16:	e108      	b.n	8003f2a <main+0x11c2>
					} else if (setupDig == 1) {
 8003d18:	4b44      	ldr	r3, [pc, #272]	; (8003e2c <main+0x10c4>)
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d10b      	bne.n	8003d38 <main+0xfd0>
						newDig = (newDig + 1) % 6;
 8003d20:	4b40      	ldr	r3, [pc, #256]	; (8003e24 <main+0x10bc>)
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	3301      	adds	r3, #1
 8003d26:	2106      	movs	r1, #6
 8003d28:	0018      	movs	r0, r3
 8003d2a:	f7fc fb59 	bl	80003e0 <__aeabi_idivmod>
 8003d2e:	000b      	movs	r3, r1
 8003d30:	b2da      	uxtb	r2, r3
 8003d32:	4b3c      	ldr	r3, [pc, #240]	; (8003e24 <main+0x10bc>)
 8003d34:	701a      	strb	r2, [r3, #0]
 8003d36:	e0f8      	b.n	8003f2a <main+0x11c2>
					} else if (setupDig == 2) {
 8003d38:	4b3c      	ldr	r3, [pc, #240]	; (8003e2c <main+0x10c4>)
 8003d3a:	781b      	ldrb	r3, [r3, #0]
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d128      	bne.n	8003d92 <main+0x102a>
						if (((offTime / 1000) % 10) == 2) {
 8003d40:	4b3e      	ldr	r3, [pc, #248]	; (8003e3c <main+0x10d4>)
 8003d42:	881b      	ldrh	r3, [r3, #0]
 8003d44:	22fa      	movs	r2, #250	; 0xfa
 8003d46:	0091      	lsls	r1, r2, #2
 8003d48:	0018      	movs	r0, r3
 8003d4a:	f7fc f9d9 	bl	8000100 <__udivsi3>
 8003d4e:	0003      	movs	r3, r0
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	210a      	movs	r1, #10
 8003d54:	0018      	movs	r0, r3
 8003d56:	f7fc fa59 	bl	800020c <__aeabi_uidivmod>
 8003d5a:	000b      	movs	r3, r1
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d10b      	bne.n	8003d7a <main+0x1012>
							newDig = (newDig + 1) % 5;
 8003d62:	4b30      	ldr	r3, [pc, #192]	; (8003e24 <main+0x10bc>)
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	3301      	adds	r3, #1
 8003d68:	2105      	movs	r1, #5
 8003d6a:	0018      	movs	r0, r3
 8003d6c:	f7fc fb38 	bl	80003e0 <__aeabi_idivmod>
 8003d70:	000b      	movs	r3, r1
 8003d72:	b2da      	uxtb	r2, r3
 8003d74:	4b2b      	ldr	r3, [pc, #172]	; (8003e24 <main+0x10bc>)
 8003d76:	701a      	strb	r2, [r3, #0]
 8003d78:	e0d7      	b.n	8003f2a <main+0x11c2>
						} else {
							newDig = (newDig + 1) % 10;
 8003d7a:	4b2a      	ldr	r3, [pc, #168]	; (8003e24 <main+0x10bc>)
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	3301      	adds	r3, #1
 8003d80:	210a      	movs	r1, #10
 8003d82:	0018      	movs	r0, r3
 8003d84:	f7fc fb2c 	bl	80003e0 <__aeabi_idivmod>
 8003d88:	000b      	movs	r3, r1
 8003d8a:	b2da      	uxtb	r2, r3
 8003d8c:	4b25      	ldr	r3, [pc, #148]	; (8003e24 <main+0x10bc>)
 8003d8e:	701a      	strb	r2, [r3, #0]
 8003d90:	e0cb      	b.n	8003f2a <main+0x11c2>
						}
					} else if (setupDig == 3) {
 8003d92:	4b26      	ldr	r3, [pc, #152]	; (8003e2c <main+0x10c4>)
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	2b03      	cmp	r3, #3
 8003d98:	d000      	beq.n	8003d9c <main+0x1034>
 8003d9a:	e0c6      	b.n	8003f2a <main+0x11c2>
						if (((offTime / 100) % 10) > 4) {
 8003d9c:	4b27      	ldr	r3, [pc, #156]	; (8003e3c <main+0x10d4>)
 8003d9e:	881b      	ldrh	r3, [r3, #0]
 8003da0:	2164      	movs	r1, #100	; 0x64
 8003da2:	0018      	movs	r0, r3
 8003da4:	f7fc f9ac 	bl	8000100 <__udivsi3>
 8003da8:	0003      	movs	r3, r0
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	210a      	movs	r1, #10
 8003dae:	0018      	movs	r0, r3
 8003db0:	f7fc fa2c 	bl	800020c <__aeabi_uidivmod>
 8003db4:	000b      	movs	r3, r1
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	2b04      	cmp	r3, #4
 8003dba:	d90e      	bls.n	8003dda <main+0x1072>
							newDig = (newDig + 1) % 2;
 8003dbc:	4b19      	ldr	r3, [pc, #100]	; (8003e24 <main+0x10bc>)
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	3301      	adds	r3, #1
 8003dc2:	4a23      	ldr	r2, [pc, #140]	; (8003e50 <main+0x10e8>)
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	d504      	bpl.n	8003dd2 <main+0x106a>
 8003dc8:	3b01      	subs	r3, #1
 8003dca:	2202      	movs	r2, #2
 8003dcc:	4252      	negs	r2, r2
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	b2da      	uxtb	r2, r3
 8003dd4:	4b13      	ldr	r3, [pc, #76]	; (8003e24 <main+0x10bc>)
 8003dd6:	701a      	strb	r2, [r3, #0]
 8003dd8:	e0a7      	b.n	8003f2a <main+0x11c2>
						} else {
							newDig = (newDig + 1) % 3;
 8003dda:	4b12      	ldr	r3, [pc, #72]	; (8003e24 <main+0x10bc>)
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	3301      	adds	r3, #1
 8003de0:	2103      	movs	r1, #3
 8003de2:	0018      	movs	r0, r3
 8003de4:	f7fc fafc 	bl	80003e0 <__aeabi_idivmod>
 8003de8:	000b      	movs	r3, r1
 8003dea:	b2da      	uxtb	r2, r3
 8003dec:	4b0d      	ldr	r3, [pc, #52]	; (8003e24 <main+0x10bc>)
 8003dee:	701a      	strb	r2, [r3, #0]
 8003df0:	e09b      	b.n	8003f2a <main+0x11c2>
						}
					}
				} else if (clickType == 3) {
 8003df2:	4b14      	ldr	r3, [pc, #80]	; (8003e44 <main+0x10dc>)
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	2b03      	cmp	r3, #3
 8003df8:	d000      	beq.n	8003dfc <main+0x1094>
 8003dfa:	e096      	b.n	8003f2a <main+0x11c2>
					clickType = 0;
 8003dfc:	4b11      	ldr	r3, [pc, #68]	; (8003e44 <main+0x10dc>)
 8003dfe:	2200      	movs	r2, #0
 8003e00:	701a      	strb	r2, [r3, #0]
					if (setupDig == 0) {
 8003e02:	4b0a      	ldr	r3, [pc, #40]	; (8003e2c <main+0x10c4>)
 8003e04:	781b      	ldrb	r3, [r3, #0]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d124      	bne.n	8003e54 <main+0x10ec>
						newDig = (newDig + 9) % 10;
 8003e0a:	4b06      	ldr	r3, [pc, #24]	; (8003e24 <main+0x10bc>)
 8003e0c:	781b      	ldrb	r3, [r3, #0]
 8003e0e:	3309      	adds	r3, #9
 8003e10:	210a      	movs	r1, #10
 8003e12:	0018      	movs	r0, r3
 8003e14:	f7fc fae4 	bl	80003e0 <__aeabi_idivmod>
 8003e18:	000b      	movs	r3, r1
 8003e1a:	b2da      	uxtb	r2, r3
 8003e1c:	4b01      	ldr	r3, [pc, #4]	; (8003e24 <main+0x10bc>)
 8003e1e:	701a      	strb	r2, [r3, #0]
 8003e20:	e083      	b.n	8003f2a <main+0x11c2>
 8003e22:	46c0      	nop			; (mov r8, r8)
 8003e24:	20000277 	.word	0x20000277
 8003e28:	2000027a 	.word	0x2000027a
 8003e2c:	20000276 	.word	0x20000276
 8003e30:	40240000 	.word	0x40240000
 8003e34:	200002bc 	.word	0x200002bc
 8003e38:	200000f8 	.word	0x200000f8
 8003e3c:	2000027c 	.word	0x2000027c
 8003e40:	2000026c 	.word	0x2000026c
 8003e44:	20000274 	.word	0x20000274
 8003e48:	000061a8 	.word	0x000061a8
 8003e4c:	80000003 	.word	0x80000003
 8003e50:	80000001 	.word	0x80000001
					} else if (setupDig == 1) {
 8003e54:	4b8f      	ldr	r3, [pc, #572]	; (8004094 <main+0x132c>)
 8003e56:	781b      	ldrb	r3, [r3, #0]
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d10b      	bne.n	8003e74 <main+0x110c>
						newDig = (newDig + 5) % 6;
 8003e5c:	4b8e      	ldr	r3, [pc, #568]	; (8004098 <main+0x1330>)
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	3305      	adds	r3, #5
 8003e62:	2106      	movs	r1, #6
 8003e64:	0018      	movs	r0, r3
 8003e66:	f7fc fabb 	bl	80003e0 <__aeabi_idivmod>
 8003e6a:	000b      	movs	r3, r1
 8003e6c:	b2da      	uxtb	r2, r3
 8003e6e:	4b8a      	ldr	r3, [pc, #552]	; (8004098 <main+0x1330>)
 8003e70:	701a      	strb	r2, [r3, #0]
 8003e72:	e05a      	b.n	8003f2a <main+0x11c2>
					} else if (setupDig == 2) {
 8003e74:	4b87      	ldr	r3, [pc, #540]	; (8004094 <main+0x132c>)
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	d128      	bne.n	8003ece <main+0x1166>
						if (((offTime / 1000) % 10) == 2) {
 8003e7c:	4b87      	ldr	r3, [pc, #540]	; (800409c <main+0x1334>)
 8003e7e:	881b      	ldrh	r3, [r3, #0]
 8003e80:	22fa      	movs	r2, #250	; 0xfa
 8003e82:	0091      	lsls	r1, r2, #2
 8003e84:	0018      	movs	r0, r3
 8003e86:	f7fc f93b 	bl	8000100 <__udivsi3>
 8003e8a:	0003      	movs	r3, r0
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	210a      	movs	r1, #10
 8003e90:	0018      	movs	r0, r3
 8003e92:	f7fc f9bb 	bl	800020c <__aeabi_uidivmod>
 8003e96:	000b      	movs	r3, r1
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d10b      	bne.n	8003eb6 <main+0x114e>
							newDig = (newDig + 4) % 5;
 8003e9e:	4b7e      	ldr	r3, [pc, #504]	; (8004098 <main+0x1330>)
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	3304      	adds	r3, #4
 8003ea4:	2105      	movs	r1, #5
 8003ea6:	0018      	movs	r0, r3
 8003ea8:	f7fc fa9a 	bl	80003e0 <__aeabi_idivmod>
 8003eac:	000b      	movs	r3, r1
 8003eae:	b2da      	uxtb	r2, r3
 8003eb0:	4b79      	ldr	r3, [pc, #484]	; (8004098 <main+0x1330>)
 8003eb2:	701a      	strb	r2, [r3, #0]
 8003eb4:	e039      	b.n	8003f2a <main+0x11c2>
						} else {
							newDig = (newDig + 9) % 10;
 8003eb6:	4b78      	ldr	r3, [pc, #480]	; (8004098 <main+0x1330>)
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	3309      	adds	r3, #9
 8003ebc:	210a      	movs	r1, #10
 8003ebe:	0018      	movs	r0, r3
 8003ec0:	f7fc fa8e 	bl	80003e0 <__aeabi_idivmod>
 8003ec4:	000b      	movs	r3, r1
 8003ec6:	b2da      	uxtb	r2, r3
 8003ec8:	4b73      	ldr	r3, [pc, #460]	; (8004098 <main+0x1330>)
 8003eca:	701a      	strb	r2, [r3, #0]
 8003ecc:	e02d      	b.n	8003f2a <main+0x11c2>
						}
					} else if (setupDig == 3) {
 8003ece:	4b71      	ldr	r3, [pc, #452]	; (8004094 <main+0x132c>)
 8003ed0:	781b      	ldrb	r3, [r3, #0]
 8003ed2:	2b03      	cmp	r3, #3
 8003ed4:	d129      	bne.n	8003f2a <main+0x11c2>
						if (((offTime / 100) % 10) > 4) {
 8003ed6:	4b71      	ldr	r3, [pc, #452]	; (800409c <main+0x1334>)
 8003ed8:	881b      	ldrh	r3, [r3, #0]
 8003eda:	2164      	movs	r1, #100	; 0x64
 8003edc:	0018      	movs	r0, r3
 8003ede:	f7fc f90f 	bl	8000100 <__udivsi3>
 8003ee2:	0003      	movs	r3, r0
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	210a      	movs	r1, #10
 8003ee8:	0018      	movs	r0, r3
 8003eea:	f7fc f98f 	bl	800020c <__aeabi_uidivmod>
 8003eee:	000b      	movs	r3, r1
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	2b04      	cmp	r3, #4
 8003ef4:	d90e      	bls.n	8003f14 <main+0x11ac>
							newDig = (newDig + 1) % 2;
 8003ef6:	4b68      	ldr	r3, [pc, #416]	; (8004098 <main+0x1330>)
 8003ef8:	781b      	ldrb	r3, [r3, #0]
 8003efa:	3301      	adds	r3, #1
 8003efc:	4a68      	ldr	r2, [pc, #416]	; (80040a0 <main+0x1338>)
 8003efe:	4013      	ands	r3, r2
 8003f00:	d504      	bpl.n	8003f0c <main+0x11a4>
 8003f02:	3b01      	subs	r3, #1
 8003f04:	2202      	movs	r2, #2
 8003f06:	4252      	negs	r2, r2
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	3301      	adds	r3, #1
 8003f0c:	b2da      	uxtb	r2, r3
 8003f0e:	4b62      	ldr	r3, [pc, #392]	; (8004098 <main+0x1330>)
 8003f10:	701a      	strb	r2, [r3, #0]
 8003f12:	e00a      	b.n	8003f2a <main+0x11c2>
						} else {
							newDig = (newDig + 2) % 3;
 8003f14:	4b60      	ldr	r3, [pc, #384]	; (8004098 <main+0x1330>)
 8003f16:	781b      	ldrb	r3, [r3, #0]
 8003f18:	3302      	adds	r3, #2
 8003f1a:	2103      	movs	r1, #3
 8003f1c:	0018      	movs	r0, r3
 8003f1e:	f7fc fa5f 	bl	80003e0 <__aeabi_idivmod>
 8003f22:	000b      	movs	r3, r1
 8003f24:	b2da      	uxtb	r2, r3
 8003f26:	4b5c      	ldr	r3, [pc, #368]	; (8004098 <main+0x1330>)
 8003f28:	701a      	strb	r2, [r3, #0]
						}
					}
				}
				if (newDig != ((int) (offTime / pow(10.0, setupDig)) % 10)) {
 8003f2a:	4b5b      	ldr	r3, [pc, #364]	; (8004098 <main+0x1330>)
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	001e      	movs	r6, r3
 8003f30:	4b5a      	ldr	r3, [pc, #360]	; (800409c <main+0x1334>)
 8003f32:	881b      	ldrh	r3, [r3, #0]
 8003f34:	0018      	movs	r0, r3
 8003f36:	f7fe f991 	bl	800225c <__aeabi_i2d>
 8003f3a:	0004      	movs	r4, r0
 8003f3c:	000d      	movs	r5, r1
 8003f3e:	4b55      	ldr	r3, [pc, #340]	; (8004094 <main+0x132c>)
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	0018      	movs	r0, r3
 8003f44:	f7fe f9ba 	bl	80022bc <__aeabi_ui2d>
 8003f48:	0002      	movs	r2, r0
 8003f4a:	000b      	movs	r3, r1
 8003f4c:	2000      	movs	r0, #0
 8003f4e:	4955      	ldr	r1, [pc, #340]	; (80040a4 <main+0x133c>)
 8003f50:	f004 fe50 	bl	8008bf4 <pow>
 8003f54:	0002      	movs	r2, r0
 8003f56:	000b      	movs	r3, r1
 8003f58:	0020      	movs	r0, r4
 8003f5a:	0029      	movs	r1, r5
 8003f5c:	f7fc feec 	bl	8000d38 <__aeabi_ddiv>
 8003f60:	0002      	movs	r2, r0
 8003f62:	000b      	movs	r3, r1
 8003f64:	0010      	movs	r0, r2
 8003f66:	0019      	movs	r1, r3
 8003f68:	f7fe f942 	bl	80021f0 <__aeabi_d2iz>
 8003f6c:	0003      	movs	r3, r0
 8003f6e:	210a      	movs	r1, #10
 8003f70:	0018      	movs	r0, r3
 8003f72:	f7fc fa35 	bl	80003e0 <__aeabi_idivmod>
 8003f76:	000b      	movs	r3, r1
 8003f78:	429e      	cmp	r6, r3
 8003f7a:	d100      	bne.n	8003f7e <main+0x1216>
 8003f7c:	e087      	b.n	800408e <main+0x1326>
					delayForBlink = 0;
 8003f7e:	4b4a      	ldr	r3, [pc, #296]	; (80040a8 <main+0x1340>)
 8003f80:	2200      	movs	r2, #0
 8003f82:	601a      	str	r2, [r3, #0]
					offTime = (offTime
							- (((int) (offTime / pow(10.0, setupDig)) % 10))
 8003f84:	4b45      	ldr	r3, [pc, #276]	; (800409c <main+0x1334>)
 8003f86:	881b      	ldrh	r3, [r3, #0]
 8003f88:	0018      	movs	r0, r3
 8003f8a:	f7fe f967 	bl	800225c <__aeabi_i2d>
 8003f8e:	0004      	movs	r4, r0
 8003f90:	000d      	movs	r5, r1
 8003f92:	4b42      	ldr	r3, [pc, #264]	; (800409c <main+0x1334>)
 8003f94:	881b      	ldrh	r3, [r3, #0]
 8003f96:	0018      	movs	r0, r3
 8003f98:	f7fe f960 	bl	800225c <__aeabi_i2d>
 8003f9c:	6038      	str	r0, [r7, #0]
 8003f9e:	6079      	str	r1, [r7, #4]
 8003fa0:	4b3c      	ldr	r3, [pc, #240]	; (8004094 <main+0x132c>)
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	0018      	movs	r0, r3
 8003fa6:	f7fe f989 	bl	80022bc <__aeabi_ui2d>
 8003faa:	0002      	movs	r2, r0
 8003fac:	000b      	movs	r3, r1
 8003fae:	2000      	movs	r0, #0
 8003fb0:	493c      	ldr	r1, [pc, #240]	; (80040a4 <main+0x133c>)
 8003fb2:	f004 fe1f 	bl	8008bf4 <pow>
 8003fb6:	0002      	movs	r2, r0
 8003fb8:	000b      	movs	r3, r1
 8003fba:	6838      	ldr	r0, [r7, #0]
 8003fbc:	6879      	ldr	r1, [r7, #4]
 8003fbe:	f7fc febb 	bl	8000d38 <__aeabi_ddiv>
 8003fc2:	0002      	movs	r2, r0
 8003fc4:	000b      	movs	r3, r1
 8003fc6:	0010      	movs	r0, r2
 8003fc8:	0019      	movs	r1, r3
 8003fca:	f7fe f911 	bl	80021f0 <__aeabi_d2iz>
 8003fce:	0003      	movs	r3, r0
 8003fd0:	210a      	movs	r1, #10
 8003fd2:	0018      	movs	r0, r3
 8003fd4:	f7fc fa04 	bl	80003e0 <__aeabi_idivmod>
 8003fd8:	000b      	movs	r3, r1
									* pow(10.0, setupDig))
 8003fda:	0018      	movs	r0, r3
 8003fdc:	f7fe f93e 	bl	800225c <__aeabi_i2d>
 8003fe0:	6038      	str	r0, [r7, #0]
 8003fe2:	6079      	str	r1, [r7, #4]
 8003fe4:	4b2b      	ldr	r3, [pc, #172]	; (8004094 <main+0x132c>)
 8003fe6:	781b      	ldrb	r3, [r3, #0]
 8003fe8:	0018      	movs	r0, r3
 8003fea:	f7fe f967 	bl	80022bc <__aeabi_ui2d>
 8003fee:	0002      	movs	r2, r0
 8003ff0:	000b      	movs	r3, r1
 8003ff2:	2000      	movs	r0, #0
 8003ff4:	492b      	ldr	r1, [pc, #172]	; (80040a4 <main+0x133c>)
 8003ff6:	f004 fdfd 	bl	8008bf4 <pow>
 8003ffa:	0002      	movs	r2, r0
 8003ffc:	000b      	movs	r3, r1
 8003ffe:	6838      	ldr	r0, [r7, #0]
 8004000:	6879      	ldr	r1, [r7, #4]
 8004002:	f7fd fa93 	bl	800152c <__aeabi_dmul>
 8004006:	0002      	movs	r2, r0
 8004008:	000b      	movs	r3, r1
							- (((int) (offTime / pow(10.0, setupDig)) % 10))
 800400a:	0020      	movs	r0, r4
 800400c:	0029      	movs	r1, r5
 800400e:	f7fd fd4f 	bl	8001ab0 <__aeabi_dsub>
 8004012:	0002      	movs	r2, r0
 8004014:	000b      	movs	r3, r1
 8004016:	603a      	str	r2, [r7, #0]
 8004018:	607b      	str	r3, [r7, #4]
							+ (newDig * pow(10.0, setupDig));
 800401a:	4b1f      	ldr	r3, [pc, #124]	; (8004098 <main+0x1330>)
 800401c:	781b      	ldrb	r3, [r3, #0]
 800401e:	0018      	movs	r0, r3
 8004020:	f7fe f91c 	bl	800225c <__aeabi_i2d>
 8004024:	0004      	movs	r4, r0
 8004026:	000d      	movs	r5, r1
 8004028:	4b1a      	ldr	r3, [pc, #104]	; (8004094 <main+0x132c>)
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	0018      	movs	r0, r3
 800402e:	f7fe f945 	bl	80022bc <__aeabi_ui2d>
 8004032:	0002      	movs	r2, r0
 8004034:	000b      	movs	r3, r1
 8004036:	2000      	movs	r0, #0
 8004038:	491a      	ldr	r1, [pc, #104]	; (80040a4 <main+0x133c>)
 800403a:	f004 fddb 	bl	8008bf4 <pow>
 800403e:	0002      	movs	r2, r0
 8004040:	000b      	movs	r3, r1
 8004042:	0020      	movs	r0, r4
 8004044:	0029      	movs	r1, r5
 8004046:	f7fd fa71 	bl	800152c <__aeabi_dmul>
 800404a:	0002      	movs	r2, r0
 800404c:	000b      	movs	r3, r1
 800404e:	6838      	ldr	r0, [r7, #0]
 8004050:	6879      	ldr	r1, [r7, #4]
 8004052:	f7fc fb11 	bl	8000678 <__aeabi_dadd>
 8004056:	0002      	movs	r2, r0
 8004058:	000b      	movs	r3, r1
					offTime = (offTime
 800405a:	0010      	movs	r0, r2
 800405c:	0019      	movs	r1, r3
 800405e:	f7fc fa3d 	bl	80004dc <__aeabi_d2uiz>
 8004062:	0003      	movs	r3, r0
 8004064:	b29a      	uxth	r2, r3
 8004066:	4b0d      	ldr	r3, [pc, #52]	; (800409c <main+0x1334>)
 8004068:	801a      	strh	r2, [r3, #0]
					HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, offTime);
 800406a:	4b0c      	ldr	r3, [pc, #48]	; (800409c <main+0x1334>)
 800406c:	881b      	ldrh	r3, [r3, #0]
 800406e:	001a      	movs	r2, r3
 8004070:	4b0e      	ldr	r3, [pc, #56]	; (80040ac <main+0x1344>)
 8004072:	2101      	movs	r1, #1
 8004074:	0018      	movs	r0, r3
 8004076:	f003 f8d8 	bl	800722a <HAL_RTCEx_BKUPWrite>
				}

				break;
 800407a:	e008      	b.n	800408e <main+0x1326>
				break;
 800407c:	46c0      	nop			; (mov r8, r8)
 800407e:	f7fe feca 	bl	8002e16 <main+0xae>
				break;
 8004082:	46c0      	nop			; (mov r8, r8)
 8004084:	f7fe fec7 	bl	8002e16 <main+0xae>
				break;
 8004088:	46c0      	nop			; (mov r8, r8)
 800408a:	f7fe fec4 	bl	8002e16 <main+0xae>
				break;
 800408e:	46c0      	nop			; (mov r8, r8)
	while (1) {
 8004090:	f7fe fec1 	bl	8002e16 <main+0xae>
 8004094:	20000276 	.word	0x20000276
 8004098:	20000277 	.word	0x20000277
 800409c:	2000027c 	.word	0x2000027c
 80040a0:	80000001 	.word	0x80000001
 80040a4:	40240000 	.word	0x40240000
 80040a8:	200002bc 	.word	0x200002bc
 80040ac:	200000f8 	.word	0x200000f8

080040b0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80040b0:	b590      	push	{r4, r7, lr}
 80040b2:	b093      	sub	sp, #76	; 0x4c
 80040b4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80040b6:	2414      	movs	r4, #20
 80040b8:	193b      	adds	r3, r7, r4
 80040ba:	0018      	movs	r0, r3
 80040bc:	2334      	movs	r3, #52	; 0x34
 80040be:	001a      	movs	r2, r3
 80040c0:	2100      	movs	r1, #0
 80040c2:	f004 fd65 	bl	8008b90 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80040c6:	1d3b      	adds	r3, r7, #4
 80040c8:	0018      	movs	r0, r3
 80040ca:	2310      	movs	r3, #16
 80040cc:	001a      	movs	r2, r3
 80040ce:	2100      	movs	r1, #0
 80040d0:	f004 fd5e 	bl	8008b90 <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80040d4:	2380      	movs	r3, #128	; 0x80
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	0018      	movs	r0, r3
 80040da:	f001 ff93 	bl	8006004 <HAL_PWREx_ControlVoltageScaling>

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 80040de:	f001 ff83 	bl	8005fe8 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80040e2:	4b26      	ldr	r3, [pc, #152]	; (800417c <SystemClock_Config+0xcc>)
 80040e4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80040e6:	4b25      	ldr	r3, [pc, #148]	; (800417c <SystemClock_Config+0xcc>)
 80040e8:	2118      	movs	r1, #24
 80040ea:	438a      	bics	r2, r1
 80040ec:	65da      	str	r2, [r3, #92]	; 0x5c

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 80040ee:	193b      	adds	r3, r7, r4
 80040f0:	2206      	movs	r2, #6
 80040f2:	601a      	str	r2, [r3, #0]
			| RCC_OSCILLATORTYPE_LSE;
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80040f4:	193b      	adds	r3, r7, r4
 80040f6:	2201      	movs	r2, #1
 80040f8:	609a      	str	r2, [r3, #8]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80040fa:	193b      	adds	r3, r7, r4
 80040fc:	2280      	movs	r2, #128	; 0x80
 80040fe:	0052      	lsls	r2, r2, #1
 8004100:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8004102:	0021      	movs	r1, r4
 8004104:	187b      	adds	r3, r7, r1
 8004106:	2200      	movs	r2, #0
 8004108:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800410a:	187b      	adds	r3, r7, r1
 800410c:	2240      	movs	r2, #64	; 0x40
 800410e:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004110:	187b      	adds	r3, r7, r1
 8004112:	2202      	movs	r2, #2
 8004114:	61da      	str	r2, [r3, #28]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004116:	187b      	adds	r3, r7, r1
 8004118:	2202      	movs	r2, #2
 800411a:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800411c:	187b      	adds	r3, r7, r1
 800411e:	2200      	movs	r2, #0
 8004120:	625a      	str	r2, [r3, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLN = 8;
 8004122:	187b      	adds	r3, r7, r1
 8004124:	2208      	movs	r2, #8
 8004126:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004128:	187b      	adds	r3, r7, r1
 800412a:	2280      	movs	r2, #128	; 0x80
 800412c:	0292      	lsls	r2, r2, #10
 800412e:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8004130:	187b      	adds	r3, r7, r1
 8004132:	22c0      	movs	r2, #192	; 0xc0
 8004134:	05d2      	lsls	r2, r2, #23
 8004136:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8004138:	187b      	adds	r3, r7, r1
 800413a:	0018      	movs	r0, r3
 800413c:	f001 ffae 	bl	800609c <HAL_RCC_OscConfig>
 8004140:	1e03      	subs	r3, r0, #0
 8004142:	d001      	beq.n	8004148 <SystemClock_Config+0x98>
		Error_Handler();
 8004144:	f000 fa28 	bl	8004598 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8004148:	1d3b      	adds	r3, r7, #4
 800414a:	2207      	movs	r2, #7
 800414c:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800414e:	1d3b      	adds	r3, r7, #4
 8004150:	2202      	movs	r2, #2
 8004152:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004154:	1d3b      	adds	r3, r7, #4
 8004156:	2200      	movs	r2, #0
 8004158:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800415a:	1d3b      	adds	r3, r7, #4
 800415c:	2200      	movs	r2, #0
 800415e:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8004160:	1d3b      	adds	r3, r7, #4
 8004162:	2101      	movs	r1, #1
 8004164:	0018      	movs	r0, r3
 8004166:	f002 faa9 	bl	80066bc <HAL_RCC_ClockConfig>
 800416a:	1e03      	subs	r3, r0, #0
 800416c:	d001      	beq.n	8004172 <SystemClock_Config+0xc2>
		Error_Handler();
 800416e:	f000 fa13 	bl	8004598 <Error_Handler>
	}
}
 8004172:	46c0      	nop			; (mov r8, r8)
 8004174:	46bd      	mov	sp, r7
 8004176:	b013      	add	sp, #76	; 0x4c
 8004178:	bd90      	pop	{r4, r7, pc}
 800417a:	46c0      	nop			; (mov r8, r8)
 800417c:	40021000 	.word	0x40021000

08004180 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8004186:	1d3b      	adds	r3, r7, #4
 8004188:	0018      	movs	r0, r3
 800418a:	230c      	movs	r3, #12
 800418c:	001a      	movs	r2, r3
 800418e:	2100      	movs	r1, #0
 8004190:	f004 fcfe 	bl	8008b90 <memset>

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8004194:	4b2d      	ldr	r3, [pc, #180]	; (800424c <MX_ADC1_Init+0xcc>)
 8004196:	4a2e      	ldr	r2, [pc, #184]	; (8004250 <MX_ADC1_Init+0xd0>)
 8004198:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800419a:	4b2c      	ldr	r3, [pc, #176]	; (800424c <MX_ADC1_Init+0xcc>)
 800419c:	2280      	movs	r2, #128	; 0x80
 800419e:	05d2      	lsls	r2, r2, #23
 80041a0:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80041a2:	4b2a      	ldr	r3, [pc, #168]	; (800424c <MX_ADC1_Init+0xcc>)
 80041a4:	2200      	movs	r2, #0
 80041a6:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80041a8:	4b28      	ldr	r3, [pc, #160]	; (800424c <MX_ADC1_Init+0xcc>)
 80041aa:	2200      	movs	r2, #0
 80041ac:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80041ae:	4b27      	ldr	r3, [pc, #156]	; (800424c <MX_ADC1_Init+0xcc>)
 80041b0:	2200      	movs	r2, #0
 80041b2:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80041b4:	4b25      	ldr	r3, [pc, #148]	; (800424c <MX_ADC1_Init+0xcc>)
 80041b6:	2204      	movs	r2, #4
 80041b8:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 80041ba:	4b24      	ldr	r3, [pc, #144]	; (800424c <MX_ADC1_Init+0xcc>)
 80041bc:	2200      	movs	r2, #0
 80041be:	761a      	strb	r2, [r3, #24]
	hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80041c0:	4b22      	ldr	r3, [pc, #136]	; (800424c <MX_ADC1_Init+0xcc>)
 80041c2:	2200      	movs	r2, #0
 80041c4:	765a      	strb	r2, [r3, #25]
	hadc1.Init.ContinuousConvMode = DISABLE;
 80041c6:	4b21      	ldr	r3, [pc, #132]	; (800424c <MX_ADC1_Init+0xcc>)
 80041c8:	2200      	movs	r2, #0
 80041ca:	769a      	strb	r2, [r3, #26]
	hadc1.Init.NbrOfConversion = 1;
 80041cc:	4b1f      	ldr	r3, [pc, #124]	; (800424c <MX_ADC1_Init+0xcc>)
 80041ce:	2201      	movs	r2, #1
 80041d0:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80041d2:	4b1e      	ldr	r3, [pc, #120]	; (800424c <MX_ADC1_Init+0xcc>)
 80041d4:	2220      	movs	r2, #32
 80041d6:	2100      	movs	r1, #0
 80041d8:	5499      	strb	r1, [r3, r2]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80041da:	4b1c      	ldr	r3, [pc, #112]	; (800424c <MX_ADC1_Init+0xcc>)
 80041dc:	2200      	movs	r2, #0
 80041de:	625a      	str	r2, [r3, #36]	; 0x24
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80041e0:	4b1a      	ldr	r3, [pc, #104]	; (800424c <MX_ADC1_Init+0xcc>)
 80041e2:	2200      	movs	r2, #0
 80041e4:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DMAContinuousRequests = DISABLE;
 80041e6:	4b19      	ldr	r3, [pc, #100]	; (800424c <MX_ADC1_Init+0xcc>)
 80041e8:	222c      	movs	r2, #44	; 0x2c
 80041ea:	2100      	movs	r1, #0
 80041ec:	5499      	strb	r1, [r3, r2]
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80041ee:	4b17      	ldr	r3, [pc, #92]	; (800424c <MX_ADC1_Init+0xcc>)
 80041f0:	2200      	movs	r2, #0
 80041f2:	631a      	str	r2, [r3, #48]	; 0x30
	hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80041f4:	4b15      	ldr	r3, [pc, #84]	; (800424c <MX_ADC1_Init+0xcc>)
 80041f6:	2200      	movs	r2, #0
 80041f8:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80041fa:	4b14      	ldr	r3, [pc, #80]	; (800424c <MX_ADC1_Init+0xcc>)
 80041fc:	2200      	movs	r2, #0
 80041fe:	639a      	str	r2, [r3, #56]	; 0x38
	hadc1.Init.OversamplingMode = DISABLE;
 8004200:	4b12      	ldr	r3, [pc, #72]	; (800424c <MX_ADC1_Init+0xcc>)
 8004202:	223c      	movs	r2, #60	; 0x3c
 8004204:	2100      	movs	r1, #0
 8004206:	5499      	strb	r1, [r3, r2]
	hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8004208:	4b10      	ldr	r3, [pc, #64]	; (800424c <MX_ADC1_Init+0xcc>)
 800420a:	2200      	movs	r2, #0
 800420c:	64da      	str	r2, [r3, #76]	; 0x4c
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 800420e:	4b0f      	ldr	r3, [pc, #60]	; (800424c <MX_ADC1_Init+0xcc>)
 8004210:	0018      	movs	r0, r3
 8004212:	f000 fd9b 	bl	8004d4c <HAL_ADC_Init>
 8004216:	1e03      	subs	r3, r0, #0
 8004218:	d001      	beq.n	800421e <MX_ADC1_Init+0x9e>
		Error_Handler();
 800421a:	f000 f9bd 	bl	8004598 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_8;
 800421e:	1d3b      	adds	r3, r7, #4
 8004220:	4a0c      	ldr	r2, [pc, #48]	; (8004254 <MX_ADC1_Init+0xd4>)
 8004222:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8004224:	1d3b      	adds	r3, r7, #4
 8004226:	2200      	movs	r2, #0
 8004228:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800422a:	1d3b      	adds	r3, r7, #4
 800422c:	2200      	movs	r2, #0
 800422e:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8004230:	1d3a      	adds	r2, r7, #4
 8004232:	4b06      	ldr	r3, [pc, #24]	; (800424c <MX_ADC1_Init+0xcc>)
 8004234:	0011      	movs	r1, r2
 8004236:	0018      	movs	r0, r3
 8004238:	f001 f81e 	bl	8005278 <HAL_ADC_ConfigChannel>
 800423c:	1e03      	subs	r3, r0, #0
 800423e:	d001      	beq.n	8004244 <MX_ADC1_Init+0xc4>
		Error_Handler();
 8004240:	f000 f9aa 	bl	8004598 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8004244:	46c0      	nop			; (mov r8, r8)
 8004246:	46bd      	mov	sp, r7
 8004248:	b004      	add	sp, #16
 800424a:	bd80      	pop	{r7, pc}
 800424c:	20000094 	.word	0x20000094
 8004250:	40012400 	.word	0x40012400
 8004254:	20000100 	.word	0x20000100

08004258 <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 8004258:	b580      	push	{r7, lr}
 800425a:	af00      	add	r7, sp, #0

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 800425c:	4b13      	ldr	r3, [pc, #76]	; (80042ac <MX_RTC_Init+0x54>)
 800425e:	4a14      	ldr	r2, [pc, #80]	; (80042b0 <MX_RTC_Init+0x58>)
 8004260:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004262:	4b12      	ldr	r3, [pc, #72]	; (80042ac <MX_RTC_Init+0x54>)
 8004264:	2200      	movs	r2, #0
 8004266:	609a      	str	r2, [r3, #8]
	hrtc.Init.AsynchPrediv = 127;
 8004268:	4b10      	ldr	r3, [pc, #64]	; (80042ac <MX_RTC_Init+0x54>)
 800426a:	227f      	movs	r2, #127	; 0x7f
 800426c:	60da      	str	r2, [r3, #12]
	hrtc.Init.SynchPrediv = 255;
 800426e:	4b0f      	ldr	r3, [pc, #60]	; (80042ac <MX_RTC_Init+0x54>)
 8004270:	22ff      	movs	r2, #255	; 0xff
 8004272:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004274:	4b0d      	ldr	r3, [pc, #52]	; (80042ac <MX_RTC_Init+0x54>)
 8004276:	2200      	movs	r2, #0
 8004278:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800427a:	4b0c      	ldr	r3, [pc, #48]	; (80042ac <MX_RTC_Init+0x54>)
 800427c:	2200      	movs	r2, #0
 800427e:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004280:	4b0a      	ldr	r3, [pc, #40]	; (80042ac <MX_RTC_Init+0x54>)
 8004282:	2200      	movs	r2, #0
 8004284:	61da      	str	r2, [r3, #28]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004286:	4b09      	ldr	r3, [pc, #36]	; (80042ac <MX_RTC_Init+0x54>)
 8004288:	2280      	movs	r2, #128	; 0x80
 800428a:	05d2      	lsls	r2, r2, #23
 800428c:	621a      	str	r2, [r3, #32]
	hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800428e:	4b07      	ldr	r3, [pc, #28]	; (80042ac <MX_RTC_Init+0x54>)
 8004290:	2200      	movs	r2, #0
 8004292:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 8004294:	4b05      	ldr	r3, [pc, #20]	; (80042ac <MX_RTC_Init+0x54>)
 8004296:	0018      	movs	r0, r3
 8004298:	f002 fce0 	bl	8006c5c <HAL_RTC_Init>
 800429c:	1e03      	subs	r3, r0, #0
 800429e:	d001      	beq.n	80042a4 <MX_RTC_Init+0x4c>
		Error_Handler();
 80042a0:	f000 f97a 	bl	8004598 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 80042a4:	46c0      	nop			; (mov r8, r8)
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	46c0      	nop			; (mov r8, r8)
 80042ac:	200000f8 	.word	0x200000f8
 80042b0:	40002800 	.word	0x40002800

080042b4 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b08a      	sub	sp, #40	; 0x28
 80042b8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80042ba:	231c      	movs	r3, #28
 80042bc:	18fb      	adds	r3, r7, r3
 80042be:	0018      	movs	r0, r3
 80042c0:	230c      	movs	r3, #12
 80042c2:	001a      	movs	r2, r3
 80042c4:	2100      	movs	r1, #0
 80042c6:	f004 fc63 	bl	8008b90 <memset>
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80042ca:	003b      	movs	r3, r7
 80042cc:	0018      	movs	r0, r3
 80042ce:	231c      	movs	r3, #28
 80042d0:	001a      	movs	r2, r3
 80042d2:	2100      	movs	r1, #0
 80042d4:	f004 fc5c 	bl	8008b90 <memset>

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80042d8:	4b24      	ldr	r3, [pc, #144]	; (800436c <MX_TIM3_Init+0xb8>)
 80042da:	4a25      	ldr	r2, [pc, #148]	; (8004370 <MX_TIM3_Init+0xbc>)
 80042dc:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 80042de:	4b23      	ldr	r3, [pc, #140]	; (800436c <MX_TIM3_Init+0xb8>)
 80042e0:	2200      	movs	r2, #0
 80042e2:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042e4:	4b21      	ldr	r3, [pc, #132]	; (800436c <MX_TIM3_Init+0xb8>)
 80042e6:	2200      	movs	r2, #0
 80042e8:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 427;
 80042ea:	4b20      	ldr	r3, [pc, #128]	; (800436c <MX_TIM3_Init+0xb8>)
 80042ec:	22ac      	movs	r2, #172	; 0xac
 80042ee:	32ff      	adds	r2, #255	; 0xff
 80042f0:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80042f2:	4b1e      	ldr	r3, [pc, #120]	; (800436c <MX_TIM3_Init+0xb8>)
 80042f4:	2200      	movs	r2, #0
 80042f6:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80042f8:	4b1c      	ldr	r3, [pc, #112]	; (800436c <MX_TIM3_Init+0xb8>)
 80042fa:	2200      	movs	r2, #0
 80042fc:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 80042fe:	4b1b      	ldr	r3, [pc, #108]	; (800436c <MX_TIM3_Init+0xb8>)
 8004300:	0018      	movs	r0, r3
 8004302:	f003 f871 	bl	80073e8 <HAL_TIM_PWM_Init>
 8004306:	1e03      	subs	r3, r0, #0
 8004308:	d001      	beq.n	800430e <MX_TIM3_Init+0x5a>
		Error_Handler();
 800430a:	f000 f945 	bl	8004598 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800430e:	211c      	movs	r1, #28
 8004310:	187b      	adds	r3, r7, r1
 8004312:	2200      	movs	r2, #0
 8004314:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004316:	187b      	adds	r3, r7, r1
 8004318:	2200      	movs	r2, #0
 800431a:	609a      	str	r2, [r3, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 800431c:	187a      	adds	r2, r7, r1
 800431e:	4b13      	ldr	r3, [pc, #76]	; (800436c <MX_TIM3_Init+0xb8>)
 8004320:	0011      	movs	r1, r2
 8004322:	0018      	movs	r0, r3
 8004324:	f003 ff16 	bl	8008154 <HAL_TIMEx_MasterConfigSynchronization>
 8004328:	1e03      	subs	r3, r0, #0
 800432a:	d001      	beq.n	8004330 <MX_TIM3_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 800432c:	f000 f934 	bl	8004598 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004330:	003b      	movs	r3, r7
 8004332:	2260      	movs	r2, #96	; 0x60
 8004334:	601a      	str	r2, [r3, #0]
	sConfigOC.Pulse = 0;
 8004336:	003b      	movs	r3, r7
 8004338:	2200      	movs	r2, #0
 800433a:	605a      	str	r2, [r3, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800433c:	003b      	movs	r3, r7
 800433e:	2200      	movs	r2, #0
 8004340:	609a      	str	r2, [r3, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004342:	003b      	movs	r3, r7
 8004344:	2200      	movs	r2, #0
 8004346:	611a      	str	r2, [r3, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 8004348:	0039      	movs	r1, r7
 800434a:	4b08      	ldr	r3, [pc, #32]	; (800436c <MX_TIM3_Init+0xb8>)
 800434c:	2200      	movs	r2, #0
 800434e:	0018      	movs	r0, r3
 8004350:	f003 faac 	bl	80078ac <HAL_TIM_PWM_ConfigChannel>
 8004354:	1e03      	subs	r3, r0, #0
 8004356:	d001      	beq.n	800435c <MX_TIM3_Init+0xa8>
			!= HAL_OK) {
		Error_Handler();
 8004358:	f000 f91e 	bl	8004598 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 800435c:	4b03      	ldr	r3, [pc, #12]	; (800436c <MX_TIM3_Init+0xb8>)
 800435e:	0018      	movs	r0, r3
 8004360:	f000 fa0c 	bl	800477c <HAL_TIM_MspPostInit>

}
 8004364:	46c0      	nop			; (mov r8, r8)
 8004366:	46bd      	mov	sp, r7
 8004368:	b00a      	add	sp, #40	; 0x28
 800436a:	bd80      	pop	{r7, pc}
 800436c:	20000124 	.word	0x20000124
 8004370:	40000400 	.word	0x40000400

08004374 <MX_TIM14_Init>:
/**
 * @brief TIM14 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM14_Init(void) {
 8004374:	b580      	push	{r7, lr}
 8004376:	af00      	add	r7, sp, #0
	/* USER CODE END TIM14_Init 0 */

	/* USER CODE BEGIN TIM14_Init 1 */

	/* USER CODE END TIM14_Init 1 */
	htim14.Instance = TIM14;
 8004378:	4b0e      	ldr	r3, [pc, #56]	; (80043b4 <MX_TIM14_Init+0x40>)
 800437a:	4a0f      	ldr	r2, [pc, #60]	; (80043b8 <MX_TIM14_Init+0x44>)
 800437c:	601a      	str	r2, [r3, #0]
	htim14.Init.Prescaler = 31;
 800437e:	4b0d      	ldr	r3, [pc, #52]	; (80043b4 <MX_TIM14_Init+0x40>)
 8004380:	221f      	movs	r2, #31
 8004382:	605a      	str	r2, [r3, #4]
	htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004384:	4b0b      	ldr	r3, [pc, #44]	; (80043b4 <MX_TIM14_Init+0x40>)
 8004386:	2200      	movs	r2, #0
 8004388:	609a      	str	r2, [r3, #8]
	htim14.Init.Period = 9;
 800438a:	4b0a      	ldr	r3, [pc, #40]	; (80043b4 <MX_TIM14_Init+0x40>)
 800438c:	2209      	movs	r2, #9
 800438e:	60da      	str	r2, [r3, #12]
	htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004390:	4b08      	ldr	r3, [pc, #32]	; (80043b4 <MX_TIM14_Init+0x40>)
 8004392:	2200      	movs	r2, #0
 8004394:	611a      	str	r2, [r3, #16]
	htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004396:	4b07      	ldr	r3, [pc, #28]	; (80043b4 <MX_TIM14_Init+0x40>)
 8004398:	2200      	movs	r2, #0
 800439a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim14) != HAL_OK) {
 800439c:	4b05      	ldr	r3, [pc, #20]	; (80043b4 <MX_TIM14_Init+0x40>)
 800439e:	0018      	movs	r0, r3
 80043a0:	f002 ff7b 	bl	800729a <HAL_TIM_Base_Init>
 80043a4:	1e03      	subs	r3, r0, #0
 80043a6:	d001      	beq.n	80043ac <MX_TIM14_Init+0x38>
		Error_Handler();
 80043a8:	f000 f8f6 	bl	8004598 <Error_Handler>
	}
	/* USER CODE BEGIN TIM14_Init 2 */

	/* USER CODE END TIM14_Init 2 */

}
 80043ac:	46c0      	nop			; (mov r8, r8)
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	46c0      	nop			; (mov r8, r8)
 80043b4:	20000170 	.word	0x20000170
 80043b8:	40002000 	.word	0x40002000

080043bc <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80043bc:	b580      	push	{r7, lr}
 80043be:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80043c0:	4b23      	ldr	r3, [pc, #140]	; (8004450 <MX_USART1_UART_Init+0x94>)
 80043c2:	4a24      	ldr	r2, [pc, #144]	; (8004454 <MX_USART1_UART_Init+0x98>)
 80043c4:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80043c6:	4b22      	ldr	r3, [pc, #136]	; (8004450 <MX_USART1_UART_Init+0x94>)
 80043c8:	22e1      	movs	r2, #225	; 0xe1
 80043ca:	0252      	lsls	r2, r2, #9
 80043cc:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80043ce:	4b20      	ldr	r3, [pc, #128]	; (8004450 <MX_USART1_UART_Init+0x94>)
 80043d0:	2200      	movs	r2, #0
 80043d2:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80043d4:	4b1e      	ldr	r3, [pc, #120]	; (8004450 <MX_USART1_UART_Init+0x94>)
 80043d6:	2200      	movs	r2, #0
 80043d8:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80043da:	4b1d      	ldr	r3, [pc, #116]	; (8004450 <MX_USART1_UART_Init+0x94>)
 80043dc:	2200      	movs	r2, #0
 80043de:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80043e0:	4b1b      	ldr	r3, [pc, #108]	; (8004450 <MX_USART1_UART_Init+0x94>)
 80043e2:	220c      	movs	r2, #12
 80043e4:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80043e6:	4b1a      	ldr	r3, [pc, #104]	; (8004450 <MX_USART1_UART_Init+0x94>)
 80043e8:	2200      	movs	r2, #0
 80043ea:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80043ec:	4b18      	ldr	r3, [pc, #96]	; (8004450 <MX_USART1_UART_Init+0x94>)
 80043ee:	2200      	movs	r2, #0
 80043f0:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80043f2:	4b17      	ldr	r3, [pc, #92]	; (8004450 <MX_USART1_UART_Init+0x94>)
 80043f4:	2200      	movs	r2, #0
 80043f6:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80043f8:	4b15      	ldr	r3, [pc, #84]	; (8004450 <MX_USART1_UART_Init+0x94>)
 80043fa:	2200      	movs	r2, #0
 80043fc:	625a      	str	r2, [r3, #36]	; 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80043fe:	4b14      	ldr	r3, [pc, #80]	; (8004450 <MX_USART1_UART_Init+0x94>)
 8004400:	2200      	movs	r2, #0
 8004402:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8004404:	4b12      	ldr	r3, [pc, #72]	; (8004450 <MX_USART1_UART_Init+0x94>)
 8004406:	0018      	movs	r0, r3
 8004408:	f003 ff1e 	bl	8008248 <HAL_UART_Init>
 800440c:	1e03      	subs	r3, r0, #0
 800440e:	d001      	beq.n	8004414 <MX_USART1_UART_Init+0x58>
		Error_Handler();
 8004410:	f000 f8c2 	bl	8004598 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8)
 8004414:	4b0e      	ldr	r3, [pc, #56]	; (8004450 <MX_USART1_UART_Init+0x94>)
 8004416:	2100      	movs	r1, #0
 8004418:	0018      	movs	r0, r3
 800441a:	f004 fad9 	bl	80089d0 <HAL_UARTEx_SetTxFifoThreshold>
 800441e:	1e03      	subs	r3, r0, #0
 8004420:	d001      	beq.n	8004426 <MX_USART1_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 8004422:	f000 f8b9 	bl	8004598 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8)
 8004426:	4b0a      	ldr	r3, [pc, #40]	; (8004450 <MX_USART1_UART_Init+0x94>)
 8004428:	2100      	movs	r1, #0
 800442a:	0018      	movs	r0, r3
 800442c:	f004 fb10 	bl	8008a50 <HAL_UARTEx_SetRxFifoThreshold>
 8004430:	1e03      	subs	r3, r0, #0
 8004432:	d001      	beq.n	8004438 <MX_USART1_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8004434:	f000 f8b0 	bl	8004598 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK) {
 8004438:	4b05      	ldr	r3, [pc, #20]	; (8004450 <MX_USART1_UART_Init+0x94>)
 800443a:	0018      	movs	r0, r3
 800443c:	f004 fa8e 	bl	800895c <HAL_UARTEx_DisableFifoMode>
 8004440:	1e03      	subs	r3, r0, #0
 8004442:	d001      	beq.n	8004448 <MX_USART1_UART_Init+0x8c>
		Error_Handler();
 8004444:	f000 f8a8 	bl	8004598 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8004448:	46c0      	nop			; (mov r8, r8)
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
 800444e:	46c0      	nop			; (mov r8, r8)
 8004450:	200001bc 	.word	0x200001bc
 8004454:	40013800 	.word	0x40013800

08004458 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8004458:	b590      	push	{r4, r7, lr}
 800445a:	b08b      	sub	sp, #44	; 0x2c
 800445c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800445e:	2414      	movs	r4, #20
 8004460:	193b      	adds	r3, r7, r4
 8004462:	0018      	movs	r0, r3
 8004464:	2314      	movs	r3, #20
 8004466:	001a      	movs	r2, r3
 8004468:	2100      	movs	r1, #0
 800446a:	f004 fb91 	bl	8008b90 <memset>
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800446e:	4b44      	ldr	r3, [pc, #272]	; (8004580 <MX_GPIO_Init+0x128>)
 8004470:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004472:	4b43      	ldr	r3, [pc, #268]	; (8004580 <MX_GPIO_Init+0x128>)
 8004474:	2104      	movs	r1, #4
 8004476:	430a      	orrs	r2, r1
 8004478:	635a      	str	r2, [r3, #52]	; 0x34
 800447a:	4b41      	ldr	r3, [pc, #260]	; (8004580 <MX_GPIO_Init+0x128>)
 800447c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800447e:	2204      	movs	r2, #4
 8004480:	4013      	ands	r3, r2
 8004482:	613b      	str	r3, [r7, #16]
 8004484:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8004486:	4b3e      	ldr	r3, [pc, #248]	; (8004580 <MX_GPIO_Init+0x128>)
 8004488:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800448a:	4b3d      	ldr	r3, [pc, #244]	; (8004580 <MX_GPIO_Init+0x128>)
 800448c:	2101      	movs	r1, #1
 800448e:	430a      	orrs	r2, r1
 8004490:	635a      	str	r2, [r3, #52]	; 0x34
 8004492:	4b3b      	ldr	r3, [pc, #236]	; (8004580 <MX_GPIO_Init+0x128>)
 8004494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004496:	2201      	movs	r2, #1
 8004498:	4013      	ands	r3, r2
 800449a:	60fb      	str	r3, [r7, #12]
 800449c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800449e:	4b38      	ldr	r3, [pc, #224]	; (8004580 <MX_GPIO_Init+0x128>)
 80044a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044a2:	4b37      	ldr	r3, [pc, #220]	; (8004580 <MX_GPIO_Init+0x128>)
 80044a4:	2102      	movs	r1, #2
 80044a6:	430a      	orrs	r2, r1
 80044a8:	635a      	str	r2, [r3, #52]	; 0x34
 80044aa:	4b35      	ldr	r3, [pc, #212]	; (8004580 <MX_GPIO_Init+0x128>)
 80044ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044ae:	2202      	movs	r2, #2
 80044b0:	4013      	ands	r3, r2
 80044b2:	60bb      	str	r3, [r7, #8]
 80044b4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80044b6:	4b32      	ldr	r3, [pc, #200]	; (8004580 <MX_GPIO_Init+0x128>)
 80044b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044ba:	4b31      	ldr	r3, [pc, #196]	; (8004580 <MX_GPIO_Init+0x128>)
 80044bc:	2108      	movs	r1, #8
 80044be:	430a      	orrs	r2, r1
 80044c0:	635a      	str	r2, [r3, #52]	; 0x34
 80044c2:	4b2f      	ldr	r3, [pc, #188]	; (8004580 <MX_GPIO_Init+0x128>)
 80044c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044c6:	2208      	movs	r2, #8
 80044c8:	4013      	ands	r3, r2
 80044ca:	607b      	str	r3, [r7, #4]
 80044cc:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 80044ce:	492d      	ldr	r1, [pc, #180]	; (8004584 <MX_GPIO_Init+0x12c>)
 80044d0:	23a0      	movs	r3, #160	; 0xa0
 80044d2:	05db      	lsls	r3, r3, #23
 80044d4:	2200      	movs	r2, #0
 80044d6:	0018      	movs	r0, r3
 80044d8:	f001 fd3f 	bl	8005f5a <HAL_GPIO_WritePin>
			SA_Pin | SB_Pin | SC_Pin | SD_Pin | SE_Pin | SF_Pin | SG_Pin
					| SDP_Pin | D0_Pin | D1_Pin | D2_Pin | D3_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pins : SA_Pin SB_Pin D0_Pin D1_Pin */
	GPIO_InitStruct.Pin = SA_Pin | SB_Pin | D0_Pin | D1_Pin;
 80044dc:	193b      	adds	r3, r7, r4
 80044de:	4a2a      	ldr	r2, [pc, #168]	; (8004588 <MX_GPIO_Init+0x130>)
 80044e0:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044e2:	193b      	adds	r3, r7, r4
 80044e4:	2201      	movs	r2, #1
 80044e6:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80044e8:	193b      	adds	r3, r7, r4
 80044ea:	2202      	movs	r2, #2
 80044ec:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044ee:	193b      	adds	r3, r7, r4
 80044f0:	2203      	movs	r2, #3
 80044f2:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044f4:	193a      	adds	r2, r7, r4
 80044f6:	23a0      	movs	r3, #160	; 0xa0
 80044f8:	05db      	lsls	r3, r3, #23
 80044fa:	0011      	movs	r1, r2
 80044fc:	0018      	movs	r0, r3
 80044fe:	f001 fbab 	bl	8005c58 <HAL_GPIO_Init>

	/*Configure GPIO pins : SC_Pin SD_Pin SE_Pin SF_Pin
	 SG_Pin SDP_Pin D2_Pin D3_Pin */
	GPIO_InitStruct.Pin = SC_Pin | SD_Pin | SE_Pin | SF_Pin | SG_Pin | SDP_Pin
 8004502:	193b      	adds	r3, r7, r4
 8004504:	4a21      	ldr	r2, [pc, #132]	; (800458c <MX_GPIO_Init+0x134>)
 8004506:	601a      	str	r2, [r3, #0]
			| D2_Pin | D3_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004508:	193b      	adds	r3, r7, r4
 800450a:	2201      	movs	r2, #1
 800450c:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800450e:	193b      	adds	r3, r7, r4
 8004510:	2200      	movs	r2, #0
 8004512:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004514:	193b      	adds	r3, r7, r4
 8004516:	2200      	movs	r2, #0
 8004518:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800451a:	193a      	adds	r2, r7, r4
 800451c:	23a0      	movs	r3, #160	; 0xa0
 800451e:	05db      	lsls	r3, r3, #23
 8004520:	0011      	movs	r1, r2
 8004522:	0018      	movs	r0, r3
 8004524:	f001 fb98 	bl	8005c58 <HAL_GPIO_Init>

	/*Configure GPIO pins : SW0_Pin SW1_Pin SW2_Pin */
	GPIO_InitStruct.Pin = SW0_Pin | SW1_Pin | SW2_Pin;
 8004528:	0021      	movs	r1, r4
 800452a:	187b      	adds	r3, r7, r1
 800452c:	2207      	movs	r2, #7
 800452e:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8004530:	187b      	adds	r3, r7, r1
 8004532:	22c4      	movs	r2, #196	; 0xc4
 8004534:	0392      	lsls	r2, r2, #14
 8004536:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004538:	187b      	adds	r3, r7, r1
 800453a:	2200      	movs	r2, #0
 800453c:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800453e:	187b      	adds	r3, r7, r1
 8004540:	4a13      	ldr	r2, [pc, #76]	; (8004590 <MX_GPIO_Init+0x138>)
 8004542:	0019      	movs	r1, r3
 8004544:	0010      	movs	r0, r2
 8004546:	f001 fb87 	bl	8005c58 <HAL_GPIO_Init>

	/**/
	__HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PA9);
 800454a:	4b12      	ldr	r3, [pc, #72]	; (8004594 <MX_GPIO_Init+0x13c>)
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	4b11      	ldr	r3, [pc, #68]	; (8004594 <MX_GPIO_Init+0x13c>)
 8004550:	2180      	movs	r1, #128	; 0x80
 8004552:	03c9      	lsls	r1, r1, #15
 8004554:	430a      	orrs	r2, r1
 8004556:	601a      	str	r2, [r3, #0]

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_1_IRQn, 3, 0);
 8004558:	2200      	movs	r2, #0
 800455a:	2103      	movs	r1, #3
 800455c:	2005      	movs	r0, #5
 800455e:	f001 fb49 	bl	8005bf4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8004562:	2005      	movs	r0, #5
 8004564:	f001 fb5b 	bl	8005c1e <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI2_3_IRQn, 3, 0);
 8004568:	2200      	movs	r2, #0
 800456a:	2103      	movs	r1, #3
 800456c:	2006      	movs	r0, #6
 800456e:	f001 fb41 	bl	8005bf4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8004572:	2006      	movs	r0, #6
 8004574:	f001 fb53 	bl	8005c1e <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 8004578:	46c0      	nop			; (mov r8, r8)
 800457a:	46bd      	mov	sp, r7
 800457c:	b00b      	add	sp, #44	; 0x2c
 800457e:	bd90      	pop	{r4, r7, pc}
 8004580:	40021000 	.word	0x40021000
 8004584:	00000fff 	.word	0x00000fff
 8004588:	00000303 	.word	0x00000303
 800458c:	00000cfc 	.word	0x00000cfc
 8004590:	50000c00 	.word	0x50000c00
 8004594:	40010000 	.word	0x40010000

08004598 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8004598:	b580      	push	{r7, lr}
 800459a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800459c:	b672      	cpsid	i
}
 800459e:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80045a0:	e7fe      	b.n	80045a0 <Error_Handler+0x8>
	...

080045a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b082      	sub	sp, #8
 80045a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045aa:	4b0f      	ldr	r3, [pc, #60]	; (80045e8 <HAL_MspInit+0x44>)
 80045ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045ae:	4b0e      	ldr	r3, [pc, #56]	; (80045e8 <HAL_MspInit+0x44>)
 80045b0:	2101      	movs	r1, #1
 80045b2:	430a      	orrs	r2, r1
 80045b4:	641a      	str	r2, [r3, #64]	; 0x40
 80045b6:	4b0c      	ldr	r3, [pc, #48]	; (80045e8 <HAL_MspInit+0x44>)
 80045b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ba:	2201      	movs	r2, #1
 80045bc:	4013      	ands	r3, r2
 80045be:	607b      	str	r3, [r7, #4]
 80045c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80045c2:	4b09      	ldr	r3, [pc, #36]	; (80045e8 <HAL_MspInit+0x44>)
 80045c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045c6:	4b08      	ldr	r3, [pc, #32]	; (80045e8 <HAL_MspInit+0x44>)
 80045c8:	2180      	movs	r1, #128	; 0x80
 80045ca:	0549      	lsls	r1, r1, #21
 80045cc:	430a      	orrs	r2, r1
 80045ce:	63da      	str	r2, [r3, #60]	; 0x3c
 80045d0:	4b05      	ldr	r3, [pc, #20]	; (80045e8 <HAL_MspInit+0x44>)
 80045d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045d4:	2380      	movs	r3, #128	; 0x80
 80045d6:	055b      	lsls	r3, r3, #21
 80045d8:	4013      	ands	r3, r2
 80045da:	603b      	str	r3, [r7, #0]
 80045dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80045de:	46c0      	nop			; (mov r8, r8)
 80045e0:	46bd      	mov	sp, r7
 80045e2:	b002      	add	sp, #8
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	46c0      	nop			; (mov r8, r8)
 80045e8:	40021000 	.word	0x40021000

080045ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80045ec:	b590      	push	{r4, r7, lr}
 80045ee:	b08b      	sub	sp, #44	; 0x2c
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045f4:	2414      	movs	r4, #20
 80045f6:	193b      	adds	r3, r7, r4
 80045f8:	0018      	movs	r0, r3
 80045fa:	2314      	movs	r3, #20
 80045fc:	001a      	movs	r2, r3
 80045fe:	2100      	movs	r1, #0
 8004600:	f004 fac6 	bl	8008b90 <memset>
  if(hadc->Instance==ADC1)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a17      	ldr	r2, [pc, #92]	; (8004668 <HAL_ADC_MspInit+0x7c>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d128      	bne.n	8004660 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800460e:	4b17      	ldr	r3, [pc, #92]	; (800466c <HAL_ADC_MspInit+0x80>)
 8004610:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004612:	4b16      	ldr	r3, [pc, #88]	; (800466c <HAL_ADC_MspInit+0x80>)
 8004614:	2180      	movs	r1, #128	; 0x80
 8004616:	0349      	lsls	r1, r1, #13
 8004618:	430a      	orrs	r2, r1
 800461a:	641a      	str	r2, [r3, #64]	; 0x40
 800461c:	4b13      	ldr	r3, [pc, #76]	; (800466c <HAL_ADC_MspInit+0x80>)
 800461e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004620:	2380      	movs	r3, #128	; 0x80
 8004622:	035b      	lsls	r3, r3, #13
 8004624:	4013      	ands	r3, r2
 8004626:	613b      	str	r3, [r7, #16]
 8004628:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800462a:	4b10      	ldr	r3, [pc, #64]	; (800466c <HAL_ADC_MspInit+0x80>)
 800462c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800462e:	4b0f      	ldr	r3, [pc, #60]	; (800466c <HAL_ADC_MspInit+0x80>)
 8004630:	2102      	movs	r1, #2
 8004632:	430a      	orrs	r2, r1
 8004634:	635a      	str	r2, [r3, #52]	; 0x34
 8004636:	4b0d      	ldr	r3, [pc, #52]	; (800466c <HAL_ADC_MspInit+0x80>)
 8004638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800463a:	2202      	movs	r2, #2
 800463c:	4013      	ands	r3, r2
 800463e:	60fb      	str	r3, [r7, #12]
 8004640:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004642:	193b      	adds	r3, r7, r4
 8004644:	2201      	movs	r2, #1
 8004646:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004648:	193b      	adds	r3, r7, r4
 800464a:	2203      	movs	r2, #3
 800464c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800464e:	193b      	adds	r3, r7, r4
 8004650:	2200      	movs	r2, #0
 8004652:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004654:	193b      	adds	r3, r7, r4
 8004656:	4a06      	ldr	r2, [pc, #24]	; (8004670 <HAL_ADC_MspInit+0x84>)
 8004658:	0019      	movs	r1, r3
 800465a:	0010      	movs	r0, r2
 800465c:	f001 fafc 	bl	8005c58 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004660:	46c0      	nop			; (mov r8, r8)
 8004662:	46bd      	mov	sp, r7
 8004664:	b00b      	add	sp, #44	; 0x2c
 8004666:	bd90      	pop	{r4, r7, pc}
 8004668:	40012400 	.word	0x40012400
 800466c:	40021000 	.word	0x40021000
 8004670:	50000400 	.word	0x50000400

08004674 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004674:	b590      	push	{r4, r7, lr}
 8004676:	b08b      	sub	sp, #44	; 0x2c
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800467c:	2410      	movs	r4, #16
 800467e:	193b      	adds	r3, r7, r4
 8004680:	0018      	movs	r0, r3
 8004682:	2318      	movs	r3, #24
 8004684:	001a      	movs	r2, r3
 8004686:	2100      	movs	r1, #0
 8004688:	f004 fa82 	bl	8008b90 <memset>
  if(hrtc->Instance==RTC)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a15      	ldr	r2, [pc, #84]	; (80046e8 <HAL_RTC_MspInit+0x74>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d124      	bne.n	80046e0 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004696:	193b      	adds	r3, r7, r4
 8004698:	2280      	movs	r2, #128	; 0x80
 800469a:	0292      	lsls	r2, r2, #10
 800469c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800469e:	193b      	adds	r3, r7, r4
 80046a0:	2280      	movs	r2, #128	; 0x80
 80046a2:	0052      	lsls	r2, r2, #1
 80046a4:	615a      	str	r2, [r3, #20]

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80046a6:	193b      	adds	r3, r7, r4
 80046a8:	0018      	movs	r0, r3
 80046aa:	f002 f9b1 	bl	8006a10 <HAL_RCCEx_PeriphCLKConfig>
 80046ae:	1e03      	subs	r3, r0, #0
 80046b0:	d001      	beq.n	80046b6 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80046b2:	f7ff ff71 	bl	8004598 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80046b6:	4b0d      	ldr	r3, [pc, #52]	; (80046ec <HAL_RTC_MspInit+0x78>)
 80046b8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80046ba:	4b0c      	ldr	r3, [pc, #48]	; (80046ec <HAL_RTC_MspInit+0x78>)
 80046bc:	2180      	movs	r1, #128	; 0x80
 80046be:	0209      	lsls	r1, r1, #8
 80046c0:	430a      	orrs	r2, r1
 80046c2:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80046c4:	4b09      	ldr	r3, [pc, #36]	; (80046ec <HAL_RTC_MspInit+0x78>)
 80046c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046c8:	4b08      	ldr	r3, [pc, #32]	; (80046ec <HAL_RTC_MspInit+0x78>)
 80046ca:	2180      	movs	r1, #128	; 0x80
 80046cc:	00c9      	lsls	r1, r1, #3
 80046ce:	430a      	orrs	r2, r1
 80046d0:	63da      	str	r2, [r3, #60]	; 0x3c
 80046d2:	4b06      	ldr	r3, [pc, #24]	; (80046ec <HAL_RTC_MspInit+0x78>)
 80046d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046d6:	2380      	movs	r3, #128	; 0x80
 80046d8:	00db      	lsls	r3, r3, #3
 80046da:	4013      	ands	r3, r2
 80046dc:	60fb      	str	r3, [r7, #12]
 80046de:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80046e0:	46c0      	nop			; (mov r8, r8)
 80046e2:	46bd      	mov	sp, r7
 80046e4:	b00b      	add	sp, #44	; 0x2c
 80046e6:	bd90      	pop	{r4, r7, pc}
 80046e8:	40002800 	.word	0x40002800
 80046ec:	40021000 	.word	0x40021000

080046f0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a09      	ldr	r2, [pc, #36]	; (8004724 <HAL_TIM_PWM_MspInit+0x34>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d10b      	bne.n	800471a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004702:	4b09      	ldr	r3, [pc, #36]	; (8004728 <HAL_TIM_PWM_MspInit+0x38>)
 8004704:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004706:	4b08      	ldr	r3, [pc, #32]	; (8004728 <HAL_TIM_PWM_MspInit+0x38>)
 8004708:	2102      	movs	r1, #2
 800470a:	430a      	orrs	r2, r1
 800470c:	63da      	str	r2, [r3, #60]	; 0x3c
 800470e:	4b06      	ldr	r3, [pc, #24]	; (8004728 <HAL_TIM_PWM_MspInit+0x38>)
 8004710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004712:	2202      	movs	r2, #2
 8004714:	4013      	ands	r3, r2
 8004716:	60fb      	str	r3, [r7, #12]
 8004718:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800471a:	46c0      	nop			; (mov r8, r8)
 800471c:	46bd      	mov	sp, r7
 800471e:	b004      	add	sp, #16
 8004720:	bd80      	pop	{r7, pc}
 8004722:	46c0      	nop			; (mov r8, r8)
 8004724:	40000400 	.word	0x40000400
 8004728:	40021000 	.word	0x40021000

0800472c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a0e      	ldr	r2, [pc, #56]	; (8004774 <HAL_TIM_Base_MspInit+0x48>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d115      	bne.n	800476a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 800473e:	4b0e      	ldr	r3, [pc, #56]	; (8004778 <HAL_TIM_Base_MspInit+0x4c>)
 8004740:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004742:	4b0d      	ldr	r3, [pc, #52]	; (8004778 <HAL_TIM_Base_MspInit+0x4c>)
 8004744:	2180      	movs	r1, #128	; 0x80
 8004746:	0209      	lsls	r1, r1, #8
 8004748:	430a      	orrs	r2, r1
 800474a:	641a      	str	r2, [r3, #64]	; 0x40
 800474c:	4b0a      	ldr	r3, [pc, #40]	; (8004778 <HAL_TIM_Base_MspInit+0x4c>)
 800474e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004750:	2380      	movs	r3, #128	; 0x80
 8004752:	021b      	lsls	r3, r3, #8
 8004754:	4013      	ands	r3, r2
 8004756:	60fb      	str	r3, [r7, #12]
 8004758:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 2, 0);
 800475a:	2200      	movs	r2, #0
 800475c:	2102      	movs	r1, #2
 800475e:	2013      	movs	r0, #19
 8004760:	f001 fa48 	bl	8005bf4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8004764:	2013      	movs	r0, #19
 8004766:	f001 fa5a 	bl	8005c1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 800476a:	46c0      	nop			; (mov r8, r8)
 800476c:	46bd      	mov	sp, r7
 800476e:	b004      	add	sp, #16
 8004770:	bd80      	pop	{r7, pc}
 8004772:	46c0      	nop			; (mov r8, r8)
 8004774:	40002000 	.word	0x40002000
 8004778:	40021000 	.word	0x40021000

0800477c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800477c:	b590      	push	{r4, r7, lr}
 800477e:	b089      	sub	sp, #36	; 0x24
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004784:	240c      	movs	r4, #12
 8004786:	193b      	adds	r3, r7, r4
 8004788:	0018      	movs	r0, r3
 800478a:	2314      	movs	r3, #20
 800478c:	001a      	movs	r2, r3
 800478e:	2100      	movs	r1, #0
 8004790:	f004 f9fe 	bl	8008b90 <memset>
  if(htim->Instance==TIM3)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a14      	ldr	r2, [pc, #80]	; (80047ec <HAL_TIM_MspPostInit+0x70>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d121      	bne.n	80047e2 <HAL_TIM_MspPostInit+0x66>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800479e:	4b14      	ldr	r3, [pc, #80]	; (80047f0 <HAL_TIM_MspPostInit+0x74>)
 80047a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047a2:	4b13      	ldr	r3, [pc, #76]	; (80047f0 <HAL_TIM_MspPostInit+0x74>)
 80047a4:	2104      	movs	r1, #4
 80047a6:	430a      	orrs	r2, r1
 80047a8:	635a      	str	r2, [r3, #52]	; 0x34
 80047aa:	4b11      	ldr	r3, [pc, #68]	; (80047f0 <HAL_TIM_MspPostInit+0x74>)
 80047ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ae:	2204      	movs	r2, #4
 80047b0:	4013      	ands	r3, r2
 80047b2:	60bb      	str	r3, [r7, #8]
 80047b4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80047b6:	0021      	movs	r1, r4
 80047b8:	187b      	adds	r3, r7, r1
 80047ba:	2240      	movs	r2, #64	; 0x40
 80047bc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047be:	187b      	adds	r3, r7, r1
 80047c0:	2202      	movs	r2, #2
 80047c2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047c4:	187b      	adds	r3, r7, r1
 80047c6:	2200      	movs	r2, #0
 80047c8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047ca:	187b      	adds	r3, r7, r1
 80047cc:	2200      	movs	r2, #0
 80047ce:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80047d0:	187b      	adds	r3, r7, r1
 80047d2:	2201      	movs	r2, #1
 80047d4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80047d6:	187b      	adds	r3, r7, r1
 80047d8:	4a06      	ldr	r2, [pc, #24]	; (80047f4 <HAL_TIM_MspPostInit+0x78>)
 80047da:	0019      	movs	r1, r3
 80047dc:	0010      	movs	r0, r2
 80047de:	f001 fa3b 	bl	8005c58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80047e2:	46c0      	nop			; (mov r8, r8)
 80047e4:	46bd      	mov	sp, r7
 80047e6:	b009      	add	sp, #36	; 0x24
 80047e8:	bd90      	pop	{r4, r7, pc}
 80047ea:	46c0      	nop			; (mov r8, r8)
 80047ec:	40000400 	.word	0x40000400
 80047f0:	40021000 	.word	0x40021000
 80047f4:	50000800 	.word	0x50000800

080047f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80047f8:	b590      	push	{r4, r7, lr}
 80047fa:	b091      	sub	sp, #68	; 0x44
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004800:	232c      	movs	r3, #44	; 0x2c
 8004802:	18fb      	adds	r3, r7, r3
 8004804:	0018      	movs	r0, r3
 8004806:	2314      	movs	r3, #20
 8004808:	001a      	movs	r2, r3
 800480a:	2100      	movs	r1, #0
 800480c:	f004 f9c0 	bl	8008b90 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004810:	2414      	movs	r4, #20
 8004812:	193b      	adds	r3, r7, r4
 8004814:	0018      	movs	r0, r3
 8004816:	2318      	movs	r3, #24
 8004818:	001a      	movs	r2, r3
 800481a:	2100      	movs	r1, #0
 800481c:	f004 f9b8 	bl	8008b90 <memset>
  if(huart->Instance==USART1)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a22      	ldr	r2, [pc, #136]	; (80048b0 <HAL_UART_MspInit+0xb8>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d13d      	bne.n	80048a6 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800482a:	193b      	adds	r3, r7, r4
 800482c:	2201      	movs	r2, #1
 800482e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8004830:	193b      	adds	r3, r7, r4
 8004832:	2200      	movs	r2, #0
 8004834:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004836:	193b      	adds	r3, r7, r4
 8004838:	0018      	movs	r0, r3
 800483a:	f002 f8e9 	bl	8006a10 <HAL_RCCEx_PeriphCLKConfig>
 800483e:	1e03      	subs	r3, r0, #0
 8004840:	d001      	beq.n	8004846 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8004842:	f7ff fea9 	bl	8004598 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004846:	4b1b      	ldr	r3, [pc, #108]	; (80048b4 <HAL_UART_MspInit+0xbc>)
 8004848:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800484a:	4b1a      	ldr	r3, [pc, #104]	; (80048b4 <HAL_UART_MspInit+0xbc>)
 800484c:	2180      	movs	r1, #128	; 0x80
 800484e:	01c9      	lsls	r1, r1, #7
 8004850:	430a      	orrs	r2, r1
 8004852:	641a      	str	r2, [r3, #64]	; 0x40
 8004854:	4b17      	ldr	r3, [pc, #92]	; (80048b4 <HAL_UART_MspInit+0xbc>)
 8004856:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004858:	2380      	movs	r3, #128	; 0x80
 800485a:	01db      	lsls	r3, r3, #7
 800485c:	4013      	ands	r3, r2
 800485e:	613b      	str	r3, [r7, #16]
 8004860:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004862:	4b14      	ldr	r3, [pc, #80]	; (80048b4 <HAL_UART_MspInit+0xbc>)
 8004864:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004866:	4b13      	ldr	r3, [pc, #76]	; (80048b4 <HAL_UART_MspInit+0xbc>)
 8004868:	2102      	movs	r1, #2
 800486a:	430a      	orrs	r2, r1
 800486c:	635a      	str	r2, [r3, #52]	; 0x34
 800486e:	4b11      	ldr	r3, [pc, #68]	; (80048b4 <HAL_UART_MspInit+0xbc>)
 8004870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004872:	2202      	movs	r2, #2
 8004874:	4013      	ands	r3, r2
 8004876:	60fb      	str	r3, [r7, #12]
 8004878:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800487a:	212c      	movs	r1, #44	; 0x2c
 800487c:	187b      	adds	r3, r7, r1
 800487e:	22c0      	movs	r2, #192	; 0xc0
 8004880:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004882:	187b      	adds	r3, r7, r1
 8004884:	2202      	movs	r2, #2
 8004886:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004888:	187b      	adds	r3, r7, r1
 800488a:	2200      	movs	r2, #0
 800488c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800488e:	187b      	adds	r3, r7, r1
 8004890:	2200      	movs	r2, #0
 8004892:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8004894:	187b      	adds	r3, r7, r1
 8004896:	2200      	movs	r2, #0
 8004898:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800489a:	187b      	adds	r3, r7, r1
 800489c:	4a06      	ldr	r2, [pc, #24]	; (80048b8 <HAL_UART_MspInit+0xc0>)
 800489e:	0019      	movs	r1, r3
 80048a0:	0010      	movs	r0, r2
 80048a2:	f001 f9d9 	bl	8005c58 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80048a6:	46c0      	nop			; (mov r8, r8)
 80048a8:	46bd      	mov	sp, r7
 80048aa:	b011      	add	sp, #68	; 0x44
 80048ac:	bd90      	pop	{r4, r7, pc}
 80048ae:	46c0      	nop			; (mov r8, r8)
 80048b0:	40013800 	.word	0x40013800
 80048b4:	40021000 	.word	0x40021000
 80048b8:	50000400 	.word	0x50000400

080048bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80048c0:	e7fe      	b.n	80048c0 <NMI_Handler+0x4>

080048c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80048c2:	b580      	push	{r7, lr}
 80048c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80048c6:	e7fe      	b.n	80048c6 <HardFault_Handler+0x4>

080048c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80048cc:	46c0      	nop			; (mov r8, r8)
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}

080048d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80048d2:	b580      	push	{r7, lr}
 80048d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80048d6:	46c0      	nop			; (mov r8, r8)
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}

080048dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	customTick();
 80048e0:	f7fd ff80 	bl	80027e4 <customTick>

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80048e4:	f000 f8be 	bl	8004a64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80048e8:	46c0      	nop			; (mov r8, r8)
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}

080048ee <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80048ee:	b580      	push	{r7, lr}
 80048f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW0_Pin);
 80048f2:	2001      	movs	r0, #1
 80048f4:	f001 fb4e 	bl	8005f94 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SW1_Pin);
 80048f8:	2002      	movs	r0, #2
 80048fa:	f001 fb4b 	bl	8005f94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80048fe:	46c0      	nop			; (mov r8, r8)
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}

08004904 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW2_Pin);
 8004908:	2004      	movs	r0, #4
 800490a:	f001 fb43 	bl	8005f94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 800490e:	46c0      	nop			; (mov r8, r8)
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */
	TIM14_Callback();
 8004918:	f7fe f818 	bl	800294c <TIM14_Callback>
  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 800491c:	4b03      	ldr	r3, [pc, #12]	; (800492c <TIM14_IRQHandler+0x18>)
 800491e:	0018      	movs	r0, r3
 8004920:	f002 fe92 	bl	8007648 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8004924:	46c0      	nop			; (mov r8, r8)
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
 800492a:	46c0      	nop			; (mov r8, r8)
 800492c:	20000170 	.word	0x20000170

08004930 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004934:	46c0      	nop			; (mov r8, r8)
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
	...

0800493c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
			  ldr   r0, =_estack
 800493c:	480d      	ldr	r0, [pc, #52]	; (8004974 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800493e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004940:	f7ff fff6 	bl	8004930 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004944:	480c      	ldr	r0, [pc, #48]	; (8004978 <LoopForever+0x6>)
  ldr r1, =_edata
 8004946:	490d      	ldr	r1, [pc, #52]	; (800497c <LoopForever+0xa>)
  ldr r2, =_sidata
 8004948:	4a0d      	ldr	r2, [pc, #52]	; (8004980 <LoopForever+0xe>)
  movs r3, #0
 800494a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800494c:	e002      	b.n	8004954 <LoopCopyDataInit>

0800494e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800494e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004950:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004952:	3304      	adds	r3, #4

08004954 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004954:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004956:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004958:	d3f9      	bcc.n	800494e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800495a:	4a0a      	ldr	r2, [pc, #40]	; (8004984 <LoopForever+0x12>)
  ldr r4, =_ebss
 800495c:	4c0a      	ldr	r4, [pc, #40]	; (8004988 <LoopForever+0x16>)
  movs r3, #0
 800495e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004960:	e001      	b.n	8004966 <LoopFillZerobss>

08004962 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004962:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004964:	3204      	adds	r2, #4

08004966 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004966:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004968:	d3fb      	bcc.n	8004962 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800496a:	f004 f91f 	bl	8008bac <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800496e:	f7fe f9fb 	bl	8002d68 <main>

08004972 <LoopForever>:

LoopForever:
  b LoopForever
 8004972:	e7fe      	b.n	8004972 <LoopForever>
			  ldr   r0, =_estack
 8004974:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8004978:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800497c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8004980:	08009c30 	.word	0x08009c30
  ldr r2, =_sbss
 8004984:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8004988:	20000400 	.word	0x20000400

0800498c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800498c:	e7fe      	b.n	800498c <ADC1_IRQHandler>
	...

08004990 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b082      	sub	sp, #8
 8004994:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004996:	1dfb      	adds	r3, r7, #7
 8004998:	2200      	movs	r2, #0
 800499a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800499c:	4b0b      	ldr	r3, [pc, #44]	; (80049cc <HAL_Init+0x3c>)
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	4b0a      	ldr	r3, [pc, #40]	; (80049cc <HAL_Init+0x3c>)
 80049a2:	2180      	movs	r1, #128	; 0x80
 80049a4:	0049      	lsls	r1, r1, #1
 80049a6:	430a      	orrs	r2, r1
 80049a8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80049aa:	2000      	movs	r0, #0
 80049ac:	f000 f810 	bl	80049d0 <HAL_InitTick>
 80049b0:	1e03      	subs	r3, r0, #0
 80049b2:	d003      	beq.n	80049bc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80049b4:	1dfb      	adds	r3, r7, #7
 80049b6:	2201      	movs	r2, #1
 80049b8:	701a      	strb	r2, [r3, #0]
 80049ba:	e001      	b.n	80049c0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80049bc:	f7ff fdf2 	bl	80045a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80049c0:	1dfb      	adds	r3, r7, #7
 80049c2:	781b      	ldrb	r3, [r3, #0]
}
 80049c4:	0018      	movs	r0, r3
 80049c6:	46bd      	mov	sp, r7
 80049c8:	b002      	add	sp, #8
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	40022000 	.word	0x40022000

080049d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80049d0:	b590      	push	{r4, r7, lr}
 80049d2:	b085      	sub	sp, #20
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80049d8:	230f      	movs	r3, #15
 80049da:	18fb      	adds	r3, r7, r3
 80049dc:	2200      	movs	r2, #0
 80049de:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80049e0:	4b1d      	ldr	r3, [pc, #116]	; (8004a58 <HAL_InitTick+0x88>)
 80049e2:	781b      	ldrb	r3, [r3, #0]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d02b      	beq.n	8004a40 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80049e8:	4b1c      	ldr	r3, [pc, #112]	; (8004a5c <HAL_InitTick+0x8c>)
 80049ea:	681c      	ldr	r4, [r3, #0]
 80049ec:	4b1a      	ldr	r3, [pc, #104]	; (8004a58 <HAL_InitTick+0x88>)
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	0019      	movs	r1, r3
 80049f2:	23fa      	movs	r3, #250	; 0xfa
 80049f4:	0098      	lsls	r0, r3, #2
 80049f6:	f7fb fb83 	bl	8000100 <__udivsi3>
 80049fa:	0003      	movs	r3, r0
 80049fc:	0019      	movs	r1, r3
 80049fe:	0020      	movs	r0, r4
 8004a00:	f7fb fb7e 	bl	8000100 <__udivsi3>
 8004a04:	0003      	movs	r3, r0
 8004a06:	0018      	movs	r0, r3
 8004a08:	f001 f919 	bl	8005c3e <HAL_SYSTICK_Config>
 8004a0c:	1e03      	subs	r3, r0, #0
 8004a0e:	d112      	bne.n	8004a36 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2b03      	cmp	r3, #3
 8004a14:	d80a      	bhi.n	8004a2c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004a16:	6879      	ldr	r1, [r7, #4]
 8004a18:	2301      	movs	r3, #1
 8004a1a:	425b      	negs	r3, r3
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	0018      	movs	r0, r3
 8004a20:	f001 f8e8 	bl	8005bf4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004a24:	4b0e      	ldr	r3, [pc, #56]	; (8004a60 <HAL_InitTick+0x90>)
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	601a      	str	r2, [r3, #0]
 8004a2a:	e00d      	b.n	8004a48 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8004a2c:	230f      	movs	r3, #15
 8004a2e:	18fb      	adds	r3, r7, r3
 8004a30:	2201      	movs	r2, #1
 8004a32:	701a      	strb	r2, [r3, #0]
 8004a34:	e008      	b.n	8004a48 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004a36:	230f      	movs	r3, #15
 8004a38:	18fb      	adds	r3, r7, r3
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	701a      	strb	r2, [r3, #0]
 8004a3e:	e003      	b.n	8004a48 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004a40:	230f      	movs	r3, #15
 8004a42:	18fb      	adds	r3, r7, r3
 8004a44:	2201      	movs	r2, #1
 8004a46:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8004a48:	230f      	movs	r3, #15
 8004a4a:	18fb      	adds	r3, r7, r3
 8004a4c:	781b      	ldrb	r3, [r3, #0]
}
 8004a4e:	0018      	movs	r0, r3
 8004a50:	46bd      	mov	sp, r7
 8004a52:	b005      	add	sp, #20
 8004a54:	bd90      	pop	{r4, r7, pc}
 8004a56:	46c0      	nop			; (mov r8, r8)
 8004a58:	20000014 	.word	0x20000014
 8004a5c:	2000000c 	.word	0x2000000c
 8004a60:	20000010 	.word	0x20000010

08004a64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004a68:	4b05      	ldr	r3, [pc, #20]	; (8004a80 <HAL_IncTick+0x1c>)
 8004a6a:	781b      	ldrb	r3, [r3, #0]
 8004a6c:	001a      	movs	r2, r3
 8004a6e:	4b05      	ldr	r3, [pc, #20]	; (8004a84 <HAL_IncTick+0x20>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	18d2      	adds	r2, r2, r3
 8004a74:	4b03      	ldr	r3, [pc, #12]	; (8004a84 <HAL_IncTick+0x20>)
 8004a76:	601a      	str	r2, [r3, #0]
}
 8004a78:	46c0      	nop			; (mov r8, r8)
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	46c0      	nop			; (mov r8, r8)
 8004a80:	20000014 	.word	0x20000014
 8004a84:	200002c4 	.word	0x200002c4

08004a88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	af00      	add	r7, sp, #0
  return uwTick;
 8004a8c:	4b02      	ldr	r3, [pc, #8]	; (8004a98 <HAL_GetTick+0x10>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
}
 8004a90:	0018      	movs	r0, r3
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	46c0      	nop			; (mov r8, r8)
 8004a98:	200002c4 	.word	0x200002c4

08004a9c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b082      	sub	sp, #8
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a05      	ldr	r2, [pc, #20]	; (8004ac0 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8004aac:	401a      	ands	r2, r3
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	431a      	orrs	r2, r3
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	601a      	str	r2, [r3, #0]
}
 8004ab6:	46c0      	nop			; (mov r8, r8)
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	b002      	add	sp, #8
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	46c0      	nop			; (mov r8, r8)
 8004ac0:	fe3fffff 	.word	0xfe3fffff

08004ac4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b082      	sub	sp, #8
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	23e0      	movs	r3, #224	; 0xe0
 8004ad2:	045b      	lsls	r3, r3, #17
 8004ad4:	4013      	ands	r3, r2
}
 8004ad6:	0018      	movs	r0, r3
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	b002      	add	sp, #8
 8004adc:	bd80      	pop	{r7, pc}

08004ade <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8004ade:	b580      	push	{r7, lr}
 8004ae0:	b084      	sub	sp, #16
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	60f8      	str	r0, [r7, #12]
 8004ae6:	60b9      	str	r1, [r7, #8]
 8004ae8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	695b      	ldr	r3, [r3, #20]
 8004aee:	68ba      	ldr	r2, [r7, #8]
 8004af0:	2104      	movs	r1, #4
 8004af2:	400a      	ands	r2, r1
 8004af4:	2107      	movs	r1, #7
 8004af6:	4091      	lsls	r1, r2
 8004af8:	000a      	movs	r2, r1
 8004afa:	43d2      	mvns	r2, r2
 8004afc:	401a      	ands	r2, r3
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	2104      	movs	r1, #4
 8004b02:	400b      	ands	r3, r1
 8004b04:	6879      	ldr	r1, [r7, #4]
 8004b06:	4099      	lsls	r1, r3
 8004b08:	000b      	movs	r3, r1
 8004b0a:	431a      	orrs	r2, r3
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8004b10:	46c0      	nop			; (mov r8, r8)
 8004b12:	46bd      	mov	sp, r7
 8004b14:	b004      	add	sp, #16
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b082      	sub	sp, #8
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	695b      	ldr	r3, [r3, #20]
 8004b26:	683a      	ldr	r2, [r7, #0]
 8004b28:	2104      	movs	r1, #4
 8004b2a:	400a      	ands	r2, r1
 8004b2c:	2107      	movs	r1, #7
 8004b2e:	4091      	lsls	r1, r2
 8004b30:	000a      	movs	r2, r1
 8004b32:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	2104      	movs	r1, #4
 8004b38:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8004b3a:	40da      	lsrs	r2, r3
 8004b3c:	0013      	movs	r3, r2
}
 8004b3e:	0018      	movs	r0, r3
 8004b40:	46bd      	mov	sp, r7
 8004b42:	b002      	add	sp, #8
 8004b44:	bd80      	pop	{r7, pc}

08004b46 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004b46:	b580      	push	{r7, lr}
 8004b48:	b082      	sub	sp, #8
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	68da      	ldr	r2, [r3, #12]
 8004b52:	23c0      	movs	r3, #192	; 0xc0
 8004b54:	011b      	lsls	r3, r3, #4
 8004b56:	4013      	ands	r3, r2
 8004b58:	d101      	bne.n	8004b5e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e000      	b.n	8004b60 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004b5e:	2300      	movs	r3, #0
}
 8004b60:	0018      	movs	r0, r3
 8004b62:	46bd      	mov	sp, r7
 8004b64:	b002      	add	sp, #8
 8004b66:	bd80      	pop	{r7, pc}

08004b68 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	60f8      	str	r0, [r7, #12]
 8004b70:	60b9      	str	r1, [r7, #8]
 8004b72:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b78:	68ba      	ldr	r2, [r7, #8]
 8004b7a:	211f      	movs	r1, #31
 8004b7c:	400a      	ands	r2, r1
 8004b7e:	210f      	movs	r1, #15
 8004b80:	4091      	lsls	r1, r2
 8004b82:	000a      	movs	r2, r1
 8004b84:	43d2      	mvns	r2, r2
 8004b86:	401a      	ands	r2, r3
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	0e9b      	lsrs	r3, r3, #26
 8004b8c:	210f      	movs	r1, #15
 8004b8e:	4019      	ands	r1, r3
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	201f      	movs	r0, #31
 8004b94:	4003      	ands	r3, r0
 8004b96:	4099      	lsls	r1, r3
 8004b98:	000b      	movs	r3, r1
 8004b9a:	431a      	orrs	r2, r3
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004ba0:	46c0      	nop			; (mov r8, r8)
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	b004      	add	sp, #16
 8004ba6:	bd80      	pop	{r7, pc}

08004ba8 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b082      	sub	sp, #8
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	035b      	lsls	r3, r3, #13
 8004bba:	0b5b      	lsrs	r3, r3, #13
 8004bbc:	431a      	orrs	r2, r3
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004bc2:	46c0      	nop			; (mov r8, r8)
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	b002      	add	sp, #8
 8004bc8:	bd80      	pop	{r7, pc}

08004bca <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8004bca:	b580      	push	{r7, lr}
 8004bcc:	b082      	sub	sp, #8
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	6078      	str	r0, [r7, #4]
 8004bd2:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bd8:	683a      	ldr	r2, [r7, #0]
 8004bda:	0352      	lsls	r2, r2, #13
 8004bdc:	0b52      	lsrs	r2, r2, #13
 8004bde:	43d2      	mvns	r2, r2
 8004be0:	401a      	ands	r2, r3
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004be6:	46c0      	nop			; (mov r8, r8)
 8004be8:	46bd      	mov	sp, r7
 8004bea:	b002      	add	sp, #8
 8004bec:	bd80      	pop	{r7, pc}
	...

08004bf0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	60f8      	str	r0, [r7, #12]
 8004bf8:	60b9      	str	r1, [r7, #8]
 8004bfa:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	695b      	ldr	r3, [r3, #20]
 8004c00:	68ba      	ldr	r2, [r7, #8]
 8004c02:	0212      	lsls	r2, r2, #8
 8004c04:	43d2      	mvns	r2, r2
 8004c06:	401a      	ands	r2, r3
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	021b      	lsls	r3, r3, #8
 8004c0c:	6879      	ldr	r1, [r7, #4]
 8004c0e:	400b      	ands	r3, r1
 8004c10:	4904      	ldr	r1, [pc, #16]	; (8004c24 <LL_ADC_SetChannelSamplingTime+0x34>)
 8004c12:	400b      	ands	r3, r1
 8004c14:	431a      	orrs	r2, r3
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8004c1a:	46c0      	nop			; (mov r8, r8)
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	b004      	add	sp, #16
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	46c0      	nop			; (mov r8, r8)
 8004c24:	07ffff00 	.word	0x07ffff00

08004c28 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b082      	sub	sp, #8
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	4a05      	ldr	r2, [pc, #20]	; (8004c4c <LL_ADC_EnableInternalRegulator+0x24>)
 8004c36:	4013      	ands	r3, r2
 8004c38:	2280      	movs	r2, #128	; 0x80
 8004c3a:	0552      	lsls	r2, r2, #21
 8004c3c:	431a      	orrs	r2, r3
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004c42:	46c0      	nop			; (mov r8, r8)
 8004c44:	46bd      	mov	sp, r7
 8004c46:	b002      	add	sp, #8
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	46c0      	nop			; (mov r8, r8)
 8004c4c:	6fffffe8 	.word	0x6fffffe8

08004c50 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b082      	sub	sp, #8
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	689a      	ldr	r2, [r3, #8]
 8004c5c:	2380      	movs	r3, #128	; 0x80
 8004c5e:	055b      	lsls	r3, r3, #21
 8004c60:	401a      	ands	r2, r3
 8004c62:	2380      	movs	r3, #128	; 0x80
 8004c64:	055b      	lsls	r3, r3, #21
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d101      	bne.n	8004c6e <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e000      	b.n	8004c70 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8004c6e:	2300      	movs	r3, #0
}
 8004c70:	0018      	movs	r0, r3
 8004c72:	46bd      	mov	sp, r7
 8004c74:	b002      	add	sp, #8
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b082      	sub	sp, #8
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	4a04      	ldr	r2, [pc, #16]	; (8004c98 <LL_ADC_Enable+0x20>)
 8004c86:	4013      	ands	r3, r2
 8004c88:	2201      	movs	r2, #1
 8004c8a:	431a      	orrs	r2, r3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004c90:	46c0      	nop			; (mov r8, r8)
 8004c92:	46bd      	mov	sp, r7
 8004c94:	b002      	add	sp, #8
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	7fffffe8 	.word	0x7fffffe8

08004c9c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b082      	sub	sp, #8
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	4a04      	ldr	r2, [pc, #16]	; (8004cbc <LL_ADC_Disable+0x20>)
 8004caa:	4013      	ands	r3, r2
 8004cac:	2202      	movs	r2, #2
 8004cae:	431a      	orrs	r2, r3
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004cb4:	46c0      	nop			; (mov r8, r8)
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	b002      	add	sp, #8
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	7fffffe8 	.word	0x7fffffe8

08004cc0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b082      	sub	sp, #8
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	2201      	movs	r2, #1
 8004cce:	4013      	ands	r3, r2
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d101      	bne.n	8004cd8 <LL_ADC_IsEnabled+0x18>
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e000      	b.n	8004cda <LL_ADC_IsEnabled+0x1a>
 8004cd8:	2300      	movs	r3, #0
}
 8004cda:	0018      	movs	r0, r3
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	b002      	add	sp, #8
 8004ce0:	bd80      	pop	{r7, pc}

08004ce2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8004ce2:	b580      	push	{r7, lr}
 8004ce4:	b082      	sub	sp, #8
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	2202      	movs	r2, #2
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	2b02      	cmp	r3, #2
 8004cf4:	d101      	bne.n	8004cfa <LL_ADC_IsDisableOngoing+0x18>
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e000      	b.n	8004cfc <LL_ADC_IsDisableOngoing+0x1a>
 8004cfa:	2300      	movs	r3, #0
}
 8004cfc:	0018      	movs	r0, r3
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	b002      	add	sp, #8
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b082      	sub	sp, #8
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	4a04      	ldr	r2, [pc, #16]	; (8004d24 <LL_ADC_REG_StartConversion+0x20>)
 8004d12:	4013      	ands	r3, r2
 8004d14:	2204      	movs	r2, #4
 8004d16:	431a      	orrs	r2, r3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004d1c:	46c0      	nop			; (mov r8, r8)
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	b002      	add	sp, #8
 8004d22:	bd80      	pop	{r7, pc}
 8004d24:	7fffffe8 	.word	0x7fffffe8

08004d28 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b082      	sub	sp, #8
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	2204      	movs	r2, #4
 8004d36:	4013      	ands	r3, r2
 8004d38:	2b04      	cmp	r3, #4
 8004d3a:	d101      	bne.n	8004d40 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e000      	b.n	8004d42 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	0018      	movs	r0, r3
 8004d44:	46bd      	mov	sp, r7
 8004d46:	b002      	add	sp, #8
 8004d48:	bd80      	pop	{r7, pc}
	...

08004d4c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b088      	sub	sp, #32
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004d54:	231f      	movs	r3, #31
 8004d56:	18fb      	adds	r3, r7, r3
 8004d58:	2200      	movs	r2, #0
 8004d5a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8004d60:	2300      	movs	r3, #0
 8004d62:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004d64:	2300      	movs	r3, #0
 8004d66:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d101      	bne.n	8004d72 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e17f      	b.n	8005072 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d10a      	bne.n	8004d90 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	0018      	movs	r0, r3
 8004d7e:	f7ff fc35 	bl	80045ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2200      	movs	r2, #0
 8004d86:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2254      	movs	r2, #84	; 0x54
 8004d8c:	2100      	movs	r1, #0
 8004d8e:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	0018      	movs	r0, r3
 8004d96:	f7ff ff5b 	bl	8004c50 <LL_ADC_IsInternalRegulatorEnabled>
 8004d9a:	1e03      	subs	r3, r0, #0
 8004d9c:	d115      	bne.n	8004dca <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	0018      	movs	r0, r3
 8004da4:	f7ff ff40 	bl	8004c28 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004da8:	4bb4      	ldr	r3, [pc, #720]	; (800507c <HAL_ADC_Init+0x330>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	49b4      	ldr	r1, [pc, #720]	; (8005080 <HAL_ADC_Init+0x334>)
 8004dae:	0018      	movs	r0, r3
 8004db0:	f7fb f9a6 	bl	8000100 <__udivsi3>
 8004db4:	0003      	movs	r3, r0
 8004db6:	3301      	adds	r3, #1
 8004db8:	005b      	lsls	r3, r3, #1
 8004dba:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004dbc:	e002      	b.n	8004dc4 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	3b01      	subs	r3, #1
 8004dc2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d1f9      	bne.n	8004dbe <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	0018      	movs	r0, r3
 8004dd0:	f7ff ff3e 	bl	8004c50 <LL_ADC_IsInternalRegulatorEnabled>
 8004dd4:	1e03      	subs	r3, r0, #0
 8004dd6:	d10f      	bne.n	8004df8 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ddc:	2210      	movs	r2, #16
 8004dde:	431a      	orrs	r2, r3
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004de8:	2201      	movs	r2, #1
 8004dea:	431a      	orrs	r2, r3
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004df0:	231f      	movs	r3, #31
 8004df2:	18fb      	adds	r3, r7, r3
 8004df4:	2201      	movs	r2, #1
 8004df6:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	0018      	movs	r0, r3
 8004dfe:	f7ff ff93 	bl	8004d28 <LL_ADC_REG_IsConversionOngoing>
 8004e02:	0003      	movs	r3, r0
 8004e04:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e0a:	2210      	movs	r2, #16
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	d000      	beq.n	8004e12 <HAL_ADC_Init+0xc6>
 8004e10:	e122      	b.n	8005058 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d000      	beq.n	8004e1a <HAL_ADC_Init+0xce>
 8004e18:	e11e      	b.n	8005058 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e1e:	4a99      	ldr	r2, [pc, #612]	; (8005084 <HAL_ADC_Init+0x338>)
 8004e20:	4013      	ands	r3, r2
 8004e22:	2202      	movs	r2, #2
 8004e24:	431a      	orrs	r2, r3
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	0018      	movs	r0, r3
 8004e30:	f7ff ff46 	bl	8004cc0 <LL_ADC_IsEnabled>
 8004e34:	1e03      	subs	r3, r0, #0
 8004e36:	d000      	beq.n	8004e3a <HAL_ADC_Init+0xee>
 8004e38:	e0ad      	b.n	8004f96 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	7e1b      	ldrb	r3, [r3, #24]
 8004e42:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8004e44:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	7e5b      	ldrb	r3, [r3, #25]
 8004e4a:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8004e4c:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	7e9b      	ldrb	r3, [r3, #26]
 8004e52:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8004e54:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d002      	beq.n	8004e64 <HAL_ADC_Init+0x118>
 8004e5e:	2380      	movs	r3, #128	; 0x80
 8004e60:	015b      	lsls	r3, r3, #5
 8004e62:	e000      	b.n	8004e66 <HAL_ADC_Init+0x11a>
 8004e64:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8004e66:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8004e6c:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	691b      	ldr	r3, [r3, #16]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	da04      	bge.n	8004e80 <HAL_ADC_Init+0x134>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	005b      	lsls	r3, r3, #1
 8004e7c:	085b      	lsrs	r3, r3, #1
 8004e7e:	e001      	b.n	8004e84 <HAL_ADC_Init+0x138>
 8004e80:	2380      	movs	r3, #128	; 0x80
 8004e82:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8004e84:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	212c      	movs	r1, #44	; 0x2c
 8004e8a:	5c5b      	ldrb	r3, [r3, r1]
 8004e8c:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8004e8e:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8004e90:	69ba      	ldr	r2, [r7, #24]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2220      	movs	r2, #32
 8004e9a:	5c9b      	ldrb	r3, [r3, r2]
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d115      	bne.n	8004ecc <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	7e9b      	ldrb	r3, [r3, #26]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d105      	bne.n	8004eb4 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8004ea8:	69bb      	ldr	r3, [r7, #24]
 8004eaa:	2280      	movs	r2, #128	; 0x80
 8004eac:	0252      	lsls	r2, r2, #9
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	61bb      	str	r3, [r7, #24]
 8004eb2:	e00b      	b.n	8004ecc <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eb8:	2220      	movs	r2, #32
 8004eba:	431a      	orrs	r2, r3
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	431a      	orrs	r2, r3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d00a      	beq.n	8004eea <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ed8:	23e0      	movs	r3, #224	; 0xe0
 8004eda:	005b      	lsls	r3, r3, #1
 8004edc:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	69ba      	ldr	r2, [r7, #24]
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	4a65      	ldr	r2, [pc, #404]	; (8005088 <HAL_ADC_Init+0x33c>)
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	0019      	movs	r1, r3
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	69ba      	ldr	r2, [r7, #24]
 8004efc:	430a      	orrs	r2, r1
 8004efe:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	0f9b      	lsrs	r3, r3, #30
 8004f06:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	697a      	ldr	r2, [r7, #20]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	223c      	movs	r2, #60	; 0x3c
 8004f18:	5c9b      	ldrb	r3, [r3, r2]
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d111      	bne.n	8004f42 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	0f9b      	lsrs	r3, r3, #30
 8004f24:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004f2a:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8004f30:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8004f36:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	691b      	ldr	r3, [r3, #16]
 8004f48:	4a50      	ldr	r2, [pc, #320]	; (800508c <HAL_ADC_Init+0x340>)
 8004f4a:	4013      	ands	r3, r2
 8004f4c:	0019      	movs	r1, r3
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	697a      	ldr	r2, [r7, #20]
 8004f54:	430a      	orrs	r2, r1
 8004f56:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	685a      	ldr	r2, [r3, #4]
 8004f5c:	23c0      	movs	r3, #192	; 0xc0
 8004f5e:	061b      	lsls	r3, r3, #24
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d018      	beq.n	8004f96 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8004f68:	2380      	movs	r3, #128	; 0x80
 8004f6a:	05db      	lsls	r3, r3, #23
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d012      	beq.n	8004f96 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8004f74:	2380      	movs	r3, #128	; 0x80
 8004f76:	061b      	lsls	r3, r3, #24
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d00c      	beq.n	8004f96 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8004f7c:	4b44      	ldr	r3, [pc, #272]	; (8005090 <HAL_ADC_Init+0x344>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a44      	ldr	r2, [pc, #272]	; (8005094 <HAL_ADC_Init+0x348>)
 8004f82:	4013      	ands	r3, r2
 8004f84:	0019      	movs	r1, r3
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	685a      	ldr	r2, [r3, #4]
 8004f8a:	23f0      	movs	r3, #240	; 0xf0
 8004f8c:	039b      	lsls	r3, r3, #14
 8004f8e:	401a      	ands	r2, r3
 8004f90:	4b3f      	ldr	r3, [pc, #252]	; (8005090 <HAL_ADC_Init+0x344>)
 8004f92:	430a      	orrs	r2, r1
 8004f94:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6818      	ldr	r0, [r3, #0]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f9e:	001a      	movs	r2, r3
 8004fa0:	2100      	movs	r1, #0
 8004fa2:	f7ff fd9c 	bl	8004ade <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6818      	ldr	r0, [r3, #0]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fae:	493a      	ldr	r1, [pc, #232]	; (8005098 <HAL_ADC_Init+0x34c>)
 8004fb0:	001a      	movs	r2, r3
 8004fb2:	f7ff fd94 	bl	8004ade <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	691b      	ldr	r3, [r3, #16]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d109      	bne.n	8004fd2 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	2110      	movs	r1, #16
 8004fca:	4249      	negs	r1, r1
 8004fcc:	430a      	orrs	r2, r1
 8004fce:	629a      	str	r2, [r3, #40]	; 0x28
 8004fd0:	e018      	b.n	8005004 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	691a      	ldr	r2, [r3, #16]
 8004fd6:	2380      	movs	r3, #128	; 0x80
 8004fd8:	039b      	lsls	r3, r3, #14
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d112      	bne.n	8005004 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	69db      	ldr	r3, [r3, #28]
 8004fe8:	3b01      	subs	r3, #1
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	221c      	movs	r2, #28
 8004fee:	4013      	ands	r3, r2
 8004ff0:	2210      	movs	r2, #16
 8004ff2:	4252      	negs	r2, r2
 8004ff4:	409a      	lsls	r2, r3
 8004ff6:	0011      	movs	r1, r2
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	430a      	orrs	r2, r1
 8005002:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	2100      	movs	r1, #0
 800500a:	0018      	movs	r0, r3
 800500c:	f7ff fd84 	bl	8004b18 <LL_ADC_GetSamplingTimeCommonChannels>
 8005010:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005016:	429a      	cmp	r2, r3
 8005018:	d10b      	bne.n	8005032 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005024:	2203      	movs	r2, #3
 8005026:	4393      	bics	r3, r2
 8005028:	2201      	movs	r2, #1
 800502a:	431a      	orrs	r2, r3
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005030:	e01c      	b.n	800506c <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005036:	2212      	movs	r2, #18
 8005038:	4393      	bics	r3, r2
 800503a:	2210      	movs	r2, #16
 800503c:	431a      	orrs	r2, r3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005046:	2201      	movs	r2, #1
 8005048:	431a      	orrs	r2, r3
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 800504e:	231f      	movs	r3, #31
 8005050:	18fb      	adds	r3, r7, r3
 8005052:	2201      	movs	r2, #1
 8005054:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005056:	e009      	b.n	800506c <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800505c:	2210      	movs	r2, #16
 800505e:	431a      	orrs	r2, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005064:	231f      	movs	r3, #31
 8005066:	18fb      	adds	r3, r7, r3
 8005068:	2201      	movs	r2, #1
 800506a:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800506c:	231f      	movs	r3, #31
 800506e:	18fb      	adds	r3, r7, r3
 8005070:	781b      	ldrb	r3, [r3, #0]
}
 8005072:	0018      	movs	r0, r3
 8005074:	46bd      	mov	sp, r7
 8005076:	b008      	add	sp, #32
 8005078:	bd80      	pop	{r7, pc}
 800507a:	46c0      	nop			; (mov r8, r8)
 800507c:	2000000c 	.word	0x2000000c
 8005080:	00030d40 	.word	0x00030d40
 8005084:	fffffefd 	.word	0xfffffefd
 8005088:	fffe0201 	.word	0xfffe0201
 800508c:	1ffffc02 	.word	0x1ffffc02
 8005090:	40012708 	.word	0x40012708
 8005094:	ffc3ffff 	.word	0xffc3ffff
 8005098:	07ffff04 	.word	0x07ffff04

0800509c <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800509c:	b5b0      	push	{r4, r5, r7, lr}
 800509e:	b084      	sub	sp, #16
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	0018      	movs	r0, r3
 80050aa:	f7ff fe3d 	bl	8004d28 <LL_ADC_REG_IsConversionOngoing>
 80050ae:	1e03      	subs	r3, r0, #0
 80050b0:	d135      	bne.n	800511e <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2254      	movs	r2, #84	; 0x54
 80050b6:	5c9b      	ldrb	r3, [r3, r2]
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d101      	bne.n	80050c0 <HAL_ADC_Start+0x24>
 80050bc:	2302      	movs	r3, #2
 80050be:	e035      	b.n	800512c <HAL_ADC_Start+0x90>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2254      	movs	r2, #84	; 0x54
 80050c4:	2101      	movs	r1, #1
 80050c6:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80050c8:	250f      	movs	r5, #15
 80050ca:	197c      	adds	r4, r7, r5
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	0018      	movs	r0, r3
 80050d0:	f000 faaa 	bl	8005628 <ADC_Enable>
 80050d4:	0003      	movs	r3, r0
 80050d6:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80050d8:	197b      	adds	r3, r7, r5
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d119      	bne.n	8005114 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050e4:	4a13      	ldr	r2, [pc, #76]	; (8005134 <HAL_ADC_Start+0x98>)
 80050e6:	4013      	ands	r3, r2
 80050e8:	2280      	movs	r2, #128	; 0x80
 80050ea:	0052      	lsls	r2, r2, #1
 80050ec:	431a      	orrs	r2, r3
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	221c      	movs	r2, #28
 80050fe:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2254      	movs	r2, #84	; 0x54
 8005104:	2100      	movs	r1, #0
 8005106:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	0018      	movs	r0, r3
 800510e:	f7ff fdf9 	bl	8004d04 <LL_ADC_REG_StartConversion>
 8005112:	e008      	b.n	8005126 <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2254      	movs	r2, #84	; 0x54
 8005118:	2100      	movs	r1, #0
 800511a:	5499      	strb	r1, [r3, r2]
 800511c:	e003      	b.n	8005126 <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800511e:	230f      	movs	r3, #15
 8005120:	18fb      	adds	r3, r7, r3
 8005122:	2202      	movs	r2, #2
 8005124:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8005126:	230f      	movs	r3, #15
 8005128:	18fb      	adds	r3, r7, r3
 800512a:	781b      	ldrb	r3, [r3, #0]
}
 800512c:	0018      	movs	r0, r3
 800512e:	46bd      	mov	sp, r7
 8005130:	b004      	add	sp, #16
 8005132:	bdb0      	pop	{r4, r5, r7, pc}
 8005134:	fffff0fe 	.word	0xfffff0fe

08005138 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b084      	sub	sp, #16
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	695b      	ldr	r3, [r3, #20]
 8005146:	2b08      	cmp	r3, #8
 8005148:	d102      	bne.n	8005150 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 800514a:	2308      	movs	r3, #8
 800514c:	60fb      	str	r3, [r7, #12]
 800514e:	e00f      	b.n	8005170 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	2201      	movs	r2, #1
 8005158:	4013      	ands	r3, r2
 800515a:	d007      	beq.n	800516c <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005160:	2220      	movs	r2, #32
 8005162:	431a      	orrs	r2, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e072      	b.n	8005252 <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 800516c:	2304      	movs	r3, #4
 800516e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8005170:	f7ff fc8a 	bl	8004a88 <HAL_GetTick>
 8005174:	0003      	movs	r3, r0
 8005176:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8005178:	e01f      	b.n	80051ba <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	3301      	adds	r3, #1
 800517e:	d01c      	beq.n	80051ba <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8005180:	f7ff fc82 	bl	8004a88 <HAL_GetTick>
 8005184:	0002      	movs	r2, r0
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	1ad3      	subs	r3, r2, r3
 800518a:	683a      	ldr	r2, [r7, #0]
 800518c:	429a      	cmp	r2, r3
 800518e:	d302      	bcc.n	8005196 <HAL_ADC_PollForConversion+0x5e>
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d111      	bne.n	80051ba <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	68fa      	ldr	r2, [r7, #12]
 800519e:	4013      	ands	r3, r2
 80051a0:	d10b      	bne.n	80051ba <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051a6:	2204      	movs	r2, #4
 80051a8:	431a      	orrs	r2, r3
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2254      	movs	r2, #84	; 0x54
 80051b2:	2100      	movs	r1, #0
 80051b4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80051b6:	2303      	movs	r3, #3
 80051b8:	e04b      	b.n	8005252 <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	68fa      	ldr	r2, [r7, #12]
 80051c2:	4013      	ands	r3, r2
 80051c4:	d0d9      	beq.n	800517a <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051ca:	2280      	movs	r2, #128	; 0x80
 80051cc:	0092      	lsls	r2, r2, #2
 80051ce:	431a      	orrs	r2, r3
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	0018      	movs	r0, r3
 80051da:	f7ff fcb4 	bl	8004b46 <LL_ADC_REG_IsTriggerSourceSWStart>
 80051de:	1e03      	subs	r3, r0, #0
 80051e0:	d02e      	beq.n	8005240 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	7e9b      	ldrb	r3, [r3, #26]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d12a      	bne.n	8005240 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	2208      	movs	r2, #8
 80051f2:	4013      	ands	r3, r2
 80051f4:	2b08      	cmp	r3, #8
 80051f6:	d123      	bne.n	8005240 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	0018      	movs	r0, r3
 80051fe:	f7ff fd93 	bl	8004d28 <LL_ADC_REG_IsConversionOngoing>
 8005202:	1e03      	subs	r3, r0, #0
 8005204:	d110      	bne.n	8005228 <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	685a      	ldr	r2, [r3, #4]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	210c      	movs	r1, #12
 8005212:	438a      	bics	r2, r1
 8005214:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800521a:	4a10      	ldr	r2, [pc, #64]	; (800525c <HAL_ADC_PollForConversion+0x124>)
 800521c:	4013      	ands	r3, r2
 800521e:	2201      	movs	r2, #1
 8005220:	431a      	orrs	r2, r3
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	659a      	str	r2, [r3, #88]	; 0x58
 8005226:	e00b      	b.n	8005240 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800522c:	2220      	movs	r2, #32
 800522e:	431a      	orrs	r2, r3
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005238:	2201      	movs	r2, #1
 800523a:	431a      	orrs	r2, r3
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	7e1b      	ldrb	r3, [r3, #24]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d103      	bne.n	8005250 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	220c      	movs	r2, #12
 800524e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005250:	2300      	movs	r3, #0
}
 8005252:	0018      	movs	r0, r3
 8005254:	46bd      	mov	sp, r7
 8005256:	b004      	add	sp, #16
 8005258:	bd80      	pop	{r7, pc}
 800525a:	46c0      	nop			; (mov r8, r8)
 800525c:	fffffefe 	.word	0xfffffefe

08005260 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b082      	sub	sp, #8
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800526e:	0018      	movs	r0, r3
 8005270:	46bd      	mov	sp, r7
 8005272:	b002      	add	sp, #8
 8005274:	bd80      	pop	{r7, pc}
	...

08005278 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b086      	sub	sp, #24
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005282:	2317      	movs	r3, #23
 8005284:	18fb      	adds	r3, r7, r3
 8005286:	2200      	movs	r2, #0
 8005288:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800528a:	2300      	movs	r3, #0
 800528c:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2254      	movs	r2, #84	; 0x54
 8005292:	5c9b      	ldrb	r3, [r3, r2]
 8005294:	2b01      	cmp	r3, #1
 8005296:	d101      	bne.n	800529c <HAL_ADC_ConfigChannel+0x24>
 8005298:	2302      	movs	r3, #2
 800529a:	e1c0      	b.n	800561e <HAL_ADC_ConfigChannel+0x3a6>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2254      	movs	r2, #84	; 0x54
 80052a0:	2101      	movs	r1, #1
 80052a2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	0018      	movs	r0, r3
 80052aa:	f7ff fd3d 	bl	8004d28 <LL_ADC_REG_IsConversionOngoing>
 80052ae:	1e03      	subs	r3, r0, #0
 80052b0:	d000      	beq.n	80052b4 <HAL_ADC_ConfigChannel+0x3c>
 80052b2:	e1a3      	b.n	80055fc <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	2b02      	cmp	r3, #2
 80052ba:	d100      	bne.n	80052be <HAL_ADC_ConfigChannel+0x46>
 80052bc:	e143      	b.n	8005546 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	691a      	ldr	r2, [r3, #16]
 80052c2:	2380      	movs	r3, #128	; 0x80
 80052c4:	061b      	lsls	r3, r3, #24
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d004      	beq.n	80052d4 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80052ce:	4ac1      	ldr	r2, [pc, #772]	; (80055d4 <HAL_ADC_ConfigChannel+0x35c>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d108      	bne.n	80052e6 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	0019      	movs	r1, r3
 80052de:	0010      	movs	r0, r2
 80052e0:	f7ff fc62 	bl	8004ba8 <LL_ADC_REG_SetSequencerChAdd>
 80052e4:	e0c9      	b.n	800547a <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	211f      	movs	r1, #31
 80052f0:	400b      	ands	r3, r1
 80052f2:	210f      	movs	r1, #15
 80052f4:	4099      	lsls	r1, r3
 80052f6:	000b      	movs	r3, r1
 80052f8:	43db      	mvns	r3, r3
 80052fa:	4013      	ands	r3, r2
 80052fc:	0019      	movs	r1, r3
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	035b      	lsls	r3, r3, #13
 8005304:	0b5b      	lsrs	r3, r3, #13
 8005306:	d105      	bne.n	8005314 <HAL_ADC_ConfigChannel+0x9c>
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	0e9b      	lsrs	r3, r3, #26
 800530e:	221f      	movs	r2, #31
 8005310:	4013      	ands	r3, r2
 8005312:	e098      	b.n	8005446 <HAL_ADC_ConfigChannel+0x1ce>
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	2201      	movs	r2, #1
 800531a:	4013      	ands	r3, r2
 800531c:	d000      	beq.n	8005320 <HAL_ADC_ConfigChannel+0xa8>
 800531e:	e091      	b.n	8005444 <HAL_ADC_ConfigChannel+0x1cc>
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	2202      	movs	r2, #2
 8005326:	4013      	ands	r3, r2
 8005328:	d000      	beq.n	800532c <HAL_ADC_ConfigChannel+0xb4>
 800532a:	e089      	b.n	8005440 <HAL_ADC_ConfigChannel+0x1c8>
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2204      	movs	r2, #4
 8005332:	4013      	ands	r3, r2
 8005334:	d000      	beq.n	8005338 <HAL_ADC_ConfigChannel+0xc0>
 8005336:	e081      	b.n	800543c <HAL_ADC_ConfigChannel+0x1c4>
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	2208      	movs	r2, #8
 800533e:	4013      	ands	r3, r2
 8005340:	d000      	beq.n	8005344 <HAL_ADC_ConfigChannel+0xcc>
 8005342:	e079      	b.n	8005438 <HAL_ADC_ConfigChannel+0x1c0>
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	2210      	movs	r2, #16
 800534a:	4013      	ands	r3, r2
 800534c:	d000      	beq.n	8005350 <HAL_ADC_ConfigChannel+0xd8>
 800534e:	e071      	b.n	8005434 <HAL_ADC_ConfigChannel+0x1bc>
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	2220      	movs	r2, #32
 8005356:	4013      	ands	r3, r2
 8005358:	d000      	beq.n	800535c <HAL_ADC_ConfigChannel+0xe4>
 800535a:	e069      	b.n	8005430 <HAL_ADC_ConfigChannel+0x1b8>
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	2240      	movs	r2, #64	; 0x40
 8005362:	4013      	ands	r3, r2
 8005364:	d000      	beq.n	8005368 <HAL_ADC_ConfigChannel+0xf0>
 8005366:	e061      	b.n	800542c <HAL_ADC_ConfigChannel+0x1b4>
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	2280      	movs	r2, #128	; 0x80
 800536e:	4013      	ands	r3, r2
 8005370:	d000      	beq.n	8005374 <HAL_ADC_ConfigChannel+0xfc>
 8005372:	e059      	b.n	8005428 <HAL_ADC_ConfigChannel+0x1b0>
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	2380      	movs	r3, #128	; 0x80
 800537a:	005b      	lsls	r3, r3, #1
 800537c:	4013      	ands	r3, r2
 800537e:	d151      	bne.n	8005424 <HAL_ADC_ConfigChannel+0x1ac>
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	2380      	movs	r3, #128	; 0x80
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	4013      	ands	r3, r2
 800538a:	d149      	bne.n	8005420 <HAL_ADC_ConfigChannel+0x1a8>
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	2380      	movs	r3, #128	; 0x80
 8005392:	00db      	lsls	r3, r3, #3
 8005394:	4013      	ands	r3, r2
 8005396:	d141      	bne.n	800541c <HAL_ADC_ConfigChannel+0x1a4>
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	2380      	movs	r3, #128	; 0x80
 800539e:	011b      	lsls	r3, r3, #4
 80053a0:	4013      	ands	r3, r2
 80053a2:	d139      	bne.n	8005418 <HAL_ADC_ConfigChannel+0x1a0>
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	2380      	movs	r3, #128	; 0x80
 80053aa:	015b      	lsls	r3, r3, #5
 80053ac:	4013      	ands	r3, r2
 80053ae:	d131      	bne.n	8005414 <HAL_ADC_ConfigChannel+0x19c>
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	2380      	movs	r3, #128	; 0x80
 80053b6:	019b      	lsls	r3, r3, #6
 80053b8:	4013      	ands	r3, r2
 80053ba:	d129      	bne.n	8005410 <HAL_ADC_ConfigChannel+0x198>
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	2380      	movs	r3, #128	; 0x80
 80053c2:	01db      	lsls	r3, r3, #7
 80053c4:	4013      	ands	r3, r2
 80053c6:	d121      	bne.n	800540c <HAL_ADC_ConfigChannel+0x194>
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	2380      	movs	r3, #128	; 0x80
 80053ce:	021b      	lsls	r3, r3, #8
 80053d0:	4013      	ands	r3, r2
 80053d2:	d119      	bne.n	8005408 <HAL_ADC_ConfigChannel+0x190>
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	2380      	movs	r3, #128	; 0x80
 80053da:	025b      	lsls	r3, r3, #9
 80053dc:	4013      	ands	r3, r2
 80053de:	d111      	bne.n	8005404 <HAL_ADC_ConfigChannel+0x18c>
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	2380      	movs	r3, #128	; 0x80
 80053e6:	029b      	lsls	r3, r3, #10
 80053e8:	4013      	ands	r3, r2
 80053ea:	d109      	bne.n	8005400 <HAL_ADC_ConfigChannel+0x188>
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	2380      	movs	r3, #128	; 0x80
 80053f2:	02db      	lsls	r3, r3, #11
 80053f4:	4013      	ands	r3, r2
 80053f6:	d001      	beq.n	80053fc <HAL_ADC_ConfigChannel+0x184>
 80053f8:	2312      	movs	r3, #18
 80053fa:	e024      	b.n	8005446 <HAL_ADC_ConfigChannel+0x1ce>
 80053fc:	2300      	movs	r3, #0
 80053fe:	e022      	b.n	8005446 <HAL_ADC_ConfigChannel+0x1ce>
 8005400:	2311      	movs	r3, #17
 8005402:	e020      	b.n	8005446 <HAL_ADC_ConfigChannel+0x1ce>
 8005404:	2310      	movs	r3, #16
 8005406:	e01e      	b.n	8005446 <HAL_ADC_ConfigChannel+0x1ce>
 8005408:	230f      	movs	r3, #15
 800540a:	e01c      	b.n	8005446 <HAL_ADC_ConfigChannel+0x1ce>
 800540c:	230e      	movs	r3, #14
 800540e:	e01a      	b.n	8005446 <HAL_ADC_ConfigChannel+0x1ce>
 8005410:	230d      	movs	r3, #13
 8005412:	e018      	b.n	8005446 <HAL_ADC_ConfigChannel+0x1ce>
 8005414:	230c      	movs	r3, #12
 8005416:	e016      	b.n	8005446 <HAL_ADC_ConfigChannel+0x1ce>
 8005418:	230b      	movs	r3, #11
 800541a:	e014      	b.n	8005446 <HAL_ADC_ConfigChannel+0x1ce>
 800541c:	230a      	movs	r3, #10
 800541e:	e012      	b.n	8005446 <HAL_ADC_ConfigChannel+0x1ce>
 8005420:	2309      	movs	r3, #9
 8005422:	e010      	b.n	8005446 <HAL_ADC_ConfigChannel+0x1ce>
 8005424:	2308      	movs	r3, #8
 8005426:	e00e      	b.n	8005446 <HAL_ADC_ConfigChannel+0x1ce>
 8005428:	2307      	movs	r3, #7
 800542a:	e00c      	b.n	8005446 <HAL_ADC_ConfigChannel+0x1ce>
 800542c:	2306      	movs	r3, #6
 800542e:	e00a      	b.n	8005446 <HAL_ADC_ConfigChannel+0x1ce>
 8005430:	2305      	movs	r3, #5
 8005432:	e008      	b.n	8005446 <HAL_ADC_ConfigChannel+0x1ce>
 8005434:	2304      	movs	r3, #4
 8005436:	e006      	b.n	8005446 <HAL_ADC_ConfigChannel+0x1ce>
 8005438:	2303      	movs	r3, #3
 800543a:	e004      	b.n	8005446 <HAL_ADC_ConfigChannel+0x1ce>
 800543c:	2302      	movs	r3, #2
 800543e:	e002      	b.n	8005446 <HAL_ADC_ConfigChannel+0x1ce>
 8005440:	2301      	movs	r3, #1
 8005442:	e000      	b.n	8005446 <HAL_ADC_ConfigChannel+0x1ce>
 8005444:	2300      	movs	r3, #0
 8005446:	683a      	ldr	r2, [r7, #0]
 8005448:	6852      	ldr	r2, [r2, #4]
 800544a:	201f      	movs	r0, #31
 800544c:	4002      	ands	r2, r0
 800544e:	4093      	lsls	r3, r2
 8005450:	000a      	movs	r2, r1
 8005452:	431a      	orrs	r2, r3
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	089b      	lsrs	r3, r3, #2
 800545e:	1c5a      	adds	r2, r3, #1
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	69db      	ldr	r3, [r3, #28]
 8005464:	429a      	cmp	r2, r3
 8005466:	d808      	bhi.n	800547a <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6818      	ldr	r0, [r3, #0]
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	6859      	ldr	r1, [r3, #4]
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	001a      	movs	r2, r3
 8005476:	f7ff fb77 	bl	8004b68 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6818      	ldr	r0, [r3, #0]
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	6819      	ldr	r1, [r3, #0]
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	001a      	movs	r2, r3
 8005488:	f7ff fbb2 	bl	8004bf0 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	2b00      	cmp	r3, #0
 8005492:	db00      	blt.n	8005496 <HAL_ADC_ConfigChannel+0x21e>
 8005494:	e0bc      	b.n	8005610 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005496:	4b50      	ldr	r3, [pc, #320]	; (80055d8 <HAL_ADC_ConfigChannel+0x360>)
 8005498:	0018      	movs	r0, r3
 800549a:	f7ff fb13 	bl	8004ac4 <LL_ADC_GetCommonPathInternalCh>
 800549e:	0003      	movs	r3, r0
 80054a0:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a4d      	ldr	r2, [pc, #308]	; (80055dc <HAL_ADC_ConfigChannel+0x364>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d122      	bne.n	80054f2 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80054ac:	693a      	ldr	r2, [r7, #16]
 80054ae:	2380      	movs	r3, #128	; 0x80
 80054b0:	041b      	lsls	r3, r3, #16
 80054b2:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80054b4:	d11d      	bne.n	80054f2 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	2280      	movs	r2, #128	; 0x80
 80054ba:	0412      	lsls	r2, r2, #16
 80054bc:	4313      	orrs	r3, r2
 80054be:	4a46      	ldr	r2, [pc, #280]	; (80055d8 <HAL_ADC_ConfigChannel+0x360>)
 80054c0:	0019      	movs	r1, r3
 80054c2:	0010      	movs	r0, r2
 80054c4:	f7ff faea 	bl	8004a9c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80054c8:	4b45      	ldr	r3, [pc, #276]	; (80055e0 <HAL_ADC_ConfigChannel+0x368>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4945      	ldr	r1, [pc, #276]	; (80055e4 <HAL_ADC_ConfigChannel+0x36c>)
 80054ce:	0018      	movs	r0, r3
 80054d0:	f7fa fe16 	bl	8000100 <__udivsi3>
 80054d4:	0003      	movs	r3, r0
 80054d6:	1c5a      	adds	r2, r3, #1
 80054d8:	0013      	movs	r3, r2
 80054da:	005b      	lsls	r3, r3, #1
 80054dc:	189b      	adds	r3, r3, r2
 80054de:	009b      	lsls	r3, r3, #2
 80054e0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80054e2:	e002      	b.n	80054ea <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	3b01      	subs	r3, #1
 80054e8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d1f9      	bne.n	80054e4 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80054f0:	e08e      	b.n	8005610 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a3c      	ldr	r2, [pc, #240]	; (80055e8 <HAL_ADC_ConfigChannel+0x370>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d10e      	bne.n	800551a <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80054fc:	693a      	ldr	r2, [r7, #16]
 80054fe:	2380      	movs	r3, #128	; 0x80
 8005500:	045b      	lsls	r3, r3, #17
 8005502:	4013      	ands	r3, r2
 8005504:	d109      	bne.n	800551a <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	2280      	movs	r2, #128	; 0x80
 800550a:	0452      	lsls	r2, r2, #17
 800550c:	4313      	orrs	r3, r2
 800550e:	4a32      	ldr	r2, [pc, #200]	; (80055d8 <HAL_ADC_ConfigChannel+0x360>)
 8005510:	0019      	movs	r1, r3
 8005512:	0010      	movs	r0, r2
 8005514:	f7ff fac2 	bl	8004a9c <LL_ADC_SetCommonPathInternalCh>
 8005518:	e07a      	b.n	8005610 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a33      	ldr	r2, [pc, #204]	; (80055ec <HAL_ADC_ConfigChannel+0x374>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d000      	beq.n	8005526 <HAL_ADC_ConfigChannel+0x2ae>
 8005524:	e074      	b.n	8005610 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005526:	693a      	ldr	r2, [r7, #16]
 8005528:	2380      	movs	r3, #128	; 0x80
 800552a:	03db      	lsls	r3, r3, #15
 800552c:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800552e:	d000      	beq.n	8005532 <HAL_ADC_ConfigChannel+0x2ba>
 8005530:	e06e      	b.n	8005610 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	2280      	movs	r2, #128	; 0x80
 8005536:	03d2      	lsls	r2, r2, #15
 8005538:	4313      	orrs	r3, r2
 800553a:	4a27      	ldr	r2, [pc, #156]	; (80055d8 <HAL_ADC_ConfigChannel+0x360>)
 800553c:	0019      	movs	r1, r3
 800553e:	0010      	movs	r0, r2
 8005540:	f7ff faac 	bl	8004a9c <LL_ADC_SetCommonPathInternalCh>
 8005544:	e064      	b.n	8005610 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	691a      	ldr	r2, [r3, #16]
 800554a:	2380      	movs	r3, #128	; 0x80
 800554c:	061b      	lsls	r3, r3, #24
 800554e:	429a      	cmp	r2, r3
 8005550:	d004      	beq.n	800555c <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005556:	4a1f      	ldr	r2, [pc, #124]	; (80055d4 <HAL_ADC_ConfigChannel+0x35c>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d107      	bne.n	800556c <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	0019      	movs	r1, r3
 8005566:	0010      	movs	r0, r2
 8005568:	f7ff fb2f 	bl	8004bca <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	2b00      	cmp	r3, #0
 8005572:	da4d      	bge.n	8005610 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005574:	4b18      	ldr	r3, [pc, #96]	; (80055d8 <HAL_ADC_ConfigChannel+0x360>)
 8005576:	0018      	movs	r0, r3
 8005578:	f7ff faa4 	bl	8004ac4 <LL_ADC_GetCommonPathInternalCh>
 800557c:	0003      	movs	r3, r0
 800557e:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a15      	ldr	r2, [pc, #84]	; (80055dc <HAL_ADC_ConfigChannel+0x364>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d108      	bne.n	800559c <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	4a18      	ldr	r2, [pc, #96]	; (80055f0 <HAL_ADC_ConfigChannel+0x378>)
 800558e:	4013      	ands	r3, r2
 8005590:	4a11      	ldr	r2, [pc, #68]	; (80055d8 <HAL_ADC_ConfigChannel+0x360>)
 8005592:	0019      	movs	r1, r3
 8005594:	0010      	movs	r0, r2
 8005596:	f7ff fa81 	bl	8004a9c <LL_ADC_SetCommonPathInternalCh>
 800559a:	e039      	b.n	8005610 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a11      	ldr	r2, [pc, #68]	; (80055e8 <HAL_ADC_ConfigChannel+0x370>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d108      	bne.n	80055b8 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	4a12      	ldr	r2, [pc, #72]	; (80055f4 <HAL_ADC_ConfigChannel+0x37c>)
 80055aa:	4013      	ands	r3, r2
 80055ac:	4a0a      	ldr	r2, [pc, #40]	; (80055d8 <HAL_ADC_ConfigChannel+0x360>)
 80055ae:	0019      	movs	r1, r3
 80055b0:	0010      	movs	r0, r2
 80055b2:	f7ff fa73 	bl	8004a9c <LL_ADC_SetCommonPathInternalCh>
 80055b6:	e02b      	b.n	8005610 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a0b      	ldr	r2, [pc, #44]	; (80055ec <HAL_ADC_ConfigChannel+0x374>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d126      	bne.n	8005610 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	4a0c      	ldr	r2, [pc, #48]	; (80055f8 <HAL_ADC_ConfigChannel+0x380>)
 80055c6:	4013      	ands	r3, r2
 80055c8:	4a03      	ldr	r2, [pc, #12]	; (80055d8 <HAL_ADC_ConfigChannel+0x360>)
 80055ca:	0019      	movs	r1, r3
 80055cc:	0010      	movs	r0, r2
 80055ce:	f7ff fa65 	bl	8004a9c <LL_ADC_SetCommonPathInternalCh>
 80055d2:	e01d      	b.n	8005610 <HAL_ADC_ConfigChannel+0x398>
 80055d4:	80000004 	.word	0x80000004
 80055d8:	40012708 	.word	0x40012708
 80055dc:	b0001000 	.word	0xb0001000
 80055e0:	2000000c 	.word	0x2000000c
 80055e4:	00030d40 	.word	0x00030d40
 80055e8:	b8004000 	.word	0xb8004000
 80055ec:	b4002000 	.word	0xb4002000
 80055f0:	ff7fffff 	.word	0xff7fffff
 80055f4:	feffffff 	.word	0xfeffffff
 80055f8:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005600:	2220      	movs	r2, #32
 8005602:	431a      	orrs	r2, r3
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005608:	2317      	movs	r3, #23
 800560a:	18fb      	adds	r3, r7, r3
 800560c:	2201      	movs	r2, #1
 800560e:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2254      	movs	r2, #84	; 0x54
 8005614:	2100      	movs	r1, #0
 8005616:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8005618:	2317      	movs	r3, #23
 800561a:	18fb      	adds	r3, r7, r3
 800561c:	781b      	ldrb	r3, [r3, #0]
}
 800561e:	0018      	movs	r0, r3
 8005620:	46bd      	mov	sp, r7
 8005622:	b006      	add	sp, #24
 8005624:	bd80      	pop	{r7, pc}
 8005626:	46c0      	nop			; (mov r8, r8)

08005628 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b084      	sub	sp, #16
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005630:	2300      	movs	r3, #0
 8005632:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	0018      	movs	r0, r3
 800563a:	f7ff fb41 	bl	8004cc0 <LL_ADC_IsEnabled>
 800563e:	1e03      	subs	r3, r0, #0
 8005640:	d000      	beq.n	8005644 <ADC_Enable+0x1c>
 8005642:	e069      	b.n	8005718 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	4a36      	ldr	r2, [pc, #216]	; (8005724 <ADC_Enable+0xfc>)
 800564c:	4013      	ands	r3, r2
 800564e:	d00d      	beq.n	800566c <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005654:	2210      	movs	r2, #16
 8005656:	431a      	orrs	r2, r3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005660:	2201      	movs	r2, #1
 8005662:	431a      	orrs	r2, r3
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	e056      	b.n	800571a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	0018      	movs	r0, r3
 8005672:	f7ff fb01 	bl	8004c78 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8005676:	4b2c      	ldr	r3, [pc, #176]	; (8005728 <ADC_Enable+0x100>)
 8005678:	0018      	movs	r0, r3
 800567a:	f7ff fa23 	bl	8004ac4 <LL_ADC_GetCommonPathInternalCh>
 800567e:	0002      	movs	r2, r0
 8005680:	2380      	movs	r3, #128	; 0x80
 8005682:	041b      	lsls	r3, r3, #16
 8005684:	4013      	ands	r3, r2
 8005686:	d00f      	beq.n	80056a8 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005688:	4b28      	ldr	r3, [pc, #160]	; (800572c <ADC_Enable+0x104>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4928      	ldr	r1, [pc, #160]	; (8005730 <ADC_Enable+0x108>)
 800568e:	0018      	movs	r0, r3
 8005690:	f7fa fd36 	bl	8000100 <__udivsi3>
 8005694:	0003      	movs	r3, r0
 8005696:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8005698:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800569a:	e002      	b.n	80056a2 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	3b01      	subs	r3, #1
 80056a0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d1f9      	bne.n	800569c <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	7e5b      	ldrb	r3, [r3, #25]
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d033      	beq.n	8005718 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80056b0:	f7ff f9ea 	bl	8004a88 <HAL_GetTick>
 80056b4:	0003      	movs	r3, r0
 80056b6:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80056b8:	e027      	b.n	800570a <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	0018      	movs	r0, r3
 80056c0:	f7ff fafe 	bl	8004cc0 <LL_ADC_IsEnabled>
 80056c4:	1e03      	subs	r3, r0, #0
 80056c6:	d104      	bne.n	80056d2 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	0018      	movs	r0, r3
 80056ce:	f7ff fad3 	bl	8004c78 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80056d2:	f7ff f9d9 	bl	8004a88 <HAL_GetTick>
 80056d6:	0002      	movs	r2, r0
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	1ad3      	subs	r3, r2, r3
 80056dc:	2b02      	cmp	r3, #2
 80056de:	d914      	bls.n	800570a <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	2201      	movs	r2, #1
 80056e8:	4013      	ands	r3, r2
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d00d      	beq.n	800570a <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056f2:	2210      	movs	r2, #16
 80056f4:	431a      	orrs	r2, r3
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056fe:	2201      	movs	r2, #1
 8005700:	431a      	orrs	r2, r3
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	e007      	b.n	800571a <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	2201      	movs	r2, #1
 8005712:	4013      	ands	r3, r2
 8005714:	2b01      	cmp	r3, #1
 8005716:	d1d0      	bne.n	80056ba <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005718:	2300      	movs	r3, #0
}
 800571a:	0018      	movs	r0, r3
 800571c:	46bd      	mov	sp, r7
 800571e:	b004      	add	sp, #16
 8005720:	bd80      	pop	{r7, pc}
 8005722:	46c0      	nop			; (mov r8, r8)
 8005724:	80000017 	.word	0x80000017
 8005728:	40012708 	.word	0x40012708
 800572c:	2000000c 	.word	0x2000000c
 8005730:	00030d40 	.word	0x00030d40

08005734 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b084      	sub	sp, #16
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	0018      	movs	r0, r3
 8005742:	f7ff face 	bl	8004ce2 <LL_ADC_IsDisableOngoing>
 8005746:	0003      	movs	r3, r0
 8005748:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	0018      	movs	r0, r3
 8005750:	f7ff fab6 	bl	8004cc0 <LL_ADC_IsEnabled>
 8005754:	1e03      	subs	r3, r0, #0
 8005756:	d046      	beq.n	80057e6 <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d143      	bne.n	80057e6 <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	2205      	movs	r2, #5
 8005766:	4013      	ands	r3, r2
 8005768:	2b01      	cmp	r3, #1
 800576a:	d10d      	bne.n	8005788 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	0018      	movs	r0, r3
 8005772:	f7ff fa93 	bl	8004c9c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	2203      	movs	r2, #3
 800577c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800577e:	f7ff f983 	bl	8004a88 <HAL_GetTick>
 8005782:	0003      	movs	r3, r0
 8005784:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005786:	e028      	b.n	80057da <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800578c:	2210      	movs	r2, #16
 800578e:	431a      	orrs	r2, r3
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005798:	2201      	movs	r2, #1
 800579a:	431a      	orrs	r2, r3
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 80057a0:	2301      	movs	r3, #1
 80057a2:	e021      	b.n	80057e8 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80057a4:	f7ff f970 	bl	8004a88 <HAL_GetTick>
 80057a8:	0002      	movs	r2, r0
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	1ad3      	subs	r3, r2, r3
 80057ae:	2b02      	cmp	r3, #2
 80057b0:	d913      	bls.n	80057da <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	2201      	movs	r2, #1
 80057ba:	4013      	ands	r3, r2
 80057bc:	d00d      	beq.n	80057da <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057c2:	2210      	movs	r2, #16
 80057c4:	431a      	orrs	r2, r3
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057ce:	2201      	movs	r2, #1
 80057d0:	431a      	orrs	r2, r3
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	e006      	b.n	80057e8 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	2201      	movs	r2, #1
 80057e2:	4013      	ands	r3, r2
 80057e4:	d1de      	bne.n	80057a4 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80057e6:	2300      	movs	r3, #0
}
 80057e8:	0018      	movs	r0, r3
 80057ea:	46bd      	mov	sp, r7
 80057ec:	b004      	add	sp, #16
 80057ee:	bd80      	pop	{r7, pc}

080057f0 <LL_ADC_SetCalibrationFactor>:
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b082      	sub	sp, #8
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	22b4      	movs	r2, #180	; 0xb4
 80057fe:	589b      	ldr	r3, [r3, r2]
 8005800:	227f      	movs	r2, #127	; 0x7f
 8005802:	4393      	bics	r3, r2
 8005804:	001a      	movs	r2, r3
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	431a      	orrs	r2, r3
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	21b4      	movs	r1, #180	; 0xb4
 800580e:	505a      	str	r2, [r3, r1]
}
 8005810:	46c0      	nop			; (mov r8, r8)
 8005812:	46bd      	mov	sp, r7
 8005814:	b002      	add	sp, #8
 8005816:	bd80      	pop	{r7, pc}

08005818 <LL_ADC_GetCalibrationFactor>:
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b082      	sub	sp, #8
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	22b4      	movs	r2, #180	; 0xb4
 8005824:	589b      	ldr	r3, [r3, r2]
 8005826:	227f      	movs	r2, #127	; 0x7f
 8005828:	4013      	ands	r3, r2
}
 800582a:	0018      	movs	r0, r3
 800582c:	46bd      	mov	sp, r7
 800582e:	b002      	add	sp, #8
 8005830:	bd80      	pop	{r7, pc}
	...

08005834 <LL_ADC_Enable>:
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b082      	sub	sp, #8
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	4a04      	ldr	r2, [pc, #16]	; (8005854 <LL_ADC_Enable+0x20>)
 8005842:	4013      	ands	r3, r2
 8005844:	2201      	movs	r2, #1
 8005846:	431a      	orrs	r2, r3
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	609a      	str	r2, [r3, #8]
}
 800584c:	46c0      	nop			; (mov r8, r8)
 800584e:	46bd      	mov	sp, r7
 8005850:	b002      	add	sp, #8
 8005852:	bd80      	pop	{r7, pc}
 8005854:	7fffffe8 	.word	0x7fffffe8

08005858 <LL_ADC_Disable>:
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b082      	sub	sp, #8
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	4a04      	ldr	r2, [pc, #16]	; (8005878 <LL_ADC_Disable+0x20>)
 8005866:	4013      	ands	r3, r2
 8005868:	2202      	movs	r2, #2
 800586a:	431a      	orrs	r2, r3
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	609a      	str	r2, [r3, #8]
}
 8005870:	46c0      	nop			; (mov r8, r8)
 8005872:	46bd      	mov	sp, r7
 8005874:	b002      	add	sp, #8
 8005876:	bd80      	pop	{r7, pc}
 8005878:	7fffffe8 	.word	0x7fffffe8

0800587c <LL_ADC_IsEnabled>:
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b082      	sub	sp, #8
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	2201      	movs	r2, #1
 800588a:	4013      	ands	r3, r2
 800588c:	2b01      	cmp	r3, #1
 800588e:	d101      	bne.n	8005894 <LL_ADC_IsEnabled+0x18>
 8005890:	2301      	movs	r3, #1
 8005892:	e000      	b.n	8005896 <LL_ADC_IsEnabled+0x1a>
 8005894:	2300      	movs	r3, #0
}
 8005896:	0018      	movs	r0, r3
 8005898:	46bd      	mov	sp, r7
 800589a:	b002      	add	sp, #8
 800589c:	bd80      	pop	{r7, pc}
	...

080058a0 <LL_ADC_StartCalibration>:
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b082      	sub	sp, #8
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	4a05      	ldr	r2, [pc, #20]	; (80058c4 <LL_ADC_StartCalibration+0x24>)
 80058ae:	4013      	ands	r3, r2
 80058b0:	2280      	movs	r2, #128	; 0x80
 80058b2:	0612      	lsls	r2, r2, #24
 80058b4:	431a      	orrs	r2, r3
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	609a      	str	r2, [r3, #8]
}
 80058ba:	46c0      	nop			; (mov r8, r8)
 80058bc:	46bd      	mov	sp, r7
 80058be:	b002      	add	sp, #8
 80058c0:	bd80      	pop	{r7, pc}
 80058c2:	46c0      	nop			; (mov r8, r8)
 80058c4:	7fffffe8 	.word	0x7fffffe8

080058c8 <LL_ADC_IsCalibrationOnGoing>:
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b082      	sub	sp, #8
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	0fdb      	lsrs	r3, r3, #31
 80058d6:	07da      	lsls	r2, r3, #31
 80058d8:	2380      	movs	r3, #128	; 0x80
 80058da:	061b      	lsls	r3, r3, #24
 80058dc:	429a      	cmp	r2, r3
 80058de:	d101      	bne.n	80058e4 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80058e0:	2301      	movs	r3, #1
 80058e2:	e000      	b.n	80058e6 <LL_ADC_IsCalibrationOnGoing+0x1e>
 80058e4:	2300      	movs	r3, #0
}
 80058e6:	0018      	movs	r0, r3
 80058e8:	46bd      	mov	sp, r7
 80058ea:	b002      	add	sp, #8
 80058ec:	bd80      	pop	{r7, pc}
	...

080058f0 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 80058f0:	b590      	push	{r4, r7, lr}
 80058f2:	b089      	sub	sp, #36	; 0x24
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80058f8:	2300      	movs	r3, #0
 80058fa:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 80058fc:	2300      	movs	r3, #0
 80058fe:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2254      	movs	r2, #84	; 0x54
 8005904:	5c9b      	ldrb	r3, [r3, r2]
 8005906:	2b01      	cmp	r3, #1
 8005908:	d101      	bne.n	800590e <HAL_ADCEx_Calibration_Start+0x1e>
 800590a:	2302      	movs	r3, #2
 800590c:	e0ba      	b.n	8005a84 <HAL_ADCEx_Calibration_Start+0x194>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2254      	movs	r2, #84	; 0x54
 8005912:	2101      	movs	r1, #1
 8005914:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005916:	2317      	movs	r3, #23
 8005918:	18fc      	adds	r4, r7, r3
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	0018      	movs	r0, r3
 800591e:	f7ff ff09 	bl	8005734 <ADC_Disable>
 8005922:	0003      	movs	r3, r0
 8005924:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	0018      	movs	r0, r3
 800592c:	f7ff ffa6 	bl	800587c <LL_ADC_IsEnabled>
 8005930:	1e03      	subs	r3, r0, #0
 8005932:	d000      	beq.n	8005936 <HAL_ADCEx_Calibration_Start+0x46>
 8005934:	e099      	b.n	8005a6a <HAL_ADCEx_Calibration_Start+0x17a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800593a:	4a54      	ldr	r2, [pc, #336]	; (8005a8c <HAL_ADCEx_Calibration_Start+0x19c>)
 800593c:	4013      	ands	r3, r2
 800593e:	2202      	movs	r2, #2
 8005940:	431a      	orrs	r2, r3
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	4a50      	ldr	r2, [pc, #320]	; (8005a90 <HAL_ADCEx_Calibration_Start+0x1a0>)
 800594e:	4013      	ands	r3, r2
 8005950:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	68da      	ldr	r2, [r3, #12]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	494d      	ldr	r1, [pc, #308]	; (8005a94 <HAL_ADCEx_Calibration_Start+0x1a4>)
 800595e:	400a      	ands	r2, r1
 8005960:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8005962:	2300      	movs	r3, #0
 8005964:	61fb      	str	r3, [r7, #28]
 8005966:	e02d      	b.n	80059c4 <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	0018      	movs	r0, r3
 800596e:	f7ff ff97 	bl	80058a0 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005972:	e014      	b.n	800599e <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	3301      	adds	r3, #1
 8005978:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	4a46      	ldr	r2, [pc, #280]	; (8005a98 <HAL_ADCEx_Calibration_Start+0x1a8>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d90d      	bls.n	800599e <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005986:	2212      	movs	r2, #18
 8005988:	4393      	bics	r3, r2
 800598a:	2210      	movs	r2, #16
 800598c:	431a      	orrs	r2, r3
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2254      	movs	r2, #84	; 0x54
 8005996:	2100      	movs	r1, #0
 8005998:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	e072      	b.n	8005a84 <HAL_ADCEx_Calibration_Start+0x194>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	0018      	movs	r0, r3
 80059a4:	f7ff ff90 	bl	80058c8 <LL_ADC_IsCalibrationOnGoing>
 80059a8:	1e03      	subs	r3, r0, #0
 80059aa:	d1e3      	bne.n	8005974 <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	0018      	movs	r0, r3
 80059b2:	f7ff ff31 	bl	8005818 <LL_ADC_GetCalibrationFactor>
 80059b6:	0002      	movs	r2, r0
 80059b8:	69bb      	ldr	r3, [r7, #24]
 80059ba:	189b      	adds	r3, r3, r2
 80059bc:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80059be:	69fb      	ldr	r3, [r7, #28]
 80059c0:	3301      	adds	r3, #1
 80059c2:	61fb      	str	r3, [r7, #28]
 80059c4:	69fb      	ldr	r3, [r7, #28]
 80059c6:	2b07      	cmp	r3, #7
 80059c8:	d9ce      	bls.n	8005968 <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 80059ca:	69f9      	ldr	r1, [r7, #28]
 80059cc:	69b8      	ldr	r0, [r7, #24]
 80059ce:	f7fa fb97 	bl	8000100 <__udivsi3>
 80059d2:	0003      	movs	r3, r0
 80059d4:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	0018      	movs	r0, r3
 80059dc:	f7ff ff2a 	bl	8005834 <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	69ba      	ldr	r2, [r7, #24]
 80059e6:	0011      	movs	r1, r2
 80059e8:	0018      	movs	r0, r3
 80059ea:	f7ff ff01 	bl	80057f0 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	0018      	movs	r0, r3
 80059f4:	f7ff ff30 	bl	8005858 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80059f8:	f7ff f846 	bl	8004a88 <HAL_GetTick>
 80059fc:	0003      	movs	r3, r0
 80059fe:	60fb      	str	r3, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005a00:	e01b      	b.n	8005a3a <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005a02:	f7ff f841 	bl	8004a88 <HAL_GetTick>
 8005a06:	0002      	movs	r2, r0
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	1ad3      	subs	r3, r2, r3
 8005a0c:	2b02      	cmp	r3, #2
 8005a0e:	d914      	bls.n	8005a3a <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	0018      	movs	r0, r3
 8005a16:	f7ff ff31 	bl	800587c <LL_ADC_IsEnabled>
 8005a1a:	1e03      	subs	r3, r0, #0
 8005a1c:	d00d      	beq.n	8005a3a <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a22:	2210      	movs	r2, #16
 8005a24:	431a      	orrs	r2, r3
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a2e:	2201      	movs	r2, #1
 8005a30:	431a      	orrs	r2, r3
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	e024      	b.n	8005a84 <HAL_ADCEx_Calibration_Start+0x194>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	0018      	movs	r0, r3
 8005a40:	f7ff ff1c 	bl	800587c <LL_ADC_IsEnabled>
 8005a44:	1e03      	subs	r3, r0, #0
 8005a46:	d1dc      	bne.n	8005a02 <HAL_ADCEx_Calibration_Start+0x112>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	68d9      	ldr	r1, [r3, #12]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	693a      	ldr	r2, [r7, #16]
 8005a54:	430a      	orrs	r2, r1
 8005a56:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a5c:	2203      	movs	r2, #3
 8005a5e:	4393      	bics	r3, r2
 8005a60:	2201      	movs	r2, #1
 8005a62:	431a      	orrs	r2, r3
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	659a      	str	r2, [r3, #88]	; 0x58
 8005a68:	e005      	b.n	8005a76 <HAL_ADCEx_Calibration_Start+0x186>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a6e:	2210      	movs	r2, #16
 8005a70:	431a      	orrs	r2, r3
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2254      	movs	r2, #84	; 0x54
 8005a7a:	2100      	movs	r1, #0
 8005a7c:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8005a7e:	2317      	movs	r3, #23
 8005a80:	18fb      	adds	r3, r7, r3
 8005a82:	781b      	ldrb	r3, [r3, #0]
}
 8005a84:	0018      	movs	r0, r3
 8005a86:	46bd      	mov	sp, r7
 8005a88:	b009      	add	sp, #36	; 0x24
 8005a8a:	bd90      	pop	{r4, r7, pc}
 8005a8c:	fffffefd 	.word	0xfffffefd
 8005a90:	00008003 	.word	0x00008003
 8005a94:	ffff7ffc 	.word	0xffff7ffc
 8005a98:	0002f1ff 	.word	0x0002f1ff

08005a9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b082      	sub	sp, #8
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	0002      	movs	r2, r0
 8005aa4:	1dfb      	adds	r3, r7, #7
 8005aa6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005aa8:	1dfb      	adds	r3, r7, #7
 8005aaa:	781b      	ldrb	r3, [r3, #0]
 8005aac:	2b7f      	cmp	r3, #127	; 0x7f
 8005aae:	d809      	bhi.n	8005ac4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005ab0:	1dfb      	adds	r3, r7, #7
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	001a      	movs	r2, r3
 8005ab6:	231f      	movs	r3, #31
 8005ab8:	401a      	ands	r2, r3
 8005aba:	4b04      	ldr	r3, [pc, #16]	; (8005acc <__NVIC_EnableIRQ+0x30>)
 8005abc:	2101      	movs	r1, #1
 8005abe:	4091      	lsls	r1, r2
 8005ac0:	000a      	movs	r2, r1
 8005ac2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8005ac4:	46c0      	nop			; (mov r8, r8)
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	b002      	add	sp, #8
 8005aca:	bd80      	pop	{r7, pc}
 8005acc:	e000e100 	.word	0xe000e100

08005ad0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005ad0:	b590      	push	{r4, r7, lr}
 8005ad2:	b083      	sub	sp, #12
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	0002      	movs	r2, r0
 8005ad8:	6039      	str	r1, [r7, #0]
 8005ada:	1dfb      	adds	r3, r7, #7
 8005adc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005ade:	1dfb      	adds	r3, r7, #7
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	2b7f      	cmp	r3, #127	; 0x7f
 8005ae4:	d828      	bhi.n	8005b38 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005ae6:	4a2f      	ldr	r2, [pc, #188]	; (8005ba4 <__NVIC_SetPriority+0xd4>)
 8005ae8:	1dfb      	adds	r3, r7, #7
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	b25b      	sxtb	r3, r3
 8005aee:	089b      	lsrs	r3, r3, #2
 8005af0:	33c0      	adds	r3, #192	; 0xc0
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	589b      	ldr	r3, [r3, r2]
 8005af6:	1dfa      	adds	r2, r7, #7
 8005af8:	7812      	ldrb	r2, [r2, #0]
 8005afa:	0011      	movs	r1, r2
 8005afc:	2203      	movs	r2, #3
 8005afe:	400a      	ands	r2, r1
 8005b00:	00d2      	lsls	r2, r2, #3
 8005b02:	21ff      	movs	r1, #255	; 0xff
 8005b04:	4091      	lsls	r1, r2
 8005b06:	000a      	movs	r2, r1
 8005b08:	43d2      	mvns	r2, r2
 8005b0a:	401a      	ands	r2, r3
 8005b0c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	019b      	lsls	r3, r3, #6
 8005b12:	22ff      	movs	r2, #255	; 0xff
 8005b14:	401a      	ands	r2, r3
 8005b16:	1dfb      	adds	r3, r7, #7
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	0018      	movs	r0, r3
 8005b1c:	2303      	movs	r3, #3
 8005b1e:	4003      	ands	r3, r0
 8005b20:	00db      	lsls	r3, r3, #3
 8005b22:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005b24:	481f      	ldr	r0, [pc, #124]	; (8005ba4 <__NVIC_SetPriority+0xd4>)
 8005b26:	1dfb      	adds	r3, r7, #7
 8005b28:	781b      	ldrb	r3, [r3, #0]
 8005b2a:	b25b      	sxtb	r3, r3
 8005b2c:	089b      	lsrs	r3, r3, #2
 8005b2e:	430a      	orrs	r2, r1
 8005b30:	33c0      	adds	r3, #192	; 0xc0
 8005b32:	009b      	lsls	r3, r3, #2
 8005b34:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8005b36:	e031      	b.n	8005b9c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005b38:	4a1b      	ldr	r2, [pc, #108]	; (8005ba8 <__NVIC_SetPriority+0xd8>)
 8005b3a:	1dfb      	adds	r3, r7, #7
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	0019      	movs	r1, r3
 8005b40:	230f      	movs	r3, #15
 8005b42:	400b      	ands	r3, r1
 8005b44:	3b08      	subs	r3, #8
 8005b46:	089b      	lsrs	r3, r3, #2
 8005b48:	3306      	adds	r3, #6
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	18d3      	adds	r3, r2, r3
 8005b4e:	3304      	adds	r3, #4
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	1dfa      	adds	r2, r7, #7
 8005b54:	7812      	ldrb	r2, [r2, #0]
 8005b56:	0011      	movs	r1, r2
 8005b58:	2203      	movs	r2, #3
 8005b5a:	400a      	ands	r2, r1
 8005b5c:	00d2      	lsls	r2, r2, #3
 8005b5e:	21ff      	movs	r1, #255	; 0xff
 8005b60:	4091      	lsls	r1, r2
 8005b62:	000a      	movs	r2, r1
 8005b64:	43d2      	mvns	r2, r2
 8005b66:	401a      	ands	r2, r3
 8005b68:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	019b      	lsls	r3, r3, #6
 8005b6e:	22ff      	movs	r2, #255	; 0xff
 8005b70:	401a      	ands	r2, r3
 8005b72:	1dfb      	adds	r3, r7, #7
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	0018      	movs	r0, r3
 8005b78:	2303      	movs	r3, #3
 8005b7a:	4003      	ands	r3, r0
 8005b7c:	00db      	lsls	r3, r3, #3
 8005b7e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005b80:	4809      	ldr	r0, [pc, #36]	; (8005ba8 <__NVIC_SetPriority+0xd8>)
 8005b82:	1dfb      	adds	r3, r7, #7
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	001c      	movs	r4, r3
 8005b88:	230f      	movs	r3, #15
 8005b8a:	4023      	ands	r3, r4
 8005b8c:	3b08      	subs	r3, #8
 8005b8e:	089b      	lsrs	r3, r3, #2
 8005b90:	430a      	orrs	r2, r1
 8005b92:	3306      	adds	r3, #6
 8005b94:	009b      	lsls	r3, r3, #2
 8005b96:	18c3      	adds	r3, r0, r3
 8005b98:	3304      	adds	r3, #4
 8005b9a:	601a      	str	r2, [r3, #0]
}
 8005b9c:	46c0      	nop			; (mov r8, r8)
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	b003      	add	sp, #12
 8005ba2:	bd90      	pop	{r4, r7, pc}
 8005ba4:	e000e100 	.word	0xe000e100
 8005ba8:	e000ed00 	.word	0xe000ed00

08005bac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b082      	sub	sp, #8
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	1e5a      	subs	r2, r3, #1
 8005bb8:	2380      	movs	r3, #128	; 0x80
 8005bba:	045b      	lsls	r3, r3, #17
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d301      	bcc.n	8005bc4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	e010      	b.n	8005be6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005bc4:	4b0a      	ldr	r3, [pc, #40]	; (8005bf0 <SysTick_Config+0x44>)
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	3a01      	subs	r2, #1
 8005bca:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005bcc:	2301      	movs	r3, #1
 8005bce:	425b      	negs	r3, r3
 8005bd0:	2103      	movs	r1, #3
 8005bd2:	0018      	movs	r0, r3
 8005bd4:	f7ff ff7c 	bl	8005ad0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005bd8:	4b05      	ldr	r3, [pc, #20]	; (8005bf0 <SysTick_Config+0x44>)
 8005bda:	2200      	movs	r2, #0
 8005bdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005bde:	4b04      	ldr	r3, [pc, #16]	; (8005bf0 <SysTick_Config+0x44>)
 8005be0:	2207      	movs	r2, #7
 8005be2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005be4:	2300      	movs	r3, #0
}
 8005be6:	0018      	movs	r0, r3
 8005be8:	46bd      	mov	sp, r7
 8005bea:	b002      	add	sp, #8
 8005bec:	bd80      	pop	{r7, pc}
 8005bee:	46c0      	nop			; (mov r8, r8)
 8005bf0:	e000e010 	.word	0xe000e010

08005bf4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b084      	sub	sp, #16
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	60b9      	str	r1, [r7, #8]
 8005bfc:	607a      	str	r2, [r7, #4]
 8005bfe:	210f      	movs	r1, #15
 8005c00:	187b      	adds	r3, r7, r1
 8005c02:	1c02      	adds	r2, r0, #0
 8005c04:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8005c06:	68ba      	ldr	r2, [r7, #8]
 8005c08:	187b      	adds	r3, r7, r1
 8005c0a:	781b      	ldrb	r3, [r3, #0]
 8005c0c:	b25b      	sxtb	r3, r3
 8005c0e:	0011      	movs	r1, r2
 8005c10:	0018      	movs	r0, r3
 8005c12:	f7ff ff5d 	bl	8005ad0 <__NVIC_SetPriority>
}
 8005c16:	46c0      	nop			; (mov r8, r8)
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	b004      	add	sp, #16
 8005c1c:	bd80      	pop	{r7, pc}

08005c1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c1e:	b580      	push	{r7, lr}
 8005c20:	b082      	sub	sp, #8
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	0002      	movs	r2, r0
 8005c26:	1dfb      	adds	r3, r7, #7
 8005c28:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005c2a:	1dfb      	adds	r3, r7, #7
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	b25b      	sxtb	r3, r3
 8005c30:	0018      	movs	r0, r3
 8005c32:	f7ff ff33 	bl	8005a9c <__NVIC_EnableIRQ>
}
 8005c36:	46c0      	nop			; (mov r8, r8)
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	b002      	add	sp, #8
 8005c3c:	bd80      	pop	{r7, pc}

08005c3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005c3e:	b580      	push	{r7, lr}
 8005c40:	b082      	sub	sp, #8
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	0018      	movs	r0, r3
 8005c4a:	f7ff ffaf 	bl	8005bac <SysTick_Config>
 8005c4e:	0003      	movs	r3, r0
}
 8005c50:	0018      	movs	r0, r3
 8005c52:	46bd      	mov	sp, r7
 8005c54:	b002      	add	sp, #8
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b086      	sub	sp, #24
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005c62:	2300      	movs	r3, #0
 8005c64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005c66:	e147      	b.n	8005ef8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	2101      	movs	r1, #1
 8005c6e:	697a      	ldr	r2, [r7, #20]
 8005c70:	4091      	lsls	r1, r2
 8005c72:	000a      	movs	r2, r1
 8005c74:	4013      	ands	r3, r2
 8005c76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d100      	bne.n	8005c80 <HAL_GPIO_Init+0x28>
 8005c7e:	e138      	b.n	8005ef2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	2203      	movs	r2, #3
 8005c86:	4013      	ands	r3, r2
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d005      	beq.n	8005c98 <HAL_GPIO_Init+0x40>
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	2203      	movs	r2, #3
 8005c92:	4013      	ands	r3, r2
 8005c94:	2b02      	cmp	r3, #2
 8005c96:	d130      	bne.n	8005cfa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	005b      	lsls	r3, r3, #1
 8005ca2:	2203      	movs	r2, #3
 8005ca4:	409a      	lsls	r2, r3
 8005ca6:	0013      	movs	r3, r2
 8005ca8:	43da      	mvns	r2, r3
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	4013      	ands	r3, r2
 8005cae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	68da      	ldr	r2, [r3, #12]
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	005b      	lsls	r3, r3, #1
 8005cb8:	409a      	lsls	r2, r3
 8005cba:	0013      	movs	r3, r2
 8005cbc:	693a      	ldr	r2, [r7, #16]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	693a      	ldr	r2, [r7, #16]
 8005cc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005cce:	2201      	movs	r2, #1
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	409a      	lsls	r2, r3
 8005cd4:	0013      	movs	r3, r2
 8005cd6:	43da      	mvns	r2, r3
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	4013      	ands	r3, r2
 8005cdc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	091b      	lsrs	r3, r3, #4
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	401a      	ands	r2, r3
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	409a      	lsls	r2, r3
 8005cec:	0013      	movs	r3, r2
 8005cee:	693a      	ldr	r2, [r7, #16]
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	693a      	ldr	r2, [r7, #16]
 8005cf8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	2203      	movs	r2, #3
 8005d00:	4013      	ands	r3, r2
 8005d02:	2b03      	cmp	r3, #3
 8005d04:	d017      	beq.n	8005d36 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	68db      	ldr	r3, [r3, #12]
 8005d0a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	005b      	lsls	r3, r3, #1
 8005d10:	2203      	movs	r2, #3
 8005d12:	409a      	lsls	r2, r3
 8005d14:	0013      	movs	r3, r2
 8005d16:	43da      	mvns	r2, r3
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	4013      	ands	r3, r2
 8005d1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	689a      	ldr	r2, [r3, #8]
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	005b      	lsls	r3, r3, #1
 8005d26:	409a      	lsls	r2, r3
 8005d28:	0013      	movs	r3, r2
 8005d2a:	693a      	ldr	r2, [r7, #16]
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	693a      	ldr	r2, [r7, #16]
 8005d34:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	2203      	movs	r2, #3
 8005d3c:	4013      	ands	r3, r2
 8005d3e:	2b02      	cmp	r3, #2
 8005d40:	d123      	bne.n	8005d8a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	08da      	lsrs	r2, r3, #3
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	3208      	adds	r2, #8
 8005d4a:	0092      	lsls	r2, r2, #2
 8005d4c:	58d3      	ldr	r3, [r2, r3]
 8005d4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	2207      	movs	r2, #7
 8005d54:	4013      	ands	r3, r2
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	220f      	movs	r2, #15
 8005d5a:	409a      	lsls	r2, r3
 8005d5c:	0013      	movs	r3, r2
 8005d5e:	43da      	mvns	r2, r3
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	4013      	ands	r3, r2
 8005d64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	691a      	ldr	r2, [r3, #16]
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	2107      	movs	r1, #7
 8005d6e:	400b      	ands	r3, r1
 8005d70:	009b      	lsls	r3, r3, #2
 8005d72:	409a      	lsls	r2, r3
 8005d74:	0013      	movs	r3, r2
 8005d76:	693a      	ldr	r2, [r7, #16]
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	08da      	lsrs	r2, r3, #3
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	3208      	adds	r2, #8
 8005d84:	0092      	lsls	r2, r2, #2
 8005d86:	6939      	ldr	r1, [r7, #16]
 8005d88:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	005b      	lsls	r3, r3, #1
 8005d94:	2203      	movs	r2, #3
 8005d96:	409a      	lsls	r2, r3
 8005d98:	0013      	movs	r3, r2
 8005d9a:	43da      	mvns	r2, r3
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	4013      	ands	r3, r2
 8005da0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	2203      	movs	r2, #3
 8005da8:	401a      	ands	r2, r3
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	005b      	lsls	r3, r3, #1
 8005dae:	409a      	lsls	r2, r3
 8005db0:	0013      	movs	r3, r2
 8005db2:	693a      	ldr	r2, [r7, #16]
 8005db4:	4313      	orrs	r3, r2
 8005db6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	693a      	ldr	r2, [r7, #16]
 8005dbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	685a      	ldr	r2, [r3, #4]
 8005dc2:	23c0      	movs	r3, #192	; 0xc0
 8005dc4:	029b      	lsls	r3, r3, #10
 8005dc6:	4013      	ands	r3, r2
 8005dc8:	d100      	bne.n	8005dcc <HAL_GPIO_Init+0x174>
 8005dca:	e092      	b.n	8005ef2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8005dcc:	4a50      	ldr	r2, [pc, #320]	; (8005f10 <HAL_GPIO_Init+0x2b8>)
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	089b      	lsrs	r3, r3, #2
 8005dd2:	3318      	adds	r3, #24
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	589b      	ldr	r3, [r3, r2]
 8005dd8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	2203      	movs	r2, #3
 8005dde:	4013      	ands	r3, r2
 8005de0:	00db      	lsls	r3, r3, #3
 8005de2:	220f      	movs	r2, #15
 8005de4:	409a      	lsls	r2, r3
 8005de6:	0013      	movs	r3, r2
 8005de8:	43da      	mvns	r2, r3
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	4013      	ands	r3, r2
 8005dee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	23a0      	movs	r3, #160	; 0xa0
 8005df4:	05db      	lsls	r3, r3, #23
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d013      	beq.n	8005e22 <HAL_GPIO_Init+0x1ca>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	4a45      	ldr	r2, [pc, #276]	; (8005f14 <HAL_GPIO_Init+0x2bc>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d00d      	beq.n	8005e1e <HAL_GPIO_Init+0x1c6>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4a44      	ldr	r2, [pc, #272]	; (8005f18 <HAL_GPIO_Init+0x2c0>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d007      	beq.n	8005e1a <HAL_GPIO_Init+0x1c2>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4a43      	ldr	r2, [pc, #268]	; (8005f1c <HAL_GPIO_Init+0x2c4>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d101      	bne.n	8005e16 <HAL_GPIO_Init+0x1be>
 8005e12:	2303      	movs	r3, #3
 8005e14:	e006      	b.n	8005e24 <HAL_GPIO_Init+0x1cc>
 8005e16:	2305      	movs	r3, #5
 8005e18:	e004      	b.n	8005e24 <HAL_GPIO_Init+0x1cc>
 8005e1a:	2302      	movs	r3, #2
 8005e1c:	e002      	b.n	8005e24 <HAL_GPIO_Init+0x1cc>
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e000      	b.n	8005e24 <HAL_GPIO_Init+0x1cc>
 8005e22:	2300      	movs	r3, #0
 8005e24:	697a      	ldr	r2, [r7, #20]
 8005e26:	2103      	movs	r1, #3
 8005e28:	400a      	ands	r2, r1
 8005e2a:	00d2      	lsls	r2, r2, #3
 8005e2c:	4093      	lsls	r3, r2
 8005e2e:	693a      	ldr	r2, [r7, #16]
 8005e30:	4313      	orrs	r3, r2
 8005e32:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8005e34:	4936      	ldr	r1, [pc, #216]	; (8005f10 <HAL_GPIO_Init+0x2b8>)
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	089b      	lsrs	r3, r3, #2
 8005e3a:	3318      	adds	r3, #24
 8005e3c:	009b      	lsls	r3, r3, #2
 8005e3e:	693a      	ldr	r2, [r7, #16]
 8005e40:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005e42:	4b33      	ldr	r3, [pc, #204]	; (8005f10 <HAL_GPIO_Init+0x2b8>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	43da      	mvns	r2, r3
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	4013      	ands	r3, r2
 8005e50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	685a      	ldr	r2, [r3, #4]
 8005e56:	2380      	movs	r3, #128	; 0x80
 8005e58:	035b      	lsls	r3, r3, #13
 8005e5a:	4013      	ands	r3, r2
 8005e5c:	d003      	beq.n	8005e66 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8005e5e:	693a      	ldr	r2, [r7, #16]
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	4313      	orrs	r3, r2
 8005e64:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005e66:	4b2a      	ldr	r3, [pc, #168]	; (8005f10 <HAL_GPIO_Init+0x2b8>)
 8005e68:	693a      	ldr	r2, [r7, #16]
 8005e6a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8005e6c:	4b28      	ldr	r3, [pc, #160]	; (8005f10 <HAL_GPIO_Init+0x2b8>)
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	43da      	mvns	r2, r3
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	4013      	ands	r3, r2
 8005e7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	685a      	ldr	r2, [r3, #4]
 8005e80:	2380      	movs	r3, #128	; 0x80
 8005e82:	039b      	lsls	r3, r3, #14
 8005e84:	4013      	ands	r3, r2
 8005e86:	d003      	beq.n	8005e90 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8005e88:	693a      	ldr	r2, [r7, #16]
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005e90:	4b1f      	ldr	r3, [pc, #124]	; (8005f10 <HAL_GPIO_Init+0x2b8>)
 8005e92:	693a      	ldr	r2, [r7, #16]
 8005e94:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005e96:	4a1e      	ldr	r2, [pc, #120]	; (8005f10 <HAL_GPIO_Init+0x2b8>)
 8005e98:	2384      	movs	r3, #132	; 0x84
 8005e9a:	58d3      	ldr	r3, [r2, r3]
 8005e9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	43da      	mvns	r2, r3
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	4013      	ands	r3, r2
 8005ea6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	685a      	ldr	r2, [r3, #4]
 8005eac:	2380      	movs	r3, #128	; 0x80
 8005eae:	029b      	lsls	r3, r3, #10
 8005eb0:	4013      	ands	r3, r2
 8005eb2:	d003      	beq.n	8005ebc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8005eb4:	693a      	ldr	r2, [r7, #16]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005ebc:	4914      	ldr	r1, [pc, #80]	; (8005f10 <HAL_GPIO_Init+0x2b8>)
 8005ebe:	2284      	movs	r2, #132	; 0x84
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8005ec4:	4a12      	ldr	r2, [pc, #72]	; (8005f10 <HAL_GPIO_Init+0x2b8>)
 8005ec6:	2380      	movs	r3, #128	; 0x80
 8005ec8:	58d3      	ldr	r3, [r2, r3]
 8005eca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	43da      	mvns	r2, r3
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	4013      	ands	r3, r2
 8005ed4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	685a      	ldr	r2, [r3, #4]
 8005eda:	2380      	movs	r3, #128	; 0x80
 8005edc:	025b      	lsls	r3, r3, #9
 8005ede:	4013      	ands	r3, r2
 8005ee0:	d003      	beq.n	8005eea <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8005ee2:	693a      	ldr	r2, [r7, #16]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005eea:	4909      	ldr	r1, [pc, #36]	; (8005f10 <HAL_GPIO_Init+0x2b8>)
 8005eec:	2280      	movs	r2, #128	; 0x80
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	3301      	adds	r3, #1
 8005ef6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	40da      	lsrs	r2, r3
 8005f00:	1e13      	subs	r3, r2, #0
 8005f02:	d000      	beq.n	8005f06 <HAL_GPIO_Init+0x2ae>
 8005f04:	e6b0      	b.n	8005c68 <HAL_GPIO_Init+0x10>
  }
}
 8005f06:	46c0      	nop			; (mov r8, r8)
 8005f08:	46c0      	nop			; (mov r8, r8)
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	b006      	add	sp, #24
 8005f0e:	bd80      	pop	{r7, pc}
 8005f10:	40021800 	.word	0x40021800
 8005f14:	50000400 	.word	0x50000400
 8005f18:	50000800 	.word	0x50000800
 8005f1c:	50000c00 	.word	0x50000c00

08005f20 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b084      	sub	sp, #16
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
 8005f28:	000a      	movs	r2, r1
 8005f2a:	1cbb      	adds	r3, r7, #2
 8005f2c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	691b      	ldr	r3, [r3, #16]
 8005f32:	1cba      	adds	r2, r7, #2
 8005f34:	8812      	ldrh	r2, [r2, #0]
 8005f36:	4013      	ands	r3, r2
 8005f38:	d004      	beq.n	8005f44 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8005f3a:	230f      	movs	r3, #15
 8005f3c:	18fb      	adds	r3, r7, r3
 8005f3e:	2201      	movs	r2, #1
 8005f40:	701a      	strb	r2, [r3, #0]
 8005f42:	e003      	b.n	8005f4c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005f44:	230f      	movs	r3, #15
 8005f46:	18fb      	adds	r3, r7, r3
 8005f48:	2200      	movs	r2, #0
 8005f4a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8005f4c:	230f      	movs	r3, #15
 8005f4e:	18fb      	adds	r3, r7, r3
 8005f50:	781b      	ldrb	r3, [r3, #0]
}
 8005f52:	0018      	movs	r0, r3
 8005f54:	46bd      	mov	sp, r7
 8005f56:	b004      	add	sp, #16
 8005f58:	bd80      	pop	{r7, pc}

08005f5a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005f5a:	b580      	push	{r7, lr}
 8005f5c:	b082      	sub	sp, #8
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	6078      	str	r0, [r7, #4]
 8005f62:	0008      	movs	r0, r1
 8005f64:	0011      	movs	r1, r2
 8005f66:	1cbb      	adds	r3, r7, #2
 8005f68:	1c02      	adds	r2, r0, #0
 8005f6a:	801a      	strh	r2, [r3, #0]
 8005f6c:	1c7b      	adds	r3, r7, #1
 8005f6e:	1c0a      	adds	r2, r1, #0
 8005f70:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005f72:	1c7b      	adds	r3, r7, #1
 8005f74:	781b      	ldrb	r3, [r3, #0]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d004      	beq.n	8005f84 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005f7a:	1cbb      	adds	r3, r7, #2
 8005f7c:	881a      	ldrh	r2, [r3, #0]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005f82:	e003      	b.n	8005f8c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005f84:	1cbb      	adds	r3, r7, #2
 8005f86:	881a      	ldrh	r2, [r3, #0]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005f8c:	46c0      	nop			; (mov r8, r8)
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	b002      	add	sp, #8
 8005f92:	bd80      	pop	{r7, pc}

08005f94 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b082      	sub	sp, #8
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	0002      	movs	r2, r0
 8005f9c:	1dbb      	adds	r3, r7, #6
 8005f9e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8005fa0:	4b10      	ldr	r3, [pc, #64]	; (8005fe4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	1dba      	adds	r2, r7, #6
 8005fa6:	8812      	ldrh	r2, [r2, #0]
 8005fa8:	4013      	ands	r3, r2
 8005faa:	d008      	beq.n	8005fbe <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8005fac:	4b0d      	ldr	r3, [pc, #52]	; (8005fe4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8005fae:	1dba      	adds	r2, r7, #6
 8005fb0:	8812      	ldrh	r2, [r2, #0]
 8005fb2:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8005fb4:	1dbb      	adds	r3, r7, #6
 8005fb6:	881b      	ldrh	r3, [r3, #0]
 8005fb8:	0018      	movs	r0, r3
 8005fba:	f7fc fcb8 	bl	800292e <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8005fbe:	4b09      	ldr	r3, [pc, #36]	; (8005fe4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8005fc0:	691b      	ldr	r3, [r3, #16]
 8005fc2:	1dba      	adds	r2, r7, #6
 8005fc4:	8812      	ldrh	r2, [r2, #0]
 8005fc6:	4013      	ands	r3, r2
 8005fc8:	d008      	beq.n	8005fdc <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8005fca:	4b06      	ldr	r3, [pc, #24]	; (8005fe4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8005fcc:	1dba      	adds	r2, r7, #6
 8005fce:	8812      	ldrh	r2, [r2, #0]
 8005fd0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8005fd2:	1dbb      	adds	r3, r7, #6
 8005fd4:	881b      	ldrh	r3, [r3, #0]
 8005fd6:	0018      	movs	r0, r3
 8005fd8:	f7fc fc9a 	bl	8002910 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8005fdc:	46c0      	nop			; (mov r8, r8)
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	b002      	add	sp, #8
 8005fe2:	bd80      	pop	{r7, pc}
 8005fe4:	40021800 	.word	0x40021800

08005fe8 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005fec:	4b04      	ldr	r3, [pc, #16]	; (8006000 <HAL_PWR_EnableBkUpAccess+0x18>)
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	4b03      	ldr	r3, [pc, #12]	; (8006000 <HAL_PWR_EnableBkUpAccess+0x18>)
 8005ff2:	2180      	movs	r1, #128	; 0x80
 8005ff4:	0049      	lsls	r1, r1, #1
 8005ff6:	430a      	orrs	r2, r1
 8005ff8:	601a      	str	r2, [r3, #0]
}
 8005ffa:	46c0      	nop			; (mov r8, r8)
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}
 8006000:	40007000 	.word	0x40007000

08006004 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b084      	sub	sp, #16
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800600c:	4b19      	ldr	r3, [pc, #100]	; (8006074 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a19      	ldr	r2, [pc, #100]	; (8006078 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8006012:	4013      	ands	r3, r2
 8006014:	0019      	movs	r1, r3
 8006016:	4b17      	ldr	r3, [pc, #92]	; (8006074 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006018:	687a      	ldr	r2, [r7, #4]
 800601a:	430a      	orrs	r2, r1
 800601c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800601e:	687a      	ldr	r2, [r7, #4]
 8006020:	2380      	movs	r3, #128	; 0x80
 8006022:	009b      	lsls	r3, r3, #2
 8006024:	429a      	cmp	r2, r3
 8006026:	d11f      	bne.n	8006068 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8006028:	4b14      	ldr	r3, [pc, #80]	; (800607c <HAL_PWREx_ControlVoltageScaling+0x78>)
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	0013      	movs	r3, r2
 800602e:	005b      	lsls	r3, r3, #1
 8006030:	189b      	adds	r3, r3, r2
 8006032:	005b      	lsls	r3, r3, #1
 8006034:	4912      	ldr	r1, [pc, #72]	; (8006080 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8006036:	0018      	movs	r0, r3
 8006038:	f7fa f862 	bl	8000100 <__udivsi3>
 800603c:	0003      	movs	r3, r0
 800603e:	3301      	adds	r3, #1
 8006040:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006042:	e008      	b.n	8006056 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d003      	beq.n	8006052 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	3b01      	subs	r3, #1
 800604e:	60fb      	str	r3, [r7, #12]
 8006050:	e001      	b.n	8006056 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8006052:	2303      	movs	r3, #3
 8006054:	e009      	b.n	800606a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006056:	4b07      	ldr	r3, [pc, #28]	; (8006074 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006058:	695a      	ldr	r2, [r3, #20]
 800605a:	2380      	movs	r3, #128	; 0x80
 800605c:	00db      	lsls	r3, r3, #3
 800605e:	401a      	ands	r2, r3
 8006060:	2380      	movs	r3, #128	; 0x80
 8006062:	00db      	lsls	r3, r3, #3
 8006064:	429a      	cmp	r2, r3
 8006066:	d0ed      	beq.n	8006044 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8006068:	2300      	movs	r3, #0
}
 800606a:	0018      	movs	r0, r3
 800606c:	46bd      	mov	sp, r7
 800606e:	b004      	add	sp, #16
 8006070:	bd80      	pop	{r7, pc}
 8006072:	46c0      	nop			; (mov r8, r8)
 8006074:	40007000 	.word	0x40007000
 8006078:	fffff9ff 	.word	0xfffff9ff
 800607c:	2000000c 	.word	0x2000000c
 8006080:	000f4240 	.word	0x000f4240

08006084 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8006088:	4b03      	ldr	r3, [pc, #12]	; (8006098 <LL_RCC_GetAPB1Prescaler+0x14>)
 800608a:	689a      	ldr	r2, [r3, #8]
 800608c:	23e0      	movs	r3, #224	; 0xe0
 800608e:	01db      	lsls	r3, r3, #7
 8006090:	4013      	ands	r3, r2
}
 8006092:	0018      	movs	r0, r3
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}
 8006098:	40021000 	.word	0x40021000

0800609c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b088      	sub	sp, #32
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d101      	bne.n	80060ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	e2f3      	b.n	8006696 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	2201      	movs	r2, #1
 80060b4:	4013      	ands	r3, r2
 80060b6:	d100      	bne.n	80060ba <HAL_RCC_OscConfig+0x1e>
 80060b8:	e07c      	b.n	80061b4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80060ba:	4bc3      	ldr	r3, [pc, #780]	; (80063c8 <HAL_RCC_OscConfig+0x32c>)
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	2238      	movs	r2, #56	; 0x38
 80060c0:	4013      	ands	r3, r2
 80060c2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80060c4:	4bc0      	ldr	r3, [pc, #768]	; (80063c8 <HAL_RCC_OscConfig+0x32c>)
 80060c6:	68db      	ldr	r3, [r3, #12]
 80060c8:	2203      	movs	r2, #3
 80060ca:	4013      	ands	r3, r2
 80060cc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80060ce:	69bb      	ldr	r3, [r7, #24]
 80060d0:	2b10      	cmp	r3, #16
 80060d2:	d102      	bne.n	80060da <HAL_RCC_OscConfig+0x3e>
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	2b03      	cmp	r3, #3
 80060d8:	d002      	beq.n	80060e0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80060da:	69bb      	ldr	r3, [r7, #24]
 80060dc:	2b08      	cmp	r3, #8
 80060de:	d10b      	bne.n	80060f8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060e0:	4bb9      	ldr	r3, [pc, #740]	; (80063c8 <HAL_RCC_OscConfig+0x32c>)
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	2380      	movs	r3, #128	; 0x80
 80060e6:	029b      	lsls	r3, r3, #10
 80060e8:	4013      	ands	r3, r2
 80060ea:	d062      	beq.n	80061b2 <HAL_RCC_OscConfig+0x116>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d15e      	bne.n	80061b2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80060f4:	2301      	movs	r3, #1
 80060f6:	e2ce      	b.n	8006696 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	685a      	ldr	r2, [r3, #4]
 80060fc:	2380      	movs	r3, #128	; 0x80
 80060fe:	025b      	lsls	r3, r3, #9
 8006100:	429a      	cmp	r2, r3
 8006102:	d107      	bne.n	8006114 <HAL_RCC_OscConfig+0x78>
 8006104:	4bb0      	ldr	r3, [pc, #704]	; (80063c8 <HAL_RCC_OscConfig+0x32c>)
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	4baf      	ldr	r3, [pc, #700]	; (80063c8 <HAL_RCC_OscConfig+0x32c>)
 800610a:	2180      	movs	r1, #128	; 0x80
 800610c:	0249      	lsls	r1, r1, #9
 800610e:	430a      	orrs	r2, r1
 8006110:	601a      	str	r2, [r3, #0]
 8006112:	e020      	b.n	8006156 <HAL_RCC_OscConfig+0xba>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	685a      	ldr	r2, [r3, #4]
 8006118:	23a0      	movs	r3, #160	; 0xa0
 800611a:	02db      	lsls	r3, r3, #11
 800611c:	429a      	cmp	r2, r3
 800611e:	d10e      	bne.n	800613e <HAL_RCC_OscConfig+0xa2>
 8006120:	4ba9      	ldr	r3, [pc, #676]	; (80063c8 <HAL_RCC_OscConfig+0x32c>)
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	4ba8      	ldr	r3, [pc, #672]	; (80063c8 <HAL_RCC_OscConfig+0x32c>)
 8006126:	2180      	movs	r1, #128	; 0x80
 8006128:	02c9      	lsls	r1, r1, #11
 800612a:	430a      	orrs	r2, r1
 800612c:	601a      	str	r2, [r3, #0]
 800612e:	4ba6      	ldr	r3, [pc, #664]	; (80063c8 <HAL_RCC_OscConfig+0x32c>)
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	4ba5      	ldr	r3, [pc, #660]	; (80063c8 <HAL_RCC_OscConfig+0x32c>)
 8006134:	2180      	movs	r1, #128	; 0x80
 8006136:	0249      	lsls	r1, r1, #9
 8006138:	430a      	orrs	r2, r1
 800613a:	601a      	str	r2, [r3, #0]
 800613c:	e00b      	b.n	8006156 <HAL_RCC_OscConfig+0xba>
 800613e:	4ba2      	ldr	r3, [pc, #648]	; (80063c8 <HAL_RCC_OscConfig+0x32c>)
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	4ba1      	ldr	r3, [pc, #644]	; (80063c8 <HAL_RCC_OscConfig+0x32c>)
 8006144:	49a1      	ldr	r1, [pc, #644]	; (80063cc <HAL_RCC_OscConfig+0x330>)
 8006146:	400a      	ands	r2, r1
 8006148:	601a      	str	r2, [r3, #0]
 800614a:	4b9f      	ldr	r3, [pc, #636]	; (80063c8 <HAL_RCC_OscConfig+0x32c>)
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	4b9e      	ldr	r3, [pc, #632]	; (80063c8 <HAL_RCC_OscConfig+0x32c>)
 8006150:	499f      	ldr	r1, [pc, #636]	; (80063d0 <HAL_RCC_OscConfig+0x334>)
 8006152:	400a      	ands	r2, r1
 8006154:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d014      	beq.n	8006188 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800615e:	f7fe fc93 	bl	8004a88 <HAL_GetTick>
 8006162:	0003      	movs	r3, r0
 8006164:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006166:	e008      	b.n	800617a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006168:	f7fe fc8e 	bl	8004a88 <HAL_GetTick>
 800616c:	0002      	movs	r2, r0
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	1ad3      	subs	r3, r2, r3
 8006172:	2b64      	cmp	r3, #100	; 0x64
 8006174:	d901      	bls.n	800617a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8006176:	2303      	movs	r3, #3
 8006178:	e28d      	b.n	8006696 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800617a:	4b93      	ldr	r3, [pc, #588]	; (80063c8 <HAL_RCC_OscConfig+0x32c>)
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	2380      	movs	r3, #128	; 0x80
 8006180:	029b      	lsls	r3, r3, #10
 8006182:	4013      	ands	r3, r2
 8006184:	d0f0      	beq.n	8006168 <HAL_RCC_OscConfig+0xcc>
 8006186:	e015      	b.n	80061b4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006188:	f7fe fc7e 	bl	8004a88 <HAL_GetTick>
 800618c:	0003      	movs	r3, r0
 800618e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006190:	e008      	b.n	80061a4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006192:	f7fe fc79 	bl	8004a88 <HAL_GetTick>
 8006196:	0002      	movs	r2, r0
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	1ad3      	subs	r3, r2, r3
 800619c:	2b64      	cmp	r3, #100	; 0x64
 800619e:	d901      	bls.n	80061a4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80061a0:	2303      	movs	r3, #3
 80061a2:	e278      	b.n	8006696 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80061a4:	4b88      	ldr	r3, [pc, #544]	; (80063c8 <HAL_RCC_OscConfig+0x32c>)
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	2380      	movs	r3, #128	; 0x80
 80061aa:	029b      	lsls	r3, r3, #10
 80061ac:	4013      	ands	r3, r2
 80061ae:	d1f0      	bne.n	8006192 <HAL_RCC_OscConfig+0xf6>
 80061b0:	e000      	b.n	80061b4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061b2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	2202      	movs	r2, #2
 80061ba:	4013      	ands	r3, r2
 80061bc:	d100      	bne.n	80061c0 <HAL_RCC_OscConfig+0x124>
 80061be:	e099      	b.n	80062f4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80061c0:	4b81      	ldr	r3, [pc, #516]	; (80063c8 <HAL_RCC_OscConfig+0x32c>)
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	2238      	movs	r2, #56	; 0x38
 80061c6:	4013      	ands	r3, r2
 80061c8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80061ca:	4b7f      	ldr	r3, [pc, #508]	; (80063c8 <HAL_RCC_OscConfig+0x32c>)
 80061cc:	68db      	ldr	r3, [r3, #12]
 80061ce:	2203      	movs	r2, #3
 80061d0:	4013      	ands	r3, r2
 80061d2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80061d4:	69bb      	ldr	r3, [r7, #24]
 80061d6:	2b10      	cmp	r3, #16
 80061d8:	d102      	bne.n	80061e0 <HAL_RCC_OscConfig+0x144>
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	2b02      	cmp	r3, #2
 80061de:	d002      	beq.n	80061e6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80061e0:	69bb      	ldr	r3, [r7, #24]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d135      	bne.n	8006252 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80061e6:	4b78      	ldr	r3, [pc, #480]	; (80063c8 <HAL_RCC_OscConfig+0x32c>)
 80061e8:	681a      	ldr	r2, [r3, #0]
 80061ea:	2380      	movs	r3, #128	; 0x80
 80061ec:	00db      	lsls	r3, r3, #3
 80061ee:	4013      	ands	r3, r2
 80061f0:	d005      	beq.n	80061fe <HAL_RCC_OscConfig+0x162>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	68db      	ldr	r3, [r3, #12]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d101      	bne.n	80061fe <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	e24b      	b.n	8006696 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061fe:	4b72      	ldr	r3, [pc, #456]	; (80063c8 <HAL_RCC_OscConfig+0x32c>)
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	4a74      	ldr	r2, [pc, #464]	; (80063d4 <HAL_RCC_OscConfig+0x338>)
 8006204:	4013      	ands	r3, r2
 8006206:	0019      	movs	r1, r3
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	695b      	ldr	r3, [r3, #20]
 800620c:	021a      	lsls	r2, r3, #8
 800620e:	4b6e      	ldr	r3, [pc, #440]	; (80063c8 <HAL_RCC_OscConfig+0x32c>)
 8006210:	430a      	orrs	r2, r1
 8006212:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006214:	69bb      	ldr	r3, [r7, #24]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d112      	bne.n	8006240 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800621a:	4b6b      	ldr	r3, [pc, #428]	; (80063c8 <HAL_RCC_OscConfig+0x32c>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a6e      	ldr	r2, [pc, #440]	; (80063d8 <HAL_RCC_OscConfig+0x33c>)
 8006220:	4013      	ands	r3, r2
 8006222:	0019      	movs	r1, r3
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	691a      	ldr	r2, [r3, #16]
 8006228:	4b67      	ldr	r3, [pc, #412]	; (80063c8 <HAL_RCC_OscConfig+0x32c>)
 800622a:	430a      	orrs	r2, r1
 800622c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800622e:	4b66      	ldr	r3, [pc, #408]	; (80063c8 <HAL_RCC_OscConfig+0x32c>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	0adb      	lsrs	r3, r3, #11
 8006234:	2207      	movs	r2, #7
 8006236:	4013      	ands	r3, r2
 8006238:	4a68      	ldr	r2, [pc, #416]	; (80063dc <HAL_RCC_OscConfig+0x340>)
 800623a:	40da      	lsrs	r2, r3
 800623c:	4b68      	ldr	r3, [pc, #416]	; (80063e0 <HAL_RCC_OscConfig+0x344>)
 800623e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006240:	4b68      	ldr	r3, [pc, #416]	; (80063e4 <HAL_RCC_OscConfig+0x348>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	0018      	movs	r0, r3
 8006246:	f7fe fbc3 	bl	80049d0 <HAL_InitTick>
 800624a:	1e03      	subs	r3, r0, #0
 800624c:	d051      	beq.n	80062f2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	e221      	b.n	8006696 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	68db      	ldr	r3, [r3, #12]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d030      	beq.n	80062bc <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800625a:	4b5b      	ldr	r3, [pc, #364]	; (80063c8 <HAL_RCC_OscConfig+0x32c>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a5e      	ldr	r2, [pc, #376]	; (80063d8 <HAL_RCC_OscConfig+0x33c>)
 8006260:	4013      	ands	r3, r2
 8006262:	0019      	movs	r1, r3
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	691a      	ldr	r2, [r3, #16]
 8006268:	4b57      	ldr	r3, [pc, #348]	; (80063c8 <HAL_RCC_OscConfig+0x32c>)
 800626a:	430a      	orrs	r2, r1
 800626c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800626e:	4b56      	ldr	r3, [pc, #344]	; (80063c8 <HAL_RCC_OscConfig+0x32c>)
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	4b55      	ldr	r3, [pc, #340]	; (80063c8 <HAL_RCC_OscConfig+0x32c>)
 8006274:	2180      	movs	r1, #128	; 0x80
 8006276:	0049      	lsls	r1, r1, #1
 8006278:	430a      	orrs	r2, r1
 800627a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800627c:	f7fe fc04 	bl	8004a88 <HAL_GetTick>
 8006280:	0003      	movs	r3, r0
 8006282:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006284:	e008      	b.n	8006298 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006286:	f7fe fbff 	bl	8004a88 <HAL_GetTick>
 800628a:	0002      	movs	r2, r0
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	1ad3      	subs	r3, r2, r3
 8006290:	2b02      	cmp	r3, #2
 8006292:	d901      	bls.n	8006298 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8006294:	2303      	movs	r3, #3
 8006296:	e1fe      	b.n	8006696 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006298:	4b4b      	ldr	r3, [pc, #300]	; (80063c8 <HAL_RCC_OscConfig+0x32c>)
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	2380      	movs	r3, #128	; 0x80
 800629e:	00db      	lsls	r3, r3, #3
 80062a0:	4013      	ands	r3, r2
 80062a2:	d0f0      	beq.n	8006286 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062a4:	4b48      	ldr	r3, [pc, #288]	; (80063c8 <HAL_RCC_OscConfig+0x32c>)
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	4a4a      	ldr	r2, [pc, #296]	; (80063d4 <HAL_RCC_OscConfig+0x338>)
 80062aa:	4013      	ands	r3, r2
 80062ac:	0019      	movs	r1, r3
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	695b      	ldr	r3, [r3, #20]
 80062b2:	021a      	lsls	r2, r3, #8
 80062b4:	4b44      	ldr	r3, [pc, #272]	; (80063c8 <HAL_RCC_OscConfig+0x32c>)
 80062b6:	430a      	orrs	r2, r1
 80062b8:	605a      	str	r2, [r3, #4]
 80062ba:	e01b      	b.n	80062f4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80062bc:	4b42      	ldr	r3, [pc, #264]	; (80063c8 <HAL_RCC_OscConfig+0x32c>)
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	4b41      	ldr	r3, [pc, #260]	; (80063c8 <HAL_RCC_OscConfig+0x32c>)
 80062c2:	4949      	ldr	r1, [pc, #292]	; (80063e8 <HAL_RCC_OscConfig+0x34c>)
 80062c4:	400a      	ands	r2, r1
 80062c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062c8:	f7fe fbde 	bl	8004a88 <HAL_GetTick>
 80062cc:	0003      	movs	r3, r0
 80062ce:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80062d0:	e008      	b.n	80062e4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80062d2:	f7fe fbd9 	bl	8004a88 <HAL_GetTick>
 80062d6:	0002      	movs	r2, r0
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	1ad3      	subs	r3, r2, r3
 80062dc:	2b02      	cmp	r3, #2
 80062de:	d901      	bls.n	80062e4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80062e0:	2303      	movs	r3, #3
 80062e2:	e1d8      	b.n	8006696 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80062e4:	4b38      	ldr	r3, [pc, #224]	; (80063c8 <HAL_RCC_OscConfig+0x32c>)
 80062e6:	681a      	ldr	r2, [r3, #0]
 80062e8:	2380      	movs	r3, #128	; 0x80
 80062ea:	00db      	lsls	r3, r3, #3
 80062ec:	4013      	ands	r3, r2
 80062ee:	d1f0      	bne.n	80062d2 <HAL_RCC_OscConfig+0x236>
 80062f0:	e000      	b.n	80062f4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80062f2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	2208      	movs	r2, #8
 80062fa:	4013      	ands	r3, r2
 80062fc:	d047      	beq.n	800638e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80062fe:	4b32      	ldr	r3, [pc, #200]	; (80063c8 <HAL_RCC_OscConfig+0x32c>)
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	2238      	movs	r2, #56	; 0x38
 8006304:	4013      	ands	r3, r2
 8006306:	2b18      	cmp	r3, #24
 8006308:	d10a      	bne.n	8006320 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800630a:	4b2f      	ldr	r3, [pc, #188]	; (80063c8 <HAL_RCC_OscConfig+0x32c>)
 800630c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800630e:	2202      	movs	r2, #2
 8006310:	4013      	ands	r3, r2
 8006312:	d03c      	beq.n	800638e <HAL_RCC_OscConfig+0x2f2>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	699b      	ldr	r3, [r3, #24]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d138      	bne.n	800638e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800631c:	2301      	movs	r3, #1
 800631e:	e1ba      	b.n	8006696 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	699b      	ldr	r3, [r3, #24]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d019      	beq.n	800635c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8006328:	4b27      	ldr	r3, [pc, #156]	; (80063c8 <HAL_RCC_OscConfig+0x32c>)
 800632a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800632c:	4b26      	ldr	r3, [pc, #152]	; (80063c8 <HAL_RCC_OscConfig+0x32c>)
 800632e:	2101      	movs	r1, #1
 8006330:	430a      	orrs	r2, r1
 8006332:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006334:	f7fe fba8 	bl	8004a88 <HAL_GetTick>
 8006338:	0003      	movs	r3, r0
 800633a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800633c:	e008      	b.n	8006350 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800633e:	f7fe fba3 	bl	8004a88 <HAL_GetTick>
 8006342:	0002      	movs	r2, r0
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	1ad3      	subs	r3, r2, r3
 8006348:	2b02      	cmp	r3, #2
 800634a:	d901      	bls.n	8006350 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800634c:	2303      	movs	r3, #3
 800634e:	e1a2      	b.n	8006696 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006350:	4b1d      	ldr	r3, [pc, #116]	; (80063c8 <HAL_RCC_OscConfig+0x32c>)
 8006352:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006354:	2202      	movs	r2, #2
 8006356:	4013      	ands	r3, r2
 8006358:	d0f1      	beq.n	800633e <HAL_RCC_OscConfig+0x2a2>
 800635a:	e018      	b.n	800638e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800635c:	4b1a      	ldr	r3, [pc, #104]	; (80063c8 <HAL_RCC_OscConfig+0x32c>)
 800635e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006360:	4b19      	ldr	r3, [pc, #100]	; (80063c8 <HAL_RCC_OscConfig+0x32c>)
 8006362:	2101      	movs	r1, #1
 8006364:	438a      	bics	r2, r1
 8006366:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006368:	f7fe fb8e 	bl	8004a88 <HAL_GetTick>
 800636c:	0003      	movs	r3, r0
 800636e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006370:	e008      	b.n	8006384 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006372:	f7fe fb89 	bl	8004a88 <HAL_GetTick>
 8006376:	0002      	movs	r2, r0
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	1ad3      	subs	r3, r2, r3
 800637c:	2b02      	cmp	r3, #2
 800637e:	d901      	bls.n	8006384 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8006380:	2303      	movs	r3, #3
 8006382:	e188      	b.n	8006696 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006384:	4b10      	ldr	r3, [pc, #64]	; (80063c8 <HAL_RCC_OscConfig+0x32c>)
 8006386:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006388:	2202      	movs	r2, #2
 800638a:	4013      	ands	r3, r2
 800638c:	d1f1      	bne.n	8006372 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	2204      	movs	r2, #4
 8006394:	4013      	ands	r3, r2
 8006396:	d100      	bne.n	800639a <HAL_RCC_OscConfig+0x2fe>
 8006398:	e0c6      	b.n	8006528 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800639a:	231f      	movs	r3, #31
 800639c:	18fb      	adds	r3, r7, r3
 800639e:	2200      	movs	r2, #0
 80063a0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80063a2:	4b09      	ldr	r3, [pc, #36]	; (80063c8 <HAL_RCC_OscConfig+0x32c>)
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	2238      	movs	r2, #56	; 0x38
 80063a8:	4013      	ands	r3, r2
 80063aa:	2b20      	cmp	r3, #32
 80063ac:	d11e      	bne.n	80063ec <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80063ae:	4b06      	ldr	r3, [pc, #24]	; (80063c8 <HAL_RCC_OscConfig+0x32c>)
 80063b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063b2:	2202      	movs	r2, #2
 80063b4:	4013      	ands	r3, r2
 80063b6:	d100      	bne.n	80063ba <HAL_RCC_OscConfig+0x31e>
 80063b8:	e0b6      	b.n	8006528 <HAL_RCC_OscConfig+0x48c>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d000      	beq.n	80063c4 <HAL_RCC_OscConfig+0x328>
 80063c2:	e0b1      	b.n	8006528 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80063c4:	2301      	movs	r3, #1
 80063c6:	e166      	b.n	8006696 <HAL_RCC_OscConfig+0x5fa>
 80063c8:	40021000 	.word	0x40021000
 80063cc:	fffeffff 	.word	0xfffeffff
 80063d0:	fffbffff 	.word	0xfffbffff
 80063d4:	ffff80ff 	.word	0xffff80ff
 80063d8:	ffffc7ff 	.word	0xffffc7ff
 80063dc:	00f42400 	.word	0x00f42400
 80063e0:	2000000c 	.word	0x2000000c
 80063e4:	20000010 	.word	0x20000010
 80063e8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80063ec:	4bac      	ldr	r3, [pc, #688]	; (80066a0 <HAL_RCC_OscConfig+0x604>)
 80063ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80063f0:	2380      	movs	r3, #128	; 0x80
 80063f2:	055b      	lsls	r3, r3, #21
 80063f4:	4013      	ands	r3, r2
 80063f6:	d101      	bne.n	80063fc <HAL_RCC_OscConfig+0x360>
 80063f8:	2301      	movs	r3, #1
 80063fa:	e000      	b.n	80063fe <HAL_RCC_OscConfig+0x362>
 80063fc:	2300      	movs	r3, #0
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d011      	beq.n	8006426 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8006402:	4ba7      	ldr	r3, [pc, #668]	; (80066a0 <HAL_RCC_OscConfig+0x604>)
 8006404:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006406:	4ba6      	ldr	r3, [pc, #664]	; (80066a0 <HAL_RCC_OscConfig+0x604>)
 8006408:	2180      	movs	r1, #128	; 0x80
 800640a:	0549      	lsls	r1, r1, #21
 800640c:	430a      	orrs	r2, r1
 800640e:	63da      	str	r2, [r3, #60]	; 0x3c
 8006410:	4ba3      	ldr	r3, [pc, #652]	; (80066a0 <HAL_RCC_OscConfig+0x604>)
 8006412:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006414:	2380      	movs	r3, #128	; 0x80
 8006416:	055b      	lsls	r3, r3, #21
 8006418:	4013      	ands	r3, r2
 800641a:	60fb      	str	r3, [r7, #12]
 800641c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800641e:	231f      	movs	r3, #31
 8006420:	18fb      	adds	r3, r7, r3
 8006422:	2201      	movs	r2, #1
 8006424:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006426:	4b9f      	ldr	r3, [pc, #636]	; (80066a4 <HAL_RCC_OscConfig+0x608>)
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	2380      	movs	r3, #128	; 0x80
 800642c:	005b      	lsls	r3, r3, #1
 800642e:	4013      	ands	r3, r2
 8006430:	d11a      	bne.n	8006468 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006432:	4b9c      	ldr	r3, [pc, #624]	; (80066a4 <HAL_RCC_OscConfig+0x608>)
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	4b9b      	ldr	r3, [pc, #620]	; (80066a4 <HAL_RCC_OscConfig+0x608>)
 8006438:	2180      	movs	r1, #128	; 0x80
 800643a:	0049      	lsls	r1, r1, #1
 800643c:	430a      	orrs	r2, r1
 800643e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8006440:	f7fe fb22 	bl	8004a88 <HAL_GetTick>
 8006444:	0003      	movs	r3, r0
 8006446:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006448:	e008      	b.n	800645c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800644a:	f7fe fb1d 	bl	8004a88 <HAL_GetTick>
 800644e:	0002      	movs	r2, r0
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	1ad3      	subs	r3, r2, r3
 8006454:	2b02      	cmp	r3, #2
 8006456:	d901      	bls.n	800645c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8006458:	2303      	movs	r3, #3
 800645a:	e11c      	b.n	8006696 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800645c:	4b91      	ldr	r3, [pc, #580]	; (80066a4 <HAL_RCC_OscConfig+0x608>)
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	2380      	movs	r3, #128	; 0x80
 8006462:	005b      	lsls	r3, r3, #1
 8006464:	4013      	ands	r3, r2
 8006466:	d0f0      	beq.n	800644a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	2b01      	cmp	r3, #1
 800646e:	d106      	bne.n	800647e <HAL_RCC_OscConfig+0x3e2>
 8006470:	4b8b      	ldr	r3, [pc, #556]	; (80066a0 <HAL_RCC_OscConfig+0x604>)
 8006472:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006474:	4b8a      	ldr	r3, [pc, #552]	; (80066a0 <HAL_RCC_OscConfig+0x604>)
 8006476:	2101      	movs	r1, #1
 8006478:	430a      	orrs	r2, r1
 800647a:	65da      	str	r2, [r3, #92]	; 0x5c
 800647c:	e01c      	b.n	80064b8 <HAL_RCC_OscConfig+0x41c>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	2b05      	cmp	r3, #5
 8006484:	d10c      	bne.n	80064a0 <HAL_RCC_OscConfig+0x404>
 8006486:	4b86      	ldr	r3, [pc, #536]	; (80066a0 <HAL_RCC_OscConfig+0x604>)
 8006488:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800648a:	4b85      	ldr	r3, [pc, #532]	; (80066a0 <HAL_RCC_OscConfig+0x604>)
 800648c:	2104      	movs	r1, #4
 800648e:	430a      	orrs	r2, r1
 8006490:	65da      	str	r2, [r3, #92]	; 0x5c
 8006492:	4b83      	ldr	r3, [pc, #524]	; (80066a0 <HAL_RCC_OscConfig+0x604>)
 8006494:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006496:	4b82      	ldr	r3, [pc, #520]	; (80066a0 <HAL_RCC_OscConfig+0x604>)
 8006498:	2101      	movs	r1, #1
 800649a:	430a      	orrs	r2, r1
 800649c:	65da      	str	r2, [r3, #92]	; 0x5c
 800649e:	e00b      	b.n	80064b8 <HAL_RCC_OscConfig+0x41c>
 80064a0:	4b7f      	ldr	r3, [pc, #508]	; (80066a0 <HAL_RCC_OscConfig+0x604>)
 80064a2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80064a4:	4b7e      	ldr	r3, [pc, #504]	; (80066a0 <HAL_RCC_OscConfig+0x604>)
 80064a6:	2101      	movs	r1, #1
 80064a8:	438a      	bics	r2, r1
 80064aa:	65da      	str	r2, [r3, #92]	; 0x5c
 80064ac:	4b7c      	ldr	r3, [pc, #496]	; (80066a0 <HAL_RCC_OscConfig+0x604>)
 80064ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80064b0:	4b7b      	ldr	r3, [pc, #492]	; (80066a0 <HAL_RCC_OscConfig+0x604>)
 80064b2:	2104      	movs	r1, #4
 80064b4:	438a      	bics	r2, r1
 80064b6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d014      	beq.n	80064ea <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064c0:	f7fe fae2 	bl	8004a88 <HAL_GetTick>
 80064c4:	0003      	movs	r3, r0
 80064c6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80064c8:	e009      	b.n	80064de <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064ca:	f7fe fadd 	bl	8004a88 <HAL_GetTick>
 80064ce:	0002      	movs	r2, r0
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	1ad3      	subs	r3, r2, r3
 80064d4:	4a74      	ldr	r2, [pc, #464]	; (80066a8 <HAL_RCC_OscConfig+0x60c>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d901      	bls.n	80064de <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80064da:	2303      	movs	r3, #3
 80064dc:	e0db      	b.n	8006696 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80064de:	4b70      	ldr	r3, [pc, #448]	; (80066a0 <HAL_RCC_OscConfig+0x604>)
 80064e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064e2:	2202      	movs	r2, #2
 80064e4:	4013      	ands	r3, r2
 80064e6:	d0f0      	beq.n	80064ca <HAL_RCC_OscConfig+0x42e>
 80064e8:	e013      	b.n	8006512 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064ea:	f7fe facd 	bl	8004a88 <HAL_GetTick>
 80064ee:	0003      	movs	r3, r0
 80064f0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80064f2:	e009      	b.n	8006508 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064f4:	f7fe fac8 	bl	8004a88 <HAL_GetTick>
 80064f8:	0002      	movs	r2, r0
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	1ad3      	subs	r3, r2, r3
 80064fe:	4a6a      	ldr	r2, [pc, #424]	; (80066a8 <HAL_RCC_OscConfig+0x60c>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d901      	bls.n	8006508 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8006504:	2303      	movs	r3, #3
 8006506:	e0c6      	b.n	8006696 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006508:	4b65      	ldr	r3, [pc, #404]	; (80066a0 <HAL_RCC_OscConfig+0x604>)
 800650a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800650c:	2202      	movs	r2, #2
 800650e:	4013      	ands	r3, r2
 8006510:	d1f0      	bne.n	80064f4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8006512:	231f      	movs	r3, #31
 8006514:	18fb      	adds	r3, r7, r3
 8006516:	781b      	ldrb	r3, [r3, #0]
 8006518:	2b01      	cmp	r3, #1
 800651a:	d105      	bne.n	8006528 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800651c:	4b60      	ldr	r3, [pc, #384]	; (80066a0 <HAL_RCC_OscConfig+0x604>)
 800651e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006520:	4b5f      	ldr	r3, [pc, #380]	; (80066a0 <HAL_RCC_OscConfig+0x604>)
 8006522:	4962      	ldr	r1, [pc, #392]	; (80066ac <HAL_RCC_OscConfig+0x610>)
 8006524:	400a      	ands	r2, r1
 8006526:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	69db      	ldr	r3, [r3, #28]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d100      	bne.n	8006532 <HAL_RCC_OscConfig+0x496>
 8006530:	e0b0      	b.n	8006694 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006532:	4b5b      	ldr	r3, [pc, #364]	; (80066a0 <HAL_RCC_OscConfig+0x604>)
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	2238      	movs	r2, #56	; 0x38
 8006538:	4013      	ands	r3, r2
 800653a:	2b10      	cmp	r3, #16
 800653c:	d100      	bne.n	8006540 <HAL_RCC_OscConfig+0x4a4>
 800653e:	e078      	b.n	8006632 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	69db      	ldr	r3, [r3, #28]
 8006544:	2b02      	cmp	r3, #2
 8006546:	d153      	bne.n	80065f0 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006548:	4b55      	ldr	r3, [pc, #340]	; (80066a0 <HAL_RCC_OscConfig+0x604>)
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	4b54      	ldr	r3, [pc, #336]	; (80066a0 <HAL_RCC_OscConfig+0x604>)
 800654e:	4958      	ldr	r1, [pc, #352]	; (80066b0 <HAL_RCC_OscConfig+0x614>)
 8006550:	400a      	ands	r2, r1
 8006552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006554:	f7fe fa98 	bl	8004a88 <HAL_GetTick>
 8006558:	0003      	movs	r3, r0
 800655a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800655c:	e008      	b.n	8006570 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800655e:	f7fe fa93 	bl	8004a88 <HAL_GetTick>
 8006562:	0002      	movs	r2, r0
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	1ad3      	subs	r3, r2, r3
 8006568:	2b02      	cmp	r3, #2
 800656a:	d901      	bls.n	8006570 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800656c:	2303      	movs	r3, #3
 800656e:	e092      	b.n	8006696 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006570:	4b4b      	ldr	r3, [pc, #300]	; (80066a0 <HAL_RCC_OscConfig+0x604>)
 8006572:	681a      	ldr	r2, [r3, #0]
 8006574:	2380      	movs	r3, #128	; 0x80
 8006576:	049b      	lsls	r3, r3, #18
 8006578:	4013      	ands	r3, r2
 800657a:	d1f0      	bne.n	800655e <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800657c:	4b48      	ldr	r3, [pc, #288]	; (80066a0 <HAL_RCC_OscConfig+0x604>)
 800657e:	68db      	ldr	r3, [r3, #12]
 8006580:	4a4c      	ldr	r2, [pc, #304]	; (80066b4 <HAL_RCC_OscConfig+0x618>)
 8006582:	4013      	ands	r3, r2
 8006584:	0019      	movs	r1, r3
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6a1a      	ldr	r2, [r3, #32]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800658e:	431a      	orrs	r2, r3
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006594:	021b      	lsls	r3, r3, #8
 8006596:	431a      	orrs	r2, r3
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800659c:	431a      	orrs	r2, r3
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065a2:	431a      	orrs	r2, r3
 80065a4:	4b3e      	ldr	r3, [pc, #248]	; (80066a0 <HAL_RCC_OscConfig+0x604>)
 80065a6:	430a      	orrs	r2, r1
 80065a8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80065aa:	4b3d      	ldr	r3, [pc, #244]	; (80066a0 <HAL_RCC_OscConfig+0x604>)
 80065ac:	681a      	ldr	r2, [r3, #0]
 80065ae:	4b3c      	ldr	r3, [pc, #240]	; (80066a0 <HAL_RCC_OscConfig+0x604>)
 80065b0:	2180      	movs	r1, #128	; 0x80
 80065b2:	0449      	lsls	r1, r1, #17
 80065b4:	430a      	orrs	r2, r1
 80065b6:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80065b8:	4b39      	ldr	r3, [pc, #228]	; (80066a0 <HAL_RCC_OscConfig+0x604>)
 80065ba:	68da      	ldr	r2, [r3, #12]
 80065bc:	4b38      	ldr	r3, [pc, #224]	; (80066a0 <HAL_RCC_OscConfig+0x604>)
 80065be:	2180      	movs	r1, #128	; 0x80
 80065c0:	0549      	lsls	r1, r1, #21
 80065c2:	430a      	orrs	r2, r1
 80065c4:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065c6:	f7fe fa5f 	bl	8004a88 <HAL_GetTick>
 80065ca:	0003      	movs	r3, r0
 80065cc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80065ce:	e008      	b.n	80065e2 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065d0:	f7fe fa5a 	bl	8004a88 <HAL_GetTick>
 80065d4:	0002      	movs	r2, r0
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	1ad3      	subs	r3, r2, r3
 80065da:	2b02      	cmp	r3, #2
 80065dc:	d901      	bls.n	80065e2 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80065de:	2303      	movs	r3, #3
 80065e0:	e059      	b.n	8006696 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80065e2:	4b2f      	ldr	r3, [pc, #188]	; (80066a0 <HAL_RCC_OscConfig+0x604>)
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	2380      	movs	r3, #128	; 0x80
 80065e8:	049b      	lsls	r3, r3, #18
 80065ea:	4013      	ands	r3, r2
 80065ec:	d0f0      	beq.n	80065d0 <HAL_RCC_OscConfig+0x534>
 80065ee:	e051      	b.n	8006694 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065f0:	4b2b      	ldr	r3, [pc, #172]	; (80066a0 <HAL_RCC_OscConfig+0x604>)
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	4b2a      	ldr	r3, [pc, #168]	; (80066a0 <HAL_RCC_OscConfig+0x604>)
 80065f6:	492e      	ldr	r1, [pc, #184]	; (80066b0 <HAL_RCC_OscConfig+0x614>)
 80065f8:	400a      	ands	r2, r1
 80065fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065fc:	f7fe fa44 	bl	8004a88 <HAL_GetTick>
 8006600:	0003      	movs	r3, r0
 8006602:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006604:	e008      	b.n	8006618 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006606:	f7fe fa3f 	bl	8004a88 <HAL_GetTick>
 800660a:	0002      	movs	r2, r0
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	1ad3      	subs	r3, r2, r3
 8006610:	2b02      	cmp	r3, #2
 8006612:	d901      	bls.n	8006618 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8006614:	2303      	movs	r3, #3
 8006616:	e03e      	b.n	8006696 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006618:	4b21      	ldr	r3, [pc, #132]	; (80066a0 <HAL_RCC_OscConfig+0x604>)
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	2380      	movs	r3, #128	; 0x80
 800661e:	049b      	lsls	r3, r3, #18
 8006620:	4013      	ands	r3, r2
 8006622:	d1f0      	bne.n	8006606 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8006624:	4b1e      	ldr	r3, [pc, #120]	; (80066a0 <HAL_RCC_OscConfig+0x604>)
 8006626:	68da      	ldr	r2, [r3, #12]
 8006628:	4b1d      	ldr	r3, [pc, #116]	; (80066a0 <HAL_RCC_OscConfig+0x604>)
 800662a:	4923      	ldr	r1, [pc, #140]	; (80066b8 <HAL_RCC_OscConfig+0x61c>)
 800662c:	400a      	ands	r2, r1
 800662e:	60da      	str	r2, [r3, #12]
 8006630:	e030      	b.n	8006694 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	69db      	ldr	r3, [r3, #28]
 8006636:	2b01      	cmp	r3, #1
 8006638:	d101      	bne.n	800663e <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 800663a:	2301      	movs	r3, #1
 800663c:	e02b      	b.n	8006696 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800663e:	4b18      	ldr	r3, [pc, #96]	; (80066a0 <HAL_RCC_OscConfig+0x604>)
 8006640:	68db      	ldr	r3, [r3, #12]
 8006642:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	2203      	movs	r2, #3
 8006648:	401a      	ands	r2, r3
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6a1b      	ldr	r3, [r3, #32]
 800664e:	429a      	cmp	r2, r3
 8006650:	d11e      	bne.n	8006690 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	2270      	movs	r2, #112	; 0x70
 8006656:	401a      	ands	r2, r3
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800665c:	429a      	cmp	r2, r3
 800665e:	d117      	bne.n	8006690 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006660:	697a      	ldr	r2, [r7, #20]
 8006662:	23fe      	movs	r3, #254	; 0xfe
 8006664:	01db      	lsls	r3, r3, #7
 8006666:	401a      	ands	r2, r3
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800666c:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800666e:	429a      	cmp	r2, r3
 8006670:	d10e      	bne.n	8006690 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006672:	697a      	ldr	r2, [r7, #20]
 8006674:	23f8      	movs	r3, #248	; 0xf8
 8006676:	039b      	lsls	r3, r3, #14
 8006678:	401a      	ands	r2, r3
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800667e:	429a      	cmp	r2, r3
 8006680:	d106      	bne.n	8006690 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	0f5b      	lsrs	r3, r3, #29
 8006686:	075a      	lsls	r2, r3, #29
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800668c:	429a      	cmp	r2, r3
 800668e:	d001      	beq.n	8006694 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8006690:	2301      	movs	r3, #1
 8006692:	e000      	b.n	8006696 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8006694:	2300      	movs	r3, #0
}
 8006696:	0018      	movs	r0, r3
 8006698:	46bd      	mov	sp, r7
 800669a:	b008      	add	sp, #32
 800669c:	bd80      	pop	{r7, pc}
 800669e:	46c0      	nop			; (mov r8, r8)
 80066a0:	40021000 	.word	0x40021000
 80066a4:	40007000 	.word	0x40007000
 80066a8:	00001388 	.word	0x00001388
 80066ac:	efffffff 	.word	0xefffffff
 80066b0:	feffffff 	.word	0xfeffffff
 80066b4:	1fc1808c 	.word	0x1fc1808c
 80066b8:	effefffc 	.word	0xeffefffc

080066bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b084      	sub	sp, #16
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d101      	bne.n	80066d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80066cc:	2301      	movs	r3, #1
 80066ce:	e0e9      	b.n	80068a4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80066d0:	4b76      	ldr	r3, [pc, #472]	; (80068ac <HAL_RCC_ClockConfig+0x1f0>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	2207      	movs	r2, #7
 80066d6:	4013      	ands	r3, r2
 80066d8:	683a      	ldr	r2, [r7, #0]
 80066da:	429a      	cmp	r2, r3
 80066dc:	d91e      	bls.n	800671c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066de:	4b73      	ldr	r3, [pc, #460]	; (80068ac <HAL_RCC_ClockConfig+0x1f0>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	2207      	movs	r2, #7
 80066e4:	4393      	bics	r3, r2
 80066e6:	0019      	movs	r1, r3
 80066e8:	4b70      	ldr	r3, [pc, #448]	; (80068ac <HAL_RCC_ClockConfig+0x1f0>)
 80066ea:	683a      	ldr	r2, [r7, #0]
 80066ec:	430a      	orrs	r2, r1
 80066ee:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80066f0:	f7fe f9ca 	bl	8004a88 <HAL_GetTick>
 80066f4:	0003      	movs	r3, r0
 80066f6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80066f8:	e009      	b.n	800670e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066fa:	f7fe f9c5 	bl	8004a88 <HAL_GetTick>
 80066fe:	0002      	movs	r2, r0
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	1ad3      	subs	r3, r2, r3
 8006704:	4a6a      	ldr	r2, [pc, #424]	; (80068b0 <HAL_RCC_ClockConfig+0x1f4>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d901      	bls.n	800670e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800670a:	2303      	movs	r3, #3
 800670c:	e0ca      	b.n	80068a4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800670e:	4b67      	ldr	r3, [pc, #412]	; (80068ac <HAL_RCC_ClockConfig+0x1f0>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	2207      	movs	r2, #7
 8006714:	4013      	ands	r3, r2
 8006716:	683a      	ldr	r2, [r7, #0]
 8006718:	429a      	cmp	r2, r3
 800671a:	d1ee      	bne.n	80066fa <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	2202      	movs	r2, #2
 8006722:	4013      	ands	r3, r2
 8006724:	d015      	beq.n	8006752 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	2204      	movs	r2, #4
 800672c:	4013      	ands	r3, r2
 800672e:	d006      	beq.n	800673e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8006730:	4b60      	ldr	r3, [pc, #384]	; (80068b4 <HAL_RCC_ClockConfig+0x1f8>)
 8006732:	689a      	ldr	r2, [r3, #8]
 8006734:	4b5f      	ldr	r3, [pc, #380]	; (80068b4 <HAL_RCC_ClockConfig+0x1f8>)
 8006736:	21e0      	movs	r1, #224	; 0xe0
 8006738:	01c9      	lsls	r1, r1, #7
 800673a:	430a      	orrs	r2, r1
 800673c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800673e:	4b5d      	ldr	r3, [pc, #372]	; (80068b4 <HAL_RCC_ClockConfig+0x1f8>)
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	4a5d      	ldr	r2, [pc, #372]	; (80068b8 <HAL_RCC_ClockConfig+0x1fc>)
 8006744:	4013      	ands	r3, r2
 8006746:	0019      	movs	r1, r3
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	689a      	ldr	r2, [r3, #8]
 800674c:	4b59      	ldr	r3, [pc, #356]	; (80068b4 <HAL_RCC_ClockConfig+0x1f8>)
 800674e:	430a      	orrs	r2, r1
 8006750:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	2201      	movs	r2, #1
 8006758:	4013      	ands	r3, r2
 800675a:	d057      	beq.n	800680c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	2b01      	cmp	r3, #1
 8006762:	d107      	bne.n	8006774 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006764:	4b53      	ldr	r3, [pc, #332]	; (80068b4 <HAL_RCC_ClockConfig+0x1f8>)
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	2380      	movs	r3, #128	; 0x80
 800676a:	029b      	lsls	r3, r3, #10
 800676c:	4013      	ands	r3, r2
 800676e:	d12b      	bne.n	80067c8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006770:	2301      	movs	r3, #1
 8006772:	e097      	b.n	80068a4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	2b02      	cmp	r3, #2
 800677a:	d107      	bne.n	800678c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800677c:	4b4d      	ldr	r3, [pc, #308]	; (80068b4 <HAL_RCC_ClockConfig+0x1f8>)
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	2380      	movs	r3, #128	; 0x80
 8006782:	049b      	lsls	r3, r3, #18
 8006784:	4013      	ands	r3, r2
 8006786:	d11f      	bne.n	80067c8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006788:	2301      	movs	r3, #1
 800678a:	e08b      	b.n	80068a4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d107      	bne.n	80067a4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006794:	4b47      	ldr	r3, [pc, #284]	; (80068b4 <HAL_RCC_ClockConfig+0x1f8>)
 8006796:	681a      	ldr	r2, [r3, #0]
 8006798:	2380      	movs	r3, #128	; 0x80
 800679a:	00db      	lsls	r3, r3, #3
 800679c:	4013      	ands	r3, r2
 800679e:	d113      	bne.n	80067c8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80067a0:	2301      	movs	r3, #1
 80067a2:	e07f      	b.n	80068a4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	2b03      	cmp	r3, #3
 80067aa:	d106      	bne.n	80067ba <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80067ac:	4b41      	ldr	r3, [pc, #260]	; (80068b4 <HAL_RCC_ClockConfig+0x1f8>)
 80067ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067b0:	2202      	movs	r2, #2
 80067b2:	4013      	ands	r3, r2
 80067b4:	d108      	bne.n	80067c8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80067b6:	2301      	movs	r3, #1
 80067b8:	e074      	b.n	80068a4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80067ba:	4b3e      	ldr	r3, [pc, #248]	; (80068b4 <HAL_RCC_ClockConfig+0x1f8>)
 80067bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067be:	2202      	movs	r2, #2
 80067c0:	4013      	ands	r3, r2
 80067c2:	d101      	bne.n	80067c8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80067c4:	2301      	movs	r3, #1
 80067c6:	e06d      	b.n	80068a4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80067c8:	4b3a      	ldr	r3, [pc, #232]	; (80068b4 <HAL_RCC_ClockConfig+0x1f8>)
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	2207      	movs	r2, #7
 80067ce:	4393      	bics	r3, r2
 80067d0:	0019      	movs	r1, r3
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	685a      	ldr	r2, [r3, #4]
 80067d6:	4b37      	ldr	r3, [pc, #220]	; (80068b4 <HAL_RCC_ClockConfig+0x1f8>)
 80067d8:	430a      	orrs	r2, r1
 80067da:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067dc:	f7fe f954 	bl	8004a88 <HAL_GetTick>
 80067e0:	0003      	movs	r3, r0
 80067e2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067e4:	e009      	b.n	80067fa <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067e6:	f7fe f94f 	bl	8004a88 <HAL_GetTick>
 80067ea:	0002      	movs	r2, r0
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	1ad3      	subs	r3, r2, r3
 80067f0:	4a2f      	ldr	r2, [pc, #188]	; (80068b0 <HAL_RCC_ClockConfig+0x1f4>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d901      	bls.n	80067fa <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80067f6:	2303      	movs	r3, #3
 80067f8:	e054      	b.n	80068a4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067fa:	4b2e      	ldr	r3, [pc, #184]	; (80068b4 <HAL_RCC_ClockConfig+0x1f8>)
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	2238      	movs	r2, #56	; 0x38
 8006800:	401a      	ands	r2, r3
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	00db      	lsls	r3, r3, #3
 8006808:	429a      	cmp	r2, r3
 800680a:	d1ec      	bne.n	80067e6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800680c:	4b27      	ldr	r3, [pc, #156]	; (80068ac <HAL_RCC_ClockConfig+0x1f0>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	2207      	movs	r2, #7
 8006812:	4013      	ands	r3, r2
 8006814:	683a      	ldr	r2, [r7, #0]
 8006816:	429a      	cmp	r2, r3
 8006818:	d21e      	bcs.n	8006858 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800681a:	4b24      	ldr	r3, [pc, #144]	; (80068ac <HAL_RCC_ClockConfig+0x1f0>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	2207      	movs	r2, #7
 8006820:	4393      	bics	r3, r2
 8006822:	0019      	movs	r1, r3
 8006824:	4b21      	ldr	r3, [pc, #132]	; (80068ac <HAL_RCC_ClockConfig+0x1f0>)
 8006826:	683a      	ldr	r2, [r7, #0]
 8006828:	430a      	orrs	r2, r1
 800682a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800682c:	f7fe f92c 	bl	8004a88 <HAL_GetTick>
 8006830:	0003      	movs	r3, r0
 8006832:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006834:	e009      	b.n	800684a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006836:	f7fe f927 	bl	8004a88 <HAL_GetTick>
 800683a:	0002      	movs	r2, r0
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	1ad3      	subs	r3, r2, r3
 8006840:	4a1b      	ldr	r2, [pc, #108]	; (80068b0 <HAL_RCC_ClockConfig+0x1f4>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d901      	bls.n	800684a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8006846:	2303      	movs	r3, #3
 8006848:	e02c      	b.n	80068a4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800684a:	4b18      	ldr	r3, [pc, #96]	; (80068ac <HAL_RCC_ClockConfig+0x1f0>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	2207      	movs	r2, #7
 8006850:	4013      	ands	r3, r2
 8006852:	683a      	ldr	r2, [r7, #0]
 8006854:	429a      	cmp	r2, r3
 8006856:	d1ee      	bne.n	8006836 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	2204      	movs	r2, #4
 800685e:	4013      	ands	r3, r2
 8006860:	d009      	beq.n	8006876 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8006862:	4b14      	ldr	r3, [pc, #80]	; (80068b4 <HAL_RCC_ClockConfig+0x1f8>)
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	4a15      	ldr	r2, [pc, #84]	; (80068bc <HAL_RCC_ClockConfig+0x200>)
 8006868:	4013      	ands	r3, r2
 800686a:	0019      	movs	r1, r3
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	68da      	ldr	r2, [r3, #12]
 8006870:	4b10      	ldr	r3, [pc, #64]	; (80068b4 <HAL_RCC_ClockConfig+0x1f8>)
 8006872:	430a      	orrs	r2, r1
 8006874:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8006876:	f000 f829 	bl	80068cc <HAL_RCC_GetSysClockFreq>
 800687a:	0001      	movs	r1, r0
 800687c:	4b0d      	ldr	r3, [pc, #52]	; (80068b4 <HAL_RCC_ClockConfig+0x1f8>)
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	0a1b      	lsrs	r3, r3, #8
 8006882:	220f      	movs	r2, #15
 8006884:	401a      	ands	r2, r3
 8006886:	4b0e      	ldr	r3, [pc, #56]	; (80068c0 <HAL_RCC_ClockConfig+0x204>)
 8006888:	0092      	lsls	r2, r2, #2
 800688a:	58d3      	ldr	r3, [r2, r3]
 800688c:	221f      	movs	r2, #31
 800688e:	4013      	ands	r3, r2
 8006890:	000a      	movs	r2, r1
 8006892:	40da      	lsrs	r2, r3
 8006894:	4b0b      	ldr	r3, [pc, #44]	; (80068c4 <HAL_RCC_ClockConfig+0x208>)
 8006896:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006898:	4b0b      	ldr	r3, [pc, #44]	; (80068c8 <HAL_RCC_ClockConfig+0x20c>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	0018      	movs	r0, r3
 800689e:	f7fe f897 	bl	80049d0 <HAL_InitTick>
 80068a2:	0003      	movs	r3, r0
}
 80068a4:	0018      	movs	r0, r3
 80068a6:	46bd      	mov	sp, r7
 80068a8:	b004      	add	sp, #16
 80068aa:	bd80      	pop	{r7, pc}
 80068ac:	40022000 	.word	0x40022000
 80068b0:	00001388 	.word	0x00001388
 80068b4:	40021000 	.word	0x40021000
 80068b8:	fffff0ff 	.word	0xfffff0ff
 80068bc:	ffff8fff 	.word	0xffff8fff
 80068c0:	08009b18 	.word	0x08009b18
 80068c4:	2000000c 	.word	0x2000000c
 80068c8:	20000010 	.word	0x20000010

080068cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b086      	sub	sp, #24
 80068d0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80068d2:	4b3c      	ldr	r3, [pc, #240]	; (80069c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80068d4:	689b      	ldr	r3, [r3, #8]
 80068d6:	2238      	movs	r2, #56	; 0x38
 80068d8:	4013      	ands	r3, r2
 80068da:	d10f      	bne.n	80068fc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80068dc:	4b39      	ldr	r3, [pc, #228]	; (80069c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	0adb      	lsrs	r3, r3, #11
 80068e2:	2207      	movs	r2, #7
 80068e4:	4013      	ands	r3, r2
 80068e6:	2201      	movs	r2, #1
 80068e8:	409a      	lsls	r2, r3
 80068ea:	0013      	movs	r3, r2
 80068ec:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80068ee:	6839      	ldr	r1, [r7, #0]
 80068f0:	4835      	ldr	r0, [pc, #212]	; (80069c8 <HAL_RCC_GetSysClockFreq+0xfc>)
 80068f2:	f7f9 fc05 	bl	8000100 <__udivsi3>
 80068f6:	0003      	movs	r3, r0
 80068f8:	613b      	str	r3, [r7, #16]
 80068fa:	e05d      	b.n	80069b8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80068fc:	4b31      	ldr	r3, [pc, #196]	; (80069c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80068fe:	689b      	ldr	r3, [r3, #8]
 8006900:	2238      	movs	r2, #56	; 0x38
 8006902:	4013      	ands	r3, r2
 8006904:	2b08      	cmp	r3, #8
 8006906:	d102      	bne.n	800690e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006908:	4b30      	ldr	r3, [pc, #192]	; (80069cc <HAL_RCC_GetSysClockFreq+0x100>)
 800690a:	613b      	str	r3, [r7, #16]
 800690c:	e054      	b.n	80069b8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800690e:	4b2d      	ldr	r3, [pc, #180]	; (80069c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	2238      	movs	r2, #56	; 0x38
 8006914:	4013      	ands	r3, r2
 8006916:	2b10      	cmp	r3, #16
 8006918:	d138      	bne.n	800698c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800691a:	4b2a      	ldr	r3, [pc, #168]	; (80069c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800691c:	68db      	ldr	r3, [r3, #12]
 800691e:	2203      	movs	r2, #3
 8006920:	4013      	ands	r3, r2
 8006922:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006924:	4b27      	ldr	r3, [pc, #156]	; (80069c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006926:	68db      	ldr	r3, [r3, #12]
 8006928:	091b      	lsrs	r3, r3, #4
 800692a:	2207      	movs	r2, #7
 800692c:	4013      	ands	r3, r2
 800692e:	3301      	adds	r3, #1
 8006930:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2b03      	cmp	r3, #3
 8006936:	d10d      	bne.n	8006954 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006938:	68b9      	ldr	r1, [r7, #8]
 800693a:	4824      	ldr	r0, [pc, #144]	; (80069cc <HAL_RCC_GetSysClockFreq+0x100>)
 800693c:	f7f9 fbe0 	bl	8000100 <__udivsi3>
 8006940:	0003      	movs	r3, r0
 8006942:	0019      	movs	r1, r3
 8006944:	4b1f      	ldr	r3, [pc, #124]	; (80069c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006946:	68db      	ldr	r3, [r3, #12]
 8006948:	0a1b      	lsrs	r3, r3, #8
 800694a:	227f      	movs	r2, #127	; 0x7f
 800694c:	4013      	ands	r3, r2
 800694e:	434b      	muls	r3, r1
 8006950:	617b      	str	r3, [r7, #20]
        break;
 8006952:	e00d      	b.n	8006970 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8006954:	68b9      	ldr	r1, [r7, #8]
 8006956:	481c      	ldr	r0, [pc, #112]	; (80069c8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8006958:	f7f9 fbd2 	bl	8000100 <__udivsi3>
 800695c:	0003      	movs	r3, r0
 800695e:	0019      	movs	r1, r3
 8006960:	4b18      	ldr	r3, [pc, #96]	; (80069c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006962:	68db      	ldr	r3, [r3, #12]
 8006964:	0a1b      	lsrs	r3, r3, #8
 8006966:	227f      	movs	r2, #127	; 0x7f
 8006968:	4013      	ands	r3, r2
 800696a:	434b      	muls	r3, r1
 800696c:	617b      	str	r3, [r7, #20]
        break;
 800696e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8006970:	4b14      	ldr	r3, [pc, #80]	; (80069c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006972:	68db      	ldr	r3, [r3, #12]
 8006974:	0f5b      	lsrs	r3, r3, #29
 8006976:	2207      	movs	r2, #7
 8006978:	4013      	ands	r3, r2
 800697a:	3301      	adds	r3, #1
 800697c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800697e:	6879      	ldr	r1, [r7, #4]
 8006980:	6978      	ldr	r0, [r7, #20]
 8006982:	f7f9 fbbd 	bl	8000100 <__udivsi3>
 8006986:	0003      	movs	r3, r0
 8006988:	613b      	str	r3, [r7, #16]
 800698a:	e015      	b.n	80069b8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800698c:	4b0d      	ldr	r3, [pc, #52]	; (80069c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	2238      	movs	r2, #56	; 0x38
 8006992:	4013      	ands	r3, r2
 8006994:	2b20      	cmp	r3, #32
 8006996:	d103      	bne.n	80069a0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8006998:	2380      	movs	r3, #128	; 0x80
 800699a:	021b      	lsls	r3, r3, #8
 800699c:	613b      	str	r3, [r7, #16]
 800699e:	e00b      	b.n	80069b8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80069a0:	4b08      	ldr	r3, [pc, #32]	; (80069c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	2238      	movs	r2, #56	; 0x38
 80069a6:	4013      	ands	r3, r2
 80069a8:	2b18      	cmp	r3, #24
 80069aa:	d103      	bne.n	80069b4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80069ac:	23fa      	movs	r3, #250	; 0xfa
 80069ae:	01db      	lsls	r3, r3, #7
 80069b0:	613b      	str	r3, [r7, #16]
 80069b2:	e001      	b.n	80069b8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80069b4:	2300      	movs	r3, #0
 80069b6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80069b8:	693b      	ldr	r3, [r7, #16]
}
 80069ba:	0018      	movs	r0, r3
 80069bc:	46bd      	mov	sp, r7
 80069be:	b006      	add	sp, #24
 80069c0:	bd80      	pop	{r7, pc}
 80069c2:	46c0      	nop			; (mov r8, r8)
 80069c4:	40021000 	.word	0x40021000
 80069c8:	00f42400 	.word	0x00f42400
 80069cc:	007a1200 	.word	0x007a1200

080069d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80069d4:	4b02      	ldr	r3, [pc, #8]	; (80069e0 <HAL_RCC_GetHCLKFreq+0x10>)
 80069d6:	681b      	ldr	r3, [r3, #0]
}
 80069d8:	0018      	movs	r0, r3
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}
 80069de:	46c0      	nop			; (mov r8, r8)
 80069e0:	2000000c 	.word	0x2000000c

080069e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80069e4:	b5b0      	push	{r4, r5, r7, lr}
 80069e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80069e8:	f7ff fff2 	bl	80069d0 <HAL_RCC_GetHCLKFreq>
 80069ec:	0004      	movs	r4, r0
 80069ee:	f7ff fb49 	bl	8006084 <LL_RCC_GetAPB1Prescaler>
 80069f2:	0003      	movs	r3, r0
 80069f4:	0b1a      	lsrs	r2, r3, #12
 80069f6:	4b05      	ldr	r3, [pc, #20]	; (8006a0c <HAL_RCC_GetPCLK1Freq+0x28>)
 80069f8:	0092      	lsls	r2, r2, #2
 80069fa:	58d3      	ldr	r3, [r2, r3]
 80069fc:	221f      	movs	r2, #31
 80069fe:	4013      	ands	r3, r2
 8006a00:	40dc      	lsrs	r4, r3
 8006a02:	0023      	movs	r3, r4
}
 8006a04:	0018      	movs	r0, r3
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bdb0      	pop	{r4, r5, r7, pc}
 8006a0a:	46c0      	nop			; (mov r8, r8)
 8006a0c:	08009b58 	.word	0x08009b58

08006a10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b086      	sub	sp, #24
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8006a18:	2313      	movs	r3, #19
 8006a1a:	18fb      	adds	r3, r7, r3
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006a20:	2312      	movs	r3, #18
 8006a22:	18fb      	adds	r3, r7, r3
 8006a24:	2200      	movs	r2, #0
 8006a26:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	2380      	movs	r3, #128	; 0x80
 8006a2e:	029b      	lsls	r3, r3, #10
 8006a30:	4013      	ands	r3, r2
 8006a32:	d100      	bne.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8006a34:	e0a3      	b.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a36:	2011      	movs	r0, #17
 8006a38:	183b      	adds	r3, r7, r0
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a3e:	4b7f      	ldr	r3, [pc, #508]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006a40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a42:	2380      	movs	r3, #128	; 0x80
 8006a44:	055b      	lsls	r3, r3, #21
 8006a46:	4013      	ands	r3, r2
 8006a48:	d110      	bne.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a4a:	4b7c      	ldr	r3, [pc, #496]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006a4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a4e:	4b7b      	ldr	r3, [pc, #492]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006a50:	2180      	movs	r1, #128	; 0x80
 8006a52:	0549      	lsls	r1, r1, #21
 8006a54:	430a      	orrs	r2, r1
 8006a56:	63da      	str	r2, [r3, #60]	; 0x3c
 8006a58:	4b78      	ldr	r3, [pc, #480]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006a5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a5c:	2380      	movs	r3, #128	; 0x80
 8006a5e:	055b      	lsls	r3, r3, #21
 8006a60:	4013      	ands	r3, r2
 8006a62:	60bb      	str	r3, [r7, #8]
 8006a64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a66:	183b      	adds	r3, r7, r0
 8006a68:	2201      	movs	r2, #1
 8006a6a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006a6c:	4b74      	ldr	r3, [pc, #464]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006a6e:	681a      	ldr	r2, [r3, #0]
 8006a70:	4b73      	ldr	r3, [pc, #460]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006a72:	2180      	movs	r1, #128	; 0x80
 8006a74:	0049      	lsls	r1, r1, #1
 8006a76:	430a      	orrs	r2, r1
 8006a78:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006a7a:	f7fe f805 	bl	8004a88 <HAL_GetTick>
 8006a7e:	0003      	movs	r3, r0
 8006a80:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006a82:	e00b      	b.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a84:	f7fe f800 	bl	8004a88 <HAL_GetTick>
 8006a88:	0002      	movs	r2, r0
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	1ad3      	subs	r3, r2, r3
 8006a8e:	2b02      	cmp	r3, #2
 8006a90:	d904      	bls.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8006a92:	2313      	movs	r3, #19
 8006a94:	18fb      	adds	r3, r7, r3
 8006a96:	2203      	movs	r2, #3
 8006a98:	701a      	strb	r2, [r3, #0]
        break;
 8006a9a:	e005      	b.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006a9c:	4b68      	ldr	r3, [pc, #416]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	2380      	movs	r3, #128	; 0x80
 8006aa2:	005b      	lsls	r3, r3, #1
 8006aa4:	4013      	ands	r3, r2
 8006aa6:	d0ed      	beq.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8006aa8:	2313      	movs	r3, #19
 8006aaa:	18fb      	adds	r3, r7, r3
 8006aac:	781b      	ldrb	r3, [r3, #0]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d154      	bne.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006ab2:	4b62      	ldr	r3, [pc, #392]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006ab4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006ab6:	23c0      	movs	r3, #192	; 0xc0
 8006ab8:	009b      	lsls	r3, r3, #2
 8006aba:	4013      	ands	r3, r2
 8006abc:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d019      	beq.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	695b      	ldr	r3, [r3, #20]
 8006ac8:	697a      	ldr	r2, [r7, #20]
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d014      	beq.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006ace:	4b5b      	ldr	r3, [pc, #364]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006ad0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ad2:	4a5c      	ldr	r2, [pc, #368]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8006ad4:	4013      	ands	r3, r2
 8006ad6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006ad8:	4b58      	ldr	r3, [pc, #352]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006ada:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006adc:	4b57      	ldr	r3, [pc, #348]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006ade:	2180      	movs	r1, #128	; 0x80
 8006ae0:	0249      	lsls	r1, r1, #9
 8006ae2:	430a      	orrs	r2, r1
 8006ae4:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006ae6:	4b55      	ldr	r3, [pc, #340]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006ae8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006aea:	4b54      	ldr	r3, [pc, #336]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006aec:	4956      	ldr	r1, [pc, #344]	; (8006c48 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8006aee:	400a      	ands	r2, r1
 8006af0:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006af2:	4b52      	ldr	r3, [pc, #328]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006af4:	697a      	ldr	r2, [r7, #20]
 8006af6:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	2201      	movs	r2, #1
 8006afc:	4013      	ands	r3, r2
 8006afe:	d016      	beq.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b00:	f7fd ffc2 	bl	8004a88 <HAL_GetTick>
 8006b04:	0003      	movs	r3, r0
 8006b06:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b08:	e00c      	b.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b0a:	f7fd ffbd 	bl	8004a88 <HAL_GetTick>
 8006b0e:	0002      	movs	r2, r0
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	1ad3      	subs	r3, r2, r3
 8006b14:	4a4d      	ldr	r2, [pc, #308]	; (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d904      	bls.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8006b1a:	2313      	movs	r3, #19
 8006b1c:	18fb      	adds	r3, r7, r3
 8006b1e:	2203      	movs	r2, #3
 8006b20:	701a      	strb	r2, [r3, #0]
            break;
 8006b22:	e004      	b.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b24:	4b45      	ldr	r3, [pc, #276]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006b26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b28:	2202      	movs	r2, #2
 8006b2a:	4013      	ands	r3, r2
 8006b2c:	d0ed      	beq.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8006b2e:	2313      	movs	r3, #19
 8006b30:	18fb      	adds	r3, r7, r3
 8006b32:	781b      	ldrb	r3, [r3, #0]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d10a      	bne.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006b38:	4b40      	ldr	r3, [pc, #256]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b3c:	4a41      	ldr	r2, [pc, #260]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8006b3e:	4013      	ands	r3, r2
 8006b40:	0019      	movs	r1, r3
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	695a      	ldr	r2, [r3, #20]
 8006b46:	4b3d      	ldr	r3, [pc, #244]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006b48:	430a      	orrs	r2, r1
 8006b4a:	65da      	str	r2, [r3, #92]	; 0x5c
 8006b4c:	e00c      	b.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006b4e:	2312      	movs	r3, #18
 8006b50:	18fb      	adds	r3, r7, r3
 8006b52:	2213      	movs	r2, #19
 8006b54:	18ba      	adds	r2, r7, r2
 8006b56:	7812      	ldrb	r2, [r2, #0]
 8006b58:	701a      	strb	r2, [r3, #0]
 8006b5a:	e005      	b.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b5c:	2312      	movs	r3, #18
 8006b5e:	18fb      	adds	r3, r7, r3
 8006b60:	2213      	movs	r2, #19
 8006b62:	18ba      	adds	r2, r7, r2
 8006b64:	7812      	ldrb	r2, [r2, #0]
 8006b66:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006b68:	2311      	movs	r3, #17
 8006b6a:	18fb      	adds	r3, r7, r3
 8006b6c:	781b      	ldrb	r3, [r3, #0]
 8006b6e:	2b01      	cmp	r3, #1
 8006b70:	d105      	bne.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b72:	4b32      	ldr	r3, [pc, #200]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006b74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b76:	4b31      	ldr	r3, [pc, #196]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006b78:	4935      	ldr	r1, [pc, #212]	; (8006c50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006b7a:	400a      	ands	r2, r1
 8006b7c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	2201      	movs	r2, #1
 8006b84:	4013      	ands	r3, r2
 8006b86:	d009      	beq.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006b88:	4b2c      	ldr	r3, [pc, #176]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006b8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b8c:	2203      	movs	r2, #3
 8006b8e:	4393      	bics	r3, r2
 8006b90:	0019      	movs	r1, r3
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	685a      	ldr	r2, [r3, #4]
 8006b96:	4b29      	ldr	r3, [pc, #164]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006b98:	430a      	orrs	r2, r1
 8006b9a:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	2220      	movs	r2, #32
 8006ba2:	4013      	ands	r3, r2
 8006ba4:	d009      	beq.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006ba6:	4b25      	ldr	r3, [pc, #148]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006baa:	4a2a      	ldr	r2, [pc, #168]	; (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8006bac:	4013      	ands	r3, r2
 8006bae:	0019      	movs	r1, r3
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	689a      	ldr	r2, [r3, #8]
 8006bb4:	4b21      	ldr	r3, [pc, #132]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006bb6:	430a      	orrs	r2, r1
 8006bb8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681a      	ldr	r2, [r3, #0]
 8006bbe:	2380      	movs	r3, #128	; 0x80
 8006bc0:	01db      	lsls	r3, r3, #7
 8006bc2:	4013      	ands	r3, r2
 8006bc4:	d015      	beq.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006bc6:	4b1d      	ldr	r3, [pc, #116]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006bc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bca:	009b      	lsls	r3, r3, #2
 8006bcc:	0899      	lsrs	r1, r3, #2
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	691a      	ldr	r2, [r3, #16]
 8006bd2:	4b1a      	ldr	r3, [pc, #104]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006bd4:	430a      	orrs	r2, r1
 8006bd6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	691a      	ldr	r2, [r3, #16]
 8006bdc:	2380      	movs	r3, #128	; 0x80
 8006bde:	05db      	lsls	r3, r3, #23
 8006be0:	429a      	cmp	r2, r3
 8006be2:	d106      	bne.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8006be4:	4b15      	ldr	r3, [pc, #84]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006be6:	68da      	ldr	r2, [r3, #12]
 8006be8:	4b14      	ldr	r3, [pc, #80]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006bea:	2180      	movs	r1, #128	; 0x80
 8006bec:	0249      	lsls	r1, r1, #9
 8006bee:	430a      	orrs	r2, r1
 8006bf0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681a      	ldr	r2, [r3, #0]
 8006bf6:	2380      	movs	r3, #128	; 0x80
 8006bf8:	011b      	lsls	r3, r3, #4
 8006bfa:	4013      	ands	r3, r2
 8006bfc:	d016      	beq.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8006bfe:	4b0f      	ldr	r3, [pc, #60]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006c00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c02:	4a15      	ldr	r2, [pc, #84]	; (8006c58 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006c04:	4013      	ands	r3, r2
 8006c06:	0019      	movs	r1, r3
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	68da      	ldr	r2, [r3, #12]
 8006c0c:	4b0b      	ldr	r3, [pc, #44]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006c0e:	430a      	orrs	r2, r1
 8006c10:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	68da      	ldr	r2, [r3, #12]
 8006c16:	2380      	movs	r3, #128	; 0x80
 8006c18:	01db      	lsls	r3, r3, #7
 8006c1a:	429a      	cmp	r2, r3
 8006c1c:	d106      	bne.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8006c1e:	4b07      	ldr	r3, [pc, #28]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006c20:	68da      	ldr	r2, [r3, #12]
 8006c22:	4b06      	ldr	r3, [pc, #24]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006c24:	2180      	movs	r1, #128	; 0x80
 8006c26:	0249      	lsls	r1, r1, #9
 8006c28:	430a      	orrs	r2, r1
 8006c2a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8006c2c:	2312      	movs	r3, #18
 8006c2e:	18fb      	adds	r3, r7, r3
 8006c30:	781b      	ldrb	r3, [r3, #0]
}
 8006c32:	0018      	movs	r0, r3
 8006c34:	46bd      	mov	sp, r7
 8006c36:	b006      	add	sp, #24
 8006c38:	bd80      	pop	{r7, pc}
 8006c3a:	46c0      	nop			; (mov r8, r8)
 8006c3c:	40021000 	.word	0x40021000
 8006c40:	40007000 	.word	0x40007000
 8006c44:	fffffcff 	.word	0xfffffcff
 8006c48:	fffeffff 	.word	0xfffeffff
 8006c4c:	00001388 	.word	0x00001388
 8006c50:	efffffff 	.word	0xefffffff
 8006c54:	ffffcfff 	.word	0xffffcfff
 8006c58:	ffff3fff 	.word	0xffff3fff

08006c5c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006c5c:	b5b0      	push	{r4, r5, r7, lr}
 8006c5e:	b084      	sub	sp, #16
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006c64:	230f      	movs	r3, #15
 8006c66:	18fb      	adds	r3, r7, r3
 8006c68:	2201      	movs	r2, #1
 8006c6a:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d100      	bne.n	8006c74 <HAL_RTC_Init+0x18>
 8006c72:	e08c      	b.n	8006d8e <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2229      	movs	r2, #41	; 0x29
 8006c78:	5c9b      	ldrb	r3, [r3, r2]
 8006c7a:	b2db      	uxtb	r3, r3
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d10b      	bne.n	8006c98 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2228      	movs	r2, #40	; 0x28
 8006c84:	2100      	movs	r1, #0
 8006c86:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2288      	movs	r2, #136	; 0x88
 8006c8c:	0212      	lsls	r2, r2, #8
 8006c8e:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	0018      	movs	r0, r3
 8006c94:	f7fd fcee 	bl	8004674 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2229      	movs	r2, #41	; 0x29
 8006c9c:	2102      	movs	r1, #2
 8006c9e:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	68db      	ldr	r3, [r3, #12]
 8006ca6:	2210      	movs	r2, #16
 8006ca8:	4013      	ands	r3, r2
 8006caa:	2b10      	cmp	r3, #16
 8006cac:	d062      	beq.n	8006d74 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	22ca      	movs	r2, #202	; 0xca
 8006cb4:	625a      	str	r2, [r3, #36]	; 0x24
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	2253      	movs	r2, #83	; 0x53
 8006cbc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8006cbe:	250f      	movs	r5, #15
 8006cc0:	197c      	adds	r4, r7, r5
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	0018      	movs	r0, r3
 8006cc6:	f000 f9e4 	bl	8007092 <RTC_EnterInitMode>
 8006cca:	0003      	movs	r3, r0
 8006ccc:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8006cce:	0028      	movs	r0, r5
 8006cd0:	183b      	adds	r3, r7, r0
 8006cd2:	781b      	ldrb	r3, [r3, #0]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d12c      	bne.n	8006d32 <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	699a      	ldr	r2, [r3, #24]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	492e      	ldr	r1, [pc, #184]	; (8006d9c <HAL_RTC_Init+0x140>)
 8006ce4:	400a      	ands	r2, r1
 8006ce6:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	6999      	ldr	r1, [r3, #24]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	689a      	ldr	r2, [r3, #8]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	695b      	ldr	r3, [r3, #20]
 8006cf6:	431a      	orrs	r2, r3
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	69db      	ldr	r3, [r3, #28]
 8006cfc:	431a      	orrs	r2, r3
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	430a      	orrs	r2, r1
 8006d04:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	687a      	ldr	r2, [r7, #4]
 8006d0c:	6912      	ldr	r2, [r2, #16]
 8006d0e:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	6919      	ldr	r1, [r3, #16]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	68db      	ldr	r3, [r3, #12]
 8006d1a:	041a      	lsls	r2, r3, #16
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	430a      	orrs	r2, r1
 8006d22:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8006d24:	183c      	adds	r4, r7, r0
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	0018      	movs	r0, r3
 8006d2a:	f000 f9f5 	bl	8007118 <RTC_ExitInitMode>
 8006d2e:	0003      	movs	r3, r0
 8006d30:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8006d32:	230f      	movs	r3, #15
 8006d34:	18fb      	adds	r3, r7, r3
 8006d36:	781b      	ldrb	r3, [r3, #0]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d116      	bne.n	8006d6a <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	699a      	ldr	r2, [r3, #24]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	00d2      	lsls	r2, r2, #3
 8006d48:	08d2      	lsrs	r2, r2, #3
 8006d4a:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	6999      	ldr	r1, [r3, #24]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6a1b      	ldr	r3, [r3, #32]
 8006d5a:	431a      	orrs	r2, r3
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	699b      	ldr	r3, [r3, #24]
 8006d60:	431a      	orrs	r2, r3
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	430a      	orrs	r2, r1
 8006d68:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	22ff      	movs	r2, #255	; 0xff
 8006d70:	625a      	str	r2, [r3, #36]	; 0x24
 8006d72:	e003      	b.n	8006d7c <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8006d74:	230f      	movs	r3, #15
 8006d76:	18fb      	adds	r3, r7, r3
 8006d78:	2200      	movs	r2, #0
 8006d7a:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8006d7c:	230f      	movs	r3, #15
 8006d7e:	18fb      	adds	r3, r7, r3
 8006d80:	781b      	ldrb	r3, [r3, #0]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d103      	bne.n	8006d8e <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2229      	movs	r2, #41	; 0x29
 8006d8a:	2101      	movs	r1, #1
 8006d8c:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8006d8e:	230f      	movs	r3, #15
 8006d90:	18fb      	adds	r3, r7, r3
 8006d92:	781b      	ldrb	r3, [r3, #0]
}
 8006d94:	0018      	movs	r0, r3
 8006d96:	46bd      	mov	sp, r7
 8006d98:	b004      	add	sp, #16
 8006d9a:	bdb0      	pop	{r4, r5, r7, pc}
 8006d9c:	fb8fffbf 	.word	0xfb8fffbf

08006da0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006da0:	b5b0      	push	{r4, r5, r7, lr}
 8006da2:	b086      	sub	sp, #24
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	60f8      	str	r0, [r7, #12]
 8006da8:	60b9      	str	r1, [r7, #8]
 8006daa:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2228      	movs	r2, #40	; 0x28
 8006db0:	5c9b      	ldrb	r3, [r3, r2]
 8006db2:	2b01      	cmp	r3, #1
 8006db4:	d101      	bne.n	8006dba <HAL_RTC_SetTime+0x1a>
 8006db6:	2302      	movs	r3, #2
 8006db8:	e092      	b.n	8006ee0 <HAL_RTC_SetTime+0x140>
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2228      	movs	r2, #40	; 0x28
 8006dbe:	2101      	movs	r1, #1
 8006dc0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2229      	movs	r2, #41	; 0x29
 8006dc6:	2102      	movs	r1, #2
 8006dc8:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	22ca      	movs	r2, #202	; 0xca
 8006dd0:	625a      	str	r2, [r3, #36]	; 0x24
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	2253      	movs	r2, #83	; 0x53
 8006dd8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006dda:	2513      	movs	r5, #19
 8006ddc:	197c      	adds	r4, r7, r5
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	0018      	movs	r0, r3
 8006de2:	f000 f956 	bl	8007092 <RTC_EnterInitMode>
 8006de6:	0003      	movs	r3, r0
 8006de8:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8006dea:	197b      	adds	r3, r7, r5
 8006dec:	781b      	ldrb	r3, [r3, #0]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d162      	bne.n	8006eb8 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d125      	bne.n	8006e44 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	699b      	ldr	r3, [r3, #24]
 8006dfe:	2240      	movs	r2, #64	; 0x40
 8006e00:	4013      	ands	r3, r2
 8006e02:	d102      	bne.n	8006e0a <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	2200      	movs	r2, #0
 8006e08:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	781b      	ldrb	r3, [r3, #0]
 8006e0e:	0018      	movs	r0, r3
 8006e10:	f000 f9c6 	bl	80071a0 <RTC_ByteToBcd2>
 8006e14:	0003      	movs	r3, r0
 8006e16:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	785b      	ldrb	r3, [r3, #1]
 8006e1c:	0018      	movs	r0, r3
 8006e1e:	f000 f9bf 	bl	80071a0 <RTC_ByteToBcd2>
 8006e22:	0003      	movs	r3, r0
 8006e24:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006e26:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	789b      	ldrb	r3, [r3, #2]
 8006e2c:	0018      	movs	r0, r3
 8006e2e:	f000 f9b7 	bl	80071a0 <RTC_ByteToBcd2>
 8006e32:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006e34:	0022      	movs	r2, r4
 8006e36:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	78db      	ldrb	r3, [r3, #3]
 8006e3c:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	617b      	str	r3, [r7, #20]
 8006e42:	e017      	b.n	8006e74 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	699b      	ldr	r3, [r3, #24]
 8006e4a:	2240      	movs	r2, #64	; 0x40
 8006e4c:	4013      	ands	r3, r2
 8006e4e:	d102      	bne.n	8006e56 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	2200      	movs	r2, #0
 8006e54:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	781b      	ldrb	r3, [r3, #0]
 8006e5a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	785b      	ldrb	r3, [r3, #1]
 8006e60:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006e62:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006e64:	68ba      	ldr	r2, [r7, #8]
 8006e66:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006e68:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	78db      	ldrb	r3, [r3, #3]
 8006e6e:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006e70:	4313      	orrs	r3, r2
 8006e72:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	697a      	ldr	r2, [r7, #20]
 8006e7a:	491b      	ldr	r1, [pc, #108]	; (8006ee8 <HAL_RTC_SetTime+0x148>)
 8006e7c:	400a      	ands	r2, r1
 8006e7e:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	699a      	ldr	r2, [r3, #24]
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4918      	ldr	r1, [pc, #96]	; (8006eec <HAL_RTC_SetTime+0x14c>)
 8006e8c:	400a      	ands	r2, r1
 8006e8e:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	6999      	ldr	r1, [r3, #24]
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	68da      	ldr	r2, [r3, #12]
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	691b      	ldr	r3, [r3, #16]
 8006e9e:	431a      	orrs	r2, r3
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	430a      	orrs	r2, r1
 8006ea6:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006ea8:	2313      	movs	r3, #19
 8006eaa:	18fc      	adds	r4, r7, r3
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	0018      	movs	r0, r3
 8006eb0:	f000 f932 	bl	8007118 <RTC_ExitInitMode>
 8006eb4:	0003      	movs	r3, r0
 8006eb6:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	22ff      	movs	r2, #255	; 0xff
 8006ebe:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 8006ec0:	2313      	movs	r3, #19
 8006ec2:	18fb      	adds	r3, r7, r3
 8006ec4:	781b      	ldrb	r3, [r3, #0]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d103      	bne.n	8006ed2 <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2229      	movs	r2, #41	; 0x29
 8006ece:	2101      	movs	r1, #1
 8006ed0:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2228      	movs	r2, #40	; 0x28
 8006ed6:	2100      	movs	r1, #0
 8006ed8:	5499      	strb	r1, [r3, r2]

  return status;
 8006eda:	2313      	movs	r3, #19
 8006edc:	18fb      	adds	r3, r7, r3
 8006ede:	781b      	ldrb	r3, [r3, #0]
}
 8006ee0:	0018      	movs	r0, r3
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	b006      	add	sp, #24
 8006ee6:	bdb0      	pop	{r4, r5, r7, pc}
 8006ee8:	007f7f7f 	.word	0x007f7f7f
 8006eec:	fffbffff 	.word	0xfffbffff

08006ef0 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b086      	sub	sp, #24
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	60f8      	str	r0, [r7, #12]
 8006ef8:	60b9      	str	r1, [r7, #8]
 8006efa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	689a      	ldr	r2, [r3, #8]
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	691b      	ldr	r3, [r3, #16]
 8006f0c:	045b      	lsls	r3, r3, #17
 8006f0e:	0c5a      	lsrs	r2, r3, #17
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a22      	ldr	r2, [pc, #136]	; (8006fa4 <HAL_RTC_GetTime+0xb4>)
 8006f1c:	4013      	ands	r3, r2
 8006f1e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	0c1b      	lsrs	r3, r3, #16
 8006f24:	b2db      	uxtb	r3, r3
 8006f26:	223f      	movs	r2, #63	; 0x3f
 8006f28:	4013      	ands	r3, r2
 8006f2a:	b2da      	uxtb	r2, r3
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	0a1b      	lsrs	r3, r3, #8
 8006f34:	b2db      	uxtb	r3, r3
 8006f36:	227f      	movs	r2, #127	; 0x7f
 8006f38:	4013      	ands	r3, r2
 8006f3a:	b2da      	uxtb	r2, r3
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	b2db      	uxtb	r3, r3
 8006f44:	227f      	movs	r2, #127	; 0x7f
 8006f46:	4013      	ands	r3, r2
 8006f48:	b2da      	uxtb	r2, r3
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	0d9b      	lsrs	r3, r3, #22
 8006f52:	b2db      	uxtb	r3, r3
 8006f54:	2201      	movs	r2, #1
 8006f56:	4013      	ands	r3, r2
 8006f58:	b2da      	uxtb	r2, r3
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d11a      	bne.n	8006f9a <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	781b      	ldrb	r3, [r3, #0]
 8006f68:	0018      	movs	r0, r3
 8006f6a:	f000 f941 	bl	80071f0 <RTC_Bcd2ToByte>
 8006f6e:	0003      	movs	r3, r0
 8006f70:	001a      	movs	r2, r3
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	785b      	ldrb	r3, [r3, #1]
 8006f7a:	0018      	movs	r0, r3
 8006f7c:	f000 f938 	bl	80071f0 <RTC_Bcd2ToByte>
 8006f80:	0003      	movs	r3, r0
 8006f82:	001a      	movs	r2, r3
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	789b      	ldrb	r3, [r3, #2]
 8006f8c:	0018      	movs	r0, r3
 8006f8e:	f000 f92f 	bl	80071f0 <RTC_Bcd2ToByte>
 8006f92:	0003      	movs	r3, r0
 8006f94:	001a      	movs	r2, r3
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006f9a:	2300      	movs	r3, #0
}
 8006f9c:	0018      	movs	r0, r3
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	b006      	add	sp, #24
 8006fa2:	bd80      	pop	{r7, pc}
 8006fa4:	007f7f7f 	.word	0x007f7f7f

08006fa8 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b086      	sub	sp, #24
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	60f8      	str	r0, [r7, #12]
 8006fb0:	60b9      	str	r1, [r7, #8]
 8006fb2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	4a21      	ldr	r2, [pc, #132]	; (8007040 <HAL_RTC_GetDate+0x98>)
 8006fbc:	4013      	ands	r3, r2
 8006fbe:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	0c1b      	lsrs	r3, r3, #16
 8006fc4:	b2da      	uxtb	r2, r3
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	0a1b      	lsrs	r3, r3, #8
 8006fce:	b2db      	uxtb	r3, r3
 8006fd0:	221f      	movs	r2, #31
 8006fd2:	4013      	ands	r3, r2
 8006fd4:	b2da      	uxtb	r2, r3
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	b2db      	uxtb	r3, r3
 8006fde:	223f      	movs	r2, #63	; 0x3f
 8006fe0:	4013      	ands	r3, r2
 8006fe2:	b2da      	uxtb	r2, r3
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	0b5b      	lsrs	r3, r3, #13
 8006fec:	b2db      	uxtb	r3, r3
 8006fee:	2207      	movs	r2, #7
 8006ff0:	4013      	ands	r3, r2
 8006ff2:	b2da      	uxtb	r2, r3
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d11a      	bne.n	8007034 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	78db      	ldrb	r3, [r3, #3]
 8007002:	0018      	movs	r0, r3
 8007004:	f000 f8f4 	bl	80071f0 <RTC_Bcd2ToByte>
 8007008:	0003      	movs	r3, r0
 800700a:	001a      	movs	r2, r3
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	785b      	ldrb	r3, [r3, #1]
 8007014:	0018      	movs	r0, r3
 8007016:	f000 f8eb 	bl	80071f0 <RTC_Bcd2ToByte>
 800701a:	0003      	movs	r3, r0
 800701c:	001a      	movs	r2, r3
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	789b      	ldrb	r3, [r3, #2]
 8007026:	0018      	movs	r0, r3
 8007028:	f000 f8e2 	bl	80071f0 <RTC_Bcd2ToByte>
 800702c:	0003      	movs	r3, r0
 800702e:	001a      	movs	r2, r3
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8007034:	2300      	movs	r3, #0
}
 8007036:	0018      	movs	r0, r3
 8007038:	46bd      	mov	sp, r7
 800703a:	b006      	add	sp, #24
 800703c:	bd80      	pop	{r7, pc}
 800703e:	46c0      	nop			; (mov r8, r8)
 8007040:	00ffff3f 	.word	0x00ffff3f

08007044 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b084      	sub	sp, #16
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	68da      	ldr	r2, [r3, #12]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	21a0      	movs	r1, #160	; 0xa0
 8007058:	438a      	bics	r2, r1
 800705a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800705c:	f7fd fd14 	bl	8004a88 <HAL_GetTick>
 8007060:	0003      	movs	r3, r0
 8007062:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8007064:	e00a      	b.n	800707c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007066:	f7fd fd0f 	bl	8004a88 <HAL_GetTick>
 800706a:	0002      	movs	r2, r0
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	1ad2      	subs	r2, r2, r3
 8007070:	23fa      	movs	r3, #250	; 0xfa
 8007072:	009b      	lsls	r3, r3, #2
 8007074:	429a      	cmp	r2, r3
 8007076:	d901      	bls.n	800707c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007078:	2303      	movs	r3, #3
 800707a:	e006      	b.n	800708a <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	68db      	ldr	r3, [r3, #12]
 8007082:	2220      	movs	r2, #32
 8007084:	4013      	ands	r3, r2
 8007086:	d0ee      	beq.n	8007066 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8007088:	2300      	movs	r3, #0
}
 800708a:	0018      	movs	r0, r3
 800708c:	46bd      	mov	sp, r7
 800708e:	b004      	add	sp, #16
 8007090:	bd80      	pop	{r7, pc}

08007092 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8007092:	b580      	push	{r7, lr}
 8007094:	b084      	sub	sp, #16
 8007096:	af00      	add	r7, sp, #0
 8007098:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 800709a:	230f      	movs	r3, #15
 800709c:	18fb      	adds	r3, r7, r3
 800709e:	2200      	movs	r2, #0
 80070a0:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	68db      	ldr	r3, [r3, #12]
 80070a8:	2240      	movs	r2, #64	; 0x40
 80070aa:	4013      	ands	r3, r2
 80070ac:	d12c      	bne.n	8007108 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	68da      	ldr	r2, [r3, #12]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	2180      	movs	r1, #128	; 0x80
 80070ba:	430a      	orrs	r2, r1
 80070bc:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80070be:	f7fd fce3 	bl	8004a88 <HAL_GetTick>
 80070c2:	0003      	movs	r3, r0
 80070c4:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80070c6:	e014      	b.n	80070f2 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 80070c8:	f7fd fcde 	bl	8004a88 <HAL_GetTick>
 80070cc:	0002      	movs	r2, r0
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	1ad2      	subs	r2, r2, r3
 80070d2:	200f      	movs	r0, #15
 80070d4:	183b      	adds	r3, r7, r0
 80070d6:	1839      	adds	r1, r7, r0
 80070d8:	7809      	ldrb	r1, [r1, #0]
 80070da:	7019      	strb	r1, [r3, #0]
 80070dc:	23fa      	movs	r3, #250	; 0xfa
 80070de:	009b      	lsls	r3, r3, #2
 80070e0:	429a      	cmp	r2, r3
 80070e2:	d906      	bls.n	80070f2 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 80070e4:	183b      	adds	r3, r7, r0
 80070e6:	2203      	movs	r2, #3
 80070e8:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2229      	movs	r2, #41	; 0x29
 80070ee:	2103      	movs	r1, #3
 80070f0:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	68db      	ldr	r3, [r3, #12]
 80070f8:	2240      	movs	r2, #64	; 0x40
 80070fa:	4013      	ands	r3, r2
 80070fc:	d104      	bne.n	8007108 <RTC_EnterInitMode+0x76>
 80070fe:	230f      	movs	r3, #15
 8007100:	18fb      	adds	r3, r7, r3
 8007102:	781b      	ldrb	r3, [r3, #0]
 8007104:	2b03      	cmp	r3, #3
 8007106:	d1df      	bne.n	80070c8 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8007108:	230f      	movs	r3, #15
 800710a:	18fb      	adds	r3, r7, r3
 800710c:	781b      	ldrb	r3, [r3, #0]
}
 800710e:	0018      	movs	r0, r3
 8007110:	46bd      	mov	sp, r7
 8007112:	b004      	add	sp, #16
 8007114:	bd80      	pop	{r7, pc}
	...

08007118 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007118:	b590      	push	{r4, r7, lr}
 800711a:	b085      	sub	sp, #20
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007120:	240f      	movs	r4, #15
 8007122:	193b      	adds	r3, r7, r4
 8007124:	2200      	movs	r2, #0
 8007126:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8007128:	4b1c      	ldr	r3, [pc, #112]	; (800719c <RTC_ExitInitMode+0x84>)
 800712a:	68da      	ldr	r2, [r3, #12]
 800712c:	4b1b      	ldr	r3, [pc, #108]	; (800719c <RTC_ExitInitMode+0x84>)
 800712e:	2180      	movs	r1, #128	; 0x80
 8007130:	438a      	bics	r2, r1
 8007132:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007134:	4b19      	ldr	r3, [pc, #100]	; (800719c <RTC_ExitInitMode+0x84>)
 8007136:	699b      	ldr	r3, [r3, #24]
 8007138:	2220      	movs	r2, #32
 800713a:	4013      	ands	r3, r2
 800713c:	d10d      	bne.n	800715a <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	0018      	movs	r0, r3
 8007142:	f7ff ff7f 	bl	8007044 <HAL_RTC_WaitForSynchro>
 8007146:	1e03      	subs	r3, r0, #0
 8007148:	d021      	beq.n	800718e <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2229      	movs	r2, #41	; 0x29
 800714e:	2103      	movs	r1, #3
 8007150:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8007152:	193b      	adds	r3, r7, r4
 8007154:	2203      	movs	r2, #3
 8007156:	701a      	strb	r2, [r3, #0]
 8007158:	e019      	b.n	800718e <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800715a:	4b10      	ldr	r3, [pc, #64]	; (800719c <RTC_ExitInitMode+0x84>)
 800715c:	699a      	ldr	r2, [r3, #24]
 800715e:	4b0f      	ldr	r3, [pc, #60]	; (800719c <RTC_ExitInitMode+0x84>)
 8007160:	2120      	movs	r1, #32
 8007162:	438a      	bics	r2, r1
 8007164:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	0018      	movs	r0, r3
 800716a:	f7ff ff6b 	bl	8007044 <HAL_RTC_WaitForSynchro>
 800716e:	1e03      	subs	r3, r0, #0
 8007170:	d007      	beq.n	8007182 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2229      	movs	r2, #41	; 0x29
 8007176:	2103      	movs	r1, #3
 8007178:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800717a:	230f      	movs	r3, #15
 800717c:	18fb      	adds	r3, r7, r3
 800717e:	2203      	movs	r2, #3
 8007180:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007182:	4b06      	ldr	r3, [pc, #24]	; (800719c <RTC_ExitInitMode+0x84>)
 8007184:	699a      	ldr	r2, [r3, #24]
 8007186:	4b05      	ldr	r3, [pc, #20]	; (800719c <RTC_ExitInitMode+0x84>)
 8007188:	2120      	movs	r1, #32
 800718a:	430a      	orrs	r2, r1
 800718c:	619a      	str	r2, [r3, #24]
  }

  return status;
 800718e:	230f      	movs	r3, #15
 8007190:	18fb      	adds	r3, r7, r3
 8007192:	781b      	ldrb	r3, [r3, #0]
}
 8007194:	0018      	movs	r0, r3
 8007196:	46bd      	mov	sp, r7
 8007198:	b005      	add	sp, #20
 800719a:	bd90      	pop	{r4, r7, pc}
 800719c:	40002800 	.word	0x40002800

080071a0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b084      	sub	sp, #16
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	0002      	movs	r2, r0
 80071a8:	1dfb      	adds	r3, r7, #7
 80071aa:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80071ac:	2300      	movs	r3, #0
 80071ae:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 80071b0:	230b      	movs	r3, #11
 80071b2:	18fb      	adds	r3, r7, r3
 80071b4:	1dfa      	adds	r2, r7, #7
 80071b6:	7812      	ldrb	r2, [r2, #0]
 80071b8:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 80071ba:	e008      	b.n	80071ce <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	3301      	adds	r3, #1
 80071c0:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 80071c2:	220b      	movs	r2, #11
 80071c4:	18bb      	adds	r3, r7, r2
 80071c6:	18ba      	adds	r2, r7, r2
 80071c8:	7812      	ldrb	r2, [r2, #0]
 80071ca:	3a0a      	subs	r2, #10
 80071cc:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 80071ce:	210b      	movs	r1, #11
 80071d0:	187b      	adds	r3, r7, r1
 80071d2:	781b      	ldrb	r3, [r3, #0]
 80071d4:	2b09      	cmp	r3, #9
 80071d6:	d8f1      	bhi.n	80071bc <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	b2db      	uxtb	r3, r3
 80071dc:	011b      	lsls	r3, r3, #4
 80071de:	b2da      	uxtb	r2, r3
 80071e0:	187b      	adds	r3, r7, r1
 80071e2:	781b      	ldrb	r3, [r3, #0]
 80071e4:	4313      	orrs	r3, r2
 80071e6:	b2db      	uxtb	r3, r3
}
 80071e8:	0018      	movs	r0, r3
 80071ea:	46bd      	mov	sp, r7
 80071ec:	b004      	add	sp, #16
 80071ee:	bd80      	pop	{r7, pc}

080071f0 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b084      	sub	sp, #16
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	0002      	movs	r2, r0
 80071f8:	1dfb      	adds	r3, r7, #7
 80071fa:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 80071fc:	1dfb      	adds	r3, r7, #7
 80071fe:	781b      	ldrb	r3, [r3, #0]
 8007200:	091b      	lsrs	r3, r3, #4
 8007202:	b2db      	uxtb	r3, r3
 8007204:	001a      	movs	r2, r3
 8007206:	0013      	movs	r3, r2
 8007208:	009b      	lsls	r3, r3, #2
 800720a:	189b      	adds	r3, r3, r2
 800720c:	005b      	lsls	r3, r3, #1
 800720e:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	b2da      	uxtb	r2, r3
 8007214:	1dfb      	adds	r3, r7, #7
 8007216:	781b      	ldrb	r3, [r3, #0]
 8007218:	210f      	movs	r1, #15
 800721a:	400b      	ands	r3, r1
 800721c:	b2db      	uxtb	r3, r3
 800721e:	18d3      	adds	r3, r2, r3
 8007220:	b2db      	uxtb	r3, r3
}
 8007222:	0018      	movs	r0, r3
 8007224:	46bd      	mov	sp, r7
 8007226:	b004      	add	sp, #16
 8007228:	bd80      	pop	{r7, pc}

0800722a <HAL_RTCEx_BKUPWrite>:
  *          specify the register.
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800722a:	b580      	push	{r7, lr}
 800722c:	b086      	sub	sp, #24
 800722e:	af00      	add	r7, sp, #0
 8007230:	60f8      	str	r0, [r7, #12]
 8007232:	60b9      	str	r1, [r7, #8]
 8007234:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  /* Process TAMP instance pointer */
  TAMP_TypeDef *tamp = (TAMP_TypeDef *)((uint32_t)hrtc->Instance + hrtc->TampOffset);
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	001a      	movs	r2, r3
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	18d3      	adds	r3, r2, r3
 8007242:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(tamp->BKP0R);
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	3301      	adds	r3, #1
 8007248:	33ff      	adds	r3, #255	; 0xff
 800724a:	613b      	str	r3, [r7, #16]
  tmp += (BackupRegister * 4U);
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	009b      	lsls	r3, r3, #2
 8007250:	693a      	ldr	r2, [r7, #16]
 8007252:	18d3      	adds	r3, r2, r3
 8007254:	613b      	str	r3, [r7, #16]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	687a      	ldr	r2, [r7, #4]
 800725a:	601a      	str	r2, [r3, #0]
}
 800725c:	46c0      	nop			; (mov r8, r8)
 800725e:	46bd      	mov	sp, r7
 8007260:	b006      	add	sp, #24
 8007262:	bd80      	pop	{r7, pc}

08007264 <HAL_RTCEx_BKUPRead>:
  *         This parameter can be: RTC_BKP_DRx where x can be from 0 to 4
  *         specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b084      	sub	sp, #16
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
 800726c:	6039      	str	r1, [r7, #0]
  uint32_t tmp ;
  /* Process TAMP instance pointer */
  TAMP_TypeDef *tamp = (TAMP_TypeDef *)((uint32_t)hrtc->Instance + hrtc->TampOffset);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	001a      	movs	r2, r3
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	685b      	ldr	r3, [r3, #4]
 8007278:	18d3      	adds	r3, r2, r3
 800727a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(tamp->BKP0R);
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	3301      	adds	r3, #1
 8007280:	33ff      	adds	r3, #255	; 0xff
 8007282:	60bb      	str	r3, [r7, #8]
  tmp += (BackupRegister * 4U);
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	009b      	lsls	r3, r3, #2
 8007288:	68ba      	ldr	r2, [r7, #8]
 800728a:	18d3      	adds	r3, r2, r3
 800728c:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	681b      	ldr	r3, [r3, #0]
}
 8007292:	0018      	movs	r0, r3
 8007294:	46bd      	mov	sp, r7
 8007296:	b004      	add	sp, #16
 8007298:	bd80      	pop	{r7, pc}

0800729a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800729a:	b580      	push	{r7, lr}
 800729c:	b082      	sub	sp, #8
 800729e:	af00      	add	r7, sp, #0
 80072a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d101      	bne.n	80072ac <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80072a8:	2301      	movs	r3, #1
 80072aa:	e04a      	b.n	8007342 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	223d      	movs	r2, #61	; 0x3d
 80072b0:	5c9b      	ldrb	r3, [r3, r2]
 80072b2:	b2db      	uxtb	r3, r3
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d107      	bne.n	80072c8 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	223c      	movs	r2, #60	; 0x3c
 80072bc:	2100      	movs	r1, #0
 80072be:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	0018      	movs	r0, r3
 80072c4:	f7fd fa32 	bl	800472c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	223d      	movs	r2, #61	; 0x3d
 80072cc:	2102      	movs	r1, #2
 80072ce:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681a      	ldr	r2, [r3, #0]
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	3304      	adds	r3, #4
 80072d8:	0019      	movs	r1, r3
 80072da:	0010      	movs	r0, r2
 80072dc:	f000 fc0e 	bl	8007afc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2248      	movs	r2, #72	; 0x48
 80072e4:	2101      	movs	r1, #1
 80072e6:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	223e      	movs	r2, #62	; 0x3e
 80072ec:	2101      	movs	r1, #1
 80072ee:	5499      	strb	r1, [r3, r2]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	223f      	movs	r2, #63	; 0x3f
 80072f4:	2101      	movs	r1, #1
 80072f6:	5499      	strb	r1, [r3, r2]
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2240      	movs	r2, #64	; 0x40
 80072fc:	2101      	movs	r1, #1
 80072fe:	5499      	strb	r1, [r3, r2]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2241      	movs	r2, #65	; 0x41
 8007304:	2101      	movs	r1, #1
 8007306:	5499      	strb	r1, [r3, r2]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2242      	movs	r2, #66	; 0x42
 800730c:	2101      	movs	r1, #1
 800730e:	5499      	strb	r1, [r3, r2]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2243      	movs	r2, #67	; 0x43
 8007314:	2101      	movs	r1, #1
 8007316:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2244      	movs	r2, #68	; 0x44
 800731c:	2101      	movs	r1, #1
 800731e:	5499      	strb	r1, [r3, r2]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2245      	movs	r2, #69	; 0x45
 8007324:	2101      	movs	r1, #1
 8007326:	5499      	strb	r1, [r3, r2]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2246      	movs	r2, #70	; 0x46
 800732c:	2101      	movs	r1, #1
 800732e:	5499      	strb	r1, [r3, r2]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2247      	movs	r2, #71	; 0x47
 8007334:	2101      	movs	r1, #1
 8007336:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	223d      	movs	r2, #61	; 0x3d
 800733c:	2101      	movs	r1, #1
 800733e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007340:	2300      	movs	r3, #0
}
 8007342:	0018      	movs	r0, r3
 8007344:	46bd      	mov	sp, r7
 8007346:	b002      	add	sp, #8
 8007348:	bd80      	pop	{r7, pc}
	...

0800734c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b084      	sub	sp, #16
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	223d      	movs	r2, #61	; 0x3d
 8007358:	5c9b      	ldrb	r3, [r3, r2]
 800735a:	b2db      	uxtb	r3, r3
 800735c:	2b01      	cmp	r3, #1
 800735e:	d001      	beq.n	8007364 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007360:	2301      	movs	r3, #1
 8007362:	e037      	b.n	80073d4 <HAL_TIM_Base_Start_IT+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	223d      	movs	r2, #61	; 0x3d
 8007368:	2102      	movs	r1, #2
 800736a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	68da      	ldr	r2, [r3, #12]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	2101      	movs	r1, #1
 8007378:	430a      	orrs	r2, r1
 800737a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a16      	ldr	r2, [pc, #88]	; (80073dc <HAL_TIM_Base_Start_IT+0x90>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d004      	beq.n	8007390 <HAL_TIM_Base_Start_IT+0x44>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a15      	ldr	r2, [pc, #84]	; (80073e0 <HAL_TIM_Base_Start_IT+0x94>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d116      	bne.n	80073be <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	689b      	ldr	r3, [r3, #8]
 8007396:	4a13      	ldr	r2, [pc, #76]	; (80073e4 <HAL_TIM_Base_Start_IT+0x98>)
 8007398:	4013      	ands	r3, r2
 800739a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2b06      	cmp	r3, #6
 80073a0:	d016      	beq.n	80073d0 <HAL_TIM_Base_Start_IT+0x84>
 80073a2:	68fa      	ldr	r2, [r7, #12]
 80073a4:	2380      	movs	r3, #128	; 0x80
 80073a6:	025b      	lsls	r3, r3, #9
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d011      	beq.n	80073d0 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	681a      	ldr	r2, [r3, #0]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	2101      	movs	r1, #1
 80073b8:	430a      	orrs	r2, r1
 80073ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073bc:	e008      	b.n	80073d0 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	681a      	ldr	r2, [r3, #0]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	2101      	movs	r1, #1
 80073ca:	430a      	orrs	r2, r1
 80073cc:	601a      	str	r2, [r3, #0]
 80073ce:	e000      	b.n	80073d2 <HAL_TIM_Base_Start_IT+0x86>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073d0:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80073d2:	2300      	movs	r3, #0
}
 80073d4:	0018      	movs	r0, r3
 80073d6:	46bd      	mov	sp, r7
 80073d8:	b004      	add	sp, #16
 80073da:	bd80      	pop	{r7, pc}
 80073dc:	40012c00 	.word	0x40012c00
 80073e0:	40000400 	.word	0x40000400
 80073e4:	00010007 	.word	0x00010007

080073e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b082      	sub	sp, #8
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d101      	bne.n	80073fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80073f6:	2301      	movs	r3, #1
 80073f8:	e04a      	b.n	8007490 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	223d      	movs	r2, #61	; 0x3d
 80073fe:	5c9b      	ldrb	r3, [r3, r2]
 8007400:	b2db      	uxtb	r3, r3
 8007402:	2b00      	cmp	r3, #0
 8007404:	d107      	bne.n	8007416 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	223c      	movs	r2, #60	; 0x3c
 800740a:	2100      	movs	r1, #0
 800740c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	0018      	movs	r0, r3
 8007412:	f7fd f96d 	bl	80046f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	223d      	movs	r2, #61	; 0x3d
 800741a:	2102      	movs	r1, #2
 800741c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681a      	ldr	r2, [r3, #0]
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	3304      	adds	r3, #4
 8007426:	0019      	movs	r1, r3
 8007428:	0010      	movs	r0, r2
 800742a:	f000 fb67 	bl	8007afc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2248      	movs	r2, #72	; 0x48
 8007432:	2101      	movs	r1, #1
 8007434:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	223e      	movs	r2, #62	; 0x3e
 800743a:	2101      	movs	r1, #1
 800743c:	5499      	strb	r1, [r3, r2]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	223f      	movs	r2, #63	; 0x3f
 8007442:	2101      	movs	r1, #1
 8007444:	5499      	strb	r1, [r3, r2]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2240      	movs	r2, #64	; 0x40
 800744a:	2101      	movs	r1, #1
 800744c:	5499      	strb	r1, [r3, r2]
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2241      	movs	r2, #65	; 0x41
 8007452:	2101      	movs	r1, #1
 8007454:	5499      	strb	r1, [r3, r2]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2242      	movs	r2, #66	; 0x42
 800745a:	2101      	movs	r1, #1
 800745c:	5499      	strb	r1, [r3, r2]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2243      	movs	r2, #67	; 0x43
 8007462:	2101      	movs	r1, #1
 8007464:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2244      	movs	r2, #68	; 0x44
 800746a:	2101      	movs	r1, #1
 800746c:	5499      	strb	r1, [r3, r2]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2245      	movs	r2, #69	; 0x45
 8007472:	2101      	movs	r1, #1
 8007474:	5499      	strb	r1, [r3, r2]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2246      	movs	r2, #70	; 0x46
 800747a:	2101      	movs	r1, #1
 800747c:	5499      	strb	r1, [r3, r2]
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2247      	movs	r2, #71	; 0x47
 8007482:	2101      	movs	r1, #1
 8007484:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	223d      	movs	r2, #61	; 0x3d
 800748a:	2101      	movs	r1, #1
 800748c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800748e:	2300      	movs	r3, #0
}
 8007490:	0018      	movs	r0, r3
 8007492:	46bd      	mov	sp, r7
 8007494:	b002      	add	sp, #8
 8007496:	bd80      	pop	{r7, pc}

08007498 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b084      	sub	sp, #16
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
 80074a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d108      	bne.n	80074ba <HAL_TIM_PWM_Start+0x22>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	223e      	movs	r2, #62	; 0x3e
 80074ac:	5c9b      	ldrb	r3, [r3, r2]
 80074ae:	b2db      	uxtb	r3, r3
 80074b0:	3b01      	subs	r3, #1
 80074b2:	1e5a      	subs	r2, r3, #1
 80074b4:	4193      	sbcs	r3, r2
 80074b6:	b2db      	uxtb	r3, r3
 80074b8:	e037      	b.n	800752a <HAL_TIM_PWM_Start+0x92>
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	2b04      	cmp	r3, #4
 80074be:	d108      	bne.n	80074d2 <HAL_TIM_PWM_Start+0x3a>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	223f      	movs	r2, #63	; 0x3f
 80074c4:	5c9b      	ldrb	r3, [r3, r2]
 80074c6:	b2db      	uxtb	r3, r3
 80074c8:	3b01      	subs	r3, #1
 80074ca:	1e5a      	subs	r2, r3, #1
 80074cc:	4193      	sbcs	r3, r2
 80074ce:	b2db      	uxtb	r3, r3
 80074d0:	e02b      	b.n	800752a <HAL_TIM_PWM_Start+0x92>
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	2b08      	cmp	r3, #8
 80074d6:	d108      	bne.n	80074ea <HAL_TIM_PWM_Start+0x52>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2240      	movs	r2, #64	; 0x40
 80074dc:	5c9b      	ldrb	r3, [r3, r2]
 80074de:	b2db      	uxtb	r3, r3
 80074e0:	3b01      	subs	r3, #1
 80074e2:	1e5a      	subs	r2, r3, #1
 80074e4:	4193      	sbcs	r3, r2
 80074e6:	b2db      	uxtb	r3, r3
 80074e8:	e01f      	b.n	800752a <HAL_TIM_PWM_Start+0x92>
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	2b0c      	cmp	r3, #12
 80074ee:	d108      	bne.n	8007502 <HAL_TIM_PWM_Start+0x6a>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2241      	movs	r2, #65	; 0x41
 80074f4:	5c9b      	ldrb	r3, [r3, r2]
 80074f6:	b2db      	uxtb	r3, r3
 80074f8:	3b01      	subs	r3, #1
 80074fa:	1e5a      	subs	r2, r3, #1
 80074fc:	4193      	sbcs	r3, r2
 80074fe:	b2db      	uxtb	r3, r3
 8007500:	e013      	b.n	800752a <HAL_TIM_PWM_Start+0x92>
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	2b10      	cmp	r3, #16
 8007506:	d108      	bne.n	800751a <HAL_TIM_PWM_Start+0x82>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2242      	movs	r2, #66	; 0x42
 800750c:	5c9b      	ldrb	r3, [r3, r2]
 800750e:	b2db      	uxtb	r3, r3
 8007510:	3b01      	subs	r3, #1
 8007512:	1e5a      	subs	r2, r3, #1
 8007514:	4193      	sbcs	r3, r2
 8007516:	b2db      	uxtb	r3, r3
 8007518:	e007      	b.n	800752a <HAL_TIM_PWM_Start+0x92>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2243      	movs	r2, #67	; 0x43
 800751e:	5c9b      	ldrb	r3, [r3, r2]
 8007520:	b2db      	uxtb	r3, r3
 8007522:	3b01      	subs	r3, #1
 8007524:	1e5a      	subs	r2, r3, #1
 8007526:	4193      	sbcs	r3, r2
 8007528:	b2db      	uxtb	r3, r3
 800752a:	2b00      	cmp	r3, #0
 800752c:	d001      	beq.n	8007532 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800752e:	2301      	movs	r3, #1
 8007530:	e07b      	b.n	800762a <HAL_TIM_PWM_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d104      	bne.n	8007542 <HAL_TIM_PWM_Start+0xaa>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	223e      	movs	r2, #62	; 0x3e
 800753c:	2102      	movs	r1, #2
 800753e:	5499      	strb	r1, [r3, r2]
 8007540:	e023      	b.n	800758a <HAL_TIM_PWM_Start+0xf2>
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	2b04      	cmp	r3, #4
 8007546:	d104      	bne.n	8007552 <HAL_TIM_PWM_Start+0xba>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	223f      	movs	r2, #63	; 0x3f
 800754c:	2102      	movs	r1, #2
 800754e:	5499      	strb	r1, [r3, r2]
 8007550:	e01b      	b.n	800758a <HAL_TIM_PWM_Start+0xf2>
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	2b08      	cmp	r3, #8
 8007556:	d104      	bne.n	8007562 <HAL_TIM_PWM_Start+0xca>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2240      	movs	r2, #64	; 0x40
 800755c:	2102      	movs	r1, #2
 800755e:	5499      	strb	r1, [r3, r2]
 8007560:	e013      	b.n	800758a <HAL_TIM_PWM_Start+0xf2>
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	2b0c      	cmp	r3, #12
 8007566:	d104      	bne.n	8007572 <HAL_TIM_PWM_Start+0xda>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2241      	movs	r2, #65	; 0x41
 800756c:	2102      	movs	r1, #2
 800756e:	5499      	strb	r1, [r3, r2]
 8007570:	e00b      	b.n	800758a <HAL_TIM_PWM_Start+0xf2>
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	2b10      	cmp	r3, #16
 8007576:	d104      	bne.n	8007582 <HAL_TIM_PWM_Start+0xea>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2242      	movs	r2, #66	; 0x42
 800757c:	2102      	movs	r1, #2
 800757e:	5499      	strb	r1, [r3, r2]
 8007580:	e003      	b.n	800758a <HAL_TIM_PWM_Start+0xf2>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2243      	movs	r2, #67	; 0x43
 8007586:	2102      	movs	r1, #2
 8007588:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	6839      	ldr	r1, [r7, #0]
 8007590:	2201      	movs	r2, #1
 8007592:	0018      	movs	r0, r3
 8007594:	f000 fdba 	bl	800810c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a25      	ldr	r2, [pc, #148]	; (8007634 <HAL_TIM_PWM_Start+0x19c>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d009      	beq.n	80075b6 <HAL_TIM_PWM_Start+0x11e>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a24      	ldr	r2, [pc, #144]	; (8007638 <HAL_TIM_PWM_Start+0x1a0>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d004      	beq.n	80075b6 <HAL_TIM_PWM_Start+0x11e>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a22      	ldr	r2, [pc, #136]	; (800763c <HAL_TIM_PWM_Start+0x1a4>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d101      	bne.n	80075ba <HAL_TIM_PWM_Start+0x122>
 80075b6:	2301      	movs	r3, #1
 80075b8:	e000      	b.n	80075bc <HAL_TIM_PWM_Start+0x124>
 80075ba:	2300      	movs	r3, #0
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d008      	beq.n	80075d2 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	2180      	movs	r1, #128	; 0x80
 80075cc:	0209      	lsls	r1, r1, #8
 80075ce:	430a      	orrs	r2, r1
 80075d0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a17      	ldr	r2, [pc, #92]	; (8007634 <HAL_TIM_PWM_Start+0x19c>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d004      	beq.n	80075e6 <HAL_TIM_PWM_Start+0x14e>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a17      	ldr	r2, [pc, #92]	; (8007640 <HAL_TIM_PWM_Start+0x1a8>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d116      	bne.n	8007614 <HAL_TIM_PWM_Start+0x17c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	689b      	ldr	r3, [r3, #8]
 80075ec:	4a15      	ldr	r2, [pc, #84]	; (8007644 <HAL_TIM_PWM_Start+0x1ac>)
 80075ee:	4013      	ands	r3, r2
 80075f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2b06      	cmp	r3, #6
 80075f6:	d016      	beq.n	8007626 <HAL_TIM_PWM_Start+0x18e>
 80075f8:	68fa      	ldr	r2, [r7, #12]
 80075fa:	2380      	movs	r3, #128	; 0x80
 80075fc:	025b      	lsls	r3, r3, #9
 80075fe:	429a      	cmp	r2, r3
 8007600:	d011      	beq.n	8007626 <HAL_TIM_PWM_Start+0x18e>
    {
      __HAL_TIM_ENABLE(htim);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	681a      	ldr	r2, [r3, #0]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	2101      	movs	r1, #1
 800760e:	430a      	orrs	r2, r1
 8007610:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007612:	e008      	b.n	8007626 <HAL_TIM_PWM_Start+0x18e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	681a      	ldr	r2, [r3, #0]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	2101      	movs	r1, #1
 8007620:	430a      	orrs	r2, r1
 8007622:	601a      	str	r2, [r3, #0]
 8007624:	e000      	b.n	8007628 <HAL_TIM_PWM_Start+0x190>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007626:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8007628:	2300      	movs	r3, #0
}
 800762a:	0018      	movs	r0, r3
 800762c:	46bd      	mov	sp, r7
 800762e:	b004      	add	sp, #16
 8007630:	bd80      	pop	{r7, pc}
 8007632:	46c0      	nop			; (mov r8, r8)
 8007634:	40012c00 	.word	0x40012c00
 8007638:	40014400 	.word	0x40014400
 800763c:	40014800 	.word	0x40014800
 8007640:	40000400 	.word	0x40000400
 8007644:	00010007 	.word	0x00010007

08007648 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b082      	sub	sp, #8
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	691b      	ldr	r3, [r3, #16]
 8007656:	2202      	movs	r2, #2
 8007658:	4013      	ands	r3, r2
 800765a:	2b02      	cmp	r3, #2
 800765c:	d124      	bne.n	80076a8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	68db      	ldr	r3, [r3, #12]
 8007664:	2202      	movs	r2, #2
 8007666:	4013      	ands	r3, r2
 8007668:	2b02      	cmp	r3, #2
 800766a:	d11d      	bne.n	80076a8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	2203      	movs	r2, #3
 8007672:	4252      	negs	r2, r2
 8007674:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2201      	movs	r2, #1
 800767a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	699b      	ldr	r3, [r3, #24]
 8007682:	2203      	movs	r2, #3
 8007684:	4013      	ands	r3, r2
 8007686:	d004      	beq.n	8007692 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	0018      	movs	r0, r3
 800768c:	f000 fa1e 	bl	8007acc <HAL_TIM_IC_CaptureCallback>
 8007690:	e007      	b.n	80076a2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	0018      	movs	r0, r3
 8007696:	f000 fa11 	bl	8007abc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	0018      	movs	r0, r3
 800769e:	f000 fa1d 	bl	8007adc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2200      	movs	r2, #0
 80076a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	691b      	ldr	r3, [r3, #16]
 80076ae:	2204      	movs	r2, #4
 80076b0:	4013      	ands	r3, r2
 80076b2:	2b04      	cmp	r3, #4
 80076b4:	d125      	bne.n	8007702 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	68db      	ldr	r3, [r3, #12]
 80076bc:	2204      	movs	r2, #4
 80076be:	4013      	ands	r3, r2
 80076c0:	2b04      	cmp	r3, #4
 80076c2:	d11e      	bne.n	8007702 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	2205      	movs	r2, #5
 80076ca:	4252      	negs	r2, r2
 80076cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2202      	movs	r2, #2
 80076d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	699a      	ldr	r2, [r3, #24]
 80076da:	23c0      	movs	r3, #192	; 0xc0
 80076dc:	009b      	lsls	r3, r3, #2
 80076de:	4013      	ands	r3, r2
 80076e0:	d004      	beq.n	80076ec <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	0018      	movs	r0, r3
 80076e6:	f000 f9f1 	bl	8007acc <HAL_TIM_IC_CaptureCallback>
 80076ea:	e007      	b.n	80076fc <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	0018      	movs	r0, r3
 80076f0:	f000 f9e4 	bl	8007abc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	0018      	movs	r0, r3
 80076f8:	f000 f9f0 	bl	8007adc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2200      	movs	r2, #0
 8007700:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	691b      	ldr	r3, [r3, #16]
 8007708:	2208      	movs	r2, #8
 800770a:	4013      	ands	r3, r2
 800770c:	2b08      	cmp	r3, #8
 800770e:	d124      	bne.n	800775a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	68db      	ldr	r3, [r3, #12]
 8007716:	2208      	movs	r2, #8
 8007718:	4013      	ands	r3, r2
 800771a:	2b08      	cmp	r3, #8
 800771c:	d11d      	bne.n	800775a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	2209      	movs	r2, #9
 8007724:	4252      	negs	r2, r2
 8007726:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2204      	movs	r2, #4
 800772c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	69db      	ldr	r3, [r3, #28]
 8007734:	2203      	movs	r2, #3
 8007736:	4013      	ands	r3, r2
 8007738:	d004      	beq.n	8007744 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	0018      	movs	r0, r3
 800773e:	f000 f9c5 	bl	8007acc <HAL_TIM_IC_CaptureCallback>
 8007742:	e007      	b.n	8007754 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	0018      	movs	r0, r3
 8007748:	f000 f9b8 	bl	8007abc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	0018      	movs	r0, r3
 8007750:	f000 f9c4 	bl	8007adc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2200      	movs	r2, #0
 8007758:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	691b      	ldr	r3, [r3, #16]
 8007760:	2210      	movs	r2, #16
 8007762:	4013      	ands	r3, r2
 8007764:	2b10      	cmp	r3, #16
 8007766:	d125      	bne.n	80077b4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	68db      	ldr	r3, [r3, #12]
 800776e:	2210      	movs	r2, #16
 8007770:	4013      	ands	r3, r2
 8007772:	2b10      	cmp	r3, #16
 8007774:	d11e      	bne.n	80077b4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	2211      	movs	r2, #17
 800777c:	4252      	negs	r2, r2
 800777e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2208      	movs	r2, #8
 8007784:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	69da      	ldr	r2, [r3, #28]
 800778c:	23c0      	movs	r3, #192	; 0xc0
 800778e:	009b      	lsls	r3, r3, #2
 8007790:	4013      	ands	r3, r2
 8007792:	d004      	beq.n	800779e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	0018      	movs	r0, r3
 8007798:	f000 f998 	bl	8007acc <HAL_TIM_IC_CaptureCallback>
 800779c:	e007      	b.n	80077ae <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	0018      	movs	r0, r3
 80077a2:	f000 f98b 	bl	8007abc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	0018      	movs	r0, r3
 80077aa:	f000 f997 	bl	8007adc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2200      	movs	r2, #0
 80077b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	691b      	ldr	r3, [r3, #16]
 80077ba:	2201      	movs	r2, #1
 80077bc:	4013      	ands	r3, r2
 80077be:	2b01      	cmp	r3, #1
 80077c0:	d10f      	bne.n	80077e2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	68db      	ldr	r3, [r3, #12]
 80077c8:	2201      	movs	r2, #1
 80077ca:	4013      	ands	r3, r2
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	d108      	bne.n	80077e2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	2202      	movs	r2, #2
 80077d6:	4252      	negs	r2, r2
 80077d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	0018      	movs	r0, r3
 80077de:	f000 f965 	bl	8007aac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	691b      	ldr	r3, [r3, #16]
 80077e8:	2280      	movs	r2, #128	; 0x80
 80077ea:	4013      	ands	r3, r2
 80077ec:	2b80      	cmp	r3, #128	; 0x80
 80077ee:	d10f      	bne.n	8007810 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	68db      	ldr	r3, [r3, #12]
 80077f6:	2280      	movs	r2, #128	; 0x80
 80077f8:	4013      	ands	r3, r2
 80077fa:	2b80      	cmp	r3, #128	; 0x80
 80077fc:	d108      	bne.n	8007810 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	2281      	movs	r2, #129	; 0x81
 8007804:	4252      	negs	r2, r2
 8007806:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	0018      	movs	r0, r3
 800780c:	f000 fd0c 	bl	8008228 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	691a      	ldr	r2, [r3, #16]
 8007816:	2380      	movs	r3, #128	; 0x80
 8007818:	005b      	lsls	r3, r3, #1
 800781a:	401a      	ands	r2, r3
 800781c:	2380      	movs	r3, #128	; 0x80
 800781e:	005b      	lsls	r3, r3, #1
 8007820:	429a      	cmp	r2, r3
 8007822:	d10e      	bne.n	8007842 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	68db      	ldr	r3, [r3, #12]
 800782a:	2280      	movs	r2, #128	; 0x80
 800782c:	4013      	ands	r3, r2
 800782e:	2b80      	cmp	r3, #128	; 0x80
 8007830:	d107      	bne.n	8007842 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a1c      	ldr	r2, [pc, #112]	; (80078a8 <HAL_TIM_IRQHandler+0x260>)
 8007838:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	0018      	movs	r0, r3
 800783e:	f000 fcfb 	bl	8008238 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	691b      	ldr	r3, [r3, #16]
 8007848:	2240      	movs	r2, #64	; 0x40
 800784a:	4013      	ands	r3, r2
 800784c:	2b40      	cmp	r3, #64	; 0x40
 800784e:	d10f      	bne.n	8007870 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	68db      	ldr	r3, [r3, #12]
 8007856:	2240      	movs	r2, #64	; 0x40
 8007858:	4013      	ands	r3, r2
 800785a:	2b40      	cmp	r3, #64	; 0x40
 800785c:	d108      	bne.n	8007870 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	2241      	movs	r2, #65	; 0x41
 8007864:	4252      	negs	r2, r2
 8007866:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	0018      	movs	r0, r3
 800786c:	f000 f93e 	bl	8007aec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	691b      	ldr	r3, [r3, #16]
 8007876:	2220      	movs	r2, #32
 8007878:	4013      	ands	r3, r2
 800787a:	2b20      	cmp	r3, #32
 800787c:	d10f      	bne.n	800789e <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	68db      	ldr	r3, [r3, #12]
 8007884:	2220      	movs	r2, #32
 8007886:	4013      	ands	r3, r2
 8007888:	2b20      	cmp	r3, #32
 800788a:	d108      	bne.n	800789e <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	2221      	movs	r2, #33	; 0x21
 8007892:	4252      	negs	r2, r2
 8007894:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	0018      	movs	r0, r3
 800789a:	f000 fcbd 	bl	8008218 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800789e:	46c0      	nop			; (mov r8, r8)
 80078a0:	46bd      	mov	sp, r7
 80078a2:	b002      	add	sp, #8
 80078a4:	bd80      	pop	{r7, pc}
 80078a6:	46c0      	nop			; (mov r8, r8)
 80078a8:	fffffeff 	.word	0xfffffeff

080078ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b086      	sub	sp, #24
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	60f8      	str	r0, [r7, #12]
 80078b4:	60b9      	str	r1, [r7, #8]
 80078b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80078b8:	2317      	movs	r3, #23
 80078ba:	18fb      	adds	r3, r7, r3
 80078bc:	2200      	movs	r2, #0
 80078be:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	223c      	movs	r2, #60	; 0x3c
 80078c4:	5c9b      	ldrb	r3, [r3, r2]
 80078c6:	2b01      	cmp	r3, #1
 80078c8:	d101      	bne.n	80078ce <HAL_TIM_PWM_ConfigChannel+0x22>
 80078ca:	2302      	movs	r3, #2
 80078cc:	e0e5      	b.n	8007a9a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	223c      	movs	r2, #60	; 0x3c
 80078d2:	2101      	movs	r1, #1
 80078d4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2b14      	cmp	r3, #20
 80078da:	d900      	bls.n	80078de <HAL_TIM_PWM_ConfigChannel+0x32>
 80078dc:	e0d1      	b.n	8007a82 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	009a      	lsls	r2, r3, #2
 80078e2:	4b70      	ldr	r3, [pc, #448]	; (8007aa4 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80078e4:	18d3      	adds	r3, r2, r3
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	68ba      	ldr	r2, [r7, #8]
 80078f0:	0011      	movs	r1, r2
 80078f2:	0018      	movs	r0, r3
 80078f4:	f000 f96e 	bl	8007bd4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	699a      	ldr	r2, [r3, #24]
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	2108      	movs	r1, #8
 8007904:	430a      	orrs	r2, r1
 8007906:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	699a      	ldr	r2, [r3, #24]
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	2104      	movs	r1, #4
 8007914:	438a      	bics	r2, r1
 8007916:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	6999      	ldr	r1, [r3, #24]
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	691a      	ldr	r2, [r3, #16]
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	430a      	orrs	r2, r1
 8007928:	619a      	str	r2, [r3, #24]
      break;
 800792a:	e0af      	b.n	8007a8c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	68ba      	ldr	r2, [r7, #8]
 8007932:	0011      	movs	r1, r2
 8007934:	0018      	movs	r0, r3
 8007936:	f000 f9cd 	bl	8007cd4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	699a      	ldr	r2, [r3, #24]
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	2180      	movs	r1, #128	; 0x80
 8007946:	0109      	lsls	r1, r1, #4
 8007948:	430a      	orrs	r2, r1
 800794a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	699a      	ldr	r2, [r3, #24]
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	4954      	ldr	r1, [pc, #336]	; (8007aa8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8007958:	400a      	ands	r2, r1
 800795a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	6999      	ldr	r1, [r3, #24]
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	691b      	ldr	r3, [r3, #16]
 8007966:	021a      	lsls	r2, r3, #8
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	430a      	orrs	r2, r1
 800796e:	619a      	str	r2, [r3, #24]
      break;
 8007970:	e08c      	b.n	8007a8c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	68ba      	ldr	r2, [r7, #8]
 8007978:	0011      	movs	r1, r2
 800797a:	0018      	movs	r0, r3
 800797c:	f000 fa28 	bl	8007dd0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	69da      	ldr	r2, [r3, #28]
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	2108      	movs	r1, #8
 800798c:	430a      	orrs	r2, r1
 800798e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	69da      	ldr	r2, [r3, #28]
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	2104      	movs	r1, #4
 800799c:	438a      	bics	r2, r1
 800799e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	69d9      	ldr	r1, [r3, #28]
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	691a      	ldr	r2, [r3, #16]
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	430a      	orrs	r2, r1
 80079b0:	61da      	str	r2, [r3, #28]
      break;
 80079b2:	e06b      	b.n	8007a8c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	68ba      	ldr	r2, [r7, #8]
 80079ba:	0011      	movs	r1, r2
 80079bc:	0018      	movs	r0, r3
 80079be:	f000 fa89 	bl	8007ed4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	69da      	ldr	r2, [r3, #28]
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	2180      	movs	r1, #128	; 0x80
 80079ce:	0109      	lsls	r1, r1, #4
 80079d0:	430a      	orrs	r2, r1
 80079d2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	69da      	ldr	r2, [r3, #28]
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	4932      	ldr	r1, [pc, #200]	; (8007aa8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80079e0:	400a      	ands	r2, r1
 80079e2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	69d9      	ldr	r1, [r3, #28]
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	691b      	ldr	r3, [r3, #16]
 80079ee:	021a      	lsls	r2, r3, #8
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	430a      	orrs	r2, r1
 80079f6:	61da      	str	r2, [r3, #28]
      break;
 80079f8:	e048      	b.n	8007a8c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	68ba      	ldr	r2, [r7, #8]
 8007a00:	0011      	movs	r1, r2
 8007a02:	0018      	movs	r0, r3
 8007a04:	f000 faca 	bl	8007f9c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	2108      	movs	r1, #8
 8007a14:	430a      	orrs	r2, r1
 8007a16:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	2104      	movs	r1, #4
 8007a24:	438a      	bics	r2, r1
 8007a26:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	691a      	ldr	r2, [r3, #16]
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	430a      	orrs	r2, r1
 8007a38:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007a3a:	e027      	b.n	8007a8c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	68ba      	ldr	r2, [r7, #8]
 8007a42:	0011      	movs	r1, r2
 8007a44:	0018      	movs	r0, r3
 8007a46:	f000 fb03 	bl	8008050 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	2180      	movs	r1, #128	; 0x80
 8007a56:	0109      	lsls	r1, r1, #4
 8007a58:	430a      	orrs	r2, r1
 8007a5a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4910      	ldr	r1, [pc, #64]	; (8007aa8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8007a68:	400a      	ands	r2, r1
 8007a6a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	691b      	ldr	r3, [r3, #16]
 8007a76:	021a      	lsls	r2, r3, #8
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	430a      	orrs	r2, r1
 8007a7e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007a80:	e004      	b.n	8007a8c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8007a82:	2317      	movs	r3, #23
 8007a84:	18fb      	adds	r3, r7, r3
 8007a86:	2201      	movs	r2, #1
 8007a88:	701a      	strb	r2, [r3, #0]
      break;
 8007a8a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	223c      	movs	r2, #60	; 0x3c
 8007a90:	2100      	movs	r1, #0
 8007a92:	5499      	strb	r1, [r3, r2]

  return status;
 8007a94:	2317      	movs	r3, #23
 8007a96:	18fb      	adds	r3, r7, r3
 8007a98:	781b      	ldrb	r3, [r3, #0]
}
 8007a9a:	0018      	movs	r0, r3
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	b006      	add	sp, #24
 8007aa0:	bd80      	pop	{r7, pc}
 8007aa2:	46c0      	nop			; (mov r8, r8)
 8007aa4:	08009b78 	.word	0x08009b78
 8007aa8:	fffffbff 	.word	0xfffffbff

08007aac <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b082      	sub	sp, #8
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007ab4:	46c0      	nop			; (mov r8, r8)
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	b002      	add	sp, #8
 8007aba:	bd80      	pop	{r7, pc}

08007abc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b082      	sub	sp, #8
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007ac4:	46c0      	nop			; (mov r8, r8)
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	b002      	add	sp, #8
 8007aca:	bd80      	pop	{r7, pc}

08007acc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b082      	sub	sp, #8
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007ad4:	46c0      	nop			; (mov r8, r8)
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	b002      	add	sp, #8
 8007ada:	bd80      	pop	{r7, pc}

08007adc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b082      	sub	sp, #8
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007ae4:	46c0      	nop			; (mov r8, r8)
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	b002      	add	sp, #8
 8007aea:	bd80      	pop	{r7, pc}

08007aec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b082      	sub	sp, #8
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007af4:	46c0      	nop			; (mov r8, r8)
 8007af6:	46bd      	mov	sp, r7
 8007af8:	b002      	add	sp, #8
 8007afa:	bd80      	pop	{r7, pc}

08007afc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b084      	sub	sp, #16
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
 8007b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	4a2b      	ldr	r2, [pc, #172]	; (8007bbc <TIM_Base_SetConfig+0xc0>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d003      	beq.n	8007b1c <TIM_Base_SetConfig+0x20>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	4a2a      	ldr	r2, [pc, #168]	; (8007bc0 <TIM_Base_SetConfig+0xc4>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d108      	bne.n	8007b2e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	2270      	movs	r2, #112	; 0x70
 8007b20:	4393      	bics	r3, r2
 8007b22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	685b      	ldr	r3, [r3, #4]
 8007b28:	68fa      	ldr	r2, [r7, #12]
 8007b2a:	4313      	orrs	r3, r2
 8007b2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	4a22      	ldr	r2, [pc, #136]	; (8007bbc <TIM_Base_SetConfig+0xc0>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d00f      	beq.n	8007b56 <TIM_Base_SetConfig+0x5a>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	4a21      	ldr	r2, [pc, #132]	; (8007bc0 <TIM_Base_SetConfig+0xc4>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d00b      	beq.n	8007b56 <TIM_Base_SetConfig+0x5a>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	4a20      	ldr	r2, [pc, #128]	; (8007bc4 <TIM_Base_SetConfig+0xc8>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d007      	beq.n	8007b56 <TIM_Base_SetConfig+0x5a>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	4a1f      	ldr	r2, [pc, #124]	; (8007bc8 <TIM_Base_SetConfig+0xcc>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d003      	beq.n	8007b56 <TIM_Base_SetConfig+0x5a>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	4a1e      	ldr	r2, [pc, #120]	; (8007bcc <TIM_Base_SetConfig+0xd0>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d108      	bne.n	8007b68 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	4a1d      	ldr	r2, [pc, #116]	; (8007bd0 <TIM_Base_SetConfig+0xd4>)
 8007b5a:	4013      	ands	r3, r2
 8007b5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	68db      	ldr	r3, [r3, #12]
 8007b62:	68fa      	ldr	r2, [r7, #12]
 8007b64:	4313      	orrs	r3, r2
 8007b66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	2280      	movs	r2, #128	; 0x80
 8007b6c:	4393      	bics	r3, r2
 8007b6e:	001a      	movs	r2, r3
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	695b      	ldr	r3, [r3, #20]
 8007b74:	4313      	orrs	r3, r2
 8007b76:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	68fa      	ldr	r2, [r7, #12]
 8007b7c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	689a      	ldr	r2, [r3, #8]
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	681a      	ldr	r2, [r3, #0]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	4a0a      	ldr	r2, [pc, #40]	; (8007bbc <TIM_Base_SetConfig+0xc0>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d007      	beq.n	8007ba6 <TIM_Base_SetConfig+0xaa>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	4a0b      	ldr	r2, [pc, #44]	; (8007bc8 <TIM_Base_SetConfig+0xcc>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d003      	beq.n	8007ba6 <TIM_Base_SetConfig+0xaa>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	4a0a      	ldr	r2, [pc, #40]	; (8007bcc <TIM_Base_SetConfig+0xd0>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d103      	bne.n	8007bae <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	691a      	ldr	r2, [r3, #16]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2201      	movs	r2, #1
 8007bb2:	615a      	str	r2, [r3, #20]
}
 8007bb4:	46c0      	nop			; (mov r8, r8)
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	b004      	add	sp, #16
 8007bba:	bd80      	pop	{r7, pc}
 8007bbc:	40012c00 	.word	0x40012c00
 8007bc0:	40000400 	.word	0x40000400
 8007bc4:	40002000 	.word	0x40002000
 8007bc8:	40014400 	.word	0x40014400
 8007bcc:	40014800 	.word	0x40014800
 8007bd0:	fffffcff 	.word	0xfffffcff

08007bd4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b086      	sub	sp, #24
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
 8007bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6a1b      	ldr	r3, [r3, #32]
 8007be2:	2201      	movs	r2, #1
 8007be4:	4393      	bics	r3, r2
 8007be6:	001a      	movs	r2, r3
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6a1b      	ldr	r3, [r3, #32]
 8007bf0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	685b      	ldr	r3, [r3, #4]
 8007bf6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	699b      	ldr	r3, [r3, #24]
 8007bfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	4a2e      	ldr	r2, [pc, #184]	; (8007cbc <TIM_OC1_SetConfig+0xe8>)
 8007c02:	4013      	ands	r3, r2
 8007c04:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	2203      	movs	r2, #3
 8007c0a:	4393      	bics	r3, r2
 8007c0c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	68fa      	ldr	r2, [r7, #12]
 8007c14:	4313      	orrs	r3, r2
 8007c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007c18:	697b      	ldr	r3, [r7, #20]
 8007c1a:	2202      	movs	r2, #2
 8007c1c:	4393      	bics	r3, r2
 8007c1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	689b      	ldr	r3, [r3, #8]
 8007c24:	697a      	ldr	r2, [r7, #20]
 8007c26:	4313      	orrs	r3, r2
 8007c28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	4a24      	ldr	r2, [pc, #144]	; (8007cc0 <TIM_OC1_SetConfig+0xec>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d007      	beq.n	8007c42 <TIM_OC1_SetConfig+0x6e>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	4a23      	ldr	r2, [pc, #140]	; (8007cc4 <TIM_OC1_SetConfig+0xf0>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d003      	beq.n	8007c42 <TIM_OC1_SetConfig+0x6e>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	4a22      	ldr	r2, [pc, #136]	; (8007cc8 <TIM_OC1_SetConfig+0xf4>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d10c      	bne.n	8007c5c <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	2208      	movs	r2, #8
 8007c46:	4393      	bics	r3, r2
 8007c48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	68db      	ldr	r3, [r3, #12]
 8007c4e:	697a      	ldr	r2, [r7, #20]
 8007c50:	4313      	orrs	r3, r2
 8007c52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007c54:	697b      	ldr	r3, [r7, #20]
 8007c56:	2204      	movs	r2, #4
 8007c58:	4393      	bics	r3, r2
 8007c5a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	4a18      	ldr	r2, [pc, #96]	; (8007cc0 <TIM_OC1_SetConfig+0xec>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d007      	beq.n	8007c74 <TIM_OC1_SetConfig+0xa0>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	4a17      	ldr	r2, [pc, #92]	; (8007cc4 <TIM_OC1_SetConfig+0xf0>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d003      	beq.n	8007c74 <TIM_OC1_SetConfig+0xa0>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	4a16      	ldr	r2, [pc, #88]	; (8007cc8 <TIM_OC1_SetConfig+0xf4>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d111      	bne.n	8007c98 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	4a15      	ldr	r2, [pc, #84]	; (8007ccc <TIM_OC1_SetConfig+0xf8>)
 8007c78:	4013      	ands	r3, r2
 8007c7a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	4a14      	ldr	r2, [pc, #80]	; (8007cd0 <TIM_OC1_SetConfig+0xfc>)
 8007c80:	4013      	ands	r3, r2
 8007c82:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	695b      	ldr	r3, [r3, #20]
 8007c88:	693a      	ldr	r2, [r7, #16]
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	699b      	ldr	r3, [r3, #24]
 8007c92:	693a      	ldr	r2, [r7, #16]
 8007c94:	4313      	orrs	r3, r2
 8007c96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	693a      	ldr	r2, [r7, #16]
 8007c9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	68fa      	ldr	r2, [r7, #12]
 8007ca2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	685a      	ldr	r2, [r3, #4]
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	697a      	ldr	r2, [r7, #20]
 8007cb0:	621a      	str	r2, [r3, #32]
}
 8007cb2:	46c0      	nop			; (mov r8, r8)
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	b006      	add	sp, #24
 8007cb8:	bd80      	pop	{r7, pc}
 8007cba:	46c0      	nop			; (mov r8, r8)
 8007cbc:	fffeff8f 	.word	0xfffeff8f
 8007cc0:	40012c00 	.word	0x40012c00
 8007cc4:	40014400 	.word	0x40014400
 8007cc8:	40014800 	.word	0x40014800
 8007ccc:	fffffeff 	.word	0xfffffeff
 8007cd0:	fffffdff 	.word	0xfffffdff

08007cd4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b086      	sub	sp, #24
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
 8007cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6a1b      	ldr	r3, [r3, #32]
 8007ce2:	2210      	movs	r2, #16
 8007ce4:	4393      	bics	r3, r2
 8007ce6:	001a      	movs	r2, r3
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6a1b      	ldr	r3, [r3, #32]
 8007cf0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	699b      	ldr	r3, [r3, #24]
 8007cfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	4a2c      	ldr	r2, [pc, #176]	; (8007db4 <TIM_OC2_SetConfig+0xe0>)
 8007d02:	4013      	ands	r3, r2
 8007d04:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	4a2b      	ldr	r2, [pc, #172]	; (8007db8 <TIM_OC2_SetConfig+0xe4>)
 8007d0a:	4013      	ands	r3, r2
 8007d0c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	021b      	lsls	r3, r3, #8
 8007d14:	68fa      	ldr	r2, [r7, #12]
 8007d16:	4313      	orrs	r3, r2
 8007d18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	2220      	movs	r2, #32
 8007d1e:	4393      	bics	r3, r2
 8007d20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	689b      	ldr	r3, [r3, #8]
 8007d26:	011b      	lsls	r3, r3, #4
 8007d28:	697a      	ldr	r2, [r7, #20]
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	4a22      	ldr	r2, [pc, #136]	; (8007dbc <TIM_OC2_SetConfig+0xe8>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d10d      	bne.n	8007d52 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	2280      	movs	r2, #128	; 0x80
 8007d3a:	4393      	bics	r3, r2
 8007d3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	68db      	ldr	r3, [r3, #12]
 8007d42:	011b      	lsls	r3, r3, #4
 8007d44:	697a      	ldr	r2, [r7, #20]
 8007d46:	4313      	orrs	r3, r2
 8007d48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	2240      	movs	r2, #64	; 0x40
 8007d4e:	4393      	bics	r3, r2
 8007d50:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	4a19      	ldr	r2, [pc, #100]	; (8007dbc <TIM_OC2_SetConfig+0xe8>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d007      	beq.n	8007d6a <TIM_OC2_SetConfig+0x96>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	4a18      	ldr	r2, [pc, #96]	; (8007dc0 <TIM_OC2_SetConfig+0xec>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d003      	beq.n	8007d6a <TIM_OC2_SetConfig+0x96>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	4a17      	ldr	r2, [pc, #92]	; (8007dc4 <TIM_OC2_SetConfig+0xf0>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d113      	bne.n	8007d92 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	4a16      	ldr	r2, [pc, #88]	; (8007dc8 <TIM_OC2_SetConfig+0xf4>)
 8007d6e:	4013      	ands	r3, r2
 8007d70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	4a15      	ldr	r2, [pc, #84]	; (8007dcc <TIM_OC2_SetConfig+0xf8>)
 8007d76:	4013      	ands	r3, r2
 8007d78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	695b      	ldr	r3, [r3, #20]
 8007d7e:	009b      	lsls	r3, r3, #2
 8007d80:	693a      	ldr	r2, [r7, #16]
 8007d82:	4313      	orrs	r3, r2
 8007d84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	699b      	ldr	r3, [r3, #24]
 8007d8a:	009b      	lsls	r3, r3, #2
 8007d8c:	693a      	ldr	r2, [r7, #16]
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	693a      	ldr	r2, [r7, #16]
 8007d96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	68fa      	ldr	r2, [r7, #12]
 8007d9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	685a      	ldr	r2, [r3, #4]
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	697a      	ldr	r2, [r7, #20]
 8007daa:	621a      	str	r2, [r3, #32]
}
 8007dac:	46c0      	nop			; (mov r8, r8)
 8007dae:	46bd      	mov	sp, r7
 8007db0:	b006      	add	sp, #24
 8007db2:	bd80      	pop	{r7, pc}
 8007db4:	feff8fff 	.word	0xfeff8fff
 8007db8:	fffffcff 	.word	0xfffffcff
 8007dbc:	40012c00 	.word	0x40012c00
 8007dc0:	40014400 	.word	0x40014400
 8007dc4:	40014800 	.word	0x40014800
 8007dc8:	fffffbff 	.word	0xfffffbff
 8007dcc:	fffff7ff 	.word	0xfffff7ff

08007dd0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b086      	sub	sp, #24
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6a1b      	ldr	r3, [r3, #32]
 8007dde:	4a33      	ldr	r2, [pc, #204]	; (8007eac <TIM_OC3_SetConfig+0xdc>)
 8007de0:	401a      	ands	r2, r3
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6a1b      	ldr	r3, [r3, #32]
 8007dea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	685b      	ldr	r3, [r3, #4]
 8007df0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	69db      	ldr	r3, [r3, #28]
 8007df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	4a2d      	ldr	r2, [pc, #180]	; (8007eb0 <TIM_OC3_SetConfig+0xe0>)
 8007dfc:	4013      	ands	r3, r2
 8007dfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	2203      	movs	r2, #3
 8007e04:	4393      	bics	r3, r2
 8007e06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	68fa      	ldr	r2, [r7, #12]
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	4a27      	ldr	r2, [pc, #156]	; (8007eb4 <TIM_OC3_SetConfig+0xe4>)
 8007e16:	4013      	ands	r3, r2
 8007e18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	689b      	ldr	r3, [r3, #8]
 8007e1e:	021b      	lsls	r3, r3, #8
 8007e20:	697a      	ldr	r2, [r7, #20]
 8007e22:	4313      	orrs	r3, r2
 8007e24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	4a23      	ldr	r2, [pc, #140]	; (8007eb8 <TIM_OC3_SetConfig+0xe8>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d10d      	bne.n	8007e4a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	4a22      	ldr	r2, [pc, #136]	; (8007ebc <TIM_OC3_SetConfig+0xec>)
 8007e32:	4013      	ands	r3, r2
 8007e34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	68db      	ldr	r3, [r3, #12]
 8007e3a:	021b      	lsls	r3, r3, #8
 8007e3c:	697a      	ldr	r2, [r7, #20]
 8007e3e:	4313      	orrs	r3, r2
 8007e40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	4a1e      	ldr	r2, [pc, #120]	; (8007ec0 <TIM_OC3_SetConfig+0xf0>)
 8007e46:	4013      	ands	r3, r2
 8007e48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	4a1a      	ldr	r2, [pc, #104]	; (8007eb8 <TIM_OC3_SetConfig+0xe8>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d007      	beq.n	8007e62 <TIM_OC3_SetConfig+0x92>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	4a1b      	ldr	r2, [pc, #108]	; (8007ec4 <TIM_OC3_SetConfig+0xf4>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d003      	beq.n	8007e62 <TIM_OC3_SetConfig+0x92>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	4a1a      	ldr	r2, [pc, #104]	; (8007ec8 <TIM_OC3_SetConfig+0xf8>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d113      	bne.n	8007e8a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007e62:	693b      	ldr	r3, [r7, #16]
 8007e64:	4a19      	ldr	r2, [pc, #100]	; (8007ecc <TIM_OC3_SetConfig+0xfc>)
 8007e66:	4013      	ands	r3, r2
 8007e68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	4a18      	ldr	r2, [pc, #96]	; (8007ed0 <TIM_OC3_SetConfig+0x100>)
 8007e6e:	4013      	ands	r3, r2
 8007e70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	695b      	ldr	r3, [r3, #20]
 8007e76:	011b      	lsls	r3, r3, #4
 8007e78:	693a      	ldr	r2, [r7, #16]
 8007e7a:	4313      	orrs	r3, r2
 8007e7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	699b      	ldr	r3, [r3, #24]
 8007e82:	011b      	lsls	r3, r3, #4
 8007e84:	693a      	ldr	r2, [r7, #16]
 8007e86:	4313      	orrs	r3, r2
 8007e88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	693a      	ldr	r2, [r7, #16]
 8007e8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	68fa      	ldr	r2, [r7, #12]
 8007e94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	685a      	ldr	r2, [r3, #4]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	697a      	ldr	r2, [r7, #20]
 8007ea2:	621a      	str	r2, [r3, #32]
}
 8007ea4:	46c0      	nop			; (mov r8, r8)
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	b006      	add	sp, #24
 8007eaa:	bd80      	pop	{r7, pc}
 8007eac:	fffffeff 	.word	0xfffffeff
 8007eb0:	fffeff8f 	.word	0xfffeff8f
 8007eb4:	fffffdff 	.word	0xfffffdff
 8007eb8:	40012c00 	.word	0x40012c00
 8007ebc:	fffff7ff 	.word	0xfffff7ff
 8007ec0:	fffffbff 	.word	0xfffffbff
 8007ec4:	40014400 	.word	0x40014400
 8007ec8:	40014800 	.word	0x40014800
 8007ecc:	ffffefff 	.word	0xffffefff
 8007ed0:	ffffdfff 	.word	0xffffdfff

08007ed4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b086      	sub	sp, #24
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
 8007edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6a1b      	ldr	r3, [r3, #32]
 8007ee2:	4a26      	ldr	r2, [pc, #152]	; (8007f7c <TIM_OC4_SetConfig+0xa8>)
 8007ee4:	401a      	ands	r2, r3
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6a1b      	ldr	r3, [r3, #32]
 8007eee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	685b      	ldr	r3, [r3, #4]
 8007ef4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	69db      	ldr	r3, [r3, #28]
 8007efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	4a20      	ldr	r2, [pc, #128]	; (8007f80 <TIM_OC4_SetConfig+0xac>)
 8007f00:	4013      	ands	r3, r2
 8007f02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	4a1f      	ldr	r2, [pc, #124]	; (8007f84 <TIM_OC4_SetConfig+0xb0>)
 8007f08:	4013      	ands	r3, r2
 8007f0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	021b      	lsls	r3, r3, #8
 8007f12:	68fa      	ldr	r2, [r7, #12]
 8007f14:	4313      	orrs	r3, r2
 8007f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	4a1b      	ldr	r2, [pc, #108]	; (8007f88 <TIM_OC4_SetConfig+0xb4>)
 8007f1c:	4013      	ands	r3, r2
 8007f1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	689b      	ldr	r3, [r3, #8]
 8007f24:	031b      	lsls	r3, r3, #12
 8007f26:	693a      	ldr	r2, [r7, #16]
 8007f28:	4313      	orrs	r3, r2
 8007f2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	4a17      	ldr	r2, [pc, #92]	; (8007f8c <TIM_OC4_SetConfig+0xb8>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d007      	beq.n	8007f44 <TIM_OC4_SetConfig+0x70>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	4a16      	ldr	r2, [pc, #88]	; (8007f90 <TIM_OC4_SetConfig+0xbc>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d003      	beq.n	8007f44 <TIM_OC4_SetConfig+0x70>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	4a15      	ldr	r2, [pc, #84]	; (8007f94 <TIM_OC4_SetConfig+0xc0>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d109      	bne.n	8007f58 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	4a14      	ldr	r2, [pc, #80]	; (8007f98 <TIM_OC4_SetConfig+0xc4>)
 8007f48:	4013      	ands	r3, r2
 8007f4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	695b      	ldr	r3, [r3, #20]
 8007f50:	019b      	lsls	r3, r3, #6
 8007f52:	697a      	ldr	r2, [r7, #20]
 8007f54:	4313      	orrs	r3, r2
 8007f56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	697a      	ldr	r2, [r7, #20]
 8007f5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	68fa      	ldr	r2, [r7, #12]
 8007f62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	685a      	ldr	r2, [r3, #4]
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	693a      	ldr	r2, [r7, #16]
 8007f70:	621a      	str	r2, [r3, #32]
}
 8007f72:	46c0      	nop			; (mov r8, r8)
 8007f74:	46bd      	mov	sp, r7
 8007f76:	b006      	add	sp, #24
 8007f78:	bd80      	pop	{r7, pc}
 8007f7a:	46c0      	nop			; (mov r8, r8)
 8007f7c:	ffffefff 	.word	0xffffefff
 8007f80:	feff8fff 	.word	0xfeff8fff
 8007f84:	fffffcff 	.word	0xfffffcff
 8007f88:	ffffdfff 	.word	0xffffdfff
 8007f8c:	40012c00 	.word	0x40012c00
 8007f90:	40014400 	.word	0x40014400
 8007f94:	40014800 	.word	0x40014800
 8007f98:	ffffbfff 	.word	0xffffbfff

08007f9c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b086      	sub	sp, #24
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
 8007fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6a1b      	ldr	r3, [r3, #32]
 8007faa:	4a23      	ldr	r2, [pc, #140]	; (8008038 <TIM_OC5_SetConfig+0x9c>)
 8007fac:	401a      	ands	r2, r3
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6a1b      	ldr	r3, [r3, #32]
 8007fb6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	685b      	ldr	r3, [r3, #4]
 8007fbc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	4a1d      	ldr	r2, [pc, #116]	; (800803c <TIM_OC5_SetConfig+0xa0>)
 8007fc8:	4013      	ands	r3, r2
 8007fca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	68fa      	ldr	r2, [r7, #12]
 8007fd2:	4313      	orrs	r3, r2
 8007fd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	4a19      	ldr	r2, [pc, #100]	; (8008040 <TIM_OC5_SetConfig+0xa4>)
 8007fda:	4013      	ands	r3, r2
 8007fdc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	689b      	ldr	r3, [r3, #8]
 8007fe2:	041b      	lsls	r3, r3, #16
 8007fe4:	693a      	ldr	r2, [r7, #16]
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	4a15      	ldr	r2, [pc, #84]	; (8008044 <TIM_OC5_SetConfig+0xa8>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d007      	beq.n	8008002 <TIM_OC5_SetConfig+0x66>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	4a14      	ldr	r2, [pc, #80]	; (8008048 <TIM_OC5_SetConfig+0xac>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d003      	beq.n	8008002 <TIM_OC5_SetConfig+0x66>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	4a13      	ldr	r2, [pc, #76]	; (800804c <TIM_OC5_SetConfig+0xb0>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d109      	bne.n	8008016 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	4a0c      	ldr	r2, [pc, #48]	; (8008038 <TIM_OC5_SetConfig+0x9c>)
 8008006:	4013      	ands	r3, r2
 8008008:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	695b      	ldr	r3, [r3, #20]
 800800e:	021b      	lsls	r3, r3, #8
 8008010:	697a      	ldr	r2, [r7, #20]
 8008012:	4313      	orrs	r3, r2
 8008014:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	697a      	ldr	r2, [r7, #20]
 800801a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	68fa      	ldr	r2, [r7, #12]
 8008020:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	685a      	ldr	r2, [r3, #4]
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	693a      	ldr	r2, [r7, #16]
 800802e:	621a      	str	r2, [r3, #32]
}
 8008030:	46c0      	nop			; (mov r8, r8)
 8008032:	46bd      	mov	sp, r7
 8008034:	b006      	add	sp, #24
 8008036:	bd80      	pop	{r7, pc}
 8008038:	fffeffff 	.word	0xfffeffff
 800803c:	fffeff8f 	.word	0xfffeff8f
 8008040:	fffdffff 	.word	0xfffdffff
 8008044:	40012c00 	.word	0x40012c00
 8008048:	40014400 	.word	0x40014400
 800804c:	40014800 	.word	0x40014800

08008050 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b086      	sub	sp, #24
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
 8008058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6a1b      	ldr	r3, [r3, #32]
 800805e:	4a24      	ldr	r2, [pc, #144]	; (80080f0 <TIM_OC6_SetConfig+0xa0>)
 8008060:	401a      	ands	r2, r3
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6a1b      	ldr	r3, [r3, #32]
 800806a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	685b      	ldr	r3, [r3, #4]
 8008070:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	4a1e      	ldr	r2, [pc, #120]	; (80080f4 <TIM_OC6_SetConfig+0xa4>)
 800807c:	4013      	ands	r3, r2
 800807e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	021b      	lsls	r3, r3, #8
 8008086:	68fa      	ldr	r2, [r7, #12]
 8008088:	4313      	orrs	r3, r2
 800808a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	4a1a      	ldr	r2, [pc, #104]	; (80080f8 <TIM_OC6_SetConfig+0xa8>)
 8008090:	4013      	ands	r3, r2
 8008092:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	689b      	ldr	r3, [r3, #8]
 8008098:	051b      	lsls	r3, r3, #20
 800809a:	693a      	ldr	r2, [r7, #16]
 800809c:	4313      	orrs	r3, r2
 800809e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	4a16      	ldr	r2, [pc, #88]	; (80080fc <TIM_OC6_SetConfig+0xac>)
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d007      	beq.n	80080b8 <TIM_OC6_SetConfig+0x68>
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	4a15      	ldr	r2, [pc, #84]	; (8008100 <TIM_OC6_SetConfig+0xb0>)
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d003      	beq.n	80080b8 <TIM_OC6_SetConfig+0x68>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	4a14      	ldr	r2, [pc, #80]	; (8008104 <TIM_OC6_SetConfig+0xb4>)
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d109      	bne.n	80080cc <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80080b8:	697b      	ldr	r3, [r7, #20]
 80080ba:	4a13      	ldr	r2, [pc, #76]	; (8008108 <TIM_OC6_SetConfig+0xb8>)
 80080bc:	4013      	ands	r3, r2
 80080be:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	695b      	ldr	r3, [r3, #20]
 80080c4:	029b      	lsls	r3, r3, #10
 80080c6:	697a      	ldr	r2, [r7, #20]
 80080c8:	4313      	orrs	r3, r2
 80080ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	697a      	ldr	r2, [r7, #20]
 80080d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	68fa      	ldr	r2, [r7, #12]
 80080d6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	685a      	ldr	r2, [r3, #4]
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	693a      	ldr	r2, [r7, #16]
 80080e4:	621a      	str	r2, [r3, #32]
}
 80080e6:	46c0      	nop			; (mov r8, r8)
 80080e8:	46bd      	mov	sp, r7
 80080ea:	b006      	add	sp, #24
 80080ec:	bd80      	pop	{r7, pc}
 80080ee:	46c0      	nop			; (mov r8, r8)
 80080f0:	ffefffff 	.word	0xffefffff
 80080f4:	feff8fff 	.word	0xfeff8fff
 80080f8:	ffdfffff 	.word	0xffdfffff
 80080fc:	40012c00 	.word	0x40012c00
 8008100:	40014400 	.word	0x40014400
 8008104:	40014800 	.word	0x40014800
 8008108:	fffbffff 	.word	0xfffbffff

0800810c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b086      	sub	sp, #24
 8008110:	af00      	add	r7, sp, #0
 8008112:	60f8      	str	r0, [r7, #12]
 8008114:	60b9      	str	r1, [r7, #8]
 8008116:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	221f      	movs	r2, #31
 800811c:	4013      	ands	r3, r2
 800811e:	2201      	movs	r2, #1
 8008120:	409a      	lsls	r2, r3
 8008122:	0013      	movs	r3, r2
 8008124:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	6a1b      	ldr	r3, [r3, #32]
 800812a:	697a      	ldr	r2, [r7, #20]
 800812c:	43d2      	mvns	r2, r2
 800812e:	401a      	ands	r2, r3
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	6a1a      	ldr	r2, [r3, #32]
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	211f      	movs	r1, #31
 800813c:	400b      	ands	r3, r1
 800813e:	6879      	ldr	r1, [r7, #4]
 8008140:	4099      	lsls	r1, r3
 8008142:	000b      	movs	r3, r1
 8008144:	431a      	orrs	r2, r3
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	621a      	str	r2, [r3, #32]
}
 800814a:	46c0      	nop			; (mov r8, r8)
 800814c:	46bd      	mov	sp, r7
 800814e:	b006      	add	sp, #24
 8008150:	bd80      	pop	{r7, pc}
	...

08008154 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b084      	sub	sp, #16
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
 800815c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	223c      	movs	r2, #60	; 0x3c
 8008162:	5c9b      	ldrb	r3, [r3, r2]
 8008164:	2b01      	cmp	r3, #1
 8008166:	d101      	bne.n	800816c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008168:	2302      	movs	r3, #2
 800816a:	e04a      	b.n	8008202 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	223c      	movs	r2, #60	; 0x3c
 8008170:	2101      	movs	r1, #1
 8008172:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	223d      	movs	r2, #61	; 0x3d
 8008178:	2102      	movs	r1, #2
 800817a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	685b      	ldr	r3, [r3, #4]
 8008182:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	689b      	ldr	r3, [r3, #8]
 800818a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4a1e      	ldr	r2, [pc, #120]	; (800820c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d108      	bne.n	80081a8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	4a1d      	ldr	r2, [pc, #116]	; (8008210 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800819a:	4013      	ands	r3, r2
 800819c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	685b      	ldr	r3, [r3, #4]
 80081a2:	68fa      	ldr	r2, [r7, #12]
 80081a4:	4313      	orrs	r3, r2
 80081a6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	2270      	movs	r2, #112	; 0x70
 80081ac:	4393      	bics	r3, r2
 80081ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	68fa      	ldr	r2, [r7, #12]
 80081b6:	4313      	orrs	r3, r2
 80081b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	68fa      	ldr	r2, [r7, #12]
 80081c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4a11      	ldr	r2, [pc, #68]	; (800820c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d004      	beq.n	80081d6 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4a10      	ldr	r2, [pc, #64]	; (8008214 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d10c      	bne.n	80081f0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	2280      	movs	r2, #128	; 0x80
 80081da:	4393      	bics	r3, r2
 80081dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	689b      	ldr	r3, [r3, #8]
 80081e2:	68ba      	ldr	r2, [r7, #8]
 80081e4:	4313      	orrs	r3, r2
 80081e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	68ba      	ldr	r2, [r7, #8]
 80081ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	223d      	movs	r2, #61	; 0x3d
 80081f4:	2101      	movs	r1, #1
 80081f6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	223c      	movs	r2, #60	; 0x3c
 80081fc:	2100      	movs	r1, #0
 80081fe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008200:	2300      	movs	r3, #0
}
 8008202:	0018      	movs	r0, r3
 8008204:	46bd      	mov	sp, r7
 8008206:	b004      	add	sp, #16
 8008208:	bd80      	pop	{r7, pc}
 800820a:	46c0      	nop			; (mov r8, r8)
 800820c:	40012c00 	.word	0x40012c00
 8008210:	ff0fffff 	.word	0xff0fffff
 8008214:	40000400 	.word	0x40000400

08008218 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b082      	sub	sp, #8
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008220:	46c0      	nop			; (mov r8, r8)
 8008222:	46bd      	mov	sp, r7
 8008224:	b002      	add	sp, #8
 8008226:	bd80      	pop	{r7, pc}

08008228 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b082      	sub	sp, #8
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008230:	46c0      	nop			; (mov r8, r8)
 8008232:	46bd      	mov	sp, r7
 8008234:	b002      	add	sp, #8
 8008236:	bd80      	pop	{r7, pc}

08008238 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b082      	sub	sp, #8
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008240:	46c0      	nop			; (mov r8, r8)
 8008242:	46bd      	mov	sp, r7
 8008244:	b002      	add	sp, #8
 8008246:	bd80      	pop	{r7, pc}

08008248 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b082      	sub	sp, #8
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d101      	bne.n	800825a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008256:	2301      	movs	r3, #1
 8008258:	e046      	b.n	80082e8 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2288      	movs	r2, #136	; 0x88
 800825e:	589b      	ldr	r3, [r3, r2]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d107      	bne.n	8008274 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2284      	movs	r2, #132	; 0x84
 8008268:	2100      	movs	r1, #0
 800826a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	0018      	movs	r0, r3
 8008270:	f7fc fac2 	bl	80047f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2288      	movs	r2, #136	; 0x88
 8008278:	2124      	movs	r1, #36	; 0x24
 800827a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	681a      	ldr	r2, [r3, #0]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	2101      	movs	r1, #1
 8008288:	438a      	bics	r2, r1
 800828a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	0018      	movs	r0, r3
 8008290:	f000 f830 	bl	80082f4 <UART_SetConfig>
 8008294:	0003      	movs	r3, r0
 8008296:	2b01      	cmp	r3, #1
 8008298:	d101      	bne.n	800829e <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800829a:	2301      	movs	r3, #1
 800829c:	e024      	b.n	80082e8 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d003      	beq.n	80082ae <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	0018      	movs	r0, r3
 80082aa:	f000 f98d 	bl	80085c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	685a      	ldr	r2, [r3, #4]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	490d      	ldr	r1, [pc, #52]	; (80082f0 <HAL_UART_Init+0xa8>)
 80082ba:	400a      	ands	r2, r1
 80082bc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	689a      	ldr	r2, [r3, #8]
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	212a      	movs	r1, #42	; 0x2a
 80082ca:	438a      	bics	r2, r1
 80082cc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	681a      	ldr	r2, [r3, #0]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	2101      	movs	r1, #1
 80082da:	430a      	orrs	r2, r1
 80082dc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	0018      	movs	r0, r3
 80082e2:	f000 fa25 	bl	8008730 <UART_CheckIdleState>
 80082e6:	0003      	movs	r3, r0
}
 80082e8:	0018      	movs	r0, r3
 80082ea:	46bd      	mov	sp, r7
 80082ec:	b002      	add	sp, #8
 80082ee:	bd80      	pop	{r7, pc}
 80082f0:	ffffb7ff 	.word	0xffffb7ff

080082f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b088      	sub	sp, #32
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80082fc:	231a      	movs	r3, #26
 80082fe:	18fb      	adds	r3, r7, r3
 8008300:	2200      	movs	r2, #0
 8008302:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	689a      	ldr	r2, [r3, #8]
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	691b      	ldr	r3, [r3, #16]
 800830c:	431a      	orrs	r2, r3
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	695b      	ldr	r3, [r3, #20]
 8008312:	431a      	orrs	r2, r3
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	69db      	ldr	r3, [r3, #28]
 8008318:	4313      	orrs	r3, r2
 800831a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4aa1      	ldr	r2, [pc, #644]	; (80085a8 <UART_SetConfig+0x2b4>)
 8008324:	4013      	ands	r3, r2
 8008326:	0019      	movs	r1, r3
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	69fa      	ldr	r2, [r7, #28]
 800832e:	430a      	orrs	r2, r1
 8008330:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	685b      	ldr	r3, [r3, #4]
 8008338:	4a9c      	ldr	r2, [pc, #624]	; (80085ac <UART_SetConfig+0x2b8>)
 800833a:	4013      	ands	r3, r2
 800833c:	0019      	movs	r1, r3
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	68da      	ldr	r2, [r3, #12]
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	430a      	orrs	r2, r1
 8008348:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	699b      	ldr	r3, [r3, #24]
 800834e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6a1b      	ldr	r3, [r3, #32]
 8008354:	69fa      	ldr	r2, [r7, #28]
 8008356:	4313      	orrs	r3, r2
 8008358:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	689b      	ldr	r3, [r3, #8]
 8008360:	4a93      	ldr	r2, [pc, #588]	; (80085b0 <UART_SetConfig+0x2bc>)
 8008362:	4013      	ands	r3, r2
 8008364:	0019      	movs	r1, r3
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	69fa      	ldr	r2, [r7, #28]
 800836c:	430a      	orrs	r2, r1
 800836e:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008376:	220f      	movs	r2, #15
 8008378:	4393      	bics	r3, r2
 800837a:	0019      	movs	r1, r3
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	430a      	orrs	r2, r1
 8008386:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	4a89      	ldr	r2, [pc, #548]	; (80085b4 <UART_SetConfig+0x2c0>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d127      	bne.n	80083e2 <UART_SetConfig+0xee>
 8008392:	4b89      	ldr	r3, [pc, #548]	; (80085b8 <UART_SetConfig+0x2c4>)
 8008394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008396:	2203      	movs	r2, #3
 8008398:	4013      	ands	r3, r2
 800839a:	2b03      	cmp	r3, #3
 800839c:	d017      	beq.n	80083ce <UART_SetConfig+0xda>
 800839e:	d81b      	bhi.n	80083d8 <UART_SetConfig+0xe4>
 80083a0:	2b02      	cmp	r3, #2
 80083a2:	d00a      	beq.n	80083ba <UART_SetConfig+0xc6>
 80083a4:	d818      	bhi.n	80083d8 <UART_SetConfig+0xe4>
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d002      	beq.n	80083b0 <UART_SetConfig+0xbc>
 80083aa:	2b01      	cmp	r3, #1
 80083ac:	d00a      	beq.n	80083c4 <UART_SetConfig+0xd0>
 80083ae:	e013      	b.n	80083d8 <UART_SetConfig+0xe4>
 80083b0:	231b      	movs	r3, #27
 80083b2:	18fb      	adds	r3, r7, r3
 80083b4:	2200      	movs	r2, #0
 80083b6:	701a      	strb	r2, [r3, #0]
 80083b8:	e021      	b.n	80083fe <UART_SetConfig+0x10a>
 80083ba:	231b      	movs	r3, #27
 80083bc:	18fb      	adds	r3, r7, r3
 80083be:	2202      	movs	r2, #2
 80083c0:	701a      	strb	r2, [r3, #0]
 80083c2:	e01c      	b.n	80083fe <UART_SetConfig+0x10a>
 80083c4:	231b      	movs	r3, #27
 80083c6:	18fb      	adds	r3, r7, r3
 80083c8:	2204      	movs	r2, #4
 80083ca:	701a      	strb	r2, [r3, #0]
 80083cc:	e017      	b.n	80083fe <UART_SetConfig+0x10a>
 80083ce:	231b      	movs	r3, #27
 80083d0:	18fb      	adds	r3, r7, r3
 80083d2:	2208      	movs	r2, #8
 80083d4:	701a      	strb	r2, [r3, #0]
 80083d6:	e012      	b.n	80083fe <UART_SetConfig+0x10a>
 80083d8:	231b      	movs	r3, #27
 80083da:	18fb      	adds	r3, r7, r3
 80083dc:	2210      	movs	r2, #16
 80083de:	701a      	strb	r2, [r3, #0]
 80083e0:	e00d      	b.n	80083fe <UART_SetConfig+0x10a>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	4a75      	ldr	r2, [pc, #468]	; (80085bc <UART_SetConfig+0x2c8>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d104      	bne.n	80083f6 <UART_SetConfig+0x102>
 80083ec:	231b      	movs	r3, #27
 80083ee:	18fb      	adds	r3, r7, r3
 80083f0:	2200      	movs	r2, #0
 80083f2:	701a      	strb	r2, [r3, #0]
 80083f4:	e003      	b.n	80083fe <UART_SetConfig+0x10a>
 80083f6:	231b      	movs	r3, #27
 80083f8:	18fb      	adds	r3, r7, r3
 80083fa:	2210      	movs	r2, #16
 80083fc:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	69da      	ldr	r2, [r3, #28]
 8008402:	2380      	movs	r3, #128	; 0x80
 8008404:	021b      	lsls	r3, r3, #8
 8008406:	429a      	cmp	r2, r3
 8008408:	d000      	beq.n	800840c <UART_SetConfig+0x118>
 800840a:	e065      	b.n	80084d8 <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 800840c:	231b      	movs	r3, #27
 800840e:	18fb      	adds	r3, r7, r3
 8008410:	781b      	ldrb	r3, [r3, #0]
 8008412:	2b08      	cmp	r3, #8
 8008414:	d015      	beq.n	8008442 <UART_SetConfig+0x14e>
 8008416:	dc18      	bgt.n	800844a <UART_SetConfig+0x156>
 8008418:	2b04      	cmp	r3, #4
 800841a:	d00d      	beq.n	8008438 <UART_SetConfig+0x144>
 800841c:	dc15      	bgt.n	800844a <UART_SetConfig+0x156>
 800841e:	2b00      	cmp	r3, #0
 8008420:	d002      	beq.n	8008428 <UART_SetConfig+0x134>
 8008422:	2b02      	cmp	r3, #2
 8008424:	d005      	beq.n	8008432 <UART_SetConfig+0x13e>
 8008426:	e010      	b.n	800844a <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008428:	f7fe fadc 	bl	80069e4 <HAL_RCC_GetPCLK1Freq>
 800842c:	0003      	movs	r3, r0
 800842e:	617b      	str	r3, [r7, #20]
        break;
 8008430:	e012      	b.n	8008458 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008432:	4b63      	ldr	r3, [pc, #396]	; (80085c0 <UART_SetConfig+0x2cc>)
 8008434:	617b      	str	r3, [r7, #20]
        break;
 8008436:	e00f      	b.n	8008458 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008438:	f7fe fa48 	bl	80068cc <HAL_RCC_GetSysClockFreq>
 800843c:	0003      	movs	r3, r0
 800843e:	617b      	str	r3, [r7, #20]
        break;
 8008440:	e00a      	b.n	8008458 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008442:	2380      	movs	r3, #128	; 0x80
 8008444:	021b      	lsls	r3, r3, #8
 8008446:	617b      	str	r3, [r7, #20]
        break;
 8008448:	e006      	b.n	8008458 <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 800844a:	2300      	movs	r3, #0
 800844c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800844e:	231a      	movs	r3, #26
 8008450:	18fb      	adds	r3, r7, r3
 8008452:	2201      	movs	r2, #1
 8008454:	701a      	strb	r2, [r3, #0]
        break;
 8008456:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d100      	bne.n	8008460 <UART_SetConfig+0x16c>
 800845e:	e08d      	b.n	800857c <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008464:	4b57      	ldr	r3, [pc, #348]	; (80085c4 <UART_SetConfig+0x2d0>)
 8008466:	0052      	lsls	r2, r2, #1
 8008468:	5ad3      	ldrh	r3, [r2, r3]
 800846a:	0019      	movs	r1, r3
 800846c:	6978      	ldr	r0, [r7, #20]
 800846e:	f7f7 fe47 	bl	8000100 <__udivsi3>
 8008472:	0003      	movs	r3, r0
 8008474:	005a      	lsls	r2, r3, #1
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	685b      	ldr	r3, [r3, #4]
 800847a:	085b      	lsrs	r3, r3, #1
 800847c:	18d2      	adds	r2, r2, r3
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	685b      	ldr	r3, [r3, #4]
 8008482:	0019      	movs	r1, r3
 8008484:	0010      	movs	r0, r2
 8008486:	f7f7 fe3b 	bl	8000100 <__udivsi3>
 800848a:	0003      	movs	r3, r0
 800848c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	2b0f      	cmp	r3, #15
 8008492:	d91c      	bls.n	80084ce <UART_SetConfig+0x1da>
 8008494:	693a      	ldr	r2, [r7, #16]
 8008496:	2380      	movs	r3, #128	; 0x80
 8008498:	025b      	lsls	r3, r3, #9
 800849a:	429a      	cmp	r2, r3
 800849c:	d217      	bcs.n	80084ce <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800849e:	693b      	ldr	r3, [r7, #16]
 80084a0:	b29a      	uxth	r2, r3
 80084a2:	200e      	movs	r0, #14
 80084a4:	183b      	adds	r3, r7, r0
 80084a6:	210f      	movs	r1, #15
 80084a8:	438a      	bics	r2, r1
 80084aa:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80084ac:	693b      	ldr	r3, [r7, #16]
 80084ae:	085b      	lsrs	r3, r3, #1
 80084b0:	b29b      	uxth	r3, r3
 80084b2:	2207      	movs	r2, #7
 80084b4:	4013      	ands	r3, r2
 80084b6:	b299      	uxth	r1, r3
 80084b8:	183b      	adds	r3, r7, r0
 80084ba:	183a      	adds	r2, r7, r0
 80084bc:	8812      	ldrh	r2, [r2, #0]
 80084be:	430a      	orrs	r2, r1
 80084c0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	183a      	adds	r2, r7, r0
 80084c8:	8812      	ldrh	r2, [r2, #0]
 80084ca:	60da      	str	r2, [r3, #12]
 80084cc:	e056      	b.n	800857c <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 80084ce:	231a      	movs	r3, #26
 80084d0:	18fb      	adds	r3, r7, r3
 80084d2:	2201      	movs	r2, #1
 80084d4:	701a      	strb	r2, [r3, #0]
 80084d6:	e051      	b.n	800857c <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 80084d8:	231b      	movs	r3, #27
 80084da:	18fb      	adds	r3, r7, r3
 80084dc:	781b      	ldrb	r3, [r3, #0]
 80084de:	2b08      	cmp	r3, #8
 80084e0:	d015      	beq.n	800850e <UART_SetConfig+0x21a>
 80084e2:	dc18      	bgt.n	8008516 <UART_SetConfig+0x222>
 80084e4:	2b04      	cmp	r3, #4
 80084e6:	d00d      	beq.n	8008504 <UART_SetConfig+0x210>
 80084e8:	dc15      	bgt.n	8008516 <UART_SetConfig+0x222>
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d002      	beq.n	80084f4 <UART_SetConfig+0x200>
 80084ee:	2b02      	cmp	r3, #2
 80084f0:	d005      	beq.n	80084fe <UART_SetConfig+0x20a>
 80084f2:	e010      	b.n	8008516 <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80084f4:	f7fe fa76 	bl	80069e4 <HAL_RCC_GetPCLK1Freq>
 80084f8:	0003      	movs	r3, r0
 80084fa:	617b      	str	r3, [r7, #20]
        break;
 80084fc:	e012      	b.n	8008524 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80084fe:	4b30      	ldr	r3, [pc, #192]	; (80085c0 <UART_SetConfig+0x2cc>)
 8008500:	617b      	str	r3, [r7, #20]
        break;
 8008502:	e00f      	b.n	8008524 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008504:	f7fe f9e2 	bl	80068cc <HAL_RCC_GetSysClockFreq>
 8008508:	0003      	movs	r3, r0
 800850a:	617b      	str	r3, [r7, #20]
        break;
 800850c:	e00a      	b.n	8008524 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800850e:	2380      	movs	r3, #128	; 0x80
 8008510:	021b      	lsls	r3, r3, #8
 8008512:	617b      	str	r3, [r7, #20]
        break;
 8008514:	e006      	b.n	8008524 <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 8008516:	2300      	movs	r3, #0
 8008518:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800851a:	231a      	movs	r3, #26
 800851c:	18fb      	adds	r3, r7, r3
 800851e:	2201      	movs	r2, #1
 8008520:	701a      	strb	r2, [r3, #0]
        break;
 8008522:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8008524:	697b      	ldr	r3, [r7, #20]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d028      	beq.n	800857c <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800852e:	4b25      	ldr	r3, [pc, #148]	; (80085c4 <UART_SetConfig+0x2d0>)
 8008530:	0052      	lsls	r2, r2, #1
 8008532:	5ad3      	ldrh	r3, [r2, r3]
 8008534:	0019      	movs	r1, r3
 8008536:	6978      	ldr	r0, [r7, #20]
 8008538:	f7f7 fde2 	bl	8000100 <__udivsi3>
 800853c:	0003      	movs	r3, r0
 800853e:	001a      	movs	r2, r3
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	685b      	ldr	r3, [r3, #4]
 8008544:	085b      	lsrs	r3, r3, #1
 8008546:	18d2      	adds	r2, r2, r3
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	0019      	movs	r1, r3
 800854e:	0010      	movs	r0, r2
 8008550:	f7f7 fdd6 	bl	8000100 <__udivsi3>
 8008554:	0003      	movs	r3, r0
 8008556:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008558:	693b      	ldr	r3, [r7, #16]
 800855a:	2b0f      	cmp	r3, #15
 800855c:	d90a      	bls.n	8008574 <UART_SetConfig+0x280>
 800855e:	693a      	ldr	r2, [r7, #16]
 8008560:	2380      	movs	r3, #128	; 0x80
 8008562:	025b      	lsls	r3, r3, #9
 8008564:	429a      	cmp	r2, r3
 8008566:	d205      	bcs.n	8008574 <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	b29a      	uxth	r2, r3
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	60da      	str	r2, [r3, #12]
 8008572:	e003      	b.n	800857c <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8008574:	231a      	movs	r3, #26
 8008576:	18fb      	adds	r3, r7, r3
 8008578:	2201      	movs	r2, #1
 800857a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	226a      	movs	r2, #106	; 0x6a
 8008580:	2101      	movs	r1, #1
 8008582:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2268      	movs	r2, #104	; 0x68
 8008588:	2101      	movs	r1, #1
 800858a:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2200      	movs	r2, #0
 8008590:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2200      	movs	r2, #0
 8008596:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008598:	231a      	movs	r3, #26
 800859a:	18fb      	adds	r3, r7, r3
 800859c:	781b      	ldrb	r3, [r3, #0]
}
 800859e:	0018      	movs	r0, r3
 80085a0:	46bd      	mov	sp, r7
 80085a2:	b008      	add	sp, #32
 80085a4:	bd80      	pop	{r7, pc}
 80085a6:	46c0      	nop			; (mov r8, r8)
 80085a8:	cfff69f3 	.word	0xcfff69f3
 80085ac:	ffffcfff 	.word	0xffffcfff
 80085b0:	11fff4ff 	.word	0x11fff4ff
 80085b4:	40013800 	.word	0x40013800
 80085b8:	40021000 	.word	0x40021000
 80085bc:	40004400 	.word	0x40004400
 80085c0:	00f42400 	.word	0x00f42400
 80085c4:	08009bcc 	.word	0x08009bcc

080085c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b082      	sub	sp, #8
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085d4:	2201      	movs	r2, #1
 80085d6:	4013      	ands	r3, r2
 80085d8:	d00b      	beq.n	80085f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	685b      	ldr	r3, [r3, #4]
 80085e0:	4a4a      	ldr	r2, [pc, #296]	; (800870c <UART_AdvFeatureConfig+0x144>)
 80085e2:	4013      	ands	r3, r2
 80085e4:	0019      	movs	r1, r3
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	430a      	orrs	r2, r1
 80085f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085f6:	2202      	movs	r2, #2
 80085f8:	4013      	ands	r3, r2
 80085fa:	d00b      	beq.n	8008614 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	685b      	ldr	r3, [r3, #4]
 8008602:	4a43      	ldr	r2, [pc, #268]	; (8008710 <UART_AdvFeatureConfig+0x148>)
 8008604:	4013      	ands	r3, r2
 8008606:	0019      	movs	r1, r3
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	430a      	orrs	r2, r1
 8008612:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008618:	2204      	movs	r2, #4
 800861a:	4013      	ands	r3, r2
 800861c:	d00b      	beq.n	8008636 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	685b      	ldr	r3, [r3, #4]
 8008624:	4a3b      	ldr	r2, [pc, #236]	; (8008714 <UART_AdvFeatureConfig+0x14c>)
 8008626:	4013      	ands	r3, r2
 8008628:	0019      	movs	r1, r3
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	430a      	orrs	r2, r1
 8008634:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800863a:	2208      	movs	r2, #8
 800863c:	4013      	ands	r3, r2
 800863e:	d00b      	beq.n	8008658 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	685b      	ldr	r3, [r3, #4]
 8008646:	4a34      	ldr	r2, [pc, #208]	; (8008718 <UART_AdvFeatureConfig+0x150>)
 8008648:	4013      	ands	r3, r2
 800864a:	0019      	movs	r1, r3
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	430a      	orrs	r2, r1
 8008656:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800865c:	2210      	movs	r2, #16
 800865e:	4013      	ands	r3, r2
 8008660:	d00b      	beq.n	800867a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	689b      	ldr	r3, [r3, #8]
 8008668:	4a2c      	ldr	r2, [pc, #176]	; (800871c <UART_AdvFeatureConfig+0x154>)
 800866a:	4013      	ands	r3, r2
 800866c:	0019      	movs	r1, r3
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	430a      	orrs	r2, r1
 8008678:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800867e:	2220      	movs	r2, #32
 8008680:	4013      	ands	r3, r2
 8008682:	d00b      	beq.n	800869c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	689b      	ldr	r3, [r3, #8]
 800868a:	4a25      	ldr	r2, [pc, #148]	; (8008720 <UART_AdvFeatureConfig+0x158>)
 800868c:	4013      	ands	r3, r2
 800868e:	0019      	movs	r1, r3
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	430a      	orrs	r2, r1
 800869a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086a0:	2240      	movs	r2, #64	; 0x40
 80086a2:	4013      	ands	r3, r2
 80086a4:	d01d      	beq.n	80086e2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	685b      	ldr	r3, [r3, #4]
 80086ac:	4a1d      	ldr	r2, [pc, #116]	; (8008724 <UART_AdvFeatureConfig+0x15c>)
 80086ae:	4013      	ands	r3, r2
 80086b0:	0019      	movs	r1, r3
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	430a      	orrs	r2, r1
 80086bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80086c2:	2380      	movs	r3, #128	; 0x80
 80086c4:	035b      	lsls	r3, r3, #13
 80086c6:	429a      	cmp	r2, r3
 80086c8:	d10b      	bne.n	80086e2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	685b      	ldr	r3, [r3, #4]
 80086d0:	4a15      	ldr	r2, [pc, #84]	; (8008728 <UART_AdvFeatureConfig+0x160>)
 80086d2:	4013      	ands	r3, r2
 80086d4:	0019      	movs	r1, r3
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	430a      	orrs	r2, r1
 80086e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086e6:	2280      	movs	r2, #128	; 0x80
 80086e8:	4013      	ands	r3, r2
 80086ea:	d00b      	beq.n	8008704 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	685b      	ldr	r3, [r3, #4]
 80086f2:	4a0e      	ldr	r2, [pc, #56]	; (800872c <UART_AdvFeatureConfig+0x164>)
 80086f4:	4013      	ands	r3, r2
 80086f6:	0019      	movs	r1, r3
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	430a      	orrs	r2, r1
 8008702:	605a      	str	r2, [r3, #4]
  }
}
 8008704:	46c0      	nop			; (mov r8, r8)
 8008706:	46bd      	mov	sp, r7
 8008708:	b002      	add	sp, #8
 800870a:	bd80      	pop	{r7, pc}
 800870c:	fffdffff 	.word	0xfffdffff
 8008710:	fffeffff 	.word	0xfffeffff
 8008714:	fffbffff 	.word	0xfffbffff
 8008718:	ffff7fff 	.word	0xffff7fff
 800871c:	ffffefff 	.word	0xffffefff
 8008720:	ffffdfff 	.word	0xffffdfff
 8008724:	ffefffff 	.word	0xffefffff
 8008728:	ff9fffff 	.word	0xff9fffff
 800872c:	fff7ffff 	.word	0xfff7ffff

08008730 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b086      	sub	sp, #24
 8008734:	af02      	add	r7, sp, #8
 8008736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2290      	movs	r2, #144	; 0x90
 800873c:	2100      	movs	r1, #0
 800873e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008740:	f7fc f9a2 	bl	8004a88 <HAL_GetTick>
 8008744:	0003      	movs	r3, r0
 8008746:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	2208      	movs	r2, #8
 8008750:	4013      	ands	r3, r2
 8008752:	2b08      	cmp	r3, #8
 8008754:	d10c      	bne.n	8008770 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	2280      	movs	r2, #128	; 0x80
 800875a:	0391      	lsls	r1, r2, #14
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	4a1a      	ldr	r2, [pc, #104]	; (80087c8 <UART_CheckIdleState+0x98>)
 8008760:	9200      	str	r2, [sp, #0]
 8008762:	2200      	movs	r2, #0
 8008764:	f000 f832 	bl	80087cc <UART_WaitOnFlagUntilTimeout>
 8008768:	1e03      	subs	r3, r0, #0
 800876a:	d001      	beq.n	8008770 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800876c:	2303      	movs	r3, #3
 800876e:	e026      	b.n	80087be <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	2204      	movs	r2, #4
 8008778:	4013      	ands	r3, r2
 800877a:	2b04      	cmp	r3, #4
 800877c:	d10c      	bne.n	8008798 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	2280      	movs	r2, #128	; 0x80
 8008782:	03d1      	lsls	r1, r2, #15
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	4a10      	ldr	r2, [pc, #64]	; (80087c8 <UART_CheckIdleState+0x98>)
 8008788:	9200      	str	r2, [sp, #0]
 800878a:	2200      	movs	r2, #0
 800878c:	f000 f81e 	bl	80087cc <UART_WaitOnFlagUntilTimeout>
 8008790:	1e03      	subs	r3, r0, #0
 8008792:	d001      	beq.n	8008798 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008794:	2303      	movs	r3, #3
 8008796:	e012      	b.n	80087be <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2288      	movs	r2, #136	; 0x88
 800879c:	2120      	movs	r1, #32
 800879e:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	228c      	movs	r2, #140	; 0x8c
 80087a4:	2120      	movs	r1, #32
 80087a6:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2200      	movs	r2, #0
 80087ac:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2200      	movs	r2, #0
 80087b2:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2284      	movs	r2, #132	; 0x84
 80087b8:	2100      	movs	r1, #0
 80087ba:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80087bc:	2300      	movs	r3, #0
}
 80087be:	0018      	movs	r0, r3
 80087c0:	46bd      	mov	sp, r7
 80087c2:	b004      	add	sp, #16
 80087c4:	bd80      	pop	{r7, pc}
 80087c6:	46c0      	nop			; (mov r8, r8)
 80087c8:	01ffffff 	.word	0x01ffffff

080087cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b094      	sub	sp, #80	; 0x50
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	60f8      	str	r0, [r7, #12]
 80087d4:	60b9      	str	r1, [r7, #8]
 80087d6:	603b      	str	r3, [r7, #0]
 80087d8:	1dfb      	adds	r3, r7, #7
 80087da:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087dc:	e0a7      	b.n	800892e <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80087de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80087e0:	3301      	adds	r3, #1
 80087e2:	d100      	bne.n	80087e6 <UART_WaitOnFlagUntilTimeout+0x1a>
 80087e4:	e0a3      	b.n	800892e <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087e6:	f7fc f94f 	bl	8004a88 <HAL_GetTick>
 80087ea:	0002      	movs	r2, r0
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	1ad3      	subs	r3, r2, r3
 80087f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80087f2:	429a      	cmp	r2, r3
 80087f4:	d302      	bcc.n	80087fc <UART_WaitOnFlagUntilTimeout+0x30>
 80087f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d13f      	bne.n	800887c <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087fc:	f3ef 8310 	mrs	r3, PRIMASK
 8008800:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8008802:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008804:	647b      	str	r3, [r7, #68]	; 0x44
 8008806:	2301      	movs	r3, #1
 8008808:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800880a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800880c:	f383 8810 	msr	PRIMASK, r3
}
 8008810:	46c0      	nop			; (mov r8, r8)
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	681a      	ldr	r2, [r3, #0]
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	494e      	ldr	r1, [pc, #312]	; (8008958 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800881e:	400a      	ands	r2, r1
 8008820:	601a      	str	r2, [r3, #0]
 8008822:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008824:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008828:	f383 8810 	msr	PRIMASK, r3
}
 800882c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800882e:	f3ef 8310 	mrs	r3, PRIMASK
 8008832:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8008834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008836:	643b      	str	r3, [r7, #64]	; 0x40
 8008838:	2301      	movs	r3, #1
 800883a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800883c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800883e:	f383 8810 	msr	PRIMASK, r3
}
 8008842:	46c0      	nop			; (mov r8, r8)
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	689a      	ldr	r2, [r3, #8]
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	2101      	movs	r1, #1
 8008850:	438a      	bics	r2, r1
 8008852:	609a      	str	r2, [r3, #8]
 8008854:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008856:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008858:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800885a:	f383 8810 	msr	PRIMASK, r3
}
 800885e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	2288      	movs	r2, #136	; 0x88
 8008864:	2120      	movs	r1, #32
 8008866:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	228c      	movs	r2, #140	; 0x8c
 800886c:	2120      	movs	r1, #32
 800886e:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	2284      	movs	r2, #132	; 0x84
 8008874:	2100      	movs	r1, #0
 8008876:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008878:	2303      	movs	r3, #3
 800887a:	e069      	b.n	8008950 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	2204      	movs	r2, #4
 8008884:	4013      	ands	r3, r2
 8008886:	d052      	beq.n	800892e <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	69da      	ldr	r2, [r3, #28]
 800888e:	2380      	movs	r3, #128	; 0x80
 8008890:	011b      	lsls	r3, r3, #4
 8008892:	401a      	ands	r2, r3
 8008894:	2380      	movs	r3, #128	; 0x80
 8008896:	011b      	lsls	r3, r3, #4
 8008898:	429a      	cmp	r2, r3
 800889a:	d148      	bne.n	800892e <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	2280      	movs	r2, #128	; 0x80
 80088a2:	0112      	lsls	r2, r2, #4
 80088a4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80088a6:	f3ef 8310 	mrs	r3, PRIMASK
 80088aa:	613b      	str	r3, [r7, #16]
  return(result);
 80088ac:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80088ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80088b0:	2301      	movs	r3, #1
 80088b2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088b4:	697b      	ldr	r3, [r7, #20]
 80088b6:	f383 8810 	msr	PRIMASK, r3
}
 80088ba:	46c0      	nop			; (mov r8, r8)
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	681a      	ldr	r2, [r3, #0]
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	4924      	ldr	r1, [pc, #144]	; (8008958 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80088c8:	400a      	ands	r2, r1
 80088ca:	601a      	str	r2, [r3, #0]
 80088cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088ce:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088d0:	69bb      	ldr	r3, [r7, #24]
 80088d2:	f383 8810 	msr	PRIMASK, r3
}
 80088d6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80088d8:	f3ef 8310 	mrs	r3, PRIMASK
 80088dc:	61fb      	str	r3, [r7, #28]
  return(result);
 80088de:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80088e2:	2301      	movs	r3, #1
 80088e4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088e6:	6a3b      	ldr	r3, [r7, #32]
 80088e8:	f383 8810 	msr	PRIMASK, r3
}
 80088ec:	46c0      	nop			; (mov r8, r8)
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	689a      	ldr	r2, [r3, #8]
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	2101      	movs	r1, #1
 80088fa:	438a      	bics	r2, r1
 80088fc:	609a      	str	r2, [r3, #8]
 80088fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008900:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008904:	f383 8810 	msr	PRIMASK, r3
}
 8008908:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	2288      	movs	r2, #136	; 0x88
 800890e:	2120      	movs	r1, #32
 8008910:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	228c      	movs	r2, #140	; 0x8c
 8008916:	2120      	movs	r1, #32
 8008918:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	2290      	movs	r2, #144	; 0x90
 800891e:	2120      	movs	r1, #32
 8008920:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	2284      	movs	r2, #132	; 0x84
 8008926:	2100      	movs	r1, #0
 8008928:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800892a:	2303      	movs	r3, #3
 800892c:	e010      	b.n	8008950 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	69db      	ldr	r3, [r3, #28]
 8008934:	68ba      	ldr	r2, [r7, #8]
 8008936:	4013      	ands	r3, r2
 8008938:	68ba      	ldr	r2, [r7, #8]
 800893a:	1ad3      	subs	r3, r2, r3
 800893c:	425a      	negs	r2, r3
 800893e:	4153      	adcs	r3, r2
 8008940:	b2db      	uxtb	r3, r3
 8008942:	001a      	movs	r2, r3
 8008944:	1dfb      	adds	r3, r7, #7
 8008946:	781b      	ldrb	r3, [r3, #0]
 8008948:	429a      	cmp	r2, r3
 800894a:	d100      	bne.n	800894e <UART_WaitOnFlagUntilTimeout+0x182>
 800894c:	e747      	b.n	80087de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800894e:	2300      	movs	r3, #0
}
 8008950:	0018      	movs	r0, r3
 8008952:	46bd      	mov	sp, r7
 8008954:	b014      	add	sp, #80	; 0x50
 8008956:	bd80      	pop	{r7, pc}
 8008958:	fffffe5f 	.word	0xfffffe5f

0800895c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b084      	sub	sp, #16
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2284      	movs	r2, #132	; 0x84
 8008968:	5c9b      	ldrb	r3, [r3, r2]
 800896a:	2b01      	cmp	r3, #1
 800896c:	d101      	bne.n	8008972 <HAL_UARTEx_DisableFifoMode+0x16>
 800896e:	2302      	movs	r3, #2
 8008970:	e027      	b.n	80089c2 <HAL_UARTEx_DisableFifoMode+0x66>
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2284      	movs	r2, #132	; 0x84
 8008976:	2101      	movs	r1, #1
 8008978:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2288      	movs	r2, #136	; 0x88
 800897e:	2124      	movs	r1, #36	; 0x24
 8008980:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	681a      	ldr	r2, [r3, #0]
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	2101      	movs	r1, #1
 8008996:	438a      	bics	r2, r1
 8008998:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	4a0b      	ldr	r2, [pc, #44]	; (80089cc <HAL_UARTEx_DisableFifoMode+0x70>)
 800899e:	4013      	ands	r3, r2
 80089a0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2200      	movs	r2, #0
 80089a6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	68fa      	ldr	r2, [r7, #12]
 80089ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2288      	movs	r2, #136	; 0x88
 80089b4:	2120      	movs	r1, #32
 80089b6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2284      	movs	r2, #132	; 0x84
 80089bc:	2100      	movs	r1, #0
 80089be:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80089c0:	2300      	movs	r3, #0
}
 80089c2:	0018      	movs	r0, r3
 80089c4:	46bd      	mov	sp, r7
 80089c6:	b004      	add	sp, #16
 80089c8:	bd80      	pop	{r7, pc}
 80089ca:	46c0      	nop			; (mov r8, r8)
 80089cc:	dfffffff 	.word	0xdfffffff

080089d0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b084      	sub	sp, #16
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
 80089d8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2284      	movs	r2, #132	; 0x84
 80089de:	5c9b      	ldrb	r3, [r3, r2]
 80089e0:	2b01      	cmp	r3, #1
 80089e2:	d101      	bne.n	80089e8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80089e4:	2302      	movs	r3, #2
 80089e6:	e02e      	b.n	8008a46 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2284      	movs	r2, #132	; 0x84
 80089ec:	2101      	movs	r1, #1
 80089ee:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2288      	movs	r2, #136	; 0x88
 80089f4:	2124      	movs	r1, #36	; 0x24
 80089f6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	681a      	ldr	r2, [r3, #0]
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	2101      	movs	r1, #1
 8008a0c:	438a      	bics	r2, r1
 8008a0e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	689b      	ldr	r3, [r3, #8]
 8008a16:	00db      	lsls	r3, r3, #3
 8008a18:	08d9      	lsrs	r1, r3, #3
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	683a      	ldr	r2, [r7, #0]
 8008a20:	430a      	orrs	r2, r1
 8008a22:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	0018      	movs	r0, r3
 8008a28:	f000 f854 	bl	8008ad4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	68fa      	ldr	r2, [r7, #12]
 8008a32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2288      	movs	r2, #136	; 0x88
 8008a38:	2120      	movs	r1, #32
 8008a3a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2284      	movs	r2, #132	; 0x84
 8008a40:	2100      	movs	r1, #0
 8008a42:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008a44:	2300      	movs	r3, #0
}
 8008a46:	0018      	movs	r0, r3
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	b004      	add	sp, #16
 8008a4c:	bd80      	pop	{r7, pc}
	...

08008a50 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b084      	sub	sp, #16
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
 8008a58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2284      	movs	r2, #132	; 0x84
 8008a5e:	5c9b      	ldrb	r3, [r3, r2]
 8008a60:	2b01      	cmp	r3, #1
 8008a62:	d101      	bne.n	8008a68 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008a64:	2302      	movs	r3, #2
 8008a66:	e02f      	b.n	8008ac8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2284      	movs	r2, #132	; 0x84
 8008a6c:	2101      	movs	r1, #1
 8008a6e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2288      	movs	r2, #136	; 0x88
 8008a74:	2124      	movs	r1, #36	; 0x24
 8008a76:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	681a      	ldr	r2, [r3, #0]
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	2101      	movs	r1, #1
 8008a8c:	438a      	bics	r2, r1
 8008a8e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	689b      	ldr	r3, [r3, #8]
 8008a96:	4a0e      	ldr	r2, [pc, #56]	; (8008ad0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8008a98:	4013      	ands	r3, r2
 8008a9a:	0019      	movs	r1, r3
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	683a      	ldr	r2, [r7, #0]
 8008aa2:	430a      	orrs	r2, r1
 8008aa4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	0018      	movs	r0, r3
 8008aaa:	f000 f813 	bl	8008ad4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	68fa      	ldr	r2, [r7, #12]
 8008ab4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2288      	movs	r2, #136	; 0x88
 8008aba:	2120      	movs	r1, #32
 8008abc:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2284      	movs	r2, #132	; 0x84
 8008ac2:	2100      	movs	r1, #0
 8008ac4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008ac6:	2300      	movs	r3, #0
}
 8008ac8:	0018      	movs	r0, r3
 8008aca:	46bd      	mov	sp, r7
 8008acc:	b004      	add	sp, #16
 8008ace:	bd80      	pop	{r7, pc}
 8008ad0:	f1ffffff 	.word	0xf1ffffff

08008ad4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ad6:	b085      	sub	sp, #20
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d108      	bne.n	8008af6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	226a      	movs	r2, #106	; 0x6a
 8008ae8:	2101      	movs	r1, #1
 8008aea:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2268      	movs	r2, #104	; 0x68
 8008af0:	2101      	movs	r1, #1
 8008af2:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008af4:	e043      	b.n	8008b7e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008af6:	260f      	movs	r6, #15
 8008af8:	19bb      	adds	r3, r7, r6
 8008afa:	2208      	movs	r2, #8
 8008afc:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008afe:	200e      	movs	r0, #14
 8008b00:	183b      	adds	r3, r7, r0
 8008b02:	2208      	movs	r2, #8
 8008b04:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	689b      	ldr	r3, [r3, #8]
 8008b0c:	0e5b      	lsrs	r3, r3, #25
 8008b0e:	b2da      	uxtb	r2, r3
 8008b10:	240d      	movs	r4, #13
 8008b12:	193b      	adds	r3, r7, r4
 8008b14:	2107      	movs	r1, #7
 8008b16:	400a      	ands	r2, r1
 8008b18:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	689b      	ldr	r3, [r3, #8]
 8008b20:	0f5b      	lsrs	r3, r3, #29
 8008b22:	b2da      	uxtb	r2, r3
 8008b24:	250c      	movs	r5, #12
 8008b26:	197b      	adds	r3, r7, r5
 8008b28:	2107      	movs	r1, #7
 8008b2a:	400a      	ands	r2, r1
 8008b2c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008b2e:	183b      	adds	r3, r7, r0
 8008b30:	781b      	ldrb	r3, [r3, #0]
 8008b32:	197a      	adds	r2, r7, r5
 8008b34:	7812      	ldrb	r2, [r2, #0]
 8008b36:	4914      	ldr	r1, [pc, #80]	; (8008b88 <UARTEx_SetNbDataToProcess+0xb4>)
 8008b38:	5c8a      	ldrb	r2, [r1, r2]
 8008b3a:	435a      	muls	r2, r3
 8008b3c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8008b3e:	197b      	adds	r3, r7, r5
 8008b40:	781b      	ldrb	r3, [r3, #0]
 8008b42:	4a12      	ldr	r2, [pc, #72]	; (8008b8c <UARTEx_SetNbDataToProcess+0xb8>)
 8008b44:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008b46:	0019      	movs	r1, r3
 8008b48:	f7f7 fb64 	bl	8000214 <__divsi3>
 8008b4c:	0003      	movs	r3, r0
 8008b4e:	b299      	uxth	r1, r3
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	226a      	movs	r2, #106	; 0x6a
 8008b54:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008b56:	19bb      	adds	r3, r7, r6
 8008b58:	781b      	ldrb	r3, [r3, #0]
 8008b5a:	193a      	adds	r2, r7, r4
 8008b5c:	7812      	ldrb	r2, [r2, #0]
 8008b5e:	490a      	ldr	r1, [pc, #40]	; (8008b88 <UARTEx_SetNbDataToProcess+0xb4>)
 8008b60:	5c8a      	ldrb	r2, [r1, r2]
 8008b62:	435a      	muls	r2, r3
 8008b64:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8008b66:	193b      	adds	r3, r7, r4
 8008b68:	781b      	ldrb	r3, [r3, #0]
 8008b6a:	4a08      	ldr	r2, [pc, #32]	; (8008b8c <UARTEx_SetNbDataToProcess+0xb8>)
 8008b6c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008b6e:	0019      	movs	r1, r3
 8008b70:	f7f7 fb50 	bl	8000214 <__divsi3>
 8008b74:	0003      	movs	r3, r0
 8008b76:	b299      	uxth	r1, r3
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2268      	movs	r2, #104	; 0x68
 8008b7c:	5299      	strh	r1, [r3, r2]
}
 8008b7e:	46c0      	nop			; (mov r8, r8)
 8008b80:	46bd      	mov	sp, r7
 8008b82:	b005      	add	sp, #20
 8008b84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b86:	46c0      	nop			; (mov r8, r8)
 8008b88:	08009be4 	.word	0x08009be4
 8008b8c:	08009bec 	.word	0x08009bec

08008b90 <memset>:
 8008b90:	0003      	movs	r3, r0
 8008b92:	1882      	adds	r2, r0, r2
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d100      	bne.n	8008b9a <memset+0xa>
 8008b98:	4770      	bx	lr
 8008b9a:	7019      	strb	r1, [r3, #0]
 8008b9c:	3301      	adds	r3, #1
 8008b9e:	e7f9      	b.n	8008b94 <memset+0x4>

08008ba0 <__errno>:
 8008ba0:	4b01      	ldr	r3, [pc, #4]	; (8008ba8 <__errno+0x8>)
 8008ba2:	6818      	ldr	r0, [r3, #0]
 8008ba4:	4770      	bx	lr
 8008ba6:	46c0      	nop			; (mov r8, r8)
 8008ba8:	20000064 	.word	0x20000064

08008bac <__libc_init_array>:
 8008bac:	b570      	push	{r4, r5, r6, lr}
 8008bae:	2600      	movs	r6, #0
 8008bb0:	4c0c      	ldr	r4, [pc, #48]	; (8008be4 <__libc_init_array+0x38>)
 8008bb2:	4d0d      	ldr	r5, [pc, #52]	; (8008be8 <__libc_init_array+0x3c>)
 8008bb4:	1b64      	subs	r4, r4, r5
 8008bb6:	10a4      	asrs	r4, r4, #2
 8008bb8:	42a6      	cmp	r6, r4
 8008bba:	d109      	bne.n	8008bd0 <__libc_init_array+0x24>
 8008bbc:	2600      	movs	r6, #0
 8008bbe:	f000 ff25 	bl	8009a0c <_init>
 8008bc2:	4c0a      	ldr	r4, [pc, #40]	; (8008bec <__libc_init_array+0x40>)
 8008bc4:	4d0a      	ldr	r5, [pc, #40]	; (8008bf0 <__libc_init_array+0x44>)
 8008bc6:	1b64      	subs	r4, r4, r5
 8008bc8:	10a4      	asrs	r4, r4, #2
 8008bca:	42a6      	cmp	r6, r4
 8008bcc:	d105      	bne.n	8008bda <__libc_init_array+0x2e>
 8008bce:	bd70      	pop	{r4, r5, r6, pc}
 8008bd0:	00b3      	lsls	r3, r6, #2
 8008bd2:	58eb      	ldr	r3, [r5, r3]
 8008bd4:	4798      	blx	r3
 8008bd6:	3601      	adds	r6, #1
 8008bd8:	e7ee      	b.n	8008bb8 <__libc_init_array+0xc>
 8008bda:	00b3      	lsls	r3, r6, #2
 8008bdc:	58eb      	ldr	r3, [r5, r3]
 8008bde:	4798      	blx	r3
 8008be0:	3601      	adds	r6, #1
 8008be2:	e7f2      	b.n	8008bca <__libc_init_array+0x1e>
 8008be4:	08009c28 	.word	0x08009c28
 8008be8:	08009c28 	.word	0x08009c28
 8008bec:	08009c2c 	.word	0x08009c2c
 8008bf0:	08009c28 	.word	0x08009c28

08008bf4 <pow>:
 8008bf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008bf6:	0014      	movs	r4, r2
 8008bf8:	001d      	movs	r5, r3
 8008bfa:	9000      	str	r0, [sp, #0]
 8008bfc:	9101      	str	r1, [sp, #4]
 8008bfe:	f000 f86f 	bl	8008ce0 <__ieee754_pow>
 8008c02:	0022      	movs	r2, r4
 8008c04:	0006      	movs	r6, r0
 8008c06:	000f      	movs	r7, r1
 8008c08:	002b      	movs	r3, r5
 8008c0a:	0020      	movs	r0, r4
 8008c0c:	0029      	movs	r1, r5
 8008c0e:	f7f9 fad1 	bl	80021b4 <__aeabi_dcmpun>
 8008c12:	2800      	cmp	r0, #0
 8008c14:	d13f      	bne.n	8008c96 <pow+0xa2>
 8008c16:	9800      	ldr	r0, [sp, #0]
 8008c18:	9901      	ldr	r1, [sp, #4]
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	f7f7 fbf5 	bl	800040c <__aeabi_dcmpeq>
 8008c22:	2800      	cmp	r0, #0
 8008c24:	d019      	beq.n	8008c5a <pow+0x66>
 8008c26:	2200      	movs	r2, #0
 8008c28:	2300      	movs	r3, #0
 8008c2a:	0020      	movs	r0, r4
 8008c2c:	0029      	movs	r1, r5
 8008c2e:	f7f7 fbed 	bl	800040c <__aeabi_dcmpeq>
 8008c32:	2800      	cmp	r0, #0
 8008c34:	d146      	bne.n	8008cc4 <pow+0xd0>
 8008c36:	0020      	movs	r0, r4
 8008c38:	0029      	movs	r1, r5
 8008c3a:	f000 f849 	bl	8008cd0 <finite>
 8008c3e:	2800      	cmp	r0, #0
 8008c40:	d029      	beq.n	8008c96 <pow+0xa2>
 8008c42:	2200      	movs	r2, #0
 8008c44:	2300      	movs	r3, #0
 8008c46:	0020      	movs	r0, r4
 8008c48:	0029      	movs	r1, r5
 8008c4a:	f7f7 fbe5 	bl	8000418 <__aeabi_dcmplt>
 8008c4e:	2800      	cmp	r0, #0
 8008c50:	d021      	beq.n	8008c96 <pow+0xa2>
 8008c52:	f7ff ffa5 	bl	8008ba0 <__errno>
 8008c56:	2322      	movs	r3, #34	; 0x22
 8008c58:	e01c      	b.n	8008c94 <pow+0xa0>
 8008c5a:	0030      	movs	r0, r6
 8008c5c:	0039      	movs	r1, r7
 8008c5e:	f000 f837 	bl	8008cd0 <finite>
 8008c62:	2800      	cmp	r0, #0
 8008c64:	d11b      	bne.n	8008c9e <pow+0xaa>
 8008c66:	9800      	ldr	r0, [sp, #0]
 8008c68:	9901      	ldr	r1, [sp, #4]
 8008c6a:	f000 f831 	bl	8008cd0 <finite>
 8008c6e:	2800      	cmp	r0, #0
 8008c70:	d015      	beq.n	8008c9e <pow+0xaa>
 8008c72:	0020      	movs	r0, r4
 8008c74:	0029      	movs	r1, r5
 8008c76:	f000 f82b 	bl	8008cd0 <finite>
 8008c7a:	2800      	cmp	r0, #0
 8008c7c:	d00f      	beq.n	8008c9e <pow+0xaa>
 8008c7e:	0032      	movs	r2, r6
 8008c80:	003b      	movs	r3, r7
 8008c82:	0030      	movs	r0, r6
 8008c84:	0039      	movs	r1, r7
 8008c86:	f7f9 fa95 	bl	80021b4 <__aeabi_dcmpun>
 8008c8a:	2800      	cmp	r0, #0
 8008c8c:	d0e1      	beq.n	8008c52 <pow+0x5e>
 8008c8e:	f7ff ff87 	bl	8008ba0 <__errno>
 8008c92:	2321      	movs	r3, #33	; 0x21
 8008c94:	6003      	str	r3, [r0, #0]
 8008c96:	0030      	movs	r0, r6
 8008c98:	0039      	movs	r1, r7
 8008c9a:	b003      	add	sp, #12
 8008c9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	0030      	movs	r0, r6
 8008ca4:	0039      	movs	r1, r7
 8008ca6:	f7f7 fbb1 	bl	800040c <__aeabi_dcmpeq>
 8008caa:	2800      	cmp	r0, #0
 8008cac:	d0f3      	beq.n	8008c96 <pow+0xa2>
 8008cae:	9800      	ldr	r0, [sp, #0]
 8008cb0:	9901      	ldr	r1, [sp, #4]
 8008cb2:	f000 f80d 	bl	8008cd0 <finite>
 8008cb6:	2800      	cmp	r0, #0
 8008cb8:	d0ed      	beq.n	8008c96 <pow+0xa2>
 8008cba:	0020      	movs	r0, r4
 8008cbc:	0029      	movs	r1, r5
 8008cbe:	f000 f807 	bl	8008cd0 <finite>
 8008cc2:	e7c4      	b.n	8008c4e <pow+0x5a>
 8008cc4:	2600      	movs	r6, #0
 8008cc6:	4f01      	ldr	r7, [pc, #4]	; (8008ccc <pow+0xd8>)
 8008cc8:	e7e5      	b.n	8008c96 <pow+0xa2>
 8008cca:	46c0      	nop			; (mov r8, r8)
 8008ccc:	3ff00000 	.word	0x3ff00000

08008cd0 <finite>:
 8008cd0:	4b02      	ldr	r3, [pc, #8]	; (8008cdc <finite+0xc>)
 8008cd2:	0048      	lsls	r0, r1, #1
 8008cd4:	0840      	lsrs	r0, r0, #1
 8008cd6:	18c0      	adds	r0, r0, r3
 8008cd8:	0fc0      	lsrs	r0, r0, #31
 8008cda:	4770      	bx	lr
 8008cdc:	80100000 	.word	0x80100000

08008ce0 <__ieee754_pow>:
 8008ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ce2:	b095      	sub	sp, #84	; 0x54
 8008ce4:	9202      	str	r2, [sp, #8]
 8008ce6:	9303      	str	r3, [sp, #12]
 8008ce8:	9b03      	ldr	r3, [sp, #12]
 8008cea:	9a03      	ldr	r2, [sp, #12]
 8008cec:	9304      	str	r3, [sp, #16]
 8008cee:	9b02      	ldr	r3, [sp, #8]
 8008cf0:	0056      	lsls	r6, r2, #1
 8008cf2:	001a      	movs	r2, r3
 8008cf4:	0876      	lsrs	r6, r6, #1
 8008cf6:	0007      	movs	r7, r0
 8008cf8:	000d      	movs	r5, r1
 8008cfa:	4332      	orrs	r2, r6
 8008cfc:	d119      	bne.n	8008d32 <__ieee754_pow+0x52>
 8008cfe:	2180      	movs	r1, #128	; 0x80
 8008d00:	0309      	lsls	r1, r1, #12
 8008d02:	4069      	eors	r1, r5
 8008d04:	0002      	movs	r2, r0
 8008d06:	000b      	movs	r3, r1
 8008d08:	1892      	adds	r2, r2, r2
 8008d0a:	415b      	adcs	r3, r3
 8008d0c:	4989      	ldr	r1, [pc, #548]	; (8008f34 <__ieee754_pow+0x254>)
 8008d0e:	428b      	cmp	r3, r1
 8008d10:	d806      	bhi.n	8008d20 <__ieee754_pow+0x40>
 8008d12:	d001      	beq.n	8008d18 <__ieee754_pow+0x38>
 8008d14:	f000 fcb6 	bl	8009684 <__ieee754_pow+0x9a4>
 8008d18:	2a00      	cmp	r2, #0
 8008d1a:	d101      	bne.n	8008d20 <__ieee754_pow+0x40>
 8008d1c:	f000 fcb2 	bl	8009684 <__ieee754_pow+0x9a4>
 8008d20:	9a02      	ldr	r2, [sp, #8]
 8008d22:	9b03      	ldr	r3, [sp, #12]
 8008d24:	0038      	movs	r0, r7
 8008d26:	0029      	movs	r1, r5
 8008d28:	f7f7 fca6 	bl	8000678 <__aeabi_dadd>
 8008d2c:	9000      	str	r0, [sp, #0]
 8008d2e:	9101      	str	r1, [sp, #4]
 8008d30:	e0ad      	b.n	8008e8e <__ieee754_pow+0x1ae>
 8008d32:	4a81      	ldr	r2, [pc, #516]	; (8008f38 <__ieee754_pow+0x258>)
 8008d34:	004c      	lsls	r4, r1, #1
 8008d36:	9108      	str	r1, [sp, #32]
 8008d38:	9000      	str	r0, [sp, #0]
 8008d3a:	0864      	lsrs	r4, r4, #1
 8008d3c:	4294      	cmp	r4, r2
 8008d3e:	dc08      	bgt.n	8008d52 <__ieee754_pow+0x72>
 8008d40:	d101      	bne.n	8008d46 <__ieee754_pow+0x66>
 8008d42:	2800      	cmp	r0, #0
 8008d44:	d1ec      	bne.n	8008d20 <__ieee754_pow+0x40>
 8008d46:	4a7c      	ldr	r2, [pc, #496]	; (8008f38 <__ieee754_pow+0x258>)
 8008d48:	4296      	cmp	r6, r2
 8008d4a:	dc02      	bgt.n	8008d52 <__ieee754_pow+0x72>
 8008d4c:	d10c      	bne.n	8008d68 <__ieee754_pow+0x88>
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d00a      	beq.n	8008d68 <__ieee754_pow+0x88>
 8008d52:	4b7a      	ldr	r3, [pc, #488]	; (8008f3c <__ieee754_pow+0x25c>)
 8008d54:	18eb      	adds	r3, r5, r3
 8008d56:	433b      	orrs	r3, r7
 8008d58:	d1e2      	bne.n	8008d20 <__ieee754_pow+0x40>
 8008d5a:	2180      	movs	r1, #128	; 0x80
 8008d5c:	9803      	ldr	r0, [sp, #12]
 8008d5e:	0309      	lsls	r1, r1, #12
 8008d60:	4048      	eors	r0, r1
 8008d62:	0003      	movs	r3, r0
 8008d64:	9a02      	ldr	r2, [sp, #8]
 8008d66:	e7cf      	b.n	8008d08 <__ieee754_pow+0x28>
 8008d68:	2200      	movs	r2, #0
 8008d6a:	9206      	str	r2, [sp, #24]
 8008d6c:	2d00      	cmp	r5, #0
 8008d6e:	da69      	bge.n	8008e44 <__ieee754_pow+0x164>
 8008d70:	4a73      	ldr	r2, [pc, #460]	; (8008f40 <__ieee754_pow+0x260>)
 8008d72:	4296      	cmp	r6, r2
 8008d74:	dc64      	bgt.n	8008e40 <__ieee754_pow+0x160>
 8008d76:	4a73      	ldr	r2, [pc, #460]	; (8008f44 <__ieee754_pow+0x264>)
 8008d78:	4296      	cmp	r6, r2
 8008d7a:	dd11      	ble.n	8008da0 <__ieee754_pow+0xc0>
 8008d7c:	4972      	ldr	r1, [pc, #456]	; (8008f48 <__ieee754_pow+0x268>)
 8008d7e:	1532      	asrs	r2, r6, #20
 8008d80:	1852      	adds	r2, r2, r1
 8008d82:	2a14      	cmp	r2, #20
 8008d84:	dd3c      	ble.n	8008e00 <__ieee754_pow+0x120>
 8008d86:	2134      	movs	r1, #52	; 0x34
 8008d88:	1a89      	subs	r1, r1, r2
 8008d8a:	9a02      	ldr	r2, [sp, #8]
 8008d8c:	40ca      	lsrs	r2, r1
 8008d8e:	0010      	movs	r0, r2
 8008d90:	4088      	lsls	r0, r1
 8008d92:	4298      	cmp	r0, r3
 8008d94:	d104      	bne.n	8008da0 <__ieee754_pow+0xc0>
 8008d96:	2101      	movs	r1, #1
 8008d98:	400a      	ands	r2, r1
 8008d9a:	1849      	adds	r1, r1, r1
 8008d9c:	1a8a      	subs	r2, r1, r2
 8008d9e:	9206      	str	r2, [sp, #24]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d03c      	beq.n	8008e1e <__ieee754_pow+0x13e>
 8008da4:	0038      	movs	r0, r7
 8008da6:	0029      	movs	r1, r5
 8008da8:	f000 fca4 	bl	80096f4 <fabs>
 8008dac:	9000      	str	r0, [sp, #0]
 8008dae:	9101      	str	r1, [sp, #4]
 8008db0:	2f00      	cmp	r7, #0
 8008db2:	d000      	beq.n	8008db6 <__ieee754_pow+0xd6>
 8008db4:	e094      	b.n	8008ee0 <__ieee754_pow+0x200>
 8008db6:	2c00      	cmp	r4, #0
 8008db8:	d005      	beq.n	8008dc6 <__ieee754_pow+0xe6>
 8008dba:	4a64      	ldr	r2, [pc, #400]	; (8008f4c <__ieee754_pow+0x26c>)
 8008dbc:	00ab      	lsls	r3, r5, #2
 8008dbe:	089b      	lsrs	r3, r3, #2
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d000      	beq.n	8008dc6 <__ieee754_pow+0xe6>
 8008dc4:	e08c      	b.n	8008ee0 <__ieee754_pow+0x200>
 8008dc6:	9b04      	ldr	r3, [sp, #16]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	da07      	bge.n	8008ddc <__ieee754_pow+0xfc>
 8008dcc:	9a00      	ldr	r2, [sp, #0]
 8008dce:	9b01      	ldr	r3, [sp, #4]
 8008dd0:	2000      	movs	r0, #0
 8008dd2:	495e      	ldr	r1, [pc, #376]	; (8008f4c <__ieee754_pow+0x26c>)
 8008dd4:	f7f7 ffb0 	bl	8000d38 <__aeabi_ddiv>
 8008dd8:	9000      	str	r0, [sp, #0]
 8008dda:	9101      	str	r1, [sp, #4]
 8008ddc:	9b08      	ldr	r3, [sp, #32]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	da55      	bge.n	8008e8e <__ieee754_pow+0x1ae>
 8008de2:	4b56      	ldr	r3, [pc, #344]	; (8008f3c <__ieee754_pow+0x25c>)
 8008de4:	18e4      	adds	r4, r4, r3
 8008de6:	9b06      	ldr	r3, [sp, #24]
 8008de8:	431c      	orrs	r4, r3
 8008dea:	d000      	beq.n	8008dee <__ieee754_pow+0x10e>
 8008dec:	e06c      	b.n	8008ec8 <__ieee754_pow+0x1e8>
 8008dee:	9a00      	ldr	r2, [sp, #0]
 8008df0:	9b01      	ldr	r3, [sp, #4]
 8008df2:	0010      	movs	r0, r2
 8008df4:	0019      	movs	r1, r3
 8008df6:	f7f8 fe5b 	bl	8001ab0 <__aeabi_dsub>
 8008dfa:	0002      	movs	r2, r0
 8008dfc:	000b      	movs	r3, r1
 8008dfe:	e01c      	b.n	8008e3a <__ieee754_pow+0x15a>
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d1cf      	bne.n	8008da4 <__ieee754_pow+0xc4>
 8008e04:	3314      	adds	r3, #20
 8008e06:	1a9a      	subs	r2, r3, r2
 8008e08:	0033      	movs	r3, r6
 8008e0a:	4113      	asrs	r3, r2
 8008e0c:	0019      	movs	r1, r3
 8008e0e:	4091      	lsls	r1, r2
 8008e10:	42b1      	cmp	r1, r6
 8008e12:	d104      	bne.n	8008e1e <__ieee754_pow+0x13e>
 8008e14:	2201      	movs	r2, #1
 8008e16:	4013      	ands	r3, r2
 8008e18:	1892      	adds	r2, r2, r2
 8008e1a:	1ad3      	subs	r3, r2, r3
 8008e1c:	9306      	str	r3, [sp, #24]
 8008e1e:	4b4b      	ldr	r3, [pc, #300]	; (8008f4c <__ieee754_pow+0x26c>)
 8008e20:	429e      	cmp	r6, r3
 8008e22:	d138      	bne.n	8008e96 <__ieee754_pow+0x1b6>
 8008e24:	0038      	movs	r0, r7
 8008e26:	0029      	movs	r1, r5
 8008e28:	9b04      	ldr	r3, [sp, #16]
 8008e2a:	9000      	str	r0, [sp, #0]
 8008e2c:	9101      	str	r1, [sp, #4]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	da2d      	bge.n	8008e8e <__ieee754_pow+0x1ae>
 8008e32:	003a      	movs	r2, r7
 8008e34:	002b      	movs	r3, r5
 8008e36:	2000      	movs	r0, #0
 8008e38:	4944      	ldr	r1, [pc, #272]	; (8008f4c <__ieee754_pow+0x26c>)
 8008e3a:	f7f7 ff7d 	bl	8000d38 <__aeabi_ddiv>
 8008e3e:	e775      	b.n	8008d2c <__ieee754_pow+0x4c>
 8008e40:	2202      	movs	r2, #2
 8008e42:	9206      	str	r2, [sp, #24]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d1ad      	bne.n	8008da4 <__ieee754_pow+0xc4>
 8008e48:	4b3b      	ldr	r3, [pc, #236]	; (8008f38 <__ieee754_pow+0x258>)
 8008e4a:	429e      	cmp	r6, r3
 8008e4c:	d1e7      	bne.n	8008e1e <__ieee754_pow+0x13e>
 8008e4e:	4b3b      	ldr	r3, [pc, #236]	; (8008f3c <__ieee754_pow+0x25c>)
 8008e50:	18e3      	adds	r3, r4, r3
 8008e52:	433b      	orrs	r3, r7
 8008e54:	d101      	bne.n	8008e5a <__ieee754_pow+0x17a>
 8008e56:	f000 fc15 	bl	8009684 <__ieee754_pow+0x9a4>
 8008e5a:	4b3a      	ldr	r3, [pc, #232]	; (8008f44 <__ieee754_pow+0x264>)
 8008e5c:	429c      	cmp	r4, r3
 8008e5e:	dd09      	ble.n	8008e74 <__ieee754_pow+0x194>
 8008e60:	9b04      	ldr	r3, [sp, #16]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	da01      	bge.n	8008e6a <__ieee754_pow+0x18a>
 8008e66:	f000 fc11 	bl	800968c <__ieee754_pow+0x9ac>
 8008e6a:	9b02      	ldr	r3, [sp, #8]
 8008e6c:	9c03      	ldr	r4, [sp, #12]
 8008e6e:	9300      	str	r3, [sp, #0]
 8008e70:	9401      	str	r4, [sp, #4]
 8008e72:	e00c      	b.n	8008e8e <__ieee754_pow+0x1ae>
 8008e74:	9b04      	ldr	r3, [sp, #16]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	db01      	blt.n	8008e7e <__ieee754_pow+0x19e>
 8008e7a:	f000 fc07 	bl	800968c <__ieee754_pow+0x9ac>
 8008e7e:	2280      	movs	r2, #128	; 0x80
 8008e80:	0612      	lsls	r2, r2, #24
 8008e82:	4694      	mov	ip, r2
 8008e84:	9b02      	ldr	r3, [sp, #8]
 8008e86:	9300      	str	r3, [sp, #0]
 8008e88:	9b03      	ldr	r3, [sp, #12]
 8008e8a:	4463      	add	r3, ip
 8008e8c:	9301      	str	r3, [sp, #4]
 8008e8e:	9800      	ldr	r0, [sp, #0]
 8008e90:	9901      	ldr	r1, [sp, #4]
 8008e92:	b015      	add	sp, #84	; 0x54
 8008e94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e96:	2380      	movs	r3, #128	; 0x80
 8008e98:	9a04      	ldr	r2, [sp, #16]
 8008e9a:	05db      	lsls	r3, r3, #23
 8008e9c:	429a      	cmp	r2, r3
 8008e9e:	d106      	bne.n	8008eae <__ieee754_pow+0x1ce>
 8008ea0:	003a      	movs	r2, r7
 8008ea2:	002b      	movs	r3, r5
 8008ea4:	0038      	movs	r0, r7
 8008ea6:	0029      	movs	r1, r5
 8008ea8:	f7f8 fb40 	bl	800152c <__aeabi_dmul>
 8008eac:	e73e      	b.n	8008d2c <__ieee754_pow+0x4c>
 8008eae:	4b28      	ldr	r3, [pc, #160]	; (8008f50 <__ieee754_pow+0x270>)
 8008eb0:	9a04      	ldr	r2, [sp, #16]
 8008eb2:	429a      	cmp	r2, r3
 8008eb4:	d000      	beq.n	8008eb8 <__ieee754_pow+0x1d8>
 8008eb6:	e775      	b.n	8008da4 <__ieee754_pow+0xc4>
 8008eb8:	2d00      	cmp	r5, #0
 8008eba:	da00      	bge.n	8008ebe <__ieee754_pow+0x1de>
 8008ebc:	e772      	b.n	8008da4 <__ieee754_pow+0xc4>
 8008ebe:	0038      	movs	r0, r7
 8008ec0:	0029      	movs	r1, r5
 8008ec2:	f000 fcb7 	bl	8009834 <__ieee754_sqrt>
 8008ec6:	e731      	b.n	8008d2c <__ieee754_pow+0x4c>
 8008ec8:	9b06      	ldr	r3, [sp, #24]
 8008eca:	2b01      	cmp	r3, #1
 8008ecc:	d1df      	bne.n	8008e8e <__ieee754_pow+0x1ae>
 8008ece:	9800      	ldr	r0, [sp, #0]
 8008ed0:	2180      	movs	r1, #128	; 0x80
 8008ed2:	0002      	movs	r2, r0
 8008ed4:	9801      	ldr	r0, [sp, #4]
 8008ed6:	0609      	lsls	r1, r1, #24
 8008ed8:	1843      	adds	r3, r0, r1
 8008eda:	9200      	str	r2, [sp, #0]
 8008edc:	9301      	str	r3, [sp, #4]
 8008ede:	e7d6      	b.n	8008e8e <__ieee754_pow+0x1ae>
 8008ee0:	0feb      	lsrs	r3, r5, #31
 8008ee2:	3b01      	subs	r3, #1
 8008ee4:	930e      	str	r3, [sp, #56]	; 0x38
 8008ee6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008ee8:	9b06      	ldr	r3, [sp, #24]
 8008eea:	4313      	orrs	r3, r2
 8008eec:	d104      	bne.n	8008ef8 <__ieee754_pow+0x218>
 8008eee:	003a      	movs	r2, r7
 8008ef0:	002b      	movs	r3, r5
 8008ef2:	0038      	movs	r0, r7
 8008ef4:	0029      	movs	r1, r5
 8008ef6:	e77e      	b.n	8008df6 <__ieee754_pow+0x116>
 8008ef8:	4b16      	ldr	r3, [pc, #88]	; (8008f54 <__ieee754_pow+0x274>)
 8008efa:	429e      	cmp	r6, r3
 8008efc:	dc00      	bgt.n	8008f00 <__ieee754_pow+0x220>
 8008efe:	e0f1      	b.n	80090e4 <__ieee754_pow+0x404>
 8008f00:	4b15      	ldr	r3, [pc, #84]	; (8008f58 <__ieee754_pow+0x278>)
 8008f02:	429e      	cmp	r6, r3
 8008f04:	dd09      	ble.n	8008f1a <__ieee754_pow+0x23a>
 8008f06:	4b0f      	ldr	r3, [pc, #60]	; (8008f44 <__ieee754_pow+0x264>)
 8008f08:	429c      	cmp	r4, r3
 8008f0a:	dc0c      	bgt.n	8008f26 <__ieee754_pow+0x246>
 8008f0c:	9b04      	ldr	r3, [sp, #16]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	da0c      	bge.n	8008f2c <__ieee754_pow+0x24c>
 8008f12:	2000      	movs	r0, #0
 8008f14:	f000 fc86 	bl	8009824 <__math_oflow>
 8008f18:	e708      	b.n	8008d2c <__ieee754_pow+0x4c>
 8008f1a:	4b10      	ldr	r3, [pc, #64]	; (8008f5c <__ieee754_pow+0x27c>)
 8008f1c:	429c      	cmp	r4, r3
 8008f1e:	ddf5      	ble.n	8008f0c <__ieee754_pow+0x22c>
 8008f20:	4b0a      	ldr	r3, [pc, #40]	; (8008f4c <__ieee754_pow+0x26c>)
 8008f22:	429c      	cmp	r4, r3
 8008f24:	dd1c      	ble.n	8008f60 <__ieee754_pow+0x280>
 8008f26:	9b04      	ldr	r3, [sp, #16]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	dcf2      	bgt.n	8008f12 <__ieee754_pow+0x232>
 8008f2c:	2000      	movs	r0, #0
 8008f2e:	f000 fc72 	bl	8009816 <__math_uflow>
 8008f32:	e6fb      	b.n	8008d2c <__ieee754_pow+0x4c>
 8008f34:	fff00000 	.word	0xfff00000
 8008f38:	7ff00000 	.word	0x7ff00000
 8008f3c:	c0100000 	.word	0xc0100000
 8008f40:	433fffff 	.word	0x433fffff
 8008f44:	3fefffff 	.word	0x3fefffff
 8008f48:	fffffc01 	.word	0xfffffc01
 8008f4c:	3ff00000 	.word	0x3ff00000
 8008f50:	3fe00000 	.word	0x3fe00000
 8008f54:	41e00000 	.word	0x41e00000
 8008f58:	43f00000 	.word	0x43f00000
 8008f5c:	3feffffe 	.word	0x3feffffe
 8008f60:	2200      	movs	r2, #0
 8008f62:	9800      	ldr	r0, [sp, #0]
 8008f64:	9901      	ldr	r1, [sp, #4]
 8008f66:	4b53      	ldr	r3, [pc, #332]	; (80090b4 <__ieee754_pow+0x3d4>)
 8008f68:	f7f8 fda2 	bl	8001ab0 <__aeabi_dsub>
 8008f6c:	22c0      	movs	r2, #192	; 0xc0
 8008f6e:	4b52      	ldr	r3, [pc, #328]	; (80090b8 <__ieee754_pow+0x3d8>)
 8008f70:	05d2      	lsls	r2, r2, #23
 8008f72:	0004      	movs	r4, r0
 8008f74:	000d      	movs	r5, r1
 8008f76:	f7f8 fad9 	bl	800152c <__aeabi_dmul>
 8008f7a:	4a50      	ldr	r2, [pc, #320]	; (80090bc <__ieee754_pow+0x3dc>)
 8008f7c:	0006      	movs	r6, r0
 8008f7e:	000f      	movs	r7, r1
 8008f80:	0020      	movs	r0, r4
 8008f82:	0029      	movs	r1, r5
 8008f84:	4b4e      	ldr	r3, [pc, #312]	; (80090c0 <__ieee754_pow+0x3e0>)
 8008f86:	f7f8 fad1 	bl	800152c <__aeabi_dmul>
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	9000      	str	r0, [sp, #0]
 8008f8e:	9101      	str	r1, [sp, #4]
 8008f90:	4b4c      	ldr	r3, [pc, #304]	; (80090c4 <__ieee754_pow+0x3e4>)
 8008f92:	0020      	movs	r0, r4
 8008f94:	0029      	movs	r1, r5
 8008f96:	f7f8 fac9 	bl	800152c <__aeabi_dmul>
 8008f9a:	0002      	movs	r2, r0
 8008f9c:	000b      	movs	r3, r1
 8008f9e:	484a      	ldr	r0, [pc, #296]	; (80090c8 <__ieee754_pow+0x3e8>)
 8008fa0:	494a      	ldr	r1, [pc, #296]	; (80090cc <__ieee754_pow+0x3ec>)
 8008fa2:	f7f8 fd85 	bl	8001ab0 <__aeabi_dsub>
 8008fa6:	0022      	movs	r2, r4
 8008fa8:	002b      	movs	r3, r5
 8008faa:	f7f8 fabf 	bl	800152c <__aeabi_dmul>
 8008fae:	0002      	movs	r2, r0
 8008fb0:	000b      	movs	r3, r1
 8008fb2:	2000      	movs	r0, #0
 8008fb4:	4946      	ldr	r1, [pc, #280]	; (80090d0 <__ieee754_pow+0x3f0>)
 8008fb6:	f7f8 fd7b 	bl	8001ab0 <__aeabi_dsub>
 8008fba:	0022      	movs	r2, r4
 8008fbc:	002b      	movs	r3, r5
 8008fbe:	9004      	str	r0, [sp, #16]
 8008fc0:	9105      	str	r1, [sp, #20]
 8008fc2:	0020      	movs	r0, r4
 8008fc4:	0029      	movs	r1, r5
 8008fc6:	f7f8 fab1 	bl	800152c <__aeabi_dmul>
 8008fca:	0002      	movs	r2, r0
 8008fcc:	000b      	movs	r3, r1
 8008fce:	9804      	ldr	r0, [sp, #16]
 8008fd0:	9905      	ldr	r1, [sp, #20]
 8008fd2:	f7f8 faab 	bl	800152c <__aeabi_dmul>
 8008fd6:	4a3f      	ldr	r2, [pc, #252]	; (80090d4 <__ieee754_pow+0x3f4>)
 8008fd8:	4b37      	ldr	r3, [pc, #220]	; (80090b8 <__ieee754_pow+0x3d8>)
 8008fda:	f7f8 faa7 	bl	800152c <__aeabi_dmul>
 8008fde:	0002      	movs	r2, r0
 8008fe0:	000b      	movs	r3, r1
 8008fe2:	9800      	ldr	r0, [sp, #0]
 8008fe4:	9901      	ldr	r1, [sp, #4]
 8008fe6:	f7f8 fd63 	bl	8001ab0 <__aeabi_dsub>
 8008fea:	0002      	movs	r2, r0
 8008fec:	000b      	movs	r3, r1
 8008fee:	0004      	movs	r4, r0
 8008ff0:	000d      	movs	r5, r1
 8008ff2:	0030      	movs	r0, r6
 8008ff4:	0039      	movs	r1, r7
 8008ff6:	f7f7 fb3f 	bl	8000678 <__aeabi_dadd>
 8008ffa:	2000      	movs	r0, #0
 8008ffc:	0032      	movs	r2, r6
 8008ffe:	003b      	movs	r3, r7
 8009000:	9004      	str	r0, [sp, #16]
 8009002:	9105      	str	r1, [sp, #20]
 8009004:	f7f8 fd54 	bl	8001ab0 <__aeabi_dsub>
 8009008:	0002      	movs	r2, r0
 800900a:	000b      	movs	r3, r1
 800900c:	0020      	movs	r0, r4
 800900e:	0029      	movs	r1, r5
 8009010:	f7f8 fd4e 	bl	8001ab0 <__aeabi_dsub>
 8009014:	9b06      	ldr	r3, [sp, #24]
 8009016:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009018:	3b01      	subs	r3, #1
 800901a:	0006      	movs	r6, r0
 800901c:	000f      	movs	r7, r1
 800901e:	4313      	orrs	r3, r2
 8009020:	d000      	beq.n	8009024 <__ieee754_pow+0x344>
 8009022:	e1dc      	b.n	80093de <__ieee754_pow+0x6fe>
 8009024:	2300      	movs	r3, #0
 8009026:	4c2c      	ldr	r4, [pc, #176]	; (80090d8 <__ieee754_pow+0x3f8>)
 8009028:	9300      	str	r3, [sp, #0]
 800902a:	9401      	str	r4, [sp, #4]
 800902c:	9c02      	ldr	r4, [sp, #8]
 800902e:	9d03      	ldr	r5, [sp, #12]
 8009030:	9802      	ldr	r0, [sp, #8]
 8009032:	9903      	ldr	r1, [sp, #12]
 8009034:	2400      	movs	r4, #0
 8009036:	002b      	movs	r3, r5
 8009038:	0022      	movs	r2, r4
 800903a:	f7f8 fd39 	bl	8001ab0 <__aeabi_dsub>
 800903e:	9a04      	ldr	r2, [sp, #16]
 8009040:	9b05      	ldr	r3, [sp, #20]
 8009042:	f7f8 fa73 	bl	800152c <__aeabi_dmul>
 8009046:	9a02      	ldr	r2, [sp, #8]
 8009048:	9b03      	ldr	r3, [sp, #12]
 800904a:	9006      	str	r0, [sp, #24]
 800904c:	9107      	str	r1, [sp, #28]
 800904e:	0030      	movs	r0, r6
 8009050:	0039      	movs	r1, r7
 8009052:	f7f8 fa6b 	bl	800152c <__aeabi_dmul>
 8009056:	0002      	movs	r2, r0
 8009058:	000b      	movs	r3, r1
 800905a:	9806      	ldr	r0, [sp, #24]
 800905c:	9907      	ldr	r1, [sp, #28]
 800905e:	f7f7 fb0b 	bl	8000678 <__aeabi_dadd>
 8009062:	0022      	movs	r2, r4
 8009064:	002b      	movs	r3, r5
 8009066:	0006      	movs	r6, r0
 8009068:	000f      	movs	r7, r1
 800906a:	9804      	ldr	r0, [sp, #16]
 800906c:	9905      	ldr	r1, [sp, #20]
 800906e:	f7f8 fa5d 	bl	800152c <__aeabi_dmul>
 8009072:	0003      	movs	r3, r0
 8009074:	000c      	movs	r4, r1
 8009076:	9004      	str	r0, [sp, #16]
 8009078:	9105      	str	r1, [sp, #20]
 800907a:	9306      	str	r3, [sp, #24]
 800907c:	9407      	str	r4, [sp, #28]
 800907e:	0002      	movs	r2, r0
 8009080:	000b      	movs	r3, r1
 8009082:	0030      	movs	r0, r6
 8009084:	0039      	movs	r1, r7
 8009086:	f7f7 faf7 	bl	8000678 <__aeabi_dadd>
 800908a:	4b14      	ldr	r3, [pc, #80]	; (80090dc <__ieee754_pow+0x3fc>)
 800908c:	0005      	movs	r5, r0
 800908e:	000c      	movs	r4, r1
 8009090:	9108      	str	r1, [sp, #32]
 8009092:	4299      	cmp	r1, r3
 8009094:	dc00      	bgt.n	8009098 <__ieee754_pow+0x3b8>
 8009096:	e2d4      	b.n	8009642 <__ieee754_pow+0x962>
 8009098:	4b11      	ldr	r3, [pc, #68]	; (80090e0 <__ieee754_pow+0x400>)
 800909a:	18cb      	adds	r3, r1, r3
 800909c:	4303      	orrs	r3, r0
 800909e:	d100      	bne.n	80090a2 <__ieee754_pow+0x3c2>
 80090a0:	e1d6      	b.n	8009450 <__ieee754_pow+0x770>
 80090a2:	9800      	ldr	r0, [sp, #0]
 80090a4:	9901      	ldr	r1, [sp, #4]
 80090a6:	2300      	movs	r3, #0
 80090a8:	2200      	movs	r2, #0
 80090aa:	f7f7 f9b5 	bl	8000418 <__aeabi_dcmplt>
 80090ae:	1e43      	subs	r3, r0, #1
 80090b0:	4198      	sbcs	r0, r3
 80090b2:	e72f      	b.n	8008f14 <__ieee754_pow+0x234>
 80090b4:	3ff00000 	.word	0x3ff00000
 80090b8:	3ff71547 	.word	0x3ff71547
 80090bc:	f85ddf44 	.word	0xf85ddf44
 80090c0:	3e54ae0b 	.word	0x3e54ae0b
 80090c4:	3fd00000 	.word	0x3fd00000
 80090c8:	55555555 	.word	0x55555555
 80090cc:	3fd55555 	.word	0x3fd55555
 80090d0:	3fe00000 	.word	0x3fe00000
 80090d4:	652b82fe 	.word	0x652b82fe
 80090d8:	bff00000 	.word	0xbff00000
 80090dc:	408fffff 	.word	0x408fffff
 80090e0:	bf700000 	.word	0xbf700000
 80090e4:	4bbf      	ldr	r3, [pc, #764]	; (80093e4 <__ieee754_pow+0x704>)
 80090e6:	2200      	movs	r2, #0
 80090e8:	422b      	tst	r3, r5
 80090ea:	d10a      	bne.n	8009102 <__ieee754_pow+0x422>
 80090ec:	9800      	ldr	r0, [sp, #0]
 80090ee:	9901      	ldr	r1, [sp, #4]
 80090f0:	2200      	movs	r2, #0
 80090f2:	4bbd      	ldr	r3, [pc, #756]	; (80093e8 <__ieee754_pow+0x708>)
 80090f4:	f7f8 fa1a 	bl	800152c <__aeabi_dmul>
 80090f8:	2235      	movs	r2, #53	; 0x35
 80090fa:	9000      	str	r0, [sp, #0]
 80090fc:	9101      	str	r1, [sp, #4]
 80090fe:	9c01      	ldr	r4, [sp, #4]
 8009100:	4252      	negs	r2, r2
 8009102:	49ba      	ldr	r1, [pc, #744]	; (80093ec <__ieee754_pow+0x70c>)
 8009104:	1523      	asrs	r3, r4, #20
 8009106:	185b      	adds	r3, r3, r1
 8009108:	189b      	adds	r3, r3, r2
 800910a:	0324      	lsls	r4, r4, #12
 800910c:	4db8      	ldr	r5, [pc, #736]	; (80093f0 <__ieee754_pow+0x710>)
 800910e:	930d      	str	r3, [sp, #52]	; 0x34
 8009110:	4bb8      	ldr	r3, [pc, #736]	; (80093f4 <__ieee754_pow+0x714>)
 8009112:	0b22      	lsrs	r2, r4, #12
 8009114:	4315      	orrs	r5, r2
 8009116:	2400      	movs	r4, #0
 8009118:	429a      	cmp	r2, r3
 800911a:	dd09      	ble.n	8009130 <__ieee754_pow+0x450>
 800911c:	4bb6      	ldr	r3, [pc, #728]	; (80093f8 <__ieee754_pow+0x718>)
 800911e:	3401      	adds	r4, #1
 8009120:	429a      	cmp	r2, r3
 8009122:	dd05      	ble.n	8009130 <__ieee754_pow+0x450>
 8009124:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009126:	191b      	adds	r3, r3, r4
 8009128:	2400      	movs	r4, #0
 800912a:	930d      	str	r3, [sp, #52]	; 0x34
 800912c:	4bb3      	ldr	r3, [pc, #716]	; (80093fc <__ieee754_pow+0x71c>)
 800912e:	18ed      	adds	r5, r5, r3
 8009130:	4bb3      	ldr	r3, [pc, #716]	; (8009400 <__ieee754_pow+0x720>)
 8009132:	00e2      	lsls	r2, r4, #3
 8009134:	189b      	adds	r3, r3, r2
 8009136:	9800      	ldr	r0, [sp, #0]
 8009138:	9901      	ldr	r1, [sp, #4]
 800913a:	920f      	str	r2, [sp, #60]	; 0x3c
 800913c:	0029      	movs	r1, r5
 800913e:	681a      	ldr	r2, [r3, #0]
 8009140:	685b      	ldr	r3, [r3, #4]
 8009142:	0006      	movs	r6, r0
 8009144:	920a      	str	r2, [sp, #40]	; 0x28
 8009146:	930b      	str	r3, [sp, #44]	; 0x2c
 8009148:	f7f8 fcb2 	bl	8001ab0 <__aeabi_dsub>
 800914c:	0032      	movs	r2, r6
 800914e:	002b      	movs	r3, r5
 8009150:	9010      	str	r0, [sp, #64]	; 0x40
 8009152:	9111      	str	r1, [sp, #68]	; 0x44
 8009154:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009156:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009158:	f7f7 fa8e 	bl	8000678 <__aeabi_dadd>
 800915c:	0002      	movs	r2, r0
 800915e:	000b      	movs	r3, r1
 8009160:	2000      	movs	r0, #0
 8009162:	49a3      	ldr	r1, [pc, #652]	; (80093f0 <__ieee754_pow+0x710>)
 8009164:	f7f7 fde8 	bl	8000d38 <__aeabi_ddiv>
 8009168:	0002      	movs	r2, r0
 800916a:	000b      	movs	r3, r1
 800916c:	9012      	str	r0, [sp, #72]	; 0x48
 800916e:	9113      	str	r1, [sp, #76]	; 0x4c
 8009170:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009172:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009174:	f7f8 f9da 	bl	800152c <__aeabi_dmul>
 8009178:	9008      	str	r0, [sp, #32]
 800917a:	9109      	str	r1, [sp, #36]	; 0x24
 800917c:	9a08      	ldr	r2, [sp, #32]
 800917e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009180:	9204      	str	r2, [sp, #16]
 8009182:	9305      	str	r3, [sp, #20]
 8009184:	2300      	movs	r3, #0
 8009186:	2180      	movs	r1, #128	; 0x80
 8009188:	2080      	movs	r0, #128	; 0x80
 800918a:	9304      	str	r3, [sp, #16]
 800918c:	9a04      	ldr	r2, [sp, #16]
 800918e:	9b05      	ldr	r3, [sp, #20]
 8009190:	9200      	str	r2, [sp, #0]
 8009192:	9301      	str	r3, [sp, #4]
 8009194:	2200      	movs	r2, #0
 8009196:	002f      	movs	r7, r5
 8009198:	0589      	lsls	r1, r1, #22
 800919a:	106d      	asrs	r5, r5, #1
 800919c:	4329      	orrs	r1, r5
 800919e:	0300      	lsls	r0, r0, #12
 80091a0:	1809      	adds	r1, r1, r0
 80091a2:	04a0      	lsls	r0, r4, #18
 80091a4:	180b      	adds	r3, r1, r0
 80091a6:	9800      	ldr	r0, [sp, #0]
 80091a8:	9901      	ldr	r1, [sp, #4]
 80091aa:	0014      	movs	r4, r2
 80091ac:	001d      	movs	r5, r3
 80091ae:	f7f8 f9bd 	bl	800152c <__aeabi_dmul>
 80091b2:	0002      	movs	r2, r0
 80091b4:	000b      	movs	r3, r1
 80091b6:	9810      	ldr	r0, [sp, #64]	; 0x40
 80091b8:	9911      	ldr	r1, [sp, #68]	; 0x44
 80091ba:	f7f8 fc79 	bl	8001ab0 <__aeabi_dsub>
 80091be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80091c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091c2:	9010      	str	r0, [sp, #64]	; 0x40
 80091c4:	9111      	str	r1, [sp, #68]	; 0x44
 80091c6:	0020      	movs	r0, r4
 80091c8:	0029      	movs	r1, r5
 80091ca:	f7f8 fc71 	bl	8001ab0 <__aeabi_dsub>
 80091ce:	0002      	movs	r2, r0
 80091d0:	000b      	movs	r3, r1
 80091d2:	0030      	movs	r0, r6
 80091d4:	0039      	movs	r1, r7
 80091d6:	f7f8 fc6b 	bl	8001ab0 <__aeabi_dsub>
 80091da:	9a00      	ldr	r2, [sp, #0]
 80091dc:	9b01      	ldr	r3, [sp, #4]
 80091de:	f7f8 f9a5 	bl	800152c <__aeabi_dmul>
 80091e2:	0002      	movs	r2, r0
 80091e4:	000b      	movs	r3, r1
 80091e6:	9810      	ldr	r0, [sp, #64]	; 0x40
 80091e8:	9911      	ldr	r1, [sp, #68]	; 0x44
 80091ea:	f7f8 fc61 	bl	8001ab0 <__aeabi_dsub>
 80091ee:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80091f0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80091f2:	f7f8 f99b 	bl	800152c <__aeabi_dmul>
 80091f6:	9a08      	ldr	r2, [sp, #32]
 80091f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091fa:	900a      	str	r0, [sp, #40]	; 0x28
 80091fc:	910b      	str	r1, [sp, #44]	; 0x2c
 80091fe:	0010      	movs	r0, r2
 8009200:	0019      	movs	r1, r3
 8009202:	f7f8 f993 	bl	800152c <__aeabi_dmul>
 8009206:	0006      	movs	r6, r0
 8009208:	000f      	movs	r7, r1
 800920a:	4a7e      	ldr	r2, [pc, #504]	; (8009404 <__ieee754_pow+0x724>)
 800920c:	4b7e      	ldr	r3, [pc, #504]	; (8009408 <__ieee754_pow+0x728>)
 800920e:	f7f8 f98d 	bl	800152c <__aeabi_dmul>
 8009212:	4a7e      	ldr	r2, [pc, #504]	; (800940c <__ieee754_pow+0x72c>)
 8009214:	4b7e      	ldr	r3, [pc, #504]	; (8009410 <__ieee754_pow+0x730>)
 8009216:	f7f7 fa2f 	bl	8000678 <__aeabi_dadd>
 800921a:	0032      	movs	r2, r6
 800921c:	003b      	movs	r3, r7
 800921e:	f7f8 f985 	bl	800152c <__aeabi_dmul>
 8009222:	4a7c      	ldr	r2, [pc, #496]	; (8009414 <__ieee754_pow+0x734>)
 8009224:	4b7c      	ldr	r3, [pc, #496]	; (8009418 <__ieee754_pow+0x738>)
 8009226:	f7f7 fa27 	bl	8000678 <__aeabi_dadd>
 800922a:	0032      	movs	r2, r6
 800922c:	003b      	movs	r3, r7
 800922e:	f7f8 f97d 	bl	800152c <__aeabi_dmul>
 8009232:	4a7a      	ldr	r2, [pc, #488]	; (800941c <__ieee754_pow+0x73c>)
 8009234:	4b7a      	ldr	r3, [pc, #488]	; (8009420 <__ieee754_pow+0x740>)
 8009236:	f7f7 fa1f 	bl	8000678 <__aeabi_dadd>
 800923a:	0032      	movs	r2, r6
 800923c:	003b      	movs	r3, r7
 800923e:	f7f8 f975 	bl	800152c <__aeabi_dmul>
 8009242:	4a78      	ldr	r2, [pc, #480]	; (8009424 <__ieee754_pow+0x744>)
 8009244:	4b78      	ldr	r3, [pc, #480]	; (8009428 <__ieee754_pow+0x748>)
 8009246:	f7f7 fa17 	bl	8000678 <__aeabi_dadd>
 800924a:	0032      	movs	r2, r6
 800924c:	003b      	movs	r3, r7
 800924e:	f7f8 f96d 	bl	800152c <__aeabi_dmul>
 8009252:	4a76      	ldr	r2, [pc, #472]	; (800942c <__ieee754_pow+0x74c>)
 8009254:	4b76      	ldr	r3, [pc, #472]	; (8009430 <__ieee754_pow+0x750>)
 8009256:	f7f7 fa0f 	bl	8000678 <__aeabi_dadd>
 800925a:	0032      	movs	r2, r6
 800925c:	0004      	movs	r4, r0
 800925e:	000d      	movs	r5, r1
 8009260:	003b      	movs	r3, r7
 8009262:	0030      	movs	r0, r6
 8009264:	0039      	movs	r1, r7
 8009266:	f7f8 f961 	bl	800152c <__aeabi_dmul>
 800926a:	0002      	movs	r2, r0
 800926c:	000b      	movs	r3, r1
 800926e:	0020      	movs	r0, r4
 8009270:	0029      	movs	r1, r5
 8009272:	f7f8 f95b 	bl	800152c <__aeabi_dmul>
 8009276:	9a00      	ldr	r2, [sp, #0]
 8009278:	9b01      	ldr	r3, [sp, #4]
 800927a:	0004      	movs	r4, r0
 800927c:	000d      	movs	r5, r1
 800927e:	9808      	ldr	r0, [sp, #32]
 8009280:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009282:	f7f7 f9f9 	bl	8000678 <__aeabi_dadd>
 8009286:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009288:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800928a:	f7f8 f94f 	bl	800152c <__aeabi_dmul>
 800928e:	0022      	movs	r2, r4
 8009290:	002b      	movs	r3, r5
 8009292:	f7f7 f9f1 	bl	8000678 <__aeabi_dadd>
 8009296:	9a00      	ldr	r2, [sp, #0]
 8009298:	9b01      	ldr	r3, [sp, #4]
 800929a:	9010      	str	r0, [sp, #64]	; 0x40
 800929c:	9111      	str	r1, [sp, #68]	; 0x44
 800929e:	0010      	movs	r0, r2
 80092a0:	0019      	movs	r1, r3
 80092a2:	f7f8 f943 	bl	800152c <__aeabi_dmul>
 80092a6:	2200      	movs	r2, #0
 80092a8:	4b62      	ldr	r3, [pc, #392]	; (8009434 <__ieee754_pow+0x754>)
 80092aa:	0004      	movs	r4, r0
 80092ac:	000d      	movs	r5, r1
 80092ae:	f7f7 f9e3 	bl	8000678 <__aeabi_dadd>
 80092b2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80092b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80092b6:	f7f7 f9df 	bl	8000678 <__aeabi_dadd>
 80092ba:	2000      	movs	r0, #0
 80092bc:	000f      	movs	r7, r1
 80092be:	0006      	movs	r6, r0
 80092c0:	0002      	movs	r2, r0
 80092c2:	000b      	movs	r3, r1
 80092c4:	9800      	ldr	r0, [sp, #0]
 80092c6:	9901      	ldr	r1, [sp, #4]
 80092c8:	f7f8 f930 	bl	800152c <__aeabi_dmul>
 80092cc:	2200      	movs	r2, #0
 80092ce:	9000      	str	r0, [sp, #0]
 80092d0:	9101      	str	r1, [sp, #4]
 80092d2:	4b58      	ldr	r3, [pc, #352]	; (8009434 <__ieee754_pow+0x754>)
 80092d4:	0030      	movs	r0, r6
 80092d6:	0039      	movs	r1, r7
 80092d8:	f7f8 fbea 	bl	8001ab0 <__aeabi_dsub>
 80092dc:	0022      	movs	r2, r4
 80092de:	002b      	movs	r3, r5
 80092e0:	f7f8 fbe6 	bl	8001ab0 <__aeabi_dsub>
 80092e4:	0002      	movs	r2, r0
 80092e6:	000b      	movs	r3, r1
 80092e8:	9810      	ldr	r0, [sp, #64]	; 0x40
 80092ea:	9911      	ldr	r1, [sp, #68]	; 0x44
 80092ec:	f7f8 fbe0 	bl	8001ab0 <__aeabi_dsub>
 80092f0:	9a08      	ldr	r2, [sp, #32]
 80092f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092f4:	f7f8 f91a 	bl	800152c <__aeabi_dmul>
 80092f8:	0032      	movs	r2, r6
 80092fa:	0004      	movs	r4, r0
 80092fc:	000d      	movs	r5, r1
 80092fe:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009300:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009302:	003b      	movs	r3, r7
 8009304:	f7f8 f912 	bl	800152c <__aeabi_dmul>
 8009308:	0002      	movs	r2, r0
 800930a:	000b      	movs	r3, r1
 800930c:	0020      	movs	r0, r4
 800930e:	0029      	movs	r1, r5
 8009310:	f7f7 f9b2 	bl	8000678 <__aeabi_dadd>
 8009314:	0004      	movs	r4, r0
 8009316:	000d      	movs	r5, r1
 8009318:	0002      	movs	r2, r0
 800931a:	000b      	movs	r3, r1
 800931c:	9800      	ldr	r0, [sp, #0]
 800931e:	9901      	ldr	r1, [sp, #4]
 8009320:	f7f7 f9aa 	bl	8000678 <__aeabi_dadd>
 8009324:	22e0      	movs	r2, #224	; 0xe0
 8009326:	2000      	movs	r0, #0
 8009328:	4b43      	ldr	r3, [pc, #268]	; (8009438 <__ieee754_pow+0x758>)
 800932a:	0612      	lsls	r2, r2, #24
 800932c:	0006      	movs	r6, r0
 800932e:	000f      	movs	r7, r1
 8009330:	f7f8 f8fc 	bl	800152c <__aeabi_dmul>
 8009334:	9008      	str	r0, [sp, #32]
 8009336:	9109      	str	r1, [sp, #36]	; 0x24
 8009338:	9a00      	ldr	r2, [sp, #0]
 800933a:	9b01      	ldr	r3, [sp, #4]
 800933c:	0030      	movs	r0, r6
 800933e:	0039      	movs	r1, r7
 8009340:	f7f8 fbb6 	bl	8001ab0 <__aeabi_dsub>
 8009344:	0002      	movs	r2, r0
 8009346:	000b      	movs	r3, r1
 8009348:	0020      	movs	r0, r4
 800934a:	0029      	movs	r1, r5
 800934c:	f7f8 fbb0 	bl	8001ab0 <__aeabi_dsub>
 8009350:	4a3a      	ldr	r2, [pc, #232]	; (800943c <__ieee754_pow+0x75c>)
 8009352:	4b39      	ldr	r3, [pc, #228]	; (8009438 <__ieee754_pow+0x758>)
 8009354:	f7f8 f8ea 	bl	800152c <__aeabi_dmul>
 8009358:	4a39      	ldr	r2, [pc, #228]	; (8009440 <__ieee754_pow+0x760>)
 800935a:	0004      	movs	r4, r0
 800935c:	000d      	movs	r5, r1
 800935e:	0030      	movs	r0, r6
 8009360:	0039      	movs	r1, r7
 8009362:	4b38      	ldr	r3, [pc, #224]	; (8009444 <__ieee754_pow+0x764>)
 8009364:	f7f8 f8e2 	bl	800152c <__aeabi_dmul>
 8009368:	0002      	movs	r2, r0
 800936a:	000b      	movs	r3, r1
 800936c:	0020      	movs	r0, r4
 800936e:	0029      	movs	r1, r5
 8009370:	f7f7 f982 	bl	8000678 <__aeabi_dadd>
 8009374:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009376:	4b34      	ldr	r3, [pc, #208]	; (8009448 <__ieee754_pow+0x768>)
 8009378:	189b      	adds	r3, r3, r2
 800937a:	681a      	ldr	r2, [r3, #0]
 800937c:	685b      	ldr	r3, [r3, #4]
 800937e:	f7f7 f97b 	bl	8000678 <__aeabi_dadd>
 8009382:	9000      	str	r0, [sp, #0]
 8009384:	9101      	str	r1, [sp, #4]
 8009386:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009388:	f7f8 ff68 	bl	800225c <__aeabi_i2d>
 800938c:	0004      	movs	r4, r0
 800938e:	000d      	movs	r5, r1
 8009390:	9808      	ldr	r0, [sp, #32]
 8009392:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009394:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009396:	4b2d      	ldr	r3, [pc, #180]	; (800944c <__ieee754_pow+0x76c>)
 8009398:	189b      	adds	r3, r3, r2
 800939a:	681e      	ldr	r6, [r3, #0]
 800939c:	685f      	ldr	r7, [r3, #4]
 800939e:	9a00      	ldr	r2, [sp, #0]
 80093a0:	9b01      	ldr	r3, [sp, #4]
 80093a2:	f7f7 f969 	bl	8000678 <__aeabi_dadd>
 80093a6:	0032      	movs	r2, r6
 80093a8:	003b      	movs	r3, r7
 80093aa:	f7f7 f965 	bl	8000678 <__aeabi_dadd>
 80093ae:	0022      	movs	r2, r4
 80093b0:	002b      	movs	r3, r5
 80093b2:	f7f7 f961 	bl	8000678 <__aeabi_dadd>
 80093b6:	2000      	movs	r0, #0
 80093b8:	0022      	movs	r2, r4
 80093ba:	002b      	movs	r3, r5
 80093bc:	9004      	str	r0, [sp, #16]
 80093be:	9105      	str	r1, [sp, #20]
 80093c0:	f7f8 fb76 	bl	8001ab0 <__aeabi_dsub>
 80093c4:	0032      	movs	r2, r6
 80093c6:	003b      	movs	r3, r7
 80093c8:	f7f8 fb72 	bl	8001ab0 <__aeabi_dsub>
 80093cc:	9a08      	ldr	r2, [sp, #32]
 80093ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093d0:	f7f8 fb6e 	bl	8001ab0 <__aeabi_dsub>
 80093d4:	0002      	movs	r2, r0
 80093d6:	000b      	movs	r3, r1
 80093d8:	9800      	ldr	r0, [sp, #0]
 80093da:	9901      	ldr	r1, [sp, #4]
 80093dc:	e618      	b.n	8009010 <__ieee754_pow+0x330>
 80093de:	2300      	movs	r3, #0
 80093e0:	4c03      	ldr	r4, [pc, #12]	; (80093f0 <__ieee754_pow+0x710>)
 80093e2:	e621      	b.n	8009028 <__ieee754_pow+0x348>
 80093e4:	7ff00000 	.word	0x7ff00000
 80093e8:	43400000 	.word	0x43400000
 80093ec:	fffffc01 	.word	0xfffffc01
 80093f0:	3ff00000 	.word	0x3ff00000
 80093f4:	0003988e 	.word	0x0003988e
 80093f8:	000bb679 	.word	0x000bb679
 80093fc:	fff00000 	.word	0xfff00000
 8009400:	08009bf8 	.word	0x08009bf8
 8009404:	4a454eef 	.word	0x4a454eef
 8009408:	3fca7e28 	.word	0x3fca7e28
 800940c:	93c9db65 	.word	0x93c9db65
 8009410:	3fcd864a 	.word	0x3fcd864a
 8009414:	a91d4101 	.word	0xa91d4101
 8009418:	3fd17460 	.word	0x3fd17460
 800941c:	518f264d 	.word	0x518f264d
 8009420:	3fd55555 	.word	0x3fd55555
 8009424:	db6fabff 	.word	0xdb6fabff
 8009428:	3fdb6db6 	.word	0x3fdb6db6
 800942c:	33333303 	.word	0x33333303
 8009430:	3fe33333 	.word	0x3fe33333
 8009434:	40080000 	.word	0x40080000
 8009438:	3feec709 	.word	0x3feec709
 800943c:	dc3a03fd 	.word	0xdc3a03fd
 8009440:	145b01f5 	.word	0x145b01f5
 8009444:	be3e2fe0 	.word	0xbe3e2fe0
 8009448:	08009c18 	.word	0x08009c18
 800944c:	08009c08 	.word	0x08009c08
 8009450:	4a90      	ldr	r2, [pc, #576]	; (8009694 <__ieee754_pow+0x9b4>)
 8009452:	4b91      	ldr	r3, [pc, #580]	; (8009698 <__ieee754_pow+0x9b8>)
 8009454:	0030      	movs	r0, r6
 8009456:	0039      	movs	r1, r7
 8009458:	f7f7 f90e 	bl	8000678 <__aeabi_dadd>
 800945c:	9a04      	ldr	r2, [sp, #16]
 800945e:	9b05      	ldr	r3, [sp, #20]
 8009460:	9002      	str	r0, [sp, #8]
 8009462:	9103      	str	r1, [sp, #12]
 8009464:	0028      	movs	r0, r5
 8009466:	0021      	movs	r1, r4
 8009468:	f7f8 fb22 	bl	8001ab0 <__aeabi_dsub>
 800946c:	0002      	movs	r2, r0
 800946e:	000b      	movs	r3, r1
 8009470:	9802      	ldr	r0, [sp, #8]
 8009472:	9903      	ldr	r1, [sp, #12]
 8009474:	f7f6 ffe4 	bl	8000440 <__aeabi_dcmpgt>
 8009478:	2800      	cmp	r0, #0
 800947a:	d000      	beq.n	800947e <__ieee754_pow+0x79e>
 800947c:	e611      	b.n	80090a2 <__ieee754_pow+0x3c2>
 800947e:	2100      	movs	r1, #0
 8009480:	4a86      	ldr	r2, [pc, #536]	; (800969c <__ieee754_pow+0x9bc>)
 8009482:	0063      	lsls	r3, r4, #1
 8009484:	085b      	lsrs	r3, r3, #1
 8009486:	9102      	str	r1, [sp, #8]
 8009488:	4293      	cmp	r3, r2
 800948a:	dd25      	ble.n	80094d8 <__ieee754_pow+0x7f8>
 800948c:	4a84      	ldr	r2, [pc, #528]	; (80096a0 <__ieee754_pow+0x9c0>)
 800948e:	151b      	asrs	r3, r3, #20
 8009490:	189b      	adds	r3, r3, r2
 8009492:	2280      	movs	r2, #128	; 0x80
 8009494:	0352      	lsls	r2, r2, #13
 8009496:	0011      	movs	r1, r2
 8009498:	4119      	asrs	r1, r3
 800949a:	190b      	adds	r3, r1, r4
 800949c:	005c      	lsls	r4, r3, #1
 800949e:	4981      	ldr	r1, [pc, #516]	; (80096a4 <__ieee754_pow+0x9c4>)
 80094a0:	4d81      	ldr	r5, [pc, #516]	; (80096a8 <__ieee754_pow+0x9c8>)
 80094a2:	0d64      	lsrs	r4, r4, #21
 80094a4:	1864      	adds	r4, r4, r1
 80094a6:	4125      	asrs	r5, r4
 80094a8:	401d      	ands	r5, r3
 80094aa:	031b      	lsls	r3, r3, #12
 80094ac:	0b1b      	lsrs	r3, r3, #12
 80094ae:	4313      	orrs	r3, r2
 80094b0:	2214      	movs	r2, #20
 80094b2:	1b12      	subs	r2, r2, r4
 80094b4:	4113      	asrs	r3, r2
 80094b6:	9302      	str	r3, [sp, #8]
 80094b8:	9b08      	ldr	r3, [sp, #32]
 80094ba:	2000      	movs	r0, #0
 80094bc:	0029      	movs	r1, r5
 80094be:	2b00      	cmp	r3, #0
 80094c0:	da02      	bge.n	80094c8 <__ieee754_pow+0x7e8>
 80094c2:	9b02      	ldr	r3, [sp, #8]
 80094c4:	425b      	negs	r3, r3
 80094c6:	9302      	str	r3, [sp, #8]
 80094c8:	0002      	movs	r2, r0
 80094ca:	000b      	movs	r3, r1
 80094cc:	9804      	ldr	r0, [sp, #16]
 80094ce:	9905      	ldr	r1, [sp, #20]
 80094d0:	f7f8 faee 	bl	8001ab0 <__aeabi_dsub>
 80094d4:	9006      	str	r0, [sp, #24]
 80094d6:	9107      	str	r1, [sp, #28]
 80094d8:	9806      	ldr	r0, [sp, #24]
 80094da:	9907      	ldr	r1, [sp, #28]
 80094dc:	0032      	movs	r2, r6
 80094de:	003b      	movs	r3, r7
 80094e0:	f7f7 f8ca 	bl	8000678 <__aeabi_dadd>
 80094e4:	2000      	movs	r0, #0
 80094e6:	2200      	movs	r2, #0
 80094e8:	4b70      	ldr	r3, [pc, #448]	; (80096ac <__ieee754_pow+0x9cc>)
 80094ea:	9004      	str	r0, [sp, #16]
 80094ec:	9105      	str	r1, [sp, #20]
 80094ee:	f7f8 f81d 	bl	800152c <__aeabi_dmul>
 80094f2:	9a06      	ldr	r2, [sp, #24]
 80094f4:	9b07      	ldr	r3, [sp, #28]
 80094f6:	9008      	str	r0, [sp, #32]
 80094f8:	9109      	str	r1, [sp, #36]	; 0x24
 80094fa:	9804      	ldr	r0, [sp, #16]
 80094fc:	9905      	ldr	r1, [sp, #20]
 80094fe:	f7f8 fad7 	bl	8001ab0 <__aeabi_dsub>
 8009502:	0002      	movs	r2, r0
 8009504:	000b      	movs	r3, r1
 8009506:	0030      	movs	r0, r6
 8009508:	0039      	movs	r1, r7
 800950a:	f7f8 fad1 	bl	8001ab0 <__aeabi_dsub>
 800950e:	4a68      	ldr	r2, [pc, #416]	; (80096b0 <__ieee754_pow+0x9d0>)
 8009510:	4b68      	ldr	r3, [pc, #416]	; (80096b4 <__ieee754_pow+0x9d4>)
 8009512:	f7f8 f80b 	bl	800152c <__aeabi_dmul>
 8009516:	4a68      	ldr	r2, [pc, #416]	; (80096b8 <__ieee754_pow+0x9d8>)
 8009518:	0004      	movs	r4, r0
 800951a:	000d      	movs	r5, r1
 800951c:	9804      	ldr	r0, [sp, #16]
 800951e:	9905      	ldr	r1, [sp, #20]
 8009520:	4b66      	ldr	r3, [pc, #408]	; (80096bc <__ieee754_pow+0x9dc>)
 8009522:	f7f8 f803 	bl	800152c <__aeabi_dmul>
 8009526:	0002      	movs	r2, r0
 8009528:	000b      	movs	r3, r1
 800952a:	0020      	movs	r0, r4
 800952c:	0029      	movs	r1, r5
 800952e:	f7f7 f8a3 	bl	8000678 <__aeabi_dadd>
 8009532:	0004      	movs	r4, r0
 8009534:	000d      	movs	r5, r1
 8009536:	0002      	movs	r2, r0
 8009538:	000b      	movs	r3, r1
 800953a:	9808      	ldr	r0, [sp, #32]
 800953c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800953e:	f7f7 f89b 	bl	8000678 <__aeabi_dadd>
 8009542:	9a08      	ldr	r2, [sp, #32]
 8009544:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009546:	0006      	movs	r6, r0
 8009548:	000f      	movs	r7, r1
 800954a:	f7f8 fab1 	bl	8001ab0 <__aeabi_dsub>
 800954e:	0002      	movs	r2, r0
 8009550:	000b      	movs	r3, r1
 8009552:	0020      	movs	r0, r4
 8009554:	0029      	movs	r1, r5
 8009556:	f7f8 faab 	bl	8001ab0 <__aeabi_dsub>
 800955a:	0032      	movs	r2, r6
 800955c:	9004      	str	r0, [sp, #16]
 800955e:	9105      	str	r1, [sp, #20]
 8009560:	003b      	movs	r3, r7
 8009562:	0030      	movs	r0, r6
 8009564:	0039      	movs	r1, r7
 8009566:	f7f7 ffe1 	bl	800152c <__aeabi_dmul>
 800956a:	0004      	movs	r4, r0
 800956c:	000d      	movs	r5, r1
 800956e:	4a54      	ldr	r2, [pc, #336]	; (80096c0 <__ieee754_pow+0x9e0>)
 8009570:	4b54      	ldr	r3, [pc, #336]	; (80096c4 <__ieee754_pow+0x9e4>)
 8009572:	f7f7 ffdb 	bl	800152c <__aeabi_dmul>
 8009576:	4a54      	ldr	r2, [pc, #336]	; (80096c8 <__ieee754_pow+0x9e8>)
 8009578:	4b54      	ldr	r3, [pc, #336]	; (80096cc <__ieee754_pow+0x9ec>)
 800957a:	f7f8 fa99 	bl	8001ab0 <__aeabi_dsub>
 800957e:	0022      	movs	r2, r4
 8009580:	002b      	movs	r3, r5
 8009582:	f7f7 ffd3 	bl	800152c <__aeabi_dmul>
 8009586:	4a52      	ldr	r2, [pc, #328]	; (80096d0 <__ieee754_pow+0x9f0>)
 8009588:	4b52      	ldr	r3, [pc, #328]	; (80096d4 <__ieee754_pow+0x9f4>)
 800958a:	f7f7 f875 	bl	8000678 <__aeabi_dadd>
 800958e:	0022      	movs	r2, r4
 8009590:	002b      	movs	r3, r5
 8009592:	f7f7 ffcb 	bl	800152c <__aeabi_dmul>
 8009596:	4a50      	ldr	r2, [pc, #320]	; (80096d8 <__ieee754_pow+0x9f8>)
 8009598:	4b50      	ldr	r3, [pc, #320]	; (80096dc <__ieee754_pow+0x9fc>)
 800959a:	f7f8 fa89 	bl	8001ab0 <__aeabi_dsub>
 800959e:	0022      	movs	r2, r4
 80095a0:	002b      	movs	r3, r5
 80095a2:	f7f7 ffc3 	bl	800152c <__aeabi_dmul>
 80095a6:	4a4e      	ldr	r2, [pc, #312]	; (80096e0 <__ieee754_pow+0xa00>)
 80095a8:	4b4e      	ldr	r3, [pc, #312]	; (80096e4 <__ieee754_pow+0xa04>)
 80095aa:	f7f7 f865 	bl	8000678 <__aeabi_dadd>
 80095ae:	0022      	movs	r2, r4
 80095b0:	002b      	movs	r3, r5
 80095b2:	f7f7 ffbb 	bl	800152c <__aeabi_dmul>
 80095b6:	0002      	movs	r2, r0
 80095b8:	000b      	movs	r3, r1
 80095ba:	0030      	movs	r0, r6
 80095bc:	0039      	movs	r1, r7
 80095be:	f7f8 fa77 	bl	8001ab0 <__aeabi_dsub>
 80095c2:	0004      	movs	r4, r0
 80095c4:	000d      	movs	r5, r1
 80095c6:	0002      	movs	r2, r0
 80095c8:	000b      	movs	r3, r1
 80095ca:	0030      	movs	r0, r6
 80095cc:	0039      	movs	r1, r7
 80095ce:	f7f7 ffad 	bl	800152c <__aeabi_dmul>
 80095d2:	2380      	movs	r3, #128	; 0x80
 80095d4:	9006      	str	r0, [sp, #24]
 80095d6:	9107      	str	r1, [sp, #28]
 80095d8:	2200      	movs	r2, #0
 80095da:	0020      	movs	r0, r4
 80095dc:	0029      	movs	r1, r5
 80095de:	05db      	lsls	r3, r3, #23
 80095e0:	f7f8 fa66 	bl	8001ab0 <__aeabi_dsub>
 80095e4:	0002      	movs	r2, r0
 80095e6:	000b      	movs	r3, r1
 80095e8:	9806      	ldr	r0, [sp, #24]
 80095ea:	9907      	ldr	r1, [sp, #28]
 80095ec:	f7f7 fba4 	bl	8000d38 <__aeabi_ddiv>
 80095f0:	9a04      	ldr	r2, [sp, #16]
 80095f2:	9b05      	ldr	r3, [sp, #20]
 80095f4:	0004      	movs	r4, r0
 80095f6:	000d      	movs	r5, r1
 80095f8:	0030      	movs	r0, r6
 80095fa:	0039      	movs	r1, r7
 80095fc:	f7f7 ff96 	bl	800152c <__aeabi_dmul>
 8009600:	9a04      	ldr	r2, [sp, #16]
 8009602:	9b05      	ldr	r3, [sp, #20]
 8009604:	f7f7 f838 	bl	8000678 <__aeabi_dadd>
 8009608:	0002      	movs	r2, r0
 800960a:	000b      	movs	r3, r1
 800960c:	0020      	movs	r0, r4
 800960e:	0029      	movs	r1, r5
 8009610:	f7f8 fa4e 	bl	8001ab0 <__aeabi_dsub>
 8009614:	0032      	movs	r2, r6
 8009616:	003b      	movs	r3, r7
 8009618:	f7f8 fa4a 	bl	8001ab0 <__aeabi_dsub>
 800961c:	0002      	movs	r2, r0
 800961e:	000b      	movs	r3, r1
 8009620:	2000      	movs	r0, #0
 8009622:	4931      	ldr	r1, [pc, #196]	; (80096e8 <__ieee754_pow+0xa08>)
 8009624:	f7f8 fa44 	bl	8001ab0 <__aeabi_dsub>
 8009628:	9b02      	ldr	r3, [sp, #8]
 800962a:	051b      	lsls	r3, r3, #20
 800962c:	185b      	adds	r3, r3, r1
 800962e:	151a      	asrs	r2, r3, #20
 8009630:	2a00      	cmp	r2, #0
 8009632:	dc25      	bgt.n	8009680 <__ieee754_pow+0x9a0>
 8009634:	9a02      	ldr	r2, [sp, #8]
 8009636:	f000 f861 	bl	80096fc <scalbn>
 800963a:	9a00      	ldr	r2, [sp, #0]
 800963c:	9b01      	ldr	r3, [sp, #4]
 800963e:	f7ff fc33 	bl	8008ea8 <__ieee754_pow+0x1c8>
 8009642:	4a2a      	ldr	r2, [pc, #168]	; (80096ec <__ieee754_pow+0xa0c>)
 8009644:	004b      	lsls	r3, r1, #1
 8009646:	085b      	lsrs	r3, r3, #1
 8009648:	4293      	cmp	r3, r2
 800964a:	dc00      	bgt.n	800964e <__ieee754_pow+0x96e>
 800964c:	e717      	b.n	800947e <__ieee754_pow+0x79e>
 800964e:	4b28      	ldr	r3, [pc, #160]	; (80096f0 <__ieee754_pow+0xa10>)
 8009650:	18cb      	adds	r3, r1, r3
 8009652:	4303      	orrs	r3, r0
 8009654:	d008      	beq.n	8009668 <__ieee754_pow+0x988>
 8009656:	9800      	ldr	r0, [sp, #0]
 8009658:	9901      	ldr	r1, [sp, #4]
 800965a:	2300      	movs	r3, #0
 800965c:	2200      	movs	r2, #0
 800965e:	f7f6 fedb 	bl	8000418 <__aeabi_dcmplt>
 8009662:	1e43      	subs	r3, r0, #1
 8009664:	4198      	sbcs	r0, r3
 8009666:	e462      	b.n	8008f2e <__ieee754_pow+0x24e>
 8009668:	9a04      	ldr	r2, [sp, #16]
 800966a:	9b05      	ldr	r3, [sp, #20]
 800966c:	f7f8 fa20 	bl	8001ab0 <__aeabi_dsub>
 8009670:	0032      	movs	r2, r6
 8009672:	003b      	movs	r3, r7
 8009674:	f7f6 feee 	bl	8000454 <__aeabi_dcmpge>
 8009678:	2800      	cmp	r0, #0
 800967a:	d100      	bne.n	800967e <__ieee754_pow+0x99e>
 800967c:	e6ff      	b.n	800947e <__ieee754_pow+0x79e>
 800967e:	e7ea      	b.n	8009656 <__ieee754_pow+0x976>
 8009680:	0019      	movs	r1, r3
 8009682:	e7da      	b.n	800963a <__ieee754_pow+0x95a>
 8009684:	2300      	movs	r3, #0
 8009686:	4c18      	ldr	r4, [pc, #96]	; (80096e8 <__ieee754_pow+0xa08>)
 8009688:	f7ff fbf1 	bl	8008e6e <__ieee754_pow+0x18e>
 800968c:	2300      	movs	r3, #0
 800968e:	2400      	movs	r4, #0
 8009690:	f7ff fbed 	bl	8008e6e <__ieee754_pow+0x18e>
 8009694:	652b82fe 	.word	0x652b82fe
 8009698:	3c971547 	.word	0x3c971547
 800969c:	3fe00000 	.word	0x3fe00000
 80096a0:	fffffc02 	.word	0xfffffc02
 80096a4:	fffffc01 	.word	0xfffffc01
 80096a8:	fff00000 	.word	0xfff00000
 80096ac:	3fe62e43 	.word	0x3fe62e43
 80096b0:	fefa39ef 	.word	0xfefa39ef
 80096b4:	3fe62e42 	.word	0x3fe62e42
 80096b8:	0ca86c39 	.word	0x0ca86c39
 80096bc:	be205c61 	.word	0xbe205c61
 80096c0:	72bea4d0 	.word	0x72bea4d0
 80096c4:	3e663769 	.word	0x3e663769
 80096c8:	c5d26bf1 	.word	0xc5d26bf1
 80096cc:	3ebbbd41 	.word	0x3ebbbd41
 80096d0:	af25de2c 	.word	0xaf25de2c
 80096d4:	3f11566a 	.word	0x3f11566a
 80096d8:	16bebd93 	.word	0x16bebd93
 80096dc:	3f66c16c 	.word	0x3f66c16c
 80096e0:	5555553e 	.word	0x5555553e
 80096e4:	3fc55555 	.word	0x3fc55555
 80096e8:	3ff00000 	.word	0x3ff00000
 80096ec:	4090cbff 	.word	0x4090cbff
 80096f0:	3f6f3400 	.word	0x3f6f3400

080096f4 <fabs>:
 80096f4:	0049      	lsls	r1, r1, #1
 80096f6:	084b      	lsrs	r3, r1, #1
 80096f8:	0019      	movs	r1, r3
 80096fa:	4770      	bx	lr

080096fc <scalbn>:
 80096fc:	b570      	push	{r4, r5, r6, lr}
 80096fe:	0014      	movs	r4, r2
 8009700:	004a      	lsls	r2, r1, #1
 8009702:	000b      	movs	r3, r1
 8009704:	0d52      	lsrs	r2, r2, #21
 8009706:	d10f      	bne.n	8009728 <scalbn+0x2c>
 8009708:	004b      	lsls	r3, r1, #1
 800970a:	085b      	lsrs	r3, r3, #1
 800970c:	4303      	orrs	r3, r0
 800970e:	d011      	beq.n	8009734 <scalbn+0x38>
 8009710:	4b22      	ldr	r3, [pc, #136]	; (800979c <scalbn+0xa0>)
 8009712:	2200      	movs	r2, #0
 8009714:	f7f7 ff0a 	bl	800152c <__aeabi_dmul>
 8009718:	4b21      	ldr	r3, [pc, #132]	; (80097a0 <scalbn+0xa4>)
 800971a:	429c      	cmp	r4, r3
 800971c:	da0b      	bge.n	8009736 <scalbn+0x3a>
 800971e:	4a21      	ldr	r2, [pc, #132]	; (80097a4 <scalbn+0xa8>)
 8009720:	4b21      	ldr	r3, [pc, #132]	; (80097a8 <scalbn+0xac>)
 8009722:	f7f7 ff03 	bl	800152c <__aeabi_dmul>
 8009726:	e005      	b.n	8009734 <scalbn+0x38>
 8009728:	4d20      	ldr	r5, [pc, #128]	; (80097ac <scalbn+0xb0>)
 800972a:	42aa      	cmp	r2, r5
 800972c:	d107      	bne.n	800973e <scalbn+0x42>
 800972e:	0002      	movs	r2, r0
 8009730:	f7f6 ffa2 	bl	8000678 <__aeabi_dadd>
 8009734:	bd70      	pop	{r4, r5, r6, pc}
 8009736:	000b      	movs	r3, r1
 8009738:	004a      	lsls	r2, r1, #1
 800973a:	0d52      	lsrs	r2, r2, #21
 800973c:	3a36      	subs	r2, #54	; 0x36
 800973e:	4d1c      	ldr	r5, [pc, #112]	; (80097b0 <scalbn+0xb4>)
 8009740:	42ac      	cmp	r4, r5
 8009742:	dd0a      	ble.n	800975a <scalbn+0x5e>
 8009744:	4c1b      	ldr	r4, [pc, #108]	; (80097b4 <scalbn+0xb8>)
 8009746:	4d1c      	ldr	r5, [pc, #112]	; (80097b8 <scalbn+0xbc>)
 8009748:	2900      	cmp	r1, #0
 800974a:	da01      	bge.n	8009750 <scalbn+0x54>
 800974c:	4c19      	ldr	r4, [pc, #100]	; (80097b4 <scalbn+0xb8>)
 800974e:	4d1b      	ldr	r5, [pc, #108]	; (80097bc <scalbn+0xc0>)
 8009750:	4a18      	ldr	r2, [pc, #96]	; (80097b4 <scalbn+0xb8>)
 8009752:	4b19      	ldr	r3, [pc, #100]	; (80097b8 <scalbn+0xbc>)
 8009754:	0020      	movs	r0, r4
 8009756:	0029      	movs	r1, r5
 8009758:	e7e3      	b.n	8009722 <scalbn+0x26>
 800975a:	18a2      	adds	r2, r4, r2
 800975c:	4c18      	ldr	r4, [pc, #96]	; (80097c0 <scalbn+0xc4>)
 800975e:	42a2      	cmp	r2, r4
 8009760:	dcf0      	bgt.n	8009744 <scalbn+0x48>
 8009762:	2a00      	cmp	r2, #0
 8009764:	dd05      	ble.n	8009772 <scalbn+0x76>
 8009766:	4c17      	ldr	r4, [pc, #92]	; (80097c4 <scalbn+0xc8>)
 8009768:	0512      	lsls	r2, r2, #20
 800976a:	4023      	ands	r3, r4
 800976c:	4313      	orrs	r3, r2
 800976e:	0019      	movs	r1, r3
 8009770:	e7e0      	b.n	8009734 <scalbn+0x38>
 8009772:	0014      	movs	r4, r2
 8009774:	3435      	adds	r4, #53	; 0x35
 8009776:	da08      	bge.n	800978a <scalbn+0x8e>
 8009778:	4c0a      	ldr	r4, [pc, #40]	; (80097a4 <scalbn+0xa8>)
 800977a:	4d0b      	ldr	r5, [pc, #44]	; (80097a8 <scalbn+0xac>)
 800977c:	2900      	cmp	r1, #0
 800977e:	da01      	bge.n	8009784 <scalbn+0x88>
 8009780:	4c08      	ldr	r4, [pc, #32]	; (80097a4 <scalbn+0xa8>)
 8009782:	4d11      	ldr	r5, [pc, #68]	; (80097c8 <scalbn+0xcc>)
 8009784:	4a07      	ldr	r2, [pc, #28]	; (80097a4 <scalbn+0xa8>)
 8009786:	4b08      	ldr	r3, [pc, #32]	; (80097a8 <scalbn+0xac>)
 8009788:	e7e4      	b.n	8009754 <scalbn+0x58>
 800978a:	4c0e      	ldr	r4, [pc, #56]	; (80097c4 <scalbn+0xc8>)
 800978c:	3236      	adds	r2, #54	; 0x36
 800978e:	4023      	ands	r3, r4
 8009790:	0512      	lsls	r2, r2, #20
 8009792:	431a      	orrs	r2, r3
 8009794:	0011      	movs	r1, r2
 8009796:	4b0d      	ldr	r3, [pc, #52]	; (80097cc <scalbn+0xd0>)
 8009798:	2200      	movs	r2, #0
 800979a:	e7c2      	b.n	8009722 <scalbn+0x26>
 800979c:	43500000 	.word	0x43500000
 80097a0:	ffff3cb0 	.word	0xffff3cb0
 80097a4:	c2f8f359 	.word	0xc2f8f359
 80097a8:	01a56e1f 	.word	0x01a56e1f
 80097ac:	000007ff 	.word	0x000007ff
 80097b0:	0000c350 	.word	0x0000c350
 80097b4:	8800759c 	.word	0x8800759c
 80097b8:	7e37e43c 	.word	0x7e37e43c
 80097bc:	fe37e43c 	.word	0xfe37e43c
 80097c0:	000007fe 	.word	0x000007fe
 80097c4:	800fffff 	.word	0x800fffff
 80097c8:	81a56e1f 	.word	0x81a56e1f
 80097cc:	3c900000 	.word	0x3c900000

080097d0 <with_errno>:
 80097d0:	b570      	push	{r4, r5, r6, lr}
 80097d2:	000d      	movs	r5, r1
 80097d4:	0016      	movs	r6, r2
 80097d6:	0004      	movs	r4, r0
 80097d8:	f7ff f9e2 	bl	8008ba0 <__errno>
 80097dc:	0029      	movs	r1, r5
 80097de:	6006      	str	r6, [r0, #0]
 80097e0:	0020      	movs	r0, r4
 80097e2:	bd70      	pop	{r4, r5, r6, pc}

080097e4 <xflow>:
 80097e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80097e6:	0015      	movs	r5, r2
 80097e8:	001c      	movs	r4, r3
 80097ea:	2800      	cmp	r0, #0
 80097ec:	d010      	beq.n	8009810 <xflow+0x2c>
 80097ee:	2380      	movs	r3, #128	; 0x80
 80097f0:	0010      	movs	r0, r2
 80097f2:	061b      	lsls	r3, r3, #24
 80097f4:	18e1      	adds	r1, r4, r3
 80097f6:	9000      	str	r0, [sp, #0]
 80097f8:	9101      	str	r1, [sp, #4]
 80097fa:	9a00      	ldr	r2, [sp, #0]
 80097fc:	9b01      	ldr	r3, [sp, #4]
 80097fe:	0028      	movs	r0, r5
 8009800:	0021      	movs	r1, r4
 8009802:	f7f7 fe93 	bl	800152c <__aeabi_dmul>
 8009806:	2222      	movs	r2, #34	; 0x22
 8009808:	f7ff ffe2 	bl	80097d0 <with_errno>
 800980c:	b003      	add	sp, #12
 800980e:	bd30      	pop	{r4, r5, pc}
 8009810:	0010      	movs	r0, r2
 8009812:	0019      	movs	r1, r3
 8009814:	e7ef      	b.n	80097f6 <xflow+0x12>

08009816 <__math_uflow>:
 8009816:	2380      	movs	r3, #128	; 0x80
 8009818:	b510      	push	{r4, lr}
 800981a:	2200      	movs	r2, #0
 800981c:	055b      	lsls	r3, r3, #21
 800981e:	f7ff ffe1 	bl	80097e4 <xflow>
 8009822:	bd10      	pop	{r4, pc}

08009824 <__math_oflow>:
 8009824:	23e0      	movs	r3, #224	; 0xe0
 8009826:	b510      	push	{r4, lr}
 8009828:	2200      	movs	r2, #0
 800982a:	05db      	lsls	r3, r3, #23
 800982c:	f7ff ffda 	bl	80097e4 <xflow>
 8009830:	bd10      	pop	{r4, pc}
	...

08009834 <__ieee754_sqrt>:
 8009834:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009836:	000a      	movs	r2, r1
 8009838:	000c      	movs	r4, r1
 800983a:	496f      	ldr	r1, [pc, #444]	; (80099f8 <__ieee754_sqrt+0x1c4>)
 800983c:	0005      	movs	r5, r0
 800983e:	0003      	movs	r3, r0
 8009840:	0008      	movs	r0, r1
 8009842:	b087      	sub	sp, #28
 8009844:	4020      	ands	r0, r4
 8009846:	4288      	cmp	r0, r1
 8009848:	d111      	bne.n	800986e <__ieee754_sqrt+0x3a>
 800984a:	002a      	movs	r2, r5
 800984c:	0023      	movs	r3, r4
 800984e:	0028      	movs	r0, r5
 8009850:	0021      	movs	r1, r4
 8009852:	f7f7 fe6b 	bl	800152c <__aeabi_dmul>
 8009856:	0002      	movs	r2, r0
 8009858:	000b      	movs	r3, r1
 800985a:	0028      	movs	r0, r5
 800985c:	0021      	movs	r1, r4
 800985e:	f7f6 ff0b 	bl	8000678 <__aeabi_dadd>
 8009862:	0005      	movs	r5, r0
 8009864:	000c      	movs	r4, r1
 8009866:	0028      	movs	r0, r5
 8009868:	0021      	movs	r1, r4
 800986a:	b007      	add	sp, #28
 800986c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800986e:	2c00      	cmp	r4, #0
 8009870:	dc12      	bgt.n	8009898 <__ieee754_sqrt+0x64>
 8009872:	0061      	lsls	r1, r4, #1
 8009874:	0849      	lsrs	r1, r1, #1
 8009876:	4329      	orrs	r1, r5
 8009878:	d0f5      	beq.n	8009866 <__ieee754_sqrt+0x32>
 800987a:	2100      	movs	r1, #0
 800987c:	428c      	cmp	r4, r1
 800987e:	d100      	bne.n	8009882 <__ieee754_sqrt+0x4e>
 8009880:	e09f      	b.n	80099c2 <__ieee754_sqrt+0x18e>
 8009882:	002a      	movs	r2, r5
 8009884:	0023      	movs	r3, r4
 8009886:	0028      	movs	r0, r5
 8009888:	0021      	movs	r1, r4
 800988a:	f7f8 f911 	bl	8001ab0 <__aeabi_dsub>
 800988e:	0002      	movs	r2, r0
 8009890:	000b      	movs	r3, r1
 8009892:	f7f7 fa51 	bl	8000d38 <__aeabi_ddiv>
 8009896:	e7e4      	b.n	8009862 <__ieee754_sqrt+0x2e>
 8009898:	1521      	asrs	r1, r4, #20
 800989a:	d100      	bne.n	800989e <__ieee754_sqrt+0x6a>
 800989c:	e091      	b.n	80099c2 <__ieee754_sqrt+0x18e>
 800989e:	4857      	ldr	r0, [pc, #348]	; (80099fc <__ieee754_sqrt+0x1c8>)
 80098a0:	0312      	lsls	r2, r2, #12
 80098a2:	180c      	adds	r4, r1, r0
 80098a4:	2080      	movs	r0, #128	; 0x80
 80098a6:	0b12      	lsrs	r2, r2, #12
 80098a8:	0340      	lsls	r0, r0, #13
 80098aa:	4310      	orrs	r0, r2
 80098ac:	07c9      	lsls	r1, r1, #31
 80098ae:	d403      	bmi.n	80098b8 <__ieee754_sqrt+0x84>
 80098b0:	0fda      	lsrs	r2, r3, #31
 80098b2:	0040      	lsls	r0, r0, #1
 80098b4:	1810      	adds	r0, r2, r0
 80098b6:	005b      	lsls	r3, r3, #1
 80098b8:	2500      	movs	r5, #0
 80098ba:	1062      	asrs	r2, r4, #1
 80098bc:	0040      	lsls	r0, r0, #1
 80098be:	2480      	movs	r4, #128	; 0x80
 80098c0:	9205      	str	r2, [sp, #20]
 80098c2:	0fda      	lsrs	r2, r3, #31
 80098c4:	1812      	adds	r2, r2, r0
 80098c6:	0029      	movs	r1, r5
 80098c8:	2016      	movs	r0, #22
 80098ca:	005b      	lsls	r3, r3, #1
 80098cc:	03a4      	lsls	r4, r4, #14
 80098ce:	190e      	adds	r6, r1, r4
 80098d0:	4296      	cmp	r6, r2
 80098d2:	dc02      	bgt.n	80098da <__ieee754_sqrt+0xa6>
 80098d4:	1931      	adds	r1, r6, r4
 80098d6:	1b92      	subs	r2, r2, r6
 80098d8:	192d      	adds	r5, r5, r4
 80098da:	0fde      	lsrs	r6, r3, #31
 80098dc:	0052      	lsls	r2, r2, #1
 80098de:	3801      	subs	r0, #1
 80098e0:	18b2      	adds	r2, r6, r2
 80098e2:	005b      	lsls	r3, r3, #1
 80098e4:	0864      	lsrs	r4, r4, #1
 80098e6:	2800      	cmp	r0, #0
 80098e8:	d1f1      	bne.n	80098ce <__ieee754_sqrt+0x9a>
 80098ea:	2620      	movs	r6, #32
 80098ec:	2780      	movs	r7, #128	; 0x80
 80098ee:	0004      	movs	r4, r0
 80098f0:	9604      	str	r6, [sp, #16]
 80098f2:	063f      	lsls	r7, r7, #24
 80098f4:	183e      	adds	r6, r7, r0
 80098f6:	46b4      	mov	ip, r6
 80098f8:	428a      	cmp	r2, r1
 80098fa:	dc02      	bgt.n	8009902 <__ieee754_sqrt+0xce>
 80098fc:	d114      	bne.n	8009928 <__ieee754_sqrt+0xf4>
 80098fe:	429e      	cmp	r6, r3
 8009900:	d812      	bhi.n	8009928 <__ieee754_sqrt+0xf4>
 8009902:	4660      	mov	r0, ip
 8009904:	4666      	mov	r6, ip
 8009906:	19c0      	adds	r0, r0, r7
 8009908:	9100      	str	r1, [sp, #0]
 800990a:	2e00      	cmp	r6, #0
 800990c:	da03      	bge.n	8009916 <__ieee754_sqrt+0xe2>
 800990e:	43c6      	mvns	r6, r0
 8009910:	0ff6      	lsrs	r6, r6, #31
 8009912:	198e      	adds	r6, r1, r6
 8009914:	9600      	str	r6, [sp, #0]
 8009916:	1a52      	subs	r2, r2, r1
 8009918:	4563      	cmp	r3, ip
 800991a:	4189      	sbcs	r1, r1
 800991c:	4249      	negs	r1, r1
 800991e:	1a52      	subs	r2, r2, r1
 8009920:	4661      	mov	r1, ip
 8009922:	1a5b      	subs	r3, r3, r1
 8009924:	9900      	ldr	r1, [sp, #0]
 8009926:	19e4      	adds	r4, r4, r7
 8009928:	0fde      	lsrs	r6, r3, #31
 800992a:	0052      	lsls	r2, r2, #1
 800992c:	18b2      	adds	r2, r6, r2
 800992e:	9e04      	ldr	r6, [sp, #16]
 8009930:	005b      	lsls	r3, r3, #1
 8009932:	3e01      	subs	r6, #1
 8009934:	087f      	lsrs	r7, r7, #1
 8009936:	9604      	str	r6, [sp, #16]
 8009938:	2e00      	cmp	r6, #0
 800993a:	d1db      	bne.n	80098f4 <__ieee754_sqrt+0xc0>
 800993c:	431a      	orrs	r2, r3
 800993e:	d01f      	beq.n	8009980 <__ieee754_sqrt+0x14c>
 8009940:	4e2f      	ldr	r6, [pc, #188]	; (8009a00 <__ieee754_sqrt+0x1cc>)
 8009942:	4f30      	ldr	r7, [pc, #192]	; (8009a04 <__ieee754_sqrt+0x1d0>)
 8009944:	6830      	ldr	r0, [r6, #0]
 8009946:	6871      	ldr	r1, [r6, #4]
 8009948:	683a      	ldr	r2, [r7, #0]
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	9200      	str	r2, [sp, #0]
 800994e:	9301      	str	r3, [sp, #4]
 8009950:	6832      	ldr	r2, [r6, #0]
 8009952:	6873      	ldr	r3, [r6, #4]
 8009954:	9202      	str	r2, [sp, #8]
 8009956:	9303      	str	r3, [sp, #12]
 8009958:	9a00      	ldr	r2, [sp, #0]
 800995a:	9b01      	ldr	r3, [sp, #4]
 800995c:	f7f8 f8a8 	bl	8001ab0 <__aeabi_dsub>
 8009960:	0002      	movs	r2, r0
 8009962:	000b      	movs	r3, r1
 8009964:	9802      	ldr	r0, [sp, #8]
 8009966:	9903      	ldr	r1, [sp, #12]
 8009968:	f7f6 fd60 	bl	800042c <__aeabi_dcmple>
 800996c:	2800      	cmp	r0, #0
 800996e:	d007      	beq.n	8009980 <__ieee754_sqrt+0x14c>
 8009970:	6830      	ldr	r0, [r6, #0]
 8009972:	6871      	ldr	r1, [r6, #4]
 8009974:	683a      	ldr	r2, [r7, #0]
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	1c67      	adds	r7, r4, #1
 800997a:	d127      	bne.n	80099cc <__ieee754_sqrt+0x198>
 800997c:	9c04      	ldr	r4, [sp, #16]
 800997e:	3501      	adds	r5, #1
 8009980:	4b21      	ldr	r3, [pc, #132]	; (8009a08 <__ieee754_sqrt+0x1d4>)
 8009982:	1069      	asrs	r1, r5, #1
 8009984:	18c9      	adds	r1, r1, r3
 8009986:	0864      	lsrs	r4, r4, #1
 8009988:	07ed      	lsls	r5, r5, #31
 800998a:	d502      	bpl.n	8009992 <__ieee754_sqrt+0x15e>
 800998c:	2380      	movs	r3, #128	; 0x80
 800998e:	061b      	lsls	r3, r3, #24
 8009990:	431c      	orrs	r4, r3
 8009992:	9b05      	ldr	r3, [sp, #20]
 8009994:	0025      	movs	r5, r4
 8009996:	0518      	lsls	r0, r3, #20
 8009998:	1843      	adds	r3, r0, r1
 800999a:	001c      	movs	r4, r3
 800999c:	e763      	b.n	8009866 <__ieee754_sqrt+0x32>
 800999e:	0ada      	lsrs	r2, r3, #11
 80099a0:	3815      	subs	r0, #21
 80099a2:	055b      	lsls	r3, r3, #21
 80099a4:	2a00      	cmp	r2, #0
 80099a6:	d0fa      	beq.n	800999e <__ieee754_sqrt+0x16a>
 80099a8:	2480      	movs	r4, #128	; 0x80
 80099aa:	0364      	lsls	r4, r4, #13
 80099ac:	4222      	tst	r2, r4
 80099ae:	d00a      	beq.n	80099c6 <__ieee754_sqrt+0x192>
 80099b0:	2420      	movs	r4, #32
 80099b2:	001e      	movs	r6, r3
 80099b4:	1a64      	subs	r4, r4, r1
 80099b6:	40e6      	lsrs	r6, r4
 80099b8:	1e4d      	subs	r5, r1, #1
 80099ba:	408b      	lsls	r3, r1
 80099bc:	4332      	orrs	r2, r6
 80099be:	1b41      	subs	r1, r0, r5
 80099c0:	e76d      	b.n	800989e <__ieee754_sqrt+0x6a>
 80099c2:	2000      	movs	r0, #0
 80099c4:	e7ee      	b.n	80099a4 <__ieee754_sqrt+0x170>
 80099c6:	0052      	lsls	r2, r2, #1
 80099c8:	3101      	adds	r1, #1
 80099ca:	e7ef      	b.n	80099ac <__ieee754_sqrt+0x178>
 80099cc:	f7f6 fe54 	bl	8000678 <__aeabi_dadd>
 80099d0:	6877      	ldr	r7, [r6, #4]
 80099d2:	6836      	ldr	r6, [r6, #0]
 80099d4:	0002      	movs	r2, r0
 80099d6:	000b      	movs	r3, r1
 80099d8:	0030      	movs	r0, r6
 80099da:	0039      	movs	r1, r7
 80099dc:	f7f6 fd1c 	bl	8000418 <__aeabi_dcmplt>
 80099e0:	2800      	cmp	r0, #0
 80099e2:	d004      	beq.n	80099ee <__ieee754_sqrt+0x1ba>
 80099e4:	3402      	adds	r4, #2
 80099e6:	4263      	negs	r3, r4
 80099e8:	4163      	adcs	r3, r4
 80099ea:	18ed      	adds	r5, r5, r3
 80099ec:	e7c8      	b.n	8009980 <__ieee754_sqrt+0x14c>
 80099ee:	2301      	movs	r3, #1
 80099f0:	3401      	adds	r4, #1
 80099f2:	439c      	bics	r4, r3
 80099f4:	e7c4      	b.n	8009980 <__ieee754_sqrt+0x14c>
 80099f6:	46c0      	nop			; (mov r8, r8)
 80099f8:	7ff00000 	.word	0x7ff00000
 80099fc:	fffffc01 	.word	0xfffffc01
 8009a00:	20000068 	.word	0x20000068
 8009a04:	20000070 	.word	0x20000070
 8009a08:	3fe00000 	.word	0x3fe00000

08009a0c <_init>:
 8009a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a0e:	46c0      	nop			; (mov r8, r8)
 8009a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a12:	bc08      	pop	{r3}
 8009a14:	469e      	mov	lr, r3
 8009a16:	4770      	bx	lr

08009a18 <_fini>:
 8009a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a1a:	46c0      	nop			; (mov r8, r8)
 8009a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a1e:	bc08      	pop	{r3}
 8009a20:	469e      	mov	lr, r3
 8009a22:	4770      	bx	lr
